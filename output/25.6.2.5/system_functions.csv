"ch_version","name","is_aggregate","case_insensitive","alias_to","create_query","origin","description","syntax","arguments","returned_value","examples","introduced_in","categories"
"25.6.2.5","halfMD5",0,0,"","","System","
[Interprets](../..//sql-reference/functions/type-conversion-functions.md/#type_conversion_functions-reinterpretAsString) all the input
parameters as strings and calculates the MD5 hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the
resulting string, and interprets them as [UInt64](../../../sql-reference/data-types/int-uint.md) in big-endian byte order. The function is
relatively slow (5 million short strings per second per processor core).

Consider using the [sipHash64](../../sql-reference/functions/hash-functions.md/#hash_functions-siphash64) function instead.
                       ","SELECT halfMD5(par1,par2,...,parN);","- `par1,par2,...,parN` — 
The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated
value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed
Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).
                       
","The computed half MD5 hash of the given input params returned as a [UInt64](../../../sql-reference/data-types/int-uint.md) in big-endian byte order.","****

```sql title=Query
SELECT HEX(halfMD5('abc', 'cde', 'fgh'));
```

```response title=Response
┌─hex(halfMD5('abc', 'cde', 'fgh'))─┐
│ 2C9506B7374CFAF4                  │
└───────────────────────────────────┘
```

","","Hash"
"25.6.2.5","wyHash64",0,0,"","","System","","","","","","",""
"25.6.2.5","xxHash64",0,0,"","","System","","","","","","",""
"25.6.2.5","javaHash",0,0,"","","System","","","","","","",""
"25.6.2.5","metroHash64",0,0,"","","System","","","","","","",""
"25.6.2.5","farmFingerprint64",0,0,"","","System","","","","","","",""
"25.6.2.5","sipHash128",0,0,"","","System","","","","","","",""
"25.6.2.5","log2",0,1,"","","System","","","","","","",""
"25.6.2.5","regionToName",0,0,"","","System","","","","","","",""
"25.6.2.5","regionIn",0,0,"","","System","","","","","","",""
"25.6.2.5","cityHash64",0,0,"","","System","","","","","","",""
"25.6.2.5","regionToTopContinent",0,0,"","","System","","","","","","",""
"25.6.2.5","regionToArea",0,0,"","","System","","","","","","",""
"25.6.2.5","regionToCity",0,0,"","","System","","","","","","",""
"25.6.2.5","cutQueryString",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalHour",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalMinute",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalMillisecond",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTime64BestEffortUSOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTime64BestEffortUS",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTime64BestEffortOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTime64BestEffort",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTime32BestEffort",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTimeBestEffortOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTimeBestEffortOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toIPv6OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toUUIDOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal64OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal32OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateTimeOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toBFloat16OrNull",0,0,"","","System","
Converts String to Nullable(BFloat16).

If the string does not represent a floating point value, the function returns NULL.

The function allows a silent loss of precision while converting from the string representation. In that case, it will return the truncated result.

Example of successful conversion:
[example:typical]

Examples of not successful conversion:
[example:invalid1]
[example:invalid2]

Example of a loss of precision:
[example:precision]
","","","","**typical**

```sql title=Query
SELECT toBFloat16OrNull('12.3');
```

```response title=Response
12.3125
```

**invalid1**

```sql title=Query
SELECT toBFloat16OrNull('abc');
```

```response title=Response
NULL
```

**invalid2**

```sql title=Query
SELECT toBFloat16OrNull(' 1');
```

```response title=Response
NULL
```

**precision**

```sql title=Query
SELECT toBFloat16OrNull('12.3456789');
```

```response title=Response
12.375
```

","","Type Conversion"
"25.6.2.5","toInt128OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","UUIDv7ToDateTime",0,0,"","","System","
This function extracts the timestamp from a UUID and returns it as a DateTime64(3) typed value.
The function expects the UUID having version 7 to be provided as the first argument.
An optional second argument can be passed to specify a timezone for the timestamp.
","","","","**uuid**

```sql title=Query
select UUIDv7ToDateTime(generateUUIDv7())
```

```response title=Response

```

**uuid**

```sql title=Query
select generateUUIDv7() as uuid, UUIDv7ToDateTime(uuid), UUIDv7ToDateTime(uuid, 'America/New_York')
```

```response title=Response

```

","","UUID"
"25.6.2.5","toInt64OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTimeBestEffortUSOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt32OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt128OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt64OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","hiveHash",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt8OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal256OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal64OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal32OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateTimeOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toTime64OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toDate32OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toFloat64OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toBFloat16OrZero",0,0,"","","System","
Converts String to BFloat16.

If the string does not represent a floating point value, the function returns zero.

The function allows a silent loss of precision while converting from the string representation. In that case, it will return the truncated result.

Example of successful conversion:
[example:typical]

Examples of not successful conversion:
[example:invalid1]
[example:invalid2]

Example of a loss of precision:
[example:precision]
","","","","**typical**

```sql title=Query
SELECT toBFloat16OrZero('12.3');
```

```response title=Response
12.3125
```

**invalid1**

```sql title=Query
SELECT toBFloat16OrZero('abc');
```

```response title=Response
0
```

**invalid2**

```sql title=Query
SELECT toBFloat16OrZero(' 1');
```

```response title=Response
0
```

**precision**

```sql title=Query
SELECT toBFloat16OrZero('12.3456789');
```

```response title=Response
12.375
```

","","Type Conversion"
"25.6.2.5","toInt128OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt8OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt128OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt32OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toIPv6",0,0,"","","System","","","","","","",""
"25.6.2.5","toIPv4",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateTime",0,0,"","","System","","","","","","",""
"25.6.2.5","toTime",0,0,"","","System","","","","","","",""
"25.6.2.5","toDate32",0,0,"","","System","","","","","","",""
"25.6.2.5","DATE",0,1,"","","System","","","","","","",""
"25.6.2.5","toDate",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal128",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal32",0,0,"","","System","","","","","","",""
"25.6.2.5","toFloat64",0,0,"","","System","","","","","","",""
"25.6.2.5","toFloat32",0,0,"","","System","","","","","","",""
"25.6.2.5","toBFloat16",0,0,"","","System","
Converts Float32 to BFloat16 with losing the precision.

Example:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT toBFloat16(12.3::Float32);
```

```response title=Response
12.3125
```

","","Type Conversion"
"25.6.2.5","toInt128",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt64",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt32",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt16",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt64",0,0,"","","System","","","","","","",""
"25.6.2.5","formatDateTimeInJodaSyntax",0,0,"","","System","","","","","","",""
"25.6.2.5","UUIDStringToNum",0,0,"","","System","","","","","","",""
"25.6.2.5","roundDown",0,0,"","","System","","","","","","",""
"25.6.2.5","trunc",0,1,"","","System","","","","","","",""
"25.6.2.5","ceil",0,1,"","","System","","","","","","",""
"25.6.2.5","floor",0,1,"","","System","","","","","","",""
"25.6.2.5","roundBankers",0,0,"","","System","","","","","","",""
"25.6.2.5","exp",0,1,"","","System","","","","","","",""
"25.6.2.5","replaceRegexpAll",0,0,"","","System","","","","","","",""
"25.6.2.5","toDayOfMonth",0,0,"","","System","
Returns the day of the month (1-31) of a `Date` or `DateTime`.
        ","toDayOfMonth(datetime)","- `datetime` — A `Date` or `DateTime` value to get the day of month from. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","Returns the day of the month of the given date/time. [`UInt8`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toDayOfMonth(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toDayOfMonth(toDateTime('2023-04-21 10:20:30'))─┐
│                                              21 │
└─────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","icebergBucket",0,0,"","","System","Implements logic of iceberg bucket transform: https://iceberg.apache.org/spec/#bucket-transform-details.","icebergBucket(N, value)","- `N` — modulo, positive integer, always constant.
- `value` — Integer, bool, decimal, float, string, fixed_string, uuid, date, time or datetime value.
","Int32","**Example**

```sql title=Query
SELECT icebergBucket(5, 1.0 :: Float32)
```

```response title=Response
4
```

","25.5","Other"
"25.6.2.5","toInt256",0,0,"","","System","","","","","","",""
"25.6.2.5","formatReadableDecimalSize",0,0,"","","System","
Accepts the size (number of bytes). Returns a rounded size with a suffix (KB, MB, etc.) as a string.
","","","","**formatReadableDecimalSize**

```sql title=Query
SELECT formatReadableDecimalSize(1000)
```

```response title=Response

```

","","Other"
"25.6.2.5","parseDateTimeBestEffortUSOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","detectProgrammingLanguage",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONDynamicPathsWithTypes",0,0,"","","System","
Returns the list of dynamic paths that are stored as separate subcolumns and their types in each row in JSON column.
","JSONDynamicPathsWithTypes(json)","- `json` — JSON column
","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPathsWithTypes(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONDynamicPathsWithTypes(json)─┐
│ {""a"":""42""}                           │ {'a':'Int64'}                   │
│ {""b"":""Hello""}                        │ {}                              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))'}  │
└──────────────────────────────────────┴─────────────────────────────────┘
```

","","JSON"
"25.6.2.5","JSONDynamicPaths",0,0,"","","System","
Returns the list of dynamic paths that are stored as separate subcolumns in JSON column.
","JSONDynamicPaths(json)","- `json` — JSON column
","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPaths(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONDynamicPaths(json)─┐
│ {""a"":""42""}                           │ ['a']                  │
│ {""b"":""Hello""}                        │ []                     │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['a']                  │
└──────────────────────────────────────┴────────────────────────┘
```

","","JSON"
"25.6.2.5","JSONAllPathsWithTypes",0,0,"","","System","
Returns the list of all paths and their data types stored in each row in JSON column.
","JSONAllPathsWithTypes(json)","- `json` — JSON column
","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONAllPathsWithTypes(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONAllPathsWithTypes(json)───────────────┐
│ {""a"":""42""}                           │ {'a':'Int64'}                             │
│ {""b"":""Hello""}                        │ {'b':'String'}                            │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))','c':'Date'} │
└──────────────────────────────────────┴───────────────────────────────────────────┘
```

","","JSON"
"25.6.2.5","JSONAllPaths",0,0,"","","System","
Returns the list of all paths stored in each row in JSON column.
","JSONAllPaths(json)","- `json` — JSON column
","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONAllPaths(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONAllPaths(json)─┐
│ {""a"":""42""}                           │ ['a']              │
│ {""b"":""Hello""}                        │ ['b']              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['a','c']          │
└──────────────────────────────────────┴────────────────────┘
```

","","JSON"
"25.6.2.5","blockSerializedSize",0,0,"","","System","","","","","","",""
"25.6.2.5","generateSerialID",0,0,"","","System","
Generates and returns sequential numbers starting from the previous counter value.
This function takes a constant string argument - a series identifier.

The server should be configured with Keeper.
The series are stored in Keeper nodes under the path, which can be configured in `series_keeper_path` in the server configuration.
","generateSerialID('series_identifier')","- `series_identifier` — Series identifier, (a short constant String)
","Sequential numbers starting from the previous counter value","**first call**

```sql title=Query
SELECT generateSerialID('id1')
```

```response title=Response
┌─generateSerialID('id1')──┐
│                        1 │
└──────────────────────────┘
```

**second call**

```sql title=Query
SELECT generateSerialID('id1')
```

```response title=Response
┌─generateSerialID('id1')──┐
│                        2 │
└──────────────────────────┘
```

**column call**

```sql title=Query
SELECT *, generateSerialID('id1') FROM test_table
```

```response title=Response
┌─CounterID─┬─UserID─┬─ver─┬─generateSerialID('id1')──┐
│         1 │      3 │   3 │                        3 │
│         1 │      1 │   1 │                        4 │
│         1 │      2 │   2 │                        5 │
│         1 │      5 │   5 │                        6 │
│         1 │      4 │   4 │                        7 │
└───────────┴────────┴─────┴──────────────────────────┘
```

","","Other"
"25.6.2.5","multiFuzzyMatchAnyIndex",0,0,"","","System","","","","","","",""
"25.6.2.5","sipHash128Keyed",0,0,"","","System","","","","","","",""
"25.6.2.5","formatDateTime",0,0,"","","System","","","","","","",""
"25.6.2.5","addMicroseconds",0,0,"","","System","
Adds a specified number of microseconds to a date with time or a string-encoded date with time.
    ","addMicroseconds(datetime, num)","- `datetime` — Date with time to add specified number of microseconds to. [`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of microseconds to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `date_time` plus `num` microseconds. [`DateTime64`](../data-types/datetime64.md).","**Add microseconds to different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addMicroseconds(date_time, 1000000) AS add_microseconds_with_date_time,
    addMicroseconds(date_time_string, 1000000) AS add_microseconds_with_date_time_string
```

```response title=Response
┌─add_microseconds_with_date_time─┬─add_microseconds_with_date_time_string─┐
│      2024-01-01 00:00:01.000000 │             2024-01-01 00:00:01.000000 │
└─────────────────────────────────┴────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::DateTime, INTERVAL 10 microsecond)
```

```response title=Response
┌─plus(CAST('19⋯osecond(10))─┐
│ 1998-06-16 00:00:00.000010 │
└────────────────────────────┘
```

","22.6","Dates and Times"
"25.6.2.5","bitShiftLeft",0,0,"","","System","
Shifts the binary representation of a value to the left by a specified number of bit positions.

A `FixedString` or a `String` is treated as a single multibyte value.

Bits of a `FixedString` value are lost as they are shifted out.
On the contrary, a `String` value is extended with additional bytes, so no bits are lost.
","bitShiftLeft(a, N)","- `a` — A value to shift. [`(U)Int*`](../data-types/int-uint.md)/[`String`](../data-types/string.md)/[`FixedString`](../data-types/fixedstring.md).
- `N` — The number of positions to shift. [`UInt8/16/32/64`](../data-types/int-uint.md).
","Returns the shifted value with type equal to that of `a`.","**Usage example with binary encoding**

```sql title=Query
SELECT 99 AS a, bin(a), bitShiftLeft(a, 2) AS a_shifted, bin(a_shifted);
```

```response title=Response
┌──a─┬─bin(99)──┬─a_shifted─┬─bin(bitShiftLeft(99, 2))─┐
│ 99 │ 01100011 │       140 │ 10001100                 │
└────┴──────────┴───────────┴──────────────────────────┘
```

**Usage example with hexadecimal encoding**

```sql title=Query
SELECT 'abc' AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);
```

```response title=Response
┌─a───┬─hex('abc')─┬─a_shifted─┬─hex(bitShiftLeft('abc', 4))─┐
│ abc │ 616263     │ &0        │ 06162630                    │
└─────┴────────────┴───────────┴─────────────────────────────┘
```

**Usage example with Fixed String encoding**

```sql title=Query
SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);
```

```response title=Response
┌─a───┬─hex(toFixedString('abc', 3))─┬─a_shifted─┬─hex(bitShiftLeft(toFixedString('abc', 3), 4))─┐
│ abc │ 616263                       │ &0        │ 162630                                        │
└─────┴──────────────────────────────┴───────────┴───────────────────────────────────────────────┘
```

","1.1","Bit"
"25.6.2.5","base64URLEncode",0,0,"","","System","Encodes an URL (String or FixedString) as base64 with URL-specific modifications, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-5).","base64URLEncode(url)","- `url` — String column or constant.
","A string containing the encoded value of the argument.","**Example**

```sql title=Query
SELECT base64URLEncode('https://clickhouse.com')
```

```response title=Response
aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ
```

","24.6","Encoding"
"25.6.2.5","ngramSearchCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramSearchCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramDistance",0,0,"","","System","","","","","","",""
"25.6.2.5","__bitBoolMaskOr",0,0,"","","System","","","","","","",""
"25.6.2.5","extractAllGroupsVertical",0,0,"","","System","","","","","","",""
"25.6.2.5","getTypeSerializationStreams",0,0,"","","System","","","","","","",""
"25.6.2.5","gcd",0,0,"","","System","
    Returns the greatest common divisor of two values a and b.

    An exception is thrown when dividing by zero or when dividing a minimal
    negative number by minus one.
    ","gcd(x, y)","- `x` — First integer
- `y` — Second integer
","The greatest common divisor of `x` and `y`.","**Usage example**

```sql title=Query
SELECT gcd(12, 18)
```

```response title=Response
6
```

","1.1","Arithmetic"
"25.6.2.5","bitmapContains",0,0,"","","System","Checks if the bitmap contains a specific element.","bitmapContains(bitmap, value)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `value` — Element to check for. [(U)Int8/16/32/64](/sql-reference/data-types/int-uint/)
","Returns `1` if the bitmap contains the specified value, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint/)","**Usage example**

```sql title=Query
SELECT bitmapContains(bitmapBuild([1, 2, 3]), 2) AS res;
```

```response title=Response
┌─res─┐
│  1  │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","bitmapXor",0,0,"","","System","Computes the symmetric difference (XOR) of two bitmaps.","bitmapXor(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns a bitmap containing set bits present in either input bitmap, but not in both. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapXor(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5]))) AS res;
```

```response title=Response
┌─res──────────┐
│ [1, 2, 4, 5] │
└──────────────┘
```

","20.1","Bitmap"
"25.6.2.5","bitmapOr",0,0,"","","System","Computes the logical disjunction (OR) of two bitmaps.","bitmapOr(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns a bitmap containing set bits present in either input bitmap. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapOr(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5]))) AS res;
```

```response title=Response
┌─res─────────────┐
│ [1, 2, 3, 4, 5] │
└─────────────────┘
```

","20.1","Bitmap"
"25.6.2.5","bitmapAnd",0,0,"","","System","Computes the logical conjunction (AND) of two bitmaps.","bitmapAnd(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns a bitmap containing bits present in both input bitmaps. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapAnd(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5]))) AS res;
```

```response title=Response
┌─res─┐
│ [3] │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","bitmapAndnotCardinality",0,0,"","","System","Returns the cardinality of the AND-NOT operation of two bitmaps.","bitmapAndnotCardinality(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns the number of set bits in the result of `bitmap1 AND-NOT bitmap2`. [`UInt64`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT bitmapAndnotCardinality(bitmapBuild([1,2,3]), bitmapBuild([3,4,5])) AS res;
```

```response title=Response
┌─res─┐
│   2 │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","bitmapOrCardinality",0,0,"","","System","Returns the cardinality of the logical disjunction (OR) of two bitmaps.","bitmapOrCardinality(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns the number of set bits in the union of the two bitmaps. [`UInt64`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT bitmapOrCardinality(bitmapBuild([1,2,3]), bitmapBuild([3,4,5])) AS res;
```

```response title=Response
┌─res─┐
│   5 │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","bitmapAndCardinality",0,0,"","","System","Returns the cardinality of the logical conjunction (AND) of two bitmaps.","bitmapAndCardinality(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns the number of set bits in the intersection of the two bitmaps. [`UInt64`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT bitmapAndCardinality(bitmapBuild([1,2,3]), bitmapBuild([3,4,5])) AS res;
```

```response title=Response
┌─res─┐
│   1 │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","bitmapCardinality",0,0,"","","System","Returns the number of bits set (the cardinality) in the bitmap.","bitmapCardinality(bitmap)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns the number of bits set in the bitmap. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapCardinality(bitmapBuild([1, 3, 3, 5, 7, 7])) AS res
```

```response title=Response
┌─res─┐
│   4 │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","bitmapBuild",0,0,"","","System","Builds a bitmap from an unsigned integer array. It is the opposite of function [`bitmapToArray`](/sql-reference/functions/bitmap-functions#bitmapToArray).","bitmapBuild(array)","- `array` — Unsigned integer array. [`Array(UInt*)`](/sql-reference/data-types/array).
","Returns a bitmap from the provided array. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapBuild([1, 2, 3, 4, 5]) AS res, toTypeName(res);
```

```response title=Response
┌─res─┬─toTypeName(bitmapBuild([1, 2, 3, 4, 5]))─────┐
│     │ AggregateFunction(groupBitmap, UInt8)        │
└─────┴──────────────────────────────────────────────┘
```

","20.1","Bitmap"
"25.6.2.5","blockSize",0,0,"","","System","","","","","","",""
"25.6.2.5","isNotNull",0,0,"","","System","","","","","","",""
"25.6.2.5","seriesPeriodDetectFFT",0,0,"","","System","
Finds the period of the given time series data using FFT
FFT - Fast Fourier transform (https://en.wikipedia.org/wiki/Fast_Fourier_transform)

**Syntax**

```sql
seriesPeriodDetectFFT(series);
```

**Arguments**

- `series` - An array of numeric values

**Returned value**

- A real value equal to the period of time series
- Returns NAN when number of data points are less than four.

Type: [Float64](../../sql-reference/data-types/float.md).

**Examples**

Query:

```sql
SELECT seriesPeriodDetectFFT([1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6]) AS print_0;
```

Result:

```text
┌───────────print_0──────┐
│                      3 │
└────────────────────────┘
```

```sql
SELECT seriesPeriodDetectFFT(arrayMap(x -> abs((x % 6) - 3), range(1000))) AS print_0;
```

Result:

```text
┌─print_0─┐
│       6 │
└─────────┘
```
","","","","","","Time Series"
"25.6.2.5","alphaTokens",0,0,"","","System","","","","","","",""
"25.6.2.5","toIPv6OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","sparseGramsHashesUTF8",0,0,"","","System","Finds hashes of all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.","","- `s` — An input string
- `min_ngram_length` — The minimum length of extracted ngram. The default and minimal value is 3
- `max_ngram_length` — The maximum length of extracted ngram. The default value is 100. Should be not less than 'min_ngram_length'
","An array of selected substrings hashes","","","String"
"25.6.2.5","sparseGramsHashes",0,0,"","","System","Finds hashes of all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.","","- `s` — An input string
- `min_ngram_length` — The minimum length of extracted ngram. The default and minimal value is 3
- `max_ngram_length` — The maximum length of extracted ngram. The default value is 100. Should be not less than 'min_ngram_length'
","An array of selected substrings hashes","","","String"
"25.6.2.5","sparseGramsUTF8",0,0,"","","System","Finds all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.","","- `s` — An input string
- `min_ngram_length` — The minimum length of extracted ngram. The default and minimal value is 3
- `max_ngram_length` — The maximum length of extracted ngram. The default value is 100. Should be not less than 'min_ngram_length'
","An array of selected substrings","","","String"
"25.6.2.5","h3GetIndexesFromUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchAllPositionsCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","javaHashUTF16LE",0,0,"","","System","","","","","","",""
"25.6.2.5","mergeTreePartInfo",0,1,"","","System","Represents String value as a MergeTreePartInfo structure","","","","","25.6","Introspection"
"25.6.2.5","polygonsDistanceCartesian",0,0,"","","System","","","","","","",""
"25.6.2.5","unbin",0,1,"","","System","","","","","","",""
"25.6.2.5","unhex",0,1,"","","System","","","","","","",""
"25.6.2.5","hex",0,1,"","","System","","","","","","",""
"25.6.2.5","detectTonality",0,0,"","","System","","","","","","",""
"25.6.2.5","extractGroups",0,0,"","","System","","","","","","",""
"25.6.2.5","transactionLatestSnapshot",0,0,"","","System","","","","","","",""
"25.6.2.5","transactionID",0,0,"","","System","","","","","","",""
"25.6.2.5","bitCount",0,0,"","","System","Calculates the number of bits set to one in the binary representation of a number.","bitCount(x)","- `x` — An integer or float value. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","Returns the number of bits set to one in `x`. [`UInt8`](../data-types/int-uint.md).

:::note
The function does not convert the input value to a larger type ([sign extension](https://en.wikipedia.org/wiki/Sign_extension)).
For example: `bitCount(toUInt8(-1)) = 8`.
:::","**Usage example**

```sql title=Query
SELECT bin(333), bitCount(333);
```

```response title=Response
┌─bin(333)─────────┬─bitCount(333)─┐
│ 0000000101001101 │             5 │
└──────────────────┴───────────────┘
```

","20.3","Bit"
"25.6.2.5","SHA512_256",0,0,"","","System","Calculates the SHA512_256 hash of the given string.","SELECT SHA512_256(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA512_256 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).","****

```sql title=Query
SELECT HEX(SHA512_256('abc'));
```

```response title=Response
┌─hex(SHA512_256('abc'))───────────────────────────────────────────┐
│ 53048E2681941EF99B2E29B76B4C7DABE4C2D0C634FC6D46E0E2F13107E7AF23 │
└──────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.6.2.5","SHA384",0,0,"","","System","Calculates the SHA384 hash of the given string.","SELECT SHA384(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA384 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).","****

```sql title=Query
SELECT HEX(SHA384('abc'));
```

```response title=Response
┌─hex(SHA384('abc'))───────────────────────────────────────────────────────────────────────────────┐
│ CB00753F45A35E8BB5A03D699AC65007272C32AB0EDED1631A8B605A43FF5BED8086072BA1E7CC2358BAECA134C825A7 │
└──────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.6.2.5","MD5",0,0,"","","System","Calculates the MD5 hash of the given string.","SELECT MD5(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The MD5 hash of the given input string returned as a [FixedString(16)](../../sql-reference/data-types/fixedstring.md).","****

```sql title=Query
SELECT HEX(MD5('abc'));
```

```response title=Response
┌─hex(MD5('abc'))──────────────────┐
│ 900150983CD24FB0D6963F7D28E17F72 │
└──────────────────────────────────┘
```

","","Hash"
"25.6.2.5","polygonsEqualsCartesian",0,0,"","","System","","","","","","",""
"25.6.2.5","geoToH3",0,0,"","","System","","","","","","",""
"25.6.2.5","intExp10",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt16OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","timeSlots",0,0,"","","System","","","","","","",""
"25.6.2.5","char",0,1,"","","System","","","","","","",""
"25.6.2.5","addDays",0,0,"","","System","
Adds a specified number of days to a date, a date with time or a string-encoded date or date with time.
    ","addDays(datetime, num)","- `datetime` — Date or date with time to add specified number of days to. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of days to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` days. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Add days to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addDays(date, 5) AS add_days_with_date,
    addDays(date_time, 5) AS add_days_with_date_time,
    addDays(date_time_string, 5) AS add_days_with_date_time_string
```

```response title=Response
┌─add_days_with_date─┬─add_days_with_date_time─┬─add_days_with_date_time_string─┐
│         2024-01-06 │     2024-01-06 00:00:00 │        2024-01-06 00:00:00.000 │
└────────────────────┴─────────────────────────┴────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 day)
```

```response title=Response
┌─plus(CAST('1⋯valDay(10))─┐
│               1998-06-26 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","toUTCTimestamp",0,0,"","","System","","","","","","",""
"25.6.2.5","cbrt",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONExtractKeys",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONExtractKeysAndValuesRaw",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt16OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONExtractRaw",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONExtractString",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONType",0,0,"","","System","","","","","","",""
"25.6.2.5","bitmapMin",0,0,"","","System","Returns the position of the smallest bit set in a bitmap. If all bits are unset, or `UINT32_MAX` (`UINT64_MAX` if the bitmap contains more than `2^64` bits).","bitmapMin(bitmap)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns the position of the smallest bit set in the bitmap, or `UINT32_MAX`/`UINT64_MAX`. [`UInt64`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT bitmapMin(bitmapBuild([3, 5, 2, 6])) AS res;
```

```response title=Response
┌─res─┐
│   2 │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","JSONKey",0,0,"","","System","","","","","","",""
"25.6.2.5","extract",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONLength",0,0,"","","System","","","","","","",""
"25.6.2.5","isValidJSON",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONHas",0,0,"","","System","","","","","","",""
"25.6.2.5","SHA256",0,0,"","","System","Calculates the SHA256 hash of the given string.","SELECT SHA256(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA256 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).","****

```sql title=Query
SELECT HEX(SHA256('abc'));
```

```response title=Response
┌─hex(SHA256('abc'))───────────────────────────────────────────────┐
│ BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD │
└──────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.6.2.5","h3Distance",0,0,"","","System","","","","","","",""
"25.6.2.5","extractAllGroupsHorizontal",0,0,"","","System","","","","","","",""
"25.6.2.5","lcm",0,0,"","","System","
Returns the least common multiple of two values `x` and `y`.

An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.
    ","lcm(x, y)","- `x` — First integer
- `y` — Second integer
","The least common multiple of `x` and `y`.","**Usage example**

```sql title=Query
SELECT lcm(6, 8)
```

```response title=Response
24
```

","1.1","Arithmetic"
"25.6.2.5","FQDN",0,1,"","","System","","","","","","",""
"25.6.2.5","reverse",0,1,"","","System","Reverses the order of the elements in the input array or the characters in the input string.","reverse(arr | str)","- `arr | str` — The source array or string. [`Array(T)`](/sql-reference/data-types/array), [`String`](/sql-reference/data-types/string).
","Returns an array or string with the order of elements or characters reversed.","**Reverse array**

```sql title=Query
SELECT reverse([1, 2, 3, 4]);
```

```response title=Response
[4, 3, 2, 1]
```

**Reverse string**

```sql title=Query
SELECT reverse('abcd');
```

```response title=Response
'dcba'
```

","","Arrays"
"25.6.2.5","simpleJSONHas",0,0,"","","System","Checks whether there is a field named field_name.  The result is UInt8.","simpleJSONHas(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns 1 if the field exists, 0 otherwise.","**simple**

```sql title=Query
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""true"",""qux"":1}');

SELECT simpleJSONHas(json, 'foo') FROM jsons;
SELECT simpleJSONHas(json, 'bar') FROM jsons;
```

```response title=Response
1
0
```

","","JSON"
"25.6.2.5","arrayPartialReverseSort",0,0,"","","System","
This function is the same as `arrayReverseSort` but with an additional `limit` argument allowing partial sorting.

:::tip
To retain only the sorted elements use `arrayResize`.
:::
    ","arrayPartialReverseSort([f,] arr [, arr1, ... ,arrN], limit)","- `f(arr[, arr1, ... ,arrN])` — The lambda function to apply to elements of array `x`.
- `arr` — Array to be sorted. [`Array(T)`](/sql-reference/data-types/array).
- `arr1, ... ,arrN` — N additional arrays, in the case when `f` accepts multiple arguments. [`Array(T)`](/sql-reference/data-types/array).
- `limit` — Index value up until which sorting will occur. [`(U)Int*`](/sql-reference/data-types/int-uint)`]
","Returns an array of the same size as the original array where elements in the range `[1..limit]` are sorted
in descending order. The remaining elements `(limit..N]` are in an unspecified order.","**simple_int**

```sql title=Query
SELECT arrayPartialReverseSort(2, [5, 9, 1, 3])
```

```response title=Response
[9,5,1,3]
```

**simple_string**

```sql title=Query
SELECT arrayPartialReverseSort(2, ['expenses','lasso','embolism','gladly'])
```

```response title=Response
['lasso','gladly','expenses','embolism']
```

**retain_sorted**

```sql title=Query
SELECT arrayResize(arrayPartialReverseSort(2, [5, 9, 1, 3]), 2)
```

```response title=Response
[9,5]
```

**lambda_simple**

```sql title=Query
SELECT arrayPartialReverseSort((x) -> -x, 2, [5, 9, 1, 3])
```

```response title=Response
[1,3,5,9]
```

**lambda_complex**

```sql title=Query
SELECT arrayPartialReverseSort((x, y) -> -y, 1, [0, 1, 2], [1, 2, 3]) as res
```

```response title=Response
[0,1,2]
```

","23.2","Arrays"
"25.6.2.5","toHour",0,0,"","","System","
Returns the hour component (0-23) of a `Date` or `DateTime` value.
        ","toHour(datetime)","- `datetime` — A `Date` or `DateTime` value to get the hour from. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","The hour of the given `Date` or `DateTime` value. [`UInt8`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toHour(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toHour(toDateTime('2023-04-21 10:20:30'))─┐
    │                                        10 │
    └───────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","arrayPartialSort",0,0,"","","System","
This function is the same as `arraySort` but with an additional `limit` argument allowing partial sorting.

:::tip
To retain only the sorted elements use `arrayResize`.
:::
    ","arrayPartialSort([f,] arr [, arr1, ... ,arrN], limit)","- `f(arr[, arr1, ... ,arrN])` — The lambda function to apply to elements of array `x`.
- `arr` — Array to be sorted. [`Array(T)`](/sql-reference/data-types/array).
- `arr1, ... ,arrN` — N additional arrays, in the case when `f` accepts multiple arguments. [`Array(T)`](/sql-reference/data-types/array).
- `limit` — Index value up until which sorting will occur. [`(U)Int*`](/sql-reference/data-types/int-uint)`]
","Returns an array of the same size as the original array where elements in the range `[1..limit]` are sorted
in ascending order. The remaining elements `(limit..N]` are in an unspecified order.","**simple_int**

```sql title=Query
SELECT arrayPartialSort(2, [5, 9, 1, 3])
```

```response title=Response
[1,3,5,9]
```

**simple_string**

```sql title=Query
SELECT arrayPartialSort(2, ['expenses','lasso','embolism','gladly'])
```

```response title=Response
['embolism','expenses','gladly','lasso']
```

**retain_sorted**

```sql title=Query
SELECT arrayResize(arrayPartialSort(2, [5, 9, 1, 3]), 2)
```

```response title=Response
[1,3]
```

**lambda_simple**

```sql title=Query
SELECT arrayPartialSort((x) -> -x, 2, [5, 9, 1, 3])
```

```response title=Response
[9,5,1,3]
```

**lambda_complex**

```sql title=Query
SELECT arrayPartialSort((x, y) -> -y, 1, [0, 1, 2], [1, 2, 3]) as res
```

```response title=Response
[2,1,0]
```

","23.2","Arrays"
"25.6.2.5","bitRotateRight",0,0,"","","System","Rotate bits right by a certain number of positions. Bits that fall off wrap around to the left.","bitRotateRight(a, N)","- `a` — A value to rotate. [`(U)Int8/16/32/64`](../data-types/int-uint.md).
- `N` — The number of positions to rotate right. [`UInt8/16/32/64`](../data-types/int-uint.md).
","Returns the rotated value with type equal to that of `a`.","**Usage example**

```sql title=Query
SELECT 99 AS a, bin(a), bitRotateRight(a, 2) AS a_rotated, bin(a_rotated);
```

```response title=Response
┌──a─┬─bin(a)───┬─a_rotated─┬─bin(a_rotated)─┐
│ 99 │ 01100011 │       216 │ 11011000       │
└────┴──────────┴───────────┴────────────────┘
```

","1.1","Bit"
"25.6.2.5","arrayReverseSort",0,0,"","","System","
Sorts the elements of an array in descending order.
If a function `f` is specified, the provided array is sorted according to the result
of the function applied to the elements of the array, and then the sorted array is reversed.
If `f` accepts multiple arguments, the `arrayReverseSort` function is passed several arrays that
the arguments of `func` will correspond to.

If the array to sort contains `-Inf`, `NULL`, `NaN`, or `Inf` they will be sorted in the following order:

1. `-Inf`
2. `Inf`
3. `NaN`
4. `NULL`

`arrayReverseSort` is a [higher-order function](/sql-reference/functions/overview#higher-order-functions).
    ","arrayReverseSort([f,] arr [, arr1, ... ,arrN)","- `f(y1[, y2 ... yN])` — The lambda function to apply to elements of array `x`.
- `arr` — An array to be sorted. [`Array(T)`](/sql-reference/data-types/array)
- `arr1, ..., yN` — Optional. N additional arrays, in the case when `f` accepts multiple arguments.
","Returns the array `x` sorted in descending order if no lambda function is provided, otherwise
it returns an array sorted according to the logic of the provided lambda function, and then reversed. [`Array(T)`](/sql-reference/data-types/array).","**Example 1**

```sql title=Query
SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;
```

```response title=Response
[5,3,4]
```

**Example 2**

```sql title=Query
SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;
```

```response title=Response
[4,3,5]
```

","1.1","Arrays"
"25.6.2.5","arraySort",0,0,"","","System","
Sorts the elements of the provided array in ascending order.
If a lambda function `f` is specified, sorting order is determined by the result of
the lambda applied to each element of the array.
If the lambda accepts multiple arguments, the `arraySort` function is passed several
arrays that the arguments of `f` will correspond to.

If the array to sort contains `-Inf`, `NULL`, `NaN`, or `Inf` they will be sorted in the following order:

1. `-Inf`
2. `Inf`
3. `NaN`
4. `NULL`

`arraySort` is a [higher-order function](/sql-reference/functions/overview#higher-order-functions).
","arraySort([f,] arr [, arr1, ... ,arrN])","- `f(y1[, y2 ... yN])` — The lambda function to apply to elements of array `x`.
- `arr` — An array to be sorted. [`Array(T)`](/sql-reference/data-types/array)
- `arr1, ..., yN` — Optional. N additional arrays, in the case when `f` accepts multiple arguments.
","Returns the array `arr` sorted in ascending order if no lambda function is provided, otherwise
it returns an array sorted according to the logic of the provided lambda function. [`Array(T)`](/sql-reference/data-types/array).","**Example 1**

```sql title=Query
SELECT arraySort([1, 3, 3, 0]);
```

```response title=Response
[0,1,3,3]
```

**Example 2**

```sql title=Query
SELECT arraySort(['hello', 'world', '!']);
```

```response title=Response
['!','hello','world']
```

**Example 3**

```sql title=Query
SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);
```

```response title=Response
[-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]
```

","1.1","Arrays"
"25.6.2.5","isConstant",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalQuarter",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchAny",0,0,"","","System","","","","","","",""
"25.6.2.5","regexpQuoteMeta",0,0,"","","System","","","","","","",""
"25.6.2.5","bitXor",0,0,"","","System","Performs bitwise exclusive or (XOR) operation between two values.","bitXor(a, b)","- `a` — First value. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
- `b` — Second value. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","Returns the result of bitwise operation `a XOR b`","**Usage example**

```sql title=Query
CREATE TABLE bits
(
    `a` UInt8,
    `b` UInt8
)
ENGINE = Memory;

INSERT INTO bits VALUES (0, 0), (0, 1), (1, 0), (1, 1);

SELECT
    a,
    b,
    bitXor(a, b)
FROM bits;
```

```response title=Response
┌─a─┬─b─┬─bitXor(a, b)─┐
│ 0 │ 0 │            0 │
│ 0 │ 1 │            1 │
│ 1 │ 0 │            1 │
│ 1 │ 1 │            0 │
└───┴───┴──────────────┘
```

","1.1","Bit"
"25.6.2.5","round",0,1,"","","System","","","","","","",""
"25.6.2.5","hasTokenCaseInsensitiveOrNull",0,1,"","","System","Performs case insensitive lookup of needle in haystack using tokenbf_v1 index. Returns null if needle is ill-formed.","","","","","","String Search"
"25.6.2.5","hasTokenCaseInsensitive",0,1,"","","System","Performs case insensitive lookup of needle in haystack using tokenbf_v1 index.","","","","","","String Search"
"25.6.2.5","JSONExtractUInt",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayReduce",0,0,"","","System","
Applies an aggregate function to array elements and returns its result.
The name of the aggregation function is passed as a string in single quotes `'max'`, `'sum'`.
When using parametric aggregate functions, the parameter is indicated after the function name in parentheses `'uniqUpTo(6)'`.
","arrayReduce(agg_f, arr1 [, arr2, ... , arrN)]","- `agg_f` — The name of an aggregate function which should be a constant [String](/sql-reference/data-types/string).
- `arr1 [, arr2, ... , arrN)]` — N arrays corresponding to the arguments of `agg_f`. [`Array(T)`](/sql-reference/data-types/array).
","Returns the result of the aggregate function","**Usage example**

```sql title=Query
SELECT arrayReduce('max', [1, 2, 3]);
```

```response title=Response
┌─arrayReduce('max', [1, 2, 3])─┐
│                             3 │
└───────────────────────────────┘
```

**Example with aggregate function using multiple arguments**

```sql title=Query
--If an aggregate function takes multiple arguments, then this function must be applied to multiple arrays of the same size.

SELECT arrayReduce('maxIf', [3, 5], [1, 0]);
```

```response title=Response
┌─arrayReduce('maxIf', [3, 5], [1, 0])─┐
│                                    3 │
└──────────────────────────────────────┘
```

**Example with a parametric aggregate function**

```sql title=Query
SELECT arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
```

```response title=Response
┌─arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])─┐
│                                                           4 │
└─────────────────────────────────────────────────────────────┘
```

","1.1","Arrays"
"25.6.2.5","pointInEllipses",0,0,"","","System","","","","","","",""
"25.6.2.5","right",0,1,"","","System","","","","","","",""
"25.6.2.5","arrayResize",0,0,"","","System","Changes the length of the array.","arrayResize(arr, size[, extender])","- `arr` — Array to resize. [Array(T)](/sql-reference/data-types/array)
- `size` — 
-The new length of the array.
If `size` is less than the original size of the array, the array is truncated from the right.
If `size` is larger than the initial size of the array, the array is extended to the right with `extender` values or default values for the data type of the array items.

- `extender` — Value to use for extending the array. Can be `NULL`.
","An array of length `size`. [Array(T)](/sql-reference/data-types/array).","**Example 1**

```sql title=Query
SELECT arrayResize([1], 3);
```

```response title=Response
[1,0,0]
```

**Example 2**

```sql title=Query
SELECT arrayResize([1], 3, NULL);
```

```response title=Response
[1,NULL,NULL]
```

","1.1","Arrays"
"25.6.2.5","IPv6StringToNumOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","bitmapAndnot",0,0,"","","System","Computes the logical conjunction of two bitmaps and negates the result (AND-NOT).","bitmapAndnot(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns a bitmap containing set bits present in the first bitmap but not in the second. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapAndnot(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5]))) AS res;
```

```response title=Response
┌─res────┐
│ [1, 2] │
└────────┘
```

","20.1","Bitmap"
"25.6.2.5","bitmapXorCardinality",0,0,"","","System","Returns the cardinality of the XOR (symmetric difference) of two bitmaps.","bitmapXorCardinality(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns the number of set bits in the symmetric difference of the two bitmaps. [`UInt64`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT bitmapXorCardinality(bitmapBuild([1,2,3]), bitmapBuild([3,4,5])) AS res;
```

```response title=Response
┌─res─┐
│   4 │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","IPv6StringToNumOrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","IPv6NumToString",0,0,"","","System","","","","","","",""
"25.6.2.5","UUIDNumToString",0,0,"","","System","","","","","","",""
"25.6.2.5","IPv4StringToNumOrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","IPv4NumToStringClassC",0,0,"","","System","","","","","","",""
"25.6.2.5","IPv4NumToString",0,0,"","","System","","","","","","",""
"25.6.2.5","isIPv6String",0,0,"","","System","","","","","","",""
"25.6.2.5","IPv4CIDRToRange",0,0,"","","System","","","","","","",""
"25.6.2.5","IPv6CIDRToRange",0,0,"","","System","","","","","","",""
"25.6.2.5","MACStringToOUI",0,0,"","","System","","","","","","",""
"25.6.2.5","MACStringToNum",0,0,"","","System","","","","","","",""
"25.6.2.5","MACNumToString",0,0,"","","System","","","","","","",""
"25.6.2.5","punycodeDecode",0,0,"","","System","
Computes a Punycode representation of a string. Throws an exception if the input is not valid Punycode.","punycodeDecode(str)","- `str` — A Punycode-encoded string
","The plaintext representation [String](/sql-reference/data-types/string.md).","**simple**

```sql title=Query
SELECT punycodeDecode('Mnchen-3ya') AS plain;
```

```response title=Response
┌─plain───┐
│ München │
└─────────┘
```

","","Encoding"
"25.6.2.5","coalesce",0,1,"","","System","","","","","","",""
"25.6.2.5","intHash64",0,0,"","","System","","","","","","",""
"25.6.2.5","intHash32",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayStringConcat",0,0,"","","System","Concatenates the elements of an array of strings into a single string, using the specified delimiter between elements.","arrayStringConcat(arr[, delimiter])","- `arr` — The source array of strings. [`Array(String)`](/sql-reference/data-types/array).
- `delimiter` — Optional. The delimiter to insert between elements. [`String`](/sql-reference/data-types/string). Defaults to empty string if not specified.
","A string consisting of the array elements joined by the delimiter. String.","**Basic usage**

```sql title=Query
SELECT arrayStringConcat(['a', 'b', 'c']);
```

```response title=Response
'abc'
```

**With delimiter**

```sql title=Query
SELECT arrayStringConcat(['a', 'b', 'c'], ',');
```

```response title=Response
a, b, c
```

","1.1","Arrays"
"25.6.2.5","splitByNonAlpha",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTimeBestEffort",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal128OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","locate",0,1,"","","System","Like function `position` but with arguments `haystack` and `locate` switched. The behavior of this function depends on the ClickHouse version: In versions < v24.3, `locate` was an alias of function `position` and accepted arguments `(haystack, needle[, start_pos])`. In versions >= 24.3,, `locate` is an individual function (for better compatibility with MySQL) and accepts arguments `(needle, haystack[, start_pos])`. The previous behavior can be restored using setting `function_locate_has_mysql_compatible_argument_order = false`.","location(needle, haystack[, start_pos])","- `needle` — Substring to be searched (String)
- `haystack` — String in which the search is performed (String).
- `start_pos` — Position (1-based) in `haystack` at which the search starts (UInt*).
","Starting position in bytes and counting from 1, if the substring was found. 0, if the substring was not found.","**Example**

```sql title=Query
SELECT locate('abcabc', 'ca');
```

```response title=Response
3
```

","18.16","String Search"
"25.6.2.5","addressToLineWithInlines",0,0,"","","System","","","","","","",""
"25.6.2.5","seriesDecomposeSTL",0,0,"","","System","
Decomposes a time series using STL [(Seasonal-Trend Decomposition Procedure Based on Loess)](https://www.wessa.net/download/stl.pdf) into a season, a trend and a residual component.

**Syntax**

```sql
seriesDecomposeSTL(series, period);
```

**Arguments**

- `series` - An array of numeric values
- `period` - A positive number

The number of data points in `series` should be at least twice the value of `period`.

**Returned value**

- An array of four arrays where the first array include seasonal components, the second array - trend, the third array - residue component, and the fourth array - baseline(seasonal + trend) component.

Type: [Array](../../sql-reference/data-types/array.md).

**Examples**

Query:

```sql
SELECT seriesDecomposeSTL([10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34], 3) AS print_0;
```

Result:

```text
┌───────────print_0──────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ [[
        -13.529999, -3.1799996, 16.71,      -13.53,     -3.1799996, 16.71,      -13.53,     -3.1799996,
        16.71,      -13.530001, -3.18,      16.710001,  -13.530001, -3.1800003, 16.710001,  -13.530001,
        -3.1800003, 16.710001,  -13.530001, -3.1799994, 16.71,      -13.529999, -3.1799994, 16.709997
    ],
    [
        23.63,     23.63,     23.630003, 23.630001, 23.630001, 23.630001, 23.630001, 23.630001,
        23.630001, 23.630001, 23.630001, 23.63,     23.630001, 23.630001, 23.63,     23.630001,
        23.630001, 23.63,     23.630001, 23.630001, 23.630001, 23.630001, 23.630001, 23.630003
    ],
    [
        0, 0.0000019073486, -0.0000019073486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0000019073486, 0,
        0
    ],
    [
        10.1, 20.449999, 40.340004, 10.100001, 20.45, 40.34, 10.100001, 20.45, 40.34, 10.1, 20.45, 40.34,
        10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.100002, 20.45, 40.34
    ]]                                                                                                                   │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```","","","","","","Time Series"
"25.6.2.5","monthName",0,1,"","","System","","","","","","",""
"25.6.2.5","version",0,1,"","","System","","","","","","",""
"25.6.2.5","splitByRegexp",0,0,"","","System","","","","","","",""
"25.6.2.5","bitTestAny",0,0,"","","System","
Returns result of the [logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction) (OR operator) of all bits at the given positions in a number.
Counts right-to-left, starting at 0.

The logical OR between two bits is true if at least one of the input bits is true.
    ","bitTestAny(a, index1[, index2, ... , indexN])","- `a` — An integer value. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint).
- `index1[, index2, ... , indexN]` — One or multiple positions of bits. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint).
","Returns the result of the logical disjunction. [`UInt8`](../data-types/int-uint.md).","**Usage example 1**

```sql title=Query
SELECT bitTestAny(43, 0, 2);
```

```response title=Response
┌─bin(43)──┬─bitTestAny(43, 0, 2)─┐
│ 00101011 │                    1 │
└──────────┴──────────────────────┘
```

**Usage example 2**

```sql title=Query
SELECT bitTestAny(43, 4, 2);
```

```response title=Response
┌─bin(43)──┬─bitTestAny(43, 4, 2)─┐
│ 00101011 │                    0 │
└──────────┴──────────────────────┘
```

","1.1","Bit"
"25.6.2.5","erf",0,0,"","","System","","","","","","",""
"25.6.2.5","bitOr",0,0,"","","System","Performs bitwise OR operation between two values.","bitOr(a, b)","- `a` — First value. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
- `b` — Second value. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","Returns the result of bitwise operation `a OR b`","**Usage example**

```sql title=Query
CREATE TABLE bits
(
    `a` UInt8,
    `b` UInt8
)
ENGINE = Memory;

INSERT INTO bits VALUES (0, 0), (0, 1), (1, 0), (1, 1);

SELECT
    a,
    b,
    bitOr(a, b)
FROM bits;
```

```response title=Response
┌─a─┬─b─┬─bitOr(a, b)─┐
│ 0 │ 0 │           0 │
│ 0 │ 1 │           1 │
│ 1 │ 0 │           1 │
│ 1 │ 1 │           1 │
└───┴───┴─────────────┘
```

","1.1","Bit"
"25.6.2.5","showCertificate",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalSecond",0,0,"","","System","","","","","","",""
"25.6.2.5","kostikConsistentHash",0,0,"","","System","","","","","","",""
"25.6.2.5","proportionsZTest",0,0,"","","System","","","","","","",""
"25.6.2.5","if",0,1,"","","System","
Performs conditional branching.

- If the condition `cond` evaluates to a non-zero value, the function returns the result of the expression `then`.
- If `cond` evaluates to zero or NULL, the result of the `else` expression is returned.

The setting [`short_circuit_function_evaluation`](/operations/settings/settings#short_circuit_function_evaluation) controls whether short-circuit evaluation is used.

If enabled, the `then` expression is evaluated only on rows where `cond` is true and the `else` expression where `cond` is false.

For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the following query:

```sql
SELECT if(number = 0, 0, intDiv(42, number)) FROM numbers(10)
```

`then` and `else` must be of a similar type.
","if(cond, then, else)","- `cond` — The evaluated condition. [`UInt8`](/sql-reference/data-types/int-uint), `Nullable(UInt8)` or `NULL`.
- `then` — The expression returned if `cond` is true.
- `else` — The expression returned if `cond` is false or `NULL`.
","The result of either the `then` or `else` expressions, depending on condition `cond`.","**Example usage**

```sql title=Query
SELECT if(1, 2 + 2, 2 + 6) AS res;
```

```response title=Response
┌─res─┐
│   4 │
└─────┘
```

","1.1","Conditional"
"25.6.2.5","jaroWinklerSimilarity",0,0,"","","System","Calculates the Jaro-Winkler similarity between two byte-string.","","","","","","String"
"25.6.2.5","stringJaccardIndexUTF8",0,0,"","","System","Calculates the Jaccard similarity index between two UTF8 strings.","","","","","","String"
"25.6.2.5","stringJaccardIndex",0,0,"","","System","Calculates the Jaccard similarity index between two byte strings.","","","","","","String"
"25.6.2.5","damerauLevenshteinDistance",0,0,"","","System","Calculates the Damerau-Levenshtein distance two between two byte-string.","","","","","","String"
"25.6.2.5","UUIDToNum",0,0,"","","System","
This function accepts a UUID and returns a FixedString(16) as its binary representation, with its format optionally specified by variant (Big-endian by default).
","","","","**uuid**

```sql title=Query
select toUUID(UUIDNumToString(toFixedString('a/<@];!~p{jTj={)', 16))) as uuid, UUIDToNum(uuid) as uuidNum, UUIDToNum(uuid, 2) as uuidMsNum
```

```response title=Response
┌─uuid─────────────────────────────────┬─uuidNum──────────┬─uuidMsNum────────┐
│ 612f3c40-5d3b-217e-707b-6a546a3d7b29 │ a/<@];!~p{jTj={) │ @</a];!~p{jTj={) │
└──────────────────────────────────────┴──────────────────┴──────────────────┘
```

","","UUID"
"25.6.2.5","editDistanceUTF8",0,0,"","","System","Calculates the edit distance between two UTF8 strings.","","","","","","String"
"25.6.2.5","editDistance",0,0,"","","System","Calculates the edit distance between two byte-strings.","","","","","","String"
"25.6.2.5","toIPv4OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","byteHammingDistance",0,0,"","","System","Calculates Hamming distance between two byte-strings.","","","","","","String"
"25.6.2.5","toFloat32OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","bitAnd",0,0,"","","System","Performs bitwise AND operation between two values.","bitAnd(a, b)","- `a` — First value. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
- `b` — Second value. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","Returns the result of bitwise operation `a AND b`","**Usage example**

```sql title=Query
CREATE TABLE bits
(
    `a` UInt8,
    `b` UInt8
)
ENGINE = Memory;

INSERT INTO bits VALUES (0, 0), (0, 1), (1, 0), (1, 1);

SELECT
    a,
    b,
    bitAnd(a, b)
FROM bits
```

```response title=Response
┌─a─┬─b─┬─bitAnd(a, b)─┐
│ 0 │ 0 │            0 │
│ 0 │ 1 │            0 │
│ 1 │ 0 │            0 │
│ 1 │ 1 │            1 │
└───┴───┴──────────────┘
```

","1.1","Bit"
"25.6.2.5","decodeXMLComponent",0,0,"","","System","","","","","","",""
"25.6.2.5","subtractMicroseconds",0,0,"","","System","
Subtracts a specified number of microseconds from a date with time or a string-encoded date with time.
    ","subtractMicroseconds(datetime, num)","- `datetime` — Date with time to subtract specified number of microseconds from. [`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of microseconds to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` microseconds. [`DateTime64`](../data-types/datetime64.md).","**Subtract microseconds from different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractMicroseconds(date_time, 1000000) AS subtract_microseconds_with_date_time,
    subtractMicroseconds(date_time_string, 1000000) AS subtract_microseconds_with_date_time_string
```

```response title=Response
┌─subtract_microseconds_with_date_time─┬─subtract_microseconds_with_date_time_string─┐
│           2023-12-31 23:59:59.000000 │                  2023-12-31 23:59:59.000000 │
└──────────────────────────────────────┴─────────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::DateTime, INTERVAL 10 microsecond)
```

```response title=Response
┌─minus(CAST('1⋯osecond(10))─┐
│ 1998-06-15 23:59:59.999990 │
└────────────────────────────┘
```

","22.6","Dates and Times"
"25.6.2.5","arraySlice",0,0,"","","System","Returns a slice of the array, with `NULL` elements included.","arraySlice(arr, offset [, length])","- `arr` — Array to slice. [`Array(T)`](/sql-reference/data-types/array).
- `offset` — Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with `1`. [`(U)Int*`](/sql-reference/data-types/int-uint).
- `length` — The length of the required slice. If you specify a negative value, the function returns an open slice `[offset, array_length - length]`. If you omit the value, the function returns the slice `[offset, the_end_of_array]`. [`(U)Int*`](/sql-reference/data-types/int-uint).
","Returns a slice of the array with `length` elements from the specified `offset`. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arraySlice([1, 2, NULL, 4, 5], 2, 3) AS res;
```

```response title=Response
[2,NULL,4]
```

","1.1","Arrays"
"25.6.2.5","currentQueryID",0,0,"","","System","
Returns current Query id.
","currentQueryID()","","","**Example**

```sql title=Query
SELECT currentQueryID();
```

```response title=Response
┌─currentQueryID()─────────────────────┐
│ 1280d0e8-1a08-4524-be6e-77975bb68e7d │
└──────────────────────────────────────┘
```

","","Other"
"25.6.2.5","hilbertDecode",0,0,"","","System","
Decodes a Hilbert curve index back into a tuple of unsigned integers, representing coordinates in multi-dimensional space.

The function has two modes of operation:
- Simple
- Expanded

Simple Mode: Accepts the desired tuple size as the first argument (up to 2) and the Hilbert index as the second argument. This mode decodes the index into a tuple of the specified size.
[example:simple]
Will decode into: `(8, 0)`
The resulting tuple size cannot be more than 2

Expanded Mode: Takes a range mask (tuple) as the first argument and the Hilbert index as the second argument.
Each number in the mask specifies the number of bits by which the corresponding decoded argument will be right-shifted, effectively scaling down the output values.
[example:range_shrank]
Note: see hilbertEncode() docs on why range change might be beneficial.
Still limited to 2 numbers at most.

Hilbert code for one argument is always the argument itself (as a tuple).
[example:identity]
Produces: `(1)`

A single argument with a tuple specifying bit shifts will be right-shifted accordingly.
[example:identity_shrank]
Produces: `(128)`

The function accepts a column of codes as a second argument:
[example:from_table]

The range tuple must be a constant:
[example:from_table_range]
","","","","**simple**

```sql title=Query
SELECT hilbertDecode(2, 64)
```

```response title=Response

```

**range_shrank**

```sql title=Query
SELECT hilbertDecode((1,2), 1572864)
```

```response title=Response

```

**identity**

```sql title=Query
SELECT hilbertDecode(1, 1)
```

```response title=Response

```

**identity_shrank**

```sql title=Query
SELECT hilbertDecode(tuple(2), 512)
```

```response title=Response

```

**from_table**

```sql title=Query
SELECT hilbertDecode(2, code) FROM table
```

```response title=Response

```

**from_table_range**

```sql title=Query
SELECT hilbertDecode((1,2), code) FROM table
```

```response title=Response

```

","","Encoding"
"25.6.2.5","arrayJaccardIndex",0,0,"","","System","Returns the [Jaccard index](https://en.wikipedia.org/wiki/Jaccard_index) of two arrays.","arrayJaccardIndex(arr_x, arr_y)","- `arr_x` — First array. [`Array(T)`](/sql-reference/data-types/array).
- `arr_y` — Second array. [`Array(T)`](/sql-reference/data-types/array).
","Returns the Jaccard index of `arr_x` and `arr_y`.[Float64](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT arrayJaccardIndex([1, 2], [2, 3]) AS res
```

```response title=Response
0.3333333333333333
```

","23.7","Arrays"
"25.6.2.5","base64Encode",0,0,"","","System","Encodes a String as base64, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-4). Alias: TO_BASE64.","base64Encode(plaintext)","- `plaintext` — String column or constant.
","A string containing the encoded value of the argument.","**Example**

```sql title=Query
SELECT base64Encode('clickhouse')
```

```response title=Response
Y2xpY2tob3VzZQ==
```

","18.16","String"
"25.6.2.5","__actionName",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayReduceInRanges",0,0,"","","System","
Applies an aggregate function to array elements in the given ranges and returns an array containing the result corresponding to each range.
The function will return the same result as multiple `arrayReduce(agg_func, arraySlice(arr1, index, length), ...)`.
","arrayReduceInRanges(agg_f, ranges, arr1 [, arr2, ... ,arrN)]","- `agg_f` — The name of the aggregate function to use. [String](/sql-reference/data-types/string)
- `ranges` — The range over which to aggregate. An array of tuples, `(i, r)` containing the index `i` from which to begin from and the range `r` over which to aggregate [`Array(T)`](/sql-reference/data-types/array)([`Tuple(T1, T2, ...)`](/sql-reference/data-types/tuple))
- `arr1 [, arr2, ... ,arrN)]` — N arrays as arguments to the aggregate function. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array containing results of the aggregate function over the specified ranges. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayReduceInRanges(
    'sum',
    [(1, 5), (2, 3), (3, 4), (4, 4)],
    [1000000, 200000, 30000, 4000, 500, 60, 7]
) AS res
```

```response title=Response
┌─res─────────────────────────┐
│ [1234500,234000,34560,4567] │
└─────────────────────────────┘
```

","20.4","Arrays"
"25.6.2.5","polygonsDistanceSpherical",0,0,"","","System","","","","","","",""
"25.6.2.5","bitHammingDistance",0,0,"","","System","
Returns the [Hamming Distance](https://en.wikipedia.org/wiki/Hamming_distance) between the bit representations of two numbers.
Can be used with [`SimHash`](../../sql-reference/functions/hash-functions.md#ngramsimhash) functions for detection of semi-duplicate strings.
The smaller the distance, the more similar the strings are.
","bitHammingDistance(x, y)","- `x` — First number for Hamming distance calculation. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
- `y` — Second number for Hamming distance calculation. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","Returns the hamming distance between `x` and `y`. [`UInt8`](../data-types/int-uint.md).","**Usage example**

```sql title=Query
SELECT bitHammingDistance(111, 121);
```

```response title=Response
┌─bitHammingDistance(111, 121)─┐
│                            3 │
└──────────────────────────────┘
```

","21.1","Bit"
"25.6.2.5","bitRotateLeft",0,0,"","","System","Rotate bits left by a certain number of positions. Bits that fall off wrap around to the right.","bitRotateLeft(a, N)","- `a` — A value to rotate. [`(U)Int8/16/32/64`](../data-types/int-uint.md).
- `N` — The number of positions to rotate left. [`UInt8/16/32/64`](../data-types/int-uint.md).
","Returns the rotated value with type equal to that of `a`.","**Usage example**

```sql title=Query
SELECT 99 AS a, bin(a), bitRotateLeft(a, 2) AS a_rotated, bin(a_rotated);
```

```response title=Response
┌──a─┬─bin(a)───┬─a_rotated─┬─bin(a_rotated)─┐
│ 99 │ 01100011 │       141 │ 10001101       │
└────┴──────────┴───────────┴────────────────┘
```

","1.1","Bit"
"25.6.2.5","isNaN",0,0,"","","System","Returns `1` if the Float32 and Float64 argument is `NaN`, otherwise returns `0`.","isNaN(x)","- `x` — Argument to evaluate for if it is `NaN`
","`1` if `NaN`, otherwise `0`","**Usage example**

```sql title=Query
SELECT isNaN(NaN)
```

```response title=Response
1
```

","1.1","Arithmetic"
"25.6.2.5","intDivOrZero",0,0,"","","System","
Same as `intDiv` but returns zero when dividing by zero or when dividing a
minimal negative number by minus one.
    ","intDivOrZero(a, b)","- `a` — Left hand operand.
- `b` — Right hand operand.
","Result of integer division of a and b, or zero.","**Integer division by zero**

```sql title=Query
SELECT intDivOrZero(1, 0)
```

```response title=Response
0
```

**Dividing a minimal negative number by minus 1**

```sql title=Query
SELECT intDivOrZero(0.05, -1)
```

```response title=Response
0
```

","1.1","Arithmetic"
"25.6.2.5","__bitSwapLastTwo",0,0,"","","System","","","","","","",""
"25.6.2.5","lowCardinalityKeys",0,0,"","","System","","","","","","",""
"25.6.2.5","timeSlot",0,0,"","","System","","","","","","",""
"25.6.2.5","changeMinute",0,0,"","","System","Changes the minute component of a date or date time.","changeMinute(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.","","","Dates and Times"
"25.6.2.5","changeDay",0,0,"","","System","Changes the day component of a date or date time.","changeDay(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime.","","","Dates and Times"
"25.6.2.5","changeYear",0,0,"","","System","Changes the year component of a date or date time.","changeYear(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime.","","","Dates and Times"
"25.6.2.5","queryString",0,0,"","","System","","","","","","",""
"25.6.2.5","getSubcolumn",0,0,"","","System","
Receives the expression or identifier and constant string with the name of subcolumn.

Returns requested subcolumn extracted from the expression.
","","","","**getSubcolumn**

```sql title=Query
SELECT getSubcolumn(array_col, 'size0'), getSubcolumn(tuple_col, 'elem_name')
```

```response title=Response

```

","","Other"
"25.6.2.5","hasAll",0,0,"","","System","
Checks whether one array is a subset of another.

- An empty array is a subset of any array.
- `Null` is processed as a value.
- The order of values in both the arrays does not matter.
","hasAll(set, subset)","- `set` — Array of any type with a set of elements. [`Array`](/sql-reference/data-types/array).
- `subset` — Array of any type that shares a common supertype with `set` containing elements that should be tested to be a subset of `set`. [`Array`](/sql-reference/data-types/array).
","- `1`, if `set` contains all of the elements from `subset`.
- `0`, otherwise.

Raises a `NO_COMMON_TYPE` exception if the set and subset elements do not share a common supertype.","**Empty arrays**

```sql title=Query
SELECT hasAll([], [])
```

```response title=Response
1
```

**Arrays containing NULL values**

```sql title=Query
SELECT hasAll([1, Null], [Null])
```

```response title=Response
1
```

**Arrays containing values of a different type**

```sql title=Query
SELECT hasAll([1.0, 2, 3, 4], [1, 3])
```

```response title=Response
1
```

**Arrays containing String values**

```sql title=Query
SELECT hasAll(['a', 'b'], ['a'])
```

```response title=Response
1
```

**Arrays without a common type**

```sql title=Query
SELECT hasAll([1], ['a'])
```

```response title=Response
Raises a NO_COMMON_TYPE exception
```

**Array of arrays**

```sql title=Query
SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [3, 5]])
```

```response title=Response
0
```

","1.1","Arrays"
"25.6.2.5","toIPv6OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toIPv4OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toUUIDOrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal128OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal64OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateTime64OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateTimeOrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","runningConcurrency",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateOrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toFloat64OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toFloat32OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt256OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt128OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toISOYear",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt64OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt32OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt8OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt256OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt128OrDefault",0,0,"","","System","
Converts a string in the first argument of the function to UInt128 by parsing it.
If it cannot parse the value, returns the default value, which can be provided as the second function argument, and if provided, must be of UInt128 type.
If the default value is not provided in the second argument, it is assumed to be zero.
","","","","**Successful conversion**

```sql title=Query
SELECT toUInt128OrDefault('1', 2::UInt128)
```

```response title=Response
1
```

**Default value**

```sql title=Query
SELECT toUInt128OrDefault('upyachka', 123456789012345678901234567890::UInt128)
```

```response title=Response
123456789012345678901234567890
```

**Implicit default value**

```sql title=Query
SELECT toUInt128OrDefault('upyachka')
```

```response title=Response
0
```

","","Type Conversion"
"25.6.2.5","hasSubstr",0,0,"","","System","
Checks whether all the elements of array2 appear in a array1 in the same exact order.
Therefore, the function will return `1`, if and only if array1 = prefix + array2 + suffix.

In other words, the functions will check whether all the elements of array2 are contained in array1 like the `hasAll` function.
In addition, it will check that the elements are observed in the same order in both array1 and array2.

- The function will return `1` if array2 is empty.
- `Null` is processed as a value. In other words `hasSubstr([1, 2, NULL, 3, 4], [2,3])` will return `0`. However, `hasSubstr([1, 2, NULL, 3, 4], [2,NULL,3])` will return `1`
- The order of values in both the arrays does matter.

Raises a `NO_COMMON_TYPE` exception if any of the elements of the two arrays do not share a common supertype.
","hasSubstr(arr1, arr2)","- `arr1` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array).
- `arr2` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array).
","Returns `1` if array `arr1` contains array `arr2`. Otherwise, returns `0`.","**Both arrays are empty**

```sql title=Query
SELECT hasSubstr([], [])
```

```response title=Response
1
```

**Arrays containing NULL values**

```sql title=Query
SELECT hasSubstr([1, Null], [Null])
```

```response title=Response
1
```

**Arrays containing values of a different type**

```sql title=Query
SELECT hasSubstr([1.0, 2, 3, 4], [1, 3])
```

```response title=Response
0
```

**Arrays containing strings**

```sql title=Query
SELECT hasSubstr(['a', 'b'], ['a'])
```

```response title=Response
1
```

**Arrays with valid ordering**

```sql title=Query
SELECT hasSubstr(['a', 'b' , 'c'], ['a', 'b'])
```

```response title=Response
1
```

**Arrays with invalid ordering**

```sql title=Query
SELECT hasSubstr(['a', 'b' , 'c'], ['a', 'c'])
```

```response title=Response
0
```

**Array of arrays**

```sql title=Query
SELECT hasSubstr([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4]])
```

```response title=Response
1
```

**Arrays without a common type**

```sql title=Query
SELECT hasSubstr([1, 2, NULL, 3, 4], ['a'])
```

```response title=Response
Raises a `NO_COMMON_TYPE` exception
```

","20.6","Arrays"
"25.6.2.5","__bitBoolMaskAnd",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt64OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt16OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","accurateCastOrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","tryBase32Decode",0,0,"","","System","
Decode a [Base32](https://datatracker.ietf.org/doc/html/rfc4648) encoded string. If the input string is not a valid Base32 return an empty string.","","- `arg` — A Base32 (rfc4648) encoded string
","","**simple_decoding1**

```sql title=Query
SELECT tryBase32Decode('ME======')
```

```response title=Response
a
```

**simple_decoding2**

```sql title=Query
SELECT tryBase32Decode('JBSWY3DP')
```

```response title=Response
Hello
```

**non_ascii**

```sql title=Query
SELECT hex(tryBase32Decode('4W2HIXV4'))
```

```response title=Response
E5B4745EBC
```

**invalid_base32**

```sql title=Query
SELECT tryBase32Decode('invalid_base32')
```

```response title=Response

```

**empty_string**

```sql title=Query
SELECT tryBase32Decode('')
```

```response title=Response

```

**non_base32_characters**

```sql title=Query
SELECT tryBase32Decode('12345')
```

```response title=Response

```

","25.5","String"
"25.6.2.5","addressToSymbol",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal128OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt16OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","extractURLParameters",0,0,"","","System","","","","","","",""
"25.6.2.5","leftUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","substringIndex",0,0,"","","System","","","","","","",""
"25.6.2.5","less",0,0,"","","System","Compares two values for less-than relation.","less(a, b)
    -- a < b","- `a` — First value.<sup>[*](#comparison-rules)</sup>
- `b` — Second value.<sup>[*](#comparison-rules)</sup>
","Returns `1` if `a` is less than `b`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint/)","**Usage example**

```sql title=Query
SELECT 1 < 2, 2 < 1;
```

```response title=Response
┌─less(1, 2)─┬─less(2, 1)─┐
│          1 │          0 │
└────────────┴────────────┘
```

","1.1","Comparison"
"25.6.2.5","lowCardinalityIndices",0,0,"","","System","","","","","","",""
"25.6.2.5","bitmapHasAny",0,0,"","","System","Checks if the first bitmap contains any set bits of the second bitmap.","bitmapHasAny(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns `1` if any bits of the second bitmap are present in the first bitmap, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint/)","**Usage example**

```sql title=Query
SELECT bitmapHasAny(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5])) AS res;
```

```response title=Response
┌─res─┐
│  1  │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","generateSnowflakeID",0,0,"","","System","Generates a Snowflake ID. The generated Snowflake ID contains the current Unix timestamp in milliseconds (41 + 1 top zero bits), followed by a machine id (10 bits), and a counter (12 bits) to distinguish IDs within a millisecond. For any given timestamp (unix_ts_ms), the counter starts at 0 and is incremented by 1 for each new Snowflake ID until the timestamp changes. In case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to 0. Function generateSnowflakeID guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.","generateSnowflakeID([expression, [machine_id]])","- `expression` — The expression is used to bypass common subexpression elimination if the function is called multiple times in a query but otherwise ignored. Optional.
- `machine_id` — A machine ID, the lowest 10 bits are used. Optional.
","A value of type UInt64","**no_arguments**

```sql title=Query
SELECT generateSnowflakeID()
```

```response title=Response
7201148511606784000
```

**with_machine_id**

```sql title=Query
SELECT generateSnowflakeID(1)
```

```response title=Response
7201148511606784001
```

**with_expression_and_machine_id**

```sql title=Query
SELECT generateSnowflakeID('some_expression', 1)
```

```response title=Response
7201148511606784002
```

","24.6","UUID"
"25.6.2.5","radians",0,1,"","","System","","","","","","",""
"25.6.2.5","toBool",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayEnumerateUniq",0,0,"","","System","
Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.

This function is useful when using `ARRAY JOIN` and aggregation of array elements.

The function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays.
","arrayEnumerateUniq(arr1[, arr2, ... , arrN])","- `arr1` — First array. [`Array(T)`](/sql-reference/data-types/array).
- `[arr2, ..., arrN]` — Optional. Additional arrays of the same size for tuple uniqueness. [`Array(UInt32)`](/sql-reference/data-types/array).
","Returns an array where each element is the position among elements with the same value or tuple. [`Array(T)`](/sql-reference/data-types/array).","**Basic usage**

```sql title=Query
SELECT arrayEnumerateUniq([10, 20, 10, 30]);
```

```response title=Response
[1, 1, 2, 1]
```

**Multiple arrays**

```sql title=Query
SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]);
```

```response title=Response
[1,2,1,1,2,1]
```

**ARRAY JOIN aggregation**

```sql title=Query
-- Each goal ID has a calculation of the number of conversions (each element in the Goals nested data structure is a goal that was reached, which we refer to as a conversion)
-- and the number of sessions. Without ARRAY JOIN, we would have counted the number of sessions as sum(Sign). But in this particular case,
-- the rows were multiplied by the nested Goals structure, so in order to count each session one time after this, we apply a condition to the
-- value of the arrayEnumerateUniq(Goals.ID) function.

SELECT
    Goals.ID AS GoalID,
    sum(Sign) AS Reaches,
    sumIf(Sign, num = 1) AS Visits
FROM test.visits
ARRAY JOIN
    Goals,
    arrayEnumerateUniq(Goals.ID) AS num
WHERE CounterID = 160656
GROUP BY GoalID
ORDER BY Reaches DESC
LIMIT 10
```

```response title=Response
┌──GoalID─┬─Reaches─┬─Visits─┐
│   53225 │    3214 │   1097 │
│ 2825062 │    3188 │   1097 │
│   56600 │    2803 │    488 │
│ 1989037 │    2401 │    365 │
│ 2830064 │    2396 │    910 │
│ 1113562 │    2372 │    373 │
│ 3270895 │    2262 │    812 │
│ 1084657 │    2262 │    345 │
│   56599 │    2260 │    799 │
│ 3271094 │    2256 │    812 │
└─────────┴─────────┴────────┘
```

","1.1","Arrays"
"25.6.2.5","fromModifiedJulianDayOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","fromModifiedJulianDay",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalMonth",0,0,"","","System","","","","","","",""
"25.6.2.5","fromUTCTimestamp",0,0,"","","System","","","","","","",""
"25.6.2.5","defaultProfiles",0,0,"","","System","","","","","","",""
"25.6.2.5","toTime64",0,0,"","","System","","","","","","",""
"25.6.2.5","enabledProfiles",0,0,"","","System","","","","","","",""
"25.6.2.5","convertCharset",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayRandomSample",0,0,"","","System","Returns a subset with `samples`-many random elements of an input array. If `samples` exceeds the size of the input array, the sample size is limited to the size of the array, i.e. all array elements are returned but their order is not guaranteed. The function can handle both flat arrays and nested arrays.","arrayRandomSample(arr, samples)","- `arr` — The input array or multidimensional array from which to sample elements. ([`Array(T)`](/sql-reference/data-types/array)).
- `samples` — The number of elements to include in the random sample ([`(U)Int*`](../data-types/int-uint.md)).
","An array containing a random sample of elements from the input array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayRandomSample(['apple', 'banana', 'cherry', 'date'], 2) as res;
```

```response title=Response
['cherry','apple']
```

**Using a multidimensional array**

```sql title=Query
SELECT arrayRandomSample([[1, 2], [3, 4], [5, 6]], 2) as res;
```

```response title=Response
[[3,4],[5,6]]
```

","23.10","Arrays"
"25.6.2.5","cosh",0,0,"","","System","","","","","","",""
"25.6.2.5","countDigits",0,0,"","","System","","","","","","",""
"25.6.2.5","getClientHTTPHeader",0,0,"","","System","
Get the value of an HTTP header.

If there is no such header or the current request is not performed via the HTTP interface, the function returns an empty string.
Certain HTTP headers (e.g., `Authentication` and `X-ClickHouse-*`) are restricted.

The function requires the setting `allow_get_client_http_header` to be enabled.
The setting is not enabled by default for security reasons, because some headers, such as `Cookie`, could contain sensitive info.

HTTP headers are case sensitive for this function.

If the function is used in the context of a distributed query, it returns non-empty result only on the initiator node.
"",
            .syntax = ""getClientHTTPHeader(name","","- `name` — The HTTP header name (String)
","The value of the header (String).","","","Other"
"25.6.2.5","currentDatabase",0,0,"","","System","","","","","","",""
"25.6.2.5","currentRoles",0,0,"","","System","","","","","","",""
"25.6.2.5","h3ExactEdgeLengthKm",0,0,"","","System","","","","","","",""
"25.6.2.5","positiveModulo",0,1,"","","System","
Calculates the remainder when dividing `x` by `y`. Similar to function
`modulo` except that `positiveModulo` always return non-negative number.
    ","positiveModulo(x, y)","- `x` — The dividend. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
- `y` — The divisor (modulus). [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","Returns the difference between `x` and the nearest integer not greater than
`x` divisible by `y`.","**Usage example**

```sql title=Query
SELECT positiveModulo(-1, 10)
```

```response title=Response
9
```

","22.11","Arithmetic"
"25.6.2.5","isMergeTreePartCoveredBy",0,1,"","","System","Checks if one MergeTree part covers another","","","","","25.6","Introspection"
"25.6.2.5","bitmaskToList",0,0,"","","System","","","","","","",""
"25.6.2.5","bitmaskToArray",0,0,"","","System","","","","","","",""
"25.6.2.5","bitPositionsToArray",0,0,"","","System","","","","","","",""
"25.6.2.5","currentSchemas",0,1,"","","System","
Returns a single-element array with the name of the current database

Requires a boolean parameter, but it is ignored actually. It is required just for compatibility with the implementation of this function in other DB engines.

[example:common]
","","","","**common**

```sql title=Query
SELECT current_schemas(true);
```

```response title=Response
['default']
```

","","Other"
"25.6.2.5","simpleJSONExtractInt",0,0,"","","System","Parses Int64 from the value of the field named field_name. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.","simpleJSONExtractInt(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the number parsed from the field if the field exists and contains a number, 0 otherwise.","**simple**

```sql title=Query
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractInt(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
0
-4
0
-3
5
```

","","JSON"
"25.6.2.5","toLastDayOfWeek",0,0,"","","System","","","","","","",""
"25.6.2.5","equals",0,0,"","","System","Compares two values for equality.","equals(a, b)
        -- a = b
        -- a == b","- `a` — First value.<sup>[*](#comparison-rules)</sup>
- `b` — Second value.<sup>[*](#comparison-rules)</sup>
","Returns `1` if `a` is equal to `b`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint/)","**Usage example**

```sql title=Query
SELECT 1 = 1, 1 = 2;
```

```response title=Response
┌─equals(1, 1)─┬─equals(1, 2)─┐
│            1 │            0 │
└──────────────┴──────────────┘
```

","1.1","Comparison"
"25.6.2.5","currentUser",0,0,"","","System","","","","","","",""
"25.6.2.5","s2RectIntersection",0,0,"","","System","","","","","","",""
"25.6.2.5","mapContainsKeyLike",0,0,"","","System","Checks whether map contains key LIKE specified pattern.","","","","**mapContainsKeyLike**

```sql title=Query
SELECT mapContainsKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')
```

```response title=Response

```

","23.4","Map"
"25.6.2.5","timeDiff",0,1,"","","System","
Returns the difference between two dates or dates with time values. The difference is calculated in seconds units (see toRelativeSecondNum).
It is same as `dateDiff` and was added only for MySQL support. `dateDiff` is preferred.

Example:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT timeDiff(UTCTimestamp(), now());
```

```response title=Response

```

","","Dates and Times"
"25.6.2.5","uptime",0,0,"","","System","","","","","","",""
"25.6.2.5","toJSONString",0,0,"","","System","","","","","","",""
"25.6.2.5","murmurHash2_32",0,0,"","","System","","","","","","",""
"25.6.2.5","exp10",0,0,"","","System","","","","","","",""
"25.6.2.5","stringToH3",0,0,"","","System","","","","","","",""
"25.6.2.5","dateName",0,1,"","","System","","","","","","",""
"25.6.2.5","assumeNotNull",0,0,"","","System","","","","","","",""
"25.6.2.5","changeSecond",0,0,"","","System","Changes the second component of a date or date time.","changeSecond(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.","","","Dates and Times"
"25.6.2.5","dateTime64ToSnowflakeID",0,0,"","","System","Converts a [DateTime64](../data-types/datetime64.md) value to the first [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) at the giving time.","dateTime64ToSnowflakeID(value[, epoch])","- `value` — Date with time. [DateTime64](../data-types/datetime.md).
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
","Input value converted to [UInt64](../data-types/int-uint.md) as the first Snowflake ID at that time.","**simple**

```sql title=Query
SELECT dateTime64ToSnowflakeID(toDateTime64('2021-08-15 18:57:56', 3, 'Asia/Shanghai'))
```

```response title=Response
6832626394434895872
```

","24.6","UUID"
"25.6.2.5","xxHash32",0,0,"","","System","","","","","","",""
"25.6.2.5","dateTimeToSnowflakeID",0,0,"","","System","Converts a [DateTime](../data-types/datetime.md) value to the first [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) at the giving time.","dateTimeToSnowflakeID(value[, epoch])","- `value` — Date with time. [DateTime](../data-types/datetime.md).
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
","Input value converted to [UInt64](../data-types/int-uint.md) as the first Snowflake ID at that time.","**simple**

```sql title=Query
SELECT dateTimeToSnowflakeID(toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai'))
```

```response title=Response
6832626392367104000
```

","24.6","UUID"
"25.6.2.5","getMergeTreeSetting",0,0,"","","System","
Returns the current value of merge tree setting.
","getMergeTreeSetting('custom_setting')","- `custom_setting` — The setting name. Type: String.
","The setting's current value.","**getMergeTreeSetting**

```sql title=Query
SELECT getMergeTreeSetting('index_granularity');
```

```response title=Response
8192
```

","","Other"
"25.6.2.5","isDecimalOverflow",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfHour",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalWeek",0,0,"","","System","","","","","","",""
"25.6.2.5","toUnixTimestamp64Second",0,0,"","","System","","","","","","",""
"25.6.2.5","toRelativeSecondNum",0,0,"","","System","","","","","","",""
"25.6.2.5","replaceAll",0,0,"","","System","","","","","","",""
"25.6.2.5","neighbor",0,0,"","","System","","","","","","",""
"25.6.2.5","structureToProtobufSchema",0,0,"","","System","
Function that converts ClickHouse table structure to Protobuf format schema
","","","","**random**

```sql title=Query
SELECT structureToCapnProtoSchema('s String, x UInt32', 'MessageName') format TSVRaw
```

```response title=Response
syntax = ""proto3"";

message MessageName
{
    bytes s = 1;
    uint32 x = 2;
}
```

","","Other"
"25.6.2.5","base58Encode",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonAreaSpherical",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayUniq",0,0,"","","System","
For a single argument passed, counts the number of different elements in the array.
For multiple arguments passed, it counts the number of different **tuples** made of elements at matching positions across multiple arrays.

For example `SELECT arrayUniq([1,2], [3,4], [5,6])` will form the following tuples:
* Position 1: (1,3,5)
* Position 2: (2,4,6)

It will then count the number of unique tuples. In this case `2`.

All arrays passed must have the same length.

:::tip
If you want to get a list of unique items in an array, you can use `arrayReduce('groupUniqArray', arr)`.
:::
","arrayUniq(arr1[, arr2, ..., arrN])","- `arr1` — Array for which to count the number of unique elements. [`Array(T)`](/sql-reference/data-types/array).
- `[, arr2, ..., arrN] (optional)` — Optional. Additional arrays used to count the number of unique tuples of elements at corresponding positions in multiple arrays. [`Array(T)`](/sql-reference/data-types/array).
","For a single argument returns the number of unique
elements. For multiple arguments returns the number of unique tuples made from
elements at corresponding positions across the arrays.
[`UInt32`](/sql-reference/data-types/int-uint).","**Single argument**

```sql title=Query
SELECT arrayUniq([1, 1, 2, 2])
```

```response title=Response
2
```

**Multiple argument**

```sql title=Query
SELECT arrayUniq([1, 2, 3, 1], [4, 5, 6, 4])
```

```response title=Response
3
```

","1.1","Arrays"
"25.6.2.5","polygonAreaCartesian",0,0,"","","System","","","","","","",""
"25.6.2.5","regionToPopulation",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt8OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfISOYear",0,0,"","","System","
Rounds down a date or date with time to the first day of the ISO year, which can be different than a regular year. See [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date).

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfISOYear(value)","- `value` — The date or date with time to round down to the first day of the ISO year. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).
","Returns the first day of the ISO year for the given date or date with time. [`Date`](../data-types/date.md).","**Round down to the first day of the ISO year**

```sql title=Query
SELECT toStartOfISOYear(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toStartOfISOYear(toDateTime('2023-04-21 10:20:30'))─┐
│                                          2023-01-02 │
└─────────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","format",0,0,"","","System","","","","","","",""
"25.6.2.5","lemmatize",0,0,"","","System","","","","","","",""
"25.6.2.5","dateTrunc",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramSearch",0,0,"","","System","","","","","","",""
"25.6.2.5","lessOrEquals",0,0,"","","System","Compares two values for less-than-or-equal-to relation.","lessOrEquals(a, b)
    -- a <= b","- `a` — First value.<sup>[*](#comparison-rules)</sup>
- `b` — Second value.<sup>[*](#comparison-rules)</sup>
","Returns `1` if `a` is less than or equal to `b`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint/)","**Usage example**

```sql title=Query
SELECT 1 <= 2, 2 <= 2, 3 <= 2;
```

```response title=Response
┌─lessOrEquals(1, 2)─┬─lessOrEquals(2, 2)─┬─lessOrEquals(3, 2)─┐
│                  1 │                  1 │                  0 │
└────────────────────┴────────────────────┴────────────────────┘
```

","1.1","Comparison"
"25.6.2.5","subtractQuarters",0,0,"","","System","
Subtracts a specified number of quarters from a date, a date with time or a string-encoded date or date with time.
    ","subtractQuarters(datetime, num)","- `datetime` — Date or date with time to subtract specified number of quarters from. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of quarters to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` quarters. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Subtract quarters from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractQuarters(date, 1) AS subtract_quarters_with_date,
    subtractQuarters(date_time, 1) AS subtract_quarters_with_date_time,
    subtractQuarters(date_time_string, 1) AS subtract_quarters_with_date_time_string
```

```response title=Response
┌─subtract_quarters_with_date─┬─subtract_quarters_with_date_time─┬─subtract_quarters_with_date_time_string─┐
│                  2023-10-01 │              2023-10-01 00:00:00 │                 2023-10-01 00:00:00.000 │
└─────────────────────────────┴──────────────────────────────────┴─────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 quarter)
```

```response title=Response
┌─minus(CAST('1⋯Quarter(10))─┐
│                1996-09-16 │
└───────────────────────────┘
```

","20.1","Dates and Times"
"25.6.2.5","fromUnixTimestamp64Nano",0,0,"","","System","","","","","","",""
"25.6.2.5","bitmapTransform",0,0,"","","System","
Changes up to N bits in a bitmap by swapping specific bit values in `from_array` with corresponding ones in `to_array`.
    ","bitmapTransform(bitmap, from_array, to_array)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `from_array` — Array of original set bits to be replaced. [`Array(T)`](/sql-reference/data-types/array).
- `to_array` — Array of new set bits to replace with. [`Array(T)`](/sql-reference/data-types/array).
","Returns a bitmap with elements transformed according to the given mapping. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapTransform(bitmapBuild([1, 2, 3, 4, 5]), [2, 4], [20, 40])) AS res;
```

```response title=Response
┌─res───────────────┐
│ [1, 3, 5, 20, 40] │
└───────────────────┘
```

","20.1","Bitmap"
"25.6.2.5","cutIPv6",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayShuffle",0,1,"","","System","
Returns an array of the same size as the original array containing the elements in shuffled order.
Elements are reordered in such a way that each possible permutation of those elements has equal probability of appearance.

:::note
This function will not materialize constants.
:::
    ","arrayShuffle(arr [, seed])","- `arr` — The array to shuffle. [`Array(T)`](/sql-reference/data-types/array).
- `seed (optional)` — Optional. The seed to be used with random number generation. If not provided a random one is used. [`(U)Int*`](../data-types/int-uint.md).
","Array with elements shuffled. [`Array(T)`](/sql-reference/data-types/array).","**Example without seed (unstable results)**

```sql title=Query
SELECT arrayShuffle([1, 2, 3, 4]);
```

```response title=Response
[1,4,2,3]
```

**Example without seed (stable results)**

```sql title=Query
SELECT arrayShuffle([1, 2, 3, 4], 41);
```

```response title=Response
[3,2,1,4]
```

","23.2","Arrays"
"25.6.2.5","revision",0,1,"","","System","","","","","","",""
"25.6.2.5","visibleWidth",0,0,"","","System","","","","","","",""
"25.6.2.5","degrees",0,1,"","","System","","","","","","",""
"25.6.2.5","svg",0,0,"","","System","","","","","","",""
"25.6.2.5","modulo",0,0,"","","System","
    Calculates the remainder of the division of two values a by b.

    The result type is an integer if both inputs are integers. If one of the
    inputs is a floating-point number, the result type is Float64.

    The remainder is computed like in C++. Truncated division is used for
    negative numbers.

    An exception is thrown when dividing by zero or when dividing a minimal
    negative number by minus one.
    ","modulo(a, b)","- `a` — The dividend
- `b` — The divisor (modulus)
","The remainder of a % b","**Usage example**

```sql title=Query
SELECT modulo(5, 2)
```

```response title=Response
1
```

","1.1","Arithmetic"
"25.6.2.5","getOSKernelVersion",0,0,"","","System","","","","","","",""
"25.6.2.5","pathFull",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramMinHashArgCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramMinHashArgUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","cutToFirstSignificantSubdomainRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomain` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.6.2.5","wordShingleMinHashUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayDifference",0,0,"","","System","
Calculates an array of differences between adjacent array elements.
The first element of the result array will be 0, the second `arr[1] - arr[0]`, the third `arr[2] - arr[1]`, etc.
The type of elements in the result array are determined by the type inference rules for subtraction (e.g. `UInt8` - `UInt8` = `Int16`).
    ","arrayDifference(arr)","- `arr` — Array for which to calculate differences between adjacent elements. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array of differences between adjacent array elements. [`UInt*`](/sql-reference/data-types/int-uint#integer-ranges), [`Int*`](/sql-reference/data-types/int-uint#integer-ranges), [`Float*`](/sql-reference/data-types/float).","**Usage example**

```sql title=Query
SELECT arrayDifference([1, 2, 3, 4]);
```

```response title=Response
[0,1,1,1]
```

**Example of overflow due to result type Int64**

```sql title=Query
SELECT arrayDifference([0, 10000000000000000000]);
```

```response title=Response
┌─arrayDifference([0, 10000000000000000000])─┐
│ [0,-8446744073709551616]                   │
└────────────────────────────────────────────┘
```

","1.1","Arrays"
"25.6.2.5","wordShingleMinHash",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramMinHash",0,0,"","","System","","","","","","",""
"25.6.2.5","formatRowNoNewline",0,0,"","","System","","","","","","",""
"25.6.2.5","wordShingleSimHashCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","wordShingleSimHashUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTime32BestEffortOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","cutToFirstSignificantSubdomainWithWWW",0,0,"","","System","Returns the part of the domain that includes top-level subdomains up to the ""first significant subdomain"", without stripping ""www"".","","","","","","URL"
"25.6.2.5","mapApply",0,0,"","","System","The same as arrayMap.","","","","**mapApply**

```sql title=Query
SELECT mapApply((k, v) -> (k, v * 2), map('k1', 1, 'k2', 2))
```

```response title=Response

```

","22.3","Map"
"25.6.2.5","wordShingleSimHashCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","finalizeAggregation",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramSimHashCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramSimHash",0,0,"","","System","","","","","","",""
"25.6.2.5","regionToCountry",0,0,"","","System","","","","","","",""
"25.6.2.5","generateUUIDv7",0,0,"","","System","Generates a UUID of version 7. The generated UUID contains the current Unix timestamp in milliseconds (48 bits), followed by version ""7"" (4 bits), a counter (42 bit, including a variant field ""2"", 2 bit) to distinguish UUIDs within a millisecond, and a random field (32 bits). For any given timestamp (unix_ts_ms), the counter starts at a random value and is incremented by 1 for each new UUID until the timestamp changes. In case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to a random new start value. Function generateUUIDv7 guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.","SELECT generateUUIDv7()","- `expression` — The expression is used to bypass common subexpression elimination if the function is called multiple times in a query but otherwise ignored. Optional.
","A value of type UUID version 7.","**single**

```sql title=Query
SELECT generateUUIDv7()
```

```response title=Response

```

**multiple**

```sql title=Query
SELECT generateUUIDv7(1), generateUUIDv7(2)
```

```response title=Response

```

","24.5","UUID"
"25.6.2.5","toTimezone",0,0,"","","System","
Converts a `DateTime` or `DateTime64` to the specified time zone.
The internal value (number of unix seconds) of the data doesn't change.
Only the value's time zone attribute and the value's string representation changes.
        ","toTimeZone(datetime, timezone)","- `date` — The value to convert. [`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
- `timezone` — The target time zone name as a [`String`](/sql-reference/data-types/string).
","Returns the same timestamp as the input, but with the specified time zone. [`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).","**Usage example**

```sql title=Query
SELECT toDateTime('2019-01-01 00:00:00', 'UTC') AS time_utc,
toTypeName(time_utc) AS type_utc,
toInt32(time_utc) AS int32utc,
toTimeZone(time_utc, 'Asia/Yekaterinburg') AS time_yekat,
toTypeName(time_yekat) AS type_yekat,
toInt32(time_yekat) AS int32yekat,
toTimeZone(time_utc, 'US/Samoa') AS time_samoa,
toTypeName(time_samoa) AS type_samoa,
toInt32(time_samoa) AS int32samoa
FORMAT Vertical;
```

```response title=Response
Row 1:
──────
time_utc:   2019-01-01 00:00:00
type_utc:   DateTime('UTC')
int32utc:   1546300800
time_yekat: 2019-01-01 05:00:00
type_yekat: DateTime('Asia/Yekaterinburg')
int32yekat: 1546300800
time_samoa: 2018-12-31 13:00:00
type_samoa: DateTime('US/Samoa')
int32samoa: 1546300800
```

","1.1","Dates and Times"
"25.6.2.5","emptyArrayDate",0,0,"","","System","Returns an empty Date array","emptyArrayDate()","","An empty Date array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayDate
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","CRC32IEEE",0,1,"","","System","","","","","","",""
"25.6.2.5","notEmpty",0,0,"","","System","
Checks whether the input array is non-empty.

An array is considered non-empty if it contains at least one element.

:::note
Can be optimized by enabling the [`optimize_functions_to_subcolumns`](/operations/settings/settings#optimize_functions_to_subcolumns) setting. With `optimize_functions_to_subcolumns = 1` the function reads only [size0](/sql-reference/data-types/array#array-size) subcolumn instead of reading and processing the whole array column. The query `SELECT notEmpty(arr) FROM table` transforms to `SELECT arr.size0 != 0 FROM TABLE`.
:::

The function also works for [strings](string-functions.md#notempty) or [UUID](uuid-functions.md#notempty).
    ","notEmpty(arr)","- `arr` — Input array. [`Array(T)`](/sql-reference/data-types/array).
","Returns `1` for a non-empty array or `0` for an empty array. [`UInt8`](../data-types/int-uint.md).","**Usage example**

```sql title=Query
SELECT notEmpty([1,2]);
```

```response title=Response
1
```

","1.1","Arrays"
"25.6.2.5","reinterpretAsUInt64",0,0,"","","System","","","","","","",""
"25.6.2.5","erfc",0,0,"","","System","","","","","","",""
"25.6.2.5","tumbleEnd",0,0,"","","System","","","","","","",""
"25.6.2.5","isInfinite",0,0,"","","System","
    Returns `1` if the Float32 or Float64 argument is infinite, otherwise this function returns `0`.
    Note that `0` is returned for a `NaN`.
    ","isInfinite(x)","- `x` — Number to check for infiniteness. Float32 or Float64.
","`1` if x is infinite, otherwise `0` (including for `NaN`).","**Test if a number is infinite**

```sql title=Query
SELECT isInfinite(inf), isInfinite(NaN), isInfinite(10))
```

```response title=Response
1 0 0
```

","1.1","Arithmetic"
"25.6.2.5","replaceRegexpOne",0,0,"","","System","","","","","","",""
"25.6.2.5","isNull",0,1,"","","System","","","","","","",""
"25.6.2.5","factorial",0,1,"","","System","
Computes the factorial of an integer value. It works with any native integer type including UInt(8|16|32|64) and Int(8|16|32|64). The return type is UInt64.

The factorial of 0 is 1. Likewise, the factorial() function returns 1 for any negative value. The maximum positive value for the input argument is 20, a value of 21 or greater will cause exception throw.
","","","","**factorial**

```sql title=Query
SELECT factorial(10)
```

```response title=Response

```

","","Mathematical"
"25.6.2.5","aes_decrypt_mysql",0,0,"","","System","","","","","","",""
"25.6.2.5","formatQuerySingleLine",0,0,"","","System","Like formatQuery() but the returned formatted string contains no line breaks. Throws in case of a parsing error.
[example:multiline]","formatQuerySingleLine(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","**multiline**

```sql title=Query
SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

```response title=Response
SELECT a, b FROM tab WHERE (a > 3) AND (b < 3)
```

","","Other"
"25.6.2.5","position",0,1,"","","System","","","","","","",""
"25.6.2.5","cutToFirstSignificantSubdomainCustomRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainCustom` but follows stricter rules according to RFC 3986.","","","","","","URL"
"25.6.2.5","dictGetInt16OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int16 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","cutToFirstSignificantSubdomainCustom",0,0,"","","System","
Returns the part of the domain that includes top-level subdomains up to the first significant subdomain. Accepts custom TLD list name.

Can be useful if you need fresh TLD list or you have custom.
        ","","","","**cutToFirstSignificantSubdomainCustom**

```sql title=Query
SELECT cutToFirstSignificantSubdomainCustom('bar.foo.there-is-no-such-domain', 'public_suffix_list');
```

```response title=Response

```

","","URL"
"25.6.2.5","atan2",0,1,"","","System","","","","","","",""
"25.6.2.5","JSONExtractArrayRaw",0,0,"","","System","","","","","","",""
"25.6.2.5","joinGetOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","trimRight",0,0,"","","System","","","","","","",""
"25.6.2.5","translate",0,0,"","","System","","","","","","",""
"25.6.2.5","formatQueryOrNull",0,0,"","","System","Returns a formatted, possibly multi-line, version of the given SQL query. Returns NULL in case of a parsing error.
[example:multiline]","formatQueryOrNull(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","**multiline**

```sql title=Query
SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

```response title=Response
SELECT
    a,
    b
FROM tab
WHERE (a > 3) AND (b < 3)
```

","","Other"
"25.6.2.5","lengthUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","toFloat32OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","h3IndexesAreNeighbors",0,0,"","","System","","","","","","",""
"25.6.2.5","endsWithUTF8",0,0,"","","System","
Returns whether string `str` ends with `suffix`, the difference between `endsWithUTF8` and `endsWith` is that `endsWithUTF8` match `str` and `suffix` by UTF-8 characters.
        ","","","","**endsWithUTF8**

```sql title=Query
select endsWithUTF8('富强民主文明和谐', '富强');
```

```response title=Response

```

","","String"
"25.6.2.5","mapAll",0,0,"","","System","The same as arrayAll.","","","","**mapAll**

```sql title=Query
SELECT mapAll((k, v) -> v = 1, map('k1', 1, 'k2', 2))
```

```response title=Response

```

","23.4","Map"
"25.6.2.5","overlay",0,1,"","","System","
Replace a part of a string `input` with another string `replace`, starting at 1-based index `offset`. By default, the number of bytes removed from `input` equals the length of `replace`. If `length` (the optional fourth argument) is specified, a different number of bytes is removed.
","","","","","","String Replacement"
"25.6.2.5","toStartOfMinute",0,0,"","","System","","","","","","",""
"25.6.2.5","wordShingleSimHash",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayCumSum",0,0,"","","System","Returns an array of the partial (running) sums of the elements in the source array. If a lambda function is specified, the sum is computed from applying the lambda to the array elements at each position.","arrayCumSum([func,] arr1[, arr2, ... , arrN])","- `func` — Optional. A lambda function to apply to the array elements at each position. [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `arr1` — The source array of numeric values. [`Array(T)`](/sql-reference/data-types/array).
- `[arr2, ..., arrN]` — Optional. Additional arrays of the same size, passed as arguments to the lambda function if specified. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array of the partial sums of the elements in the source array. The result type matches the input array's numeric type.","**Basic usage**

```sql title=Query
SELECT arrayCumSum([1, 1, 1, 1]) AS res
```

```response title=Response
[1, 2, 3, 4]
```

**With lambda**

```sql title=Query
SELECT arrayCumSum(x -> x * 2, [1, 2, 3]) AS res
```

```response title=Response
[2, 6, 12]
```

","1.1","Arrays"
"25.6.2.5","IPv4StringToNumOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","trimLeft",0,0,"","","System","","","","","","",""
"25.6.2.5","formatReadableQuantity",0,0,"","","System","","","","","","",""
"25.6.2.5","countMatchesCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","toQuarter",0,0,"","","System","
Returns the quarter of the year (1-4) for a given `Date` or `DateTime` value.
    ","toQuarter(datetime)","- `datetime` — A `Date` or `DateTime` value to get the quarter of the year from. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","The quarter of the year for the given date/time. [`UInt8`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toQuarter(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toQuarter(toDateTime('2023-04-21 10:20:30'))─┐
│                                            2 │
└──────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","isFinite",0,0,"","","System","
Returns `1` if the Float32 or Float64 argument not infinite and not a `NaN`,
otherwise this function returns `0`.
    ","isFinite(x)","- `x` — Number to check for finiteness. Float32 or Float64.
","`1` if x is not infinite and not `NaN`, otherwise `0`.","**Test if a number is finite**

```sql title=Query
SELECT isFinite(inf)
```

```response title=Response
0
```

","1.1","Arithmetic"
"25.6.2.5","countMatches",0,0,"","","System","","","","","","",""
"25.6.2.5","fromDaysSinceYearZero",0,0,"","","System","
Given the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601 return a corresponding date.
The calculation is the same as in MySQL's FROM_DAYS() function.
","","","","**typical**

```sql title=Query
SELECT fromDaysSinceYearZero(713569)
```

```response title=Response
2023-09-08
```

","","Dates and Times"
"25.6.2.5","arrayWithConstant",0,0,"","","System","
Creates an array of length `length` filled with the constant `x`.
    ","arrayWithConstant(N, x)","- `length` — Number of elements in the array. [`(U)Int*`](/sql-reference/data-types/int-uint).
- `x` — The value of the `N` elements in the array, of any type.
","Returns an Array with `N` elements of value `x`.","**Usage example**

```sql title=Query
SELECT arrayWithConstant(3, 1)
```

```response title=Response
[1,1,1]
```

","20.1","Arrays"
"25.6.2.5","toStartOfNanosecond",0,0,"","","System","","","","","","",""
"25.6.2.5","fromUnixTimestamp64Second",0,0,"","","System","","","","","","",""
"25.6.2.5","countEqual",0,0,"","","System","
Returns the number of elements in the array equal to `x`. Equivalent to `arrayCount(elem -> elem = x, arr)`.

`NULL` elements are handled as separate values.
","countEqual(arr, x)","- `arr` — Array to search. [`Array(T)`](/sql-reference/data-types/array).
- `x` — Value in the array to count. Any type.
","Returns the number of elements in the array equal to `x`. [UInt64](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT countEqual([1, 2, NULL, NULL], NULL)
```

```response title=Response
2
```

","1.1","Arrays"
"25.6.2.5","JSONArrayLength",0,0,"","","System","Returns the number of elements in the outermost JSON array. The function returns NULL if input JSON string is invalid.","","","","","","JSON"
"25.6.2.5","timezone",0,1,"","","System","
Returns the time zone name of the current session or converts a time zone
offset or name to a canonical time zone name.
    ","timezone()","","Returns the canonical time zone name as a [`String`](/sql-reference/data-types/string).","**Get current session time zone**

```sql title=Query
SELECT timezone()
```

```response title=Response
┌─timezone()───────┐
│ Europe/Amsterdam │
└──────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","dynamicElement",0,0,"","","System","
Extracts a column with specified type from a `Dynamic` column.
","dynamicElement(dynamic, type_name)","- `dynamic` — Dynamic column
- `type_name` — The name of the variant type to extract
","","**Example**

```sql title=Query
CREATE TABLE test (d Dynamic) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, dynamicType(d), dynamicElement(d, 'String'), dynamicElement(d, 'Int64'), dynamicElement(d, 'Array(Int64)'), dynamicElement(d, 'Date'), dynamicElement(d, 'Array(String)') FROM test;
```

```response title=Response
┌─d─────────────┬─dynamicType(d)─┬─dynamicElement(d, 'String')─┬─dynamicElement(d, 'Int64')─┬─dynamicElement(d, 'Array(Int64)')─┬─dynamicElement(d, 'Date')─┬─dynamicElement(d, 'Array(String)')─┐
│ ᴺᵁᴸᴸ          │ None           │ ᴺᵁᴸᴸ                        │                       ᴺᵁᴸᴸ │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ 42            │ Int64          │ ᴺᵁᴸᴸ                        │                         42 │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ Hello, World! │ String         │ Hello, World!               │                       ᴺᵁᴸᴸ │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ [1,2,3]       │ Array(Int64)   │ ᴺᵁᴸᴸ                        │                       ᴺᵁᴸᴸ │ [1,2,3]                           │                      ᴺᵁᴸᴸ │ []                                 │
└───────────────┴────────────────┴─────────────────────────────┴────────────────────────────┴───────────────────────────────────┴───────────────────────────┴────────────────────────────────────┘
```

","","JSON"
"25.6.2.5","divide",0,0,"","","System","
    Calculates the quotient of two values `a` and `b`. The result type is always [Float64](/sql-reference/data-types/float).
    Integer division is provided by the `intDiv` function.

    :::note
    Division by `0` returns `inf`, `-inf`, or `nan`.
    :::
    ","divide(x, y)","- `x` — Dividend
- `y` — Divisor
","The quotient of x and y","**Dividing two numbers**

```sql title=Query
SELECT divide(25,5) AS quotient, toTypeName(quotient)
```

```response title=Response
5 Float64
```

**Dividing by zero**

```sql title=Query
SELECT divide(25,0)
```

```response title=Response
inf
```

","1.1","Arithmetic"
"25.6.2.5","uniqThetaNot",0,0,"","","System","
Two uniqThetaSketch objects to do a_not_b calculation(set operation ×), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
select finalizeAggregation(uniqThetaNot(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

```response title=Response

```

","","Other"
"25.6.2.5","h3EdgeAngle",0,0,"","","System","","","","","","",""
"25.6.2.5","acos",0,1,"","","System","","","","","","",""
"25.6.2.5","fromUnixTimestamp64Micro",0,0,"","","System","","","","","","",""
"25.6.2.5","cos",0,1,"","","System","","","","","","",""
"25.6.2.5","windowID",0,0,"","","System","","","","","","",""
"25.6.2.5","multiMatchAnyIndex",0,0,"","","System","","","","","","",""
"25.6.2.5","hopStart",0,0,"","","System","","","","","","",""
"25.6.2.5","dateDiff",0,1,"","","System","","","","","","",""
"25.6.2.5","hop",0,0,"","","System","","","","","","",""
"25.6.2.5","hasAny",0,0,"","","System","
Checks whether two arrays have intersection by some elements.

- `Null` is processed as a value.
- The order of the values in both of the arrays does not matter.
","hasAny(arr_x, arr_y)","- `arr_x` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array).
- `arr_y` — Array of any type that shares a common supertype with array `arr_x`. [`Array(T)`](/sql-reference/data-types/array).
","- `1`, if `arr_x` and `arr_y` have one similar element at least.
- `0`, otherwise.

Raises a `NO_COMMON_TYPE` exception if any of the elements of the two arrays do not share a common supertype.","**One array is empty**

```sql title=Query
SELECT hasAny([1], [])
```

```response title=Response
1
```

**Arrays containing NULL values**

```sql title=Query
SELECT hasAny([Null], [Null, 1])
```

```response title=Response
1
```

**Arrays containing values of a different type**

```sql title=Query
SELECT hasAny([-128, 1., 512], [1])
```

```response title=Response
1
```

**Arrays without a common type**

```sql title=Query
SELECT hasAny([[1, 2], [3, 4]], ['a', 'c'])
```

```response title=Response
Raises a `NO_COMMON_TYPE` exception
```

**Array of arrays**

```sql title=Query
SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [1, 2]])
```

```response title=Response
1
```

","1.1","Arrays"
"25.6.2.5","fuzzBits",0,0,"","","System","","","","","","",""
"25.6.2.5","formatQuerySingleLineOrNull",0,0,"","","System","Like formatQuery() but the returned formatted string contains no line breaks. Returns NULL in case of a parsing error.
[example:multiline]","formatQuerySingleLineOrNull(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","**multiline**

```sql title=Query
SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

```response title=Response
SELECT a, b FROM tab WHERE (a > 3) AND (b < 3)
```

","","Other"
"25.6.2.5","randLogNormal",0,0,"","","System","
Returns a random number from the lognormal distribution (a distribution of a random variable whose logarithm is normally distributed).
Accepts two parameters - mean and standard deviation.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randLogNormal(0, 5) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","ifNull",0,1,"","","System","","","","","","",""
"25.6.2.5","generateULID",0,0,"","","System","
Generates a Universally Unique Lexicographically Sortable Identifier (ULID).
This function takes an optional argument, the value of which is discarded to generate different values in case the function is called multiple times.
The function returns a value of type FixedString(26).
","","","","**ulid**

```sql title=Query
SELECT generateULID()
```

```response title=Response

```

**multiple**

```sql title=Query
SELECT generateULID(1), generateULID(2)
```

```response title=Response

```

","","ULID"
"25.6.2.5","bar",0,0,"","","System","","","","","","",""
"25.6.2.5","space",0,1,"","","System","","","","","","",""
"25.6.2.5","toMillisecond",0,0,"","","System","
Returns the millisecond component (0-999) of a `DateTime` or `DateTime64` value.
    ","toMillisecond(datetime)","- `datetime` — A `DateTime` or `DateTime64` value to get the millisecond from. [`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","Returns the millisecond in the minute (0 - 59) of the given `Date` or `DateTime`. [`UInt16`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3));
```

```response title=Response
┌──toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3))─┐
│                                                        456 │
└────────────────────────────────────────────────────────────┘
```

","24.2","Dates and Times"
"25.6.2.5","parseDateTime64InJodaSyntax",0,0,"","","System","","","","","","",""
"25.6.2.5","generateUUIDv4",0,0,"","","System","","","","","","",""
"25.6.2.5","formatReadableTimeDelta",0,0,"","","System","","","","","","",""
"25.6.2.5","geohashEncode",0,0,"","","System","","","","","","",""
"25.6.2.5","h3UnidirectionalEdgeIsValid",0,0,"","","System","","","","","","",""
"25.6.2.5","substringUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","serverTimezone",0,0,"","","System","
Returns the timezone of the server, i.e. the value of the [`timezone`](/operations/server-configuration-parameters/settings#timezone) setting.
If the function is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard. Otherwise, it produces a constant value.
    ","serverTimeZone()","","Returns the server timezone as a [`String`](/sql-reference/data-types/string).","**Get server time zone**

```sql title=Query
SELECT serverTimeZone()
```

```response title=Response
┌─serverTimeZone()─┐
│ UTC              │
└──────────────────┘
```

","23.6","Dates and Times"
"25.6.2.5","cutToFirstSignificantSubdomainCustomWithWWW",0,0,"","","System","
Returns the part of the domain that includes top-level subdomains up to the first significant subdomain without stripping `www`.
Accepts custom TLD list name from config.

Can be useful if you need fresh TLD list or you have custom.
        ","","","","**cutToFirstSignificantSubdomainCustomWithWWW**

```sql title=Query
SELECT cutToFirstSignificantSubdomainCustomWithWWW('www.foo', 'public_suffix_list')
```

```response title=Response

```

","","URL"
"25.6.2.5","addHours",0,0,"","","System","
Adds a specified number of hours to a date, a date with time or a string-encoded date or date with time.
    ","addHours(datetime, num)","- `datetime` — Date or date with time to add specified number of hours to. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of hours to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` hours. [`DateTime`](../data-types/datetime.md)/[`DateTime64(3)`](../data-types/datetime64.md).","**Add hours to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addHours(date, 12) AS add_hours_with_date,
    addHours(date_time, 12) AS add_hours_with_date_time,
    addHours(date_time_string, 12) AS add_hours_with_date_time_string
```

```response title=Response
┌─add_hours_with_date─┬─add_hours_with_date_time─┬─add_hours_with_date_time_string─┐
│ 2024-01-01 12:00:00 │      2024-01-01 12:00:00 │         2024-01-01 12:00:00.000 │
└─────────────────────┴──────────────────────────┴─────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 hour)
```

```response title=Response
┌─plus(CAST('1⋯alHour(10))─┐
│      1998-06-16 10:00:00 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","arrayFill",0,0,"","","System","
The `arrayFill` function sequentially processes a source array from the first element
to the last, evaluating a lambda condition at each position using elements from
the source and condition arrays. When the lambda function evaluates to false at
position i, the function replaces that element with the element at position i-1
from the current state of the array. The first element is always preserved
regardless of any condition.
","arrayFill(func(x [, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x [, y1, ..., yN])` — A lambda function `func(x [, y1, y2, ... yN]) → F(x [, y1, y2, ... yN])` which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array. [`Array(T)`](/sql-reference/data-types/array).","**Example with single array**

```sql title=Query
SELECT arrayFill(x -> not isNull(x), [1, null, 2, null]) AS res
```

```response title=Response
[1,1,2,2]
```

**Example with two arrays**

```sql title=Query
SELECT arrayFill(x, y, z -> x > y AND x < z, [5, 3, 6, 2], [4, 7, 1, 3], [10, 2, 8, 5]) AS res
```

```response title=Response
[5,5,6,6]
```

","20.1","Arrays"
"25.6.2.5","toDate32OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","getServerSetting",0,0,"","","System","
Returns the current value of server setting.
","getServerSetting('custom_setting')","- `custom_setting` — The setting name. Type: String.
","The setting's current value.","**getServerSetting**

```sql title=Query
SELECT getSetting('page_cache_size_ratio');
```

```response title=Response
SRLU
```

","","Other"
"25.6.2.5","identity",0,0,"","","System","","","","","","",""
"25.6.2.5","icebergHash",0,0,"","","System","Implements logic of iceberg hashing transform: https://iceberg.apache.org/spec/#appendix-b-32-bit-hash-requirements.","icebergHash(N, value)","- `value` — Integer, bool, decimal, float, string, fixed_string, uuid, date, time, datetime.
","Int32","**Example**

```sql title=Query
SELECT icebergHash(1.0 :: Float32)
```

```response title=Response
-142385009
```

","25.5","Other"
"25.6.2.5","bech32Decode",0,0,"","","System","","","","","","",""
"25.6.2.5","geoDistance",0,0,"","","System","","","","","","",""
"25.6.2.5","greatCircleDistance",0,0,"","","System","","","","","","",""
"25.6.2.5","isIPv4String",0,0,"","","System","","","","","","",""
"25.6.2.5","JSON_QUERY",0,0,"","","System","","","","","","",""
"25.6.2.5","greater",0,0,"","","System","Compares two values for greater-than relation.","greater(a, b)
    -- a > b","- `a` — First value.<sup>[*](#comparison-rules)</sup>
- `b` — Second value.<sup>[*](#comparison-rules)</sup>
","Returns `1` if `a` is greater than `b`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint/)","**Usage example**

```sql title=Query
SELECT 2 > 1, 1 > 2;
```

```response title=Response
┌─greater(2, 1)─┬─greater(1, 2)─┐
│             1 │             0 │
└───────────────┴───────────────┘
```

","1.1","Comparison"
"25.6.2.5","substringIndexUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonsSymDifferenceCartesian",0,0,"","","System","","","","","","",""
"25.6.2.5","gccMurmurHash",0,0,"","","System","","","","","","",""
"25.6.2.5","reverseUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","murmurHash3_64",0,0,"","","System","","","","","","",""
"25.6.2.5","greaterOrEquals",0,0,"","","System","Compares two values for greater-than-or-equal-to relation.","greaterOrEquals(a, b)
    -- a >= b","- `a` — First value.<sup>[*](#comparison-rules)</sup>
- `b` — Second value.<sup>[*](#comparison-rules)</sup>
","Returns `1` if `a` is greater than or equal to `b`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint/)","**Usage example**

```sql title=Query
SELECT 2 >= 1, 2 >= 2, 1 >= 2;
```

```response title=Response
┌─greaterOrEquals(2, 1)─┬─greaterOrEquals(2, 2)─┬─greaterOrEquals(1, 2)─┐
│                     1 │                     1 │                     0 │
└───────────────────────┴───────────────────────┴───────────────────────┘
```

","1.1","Comparison"
"25.6.2.5","parseDateTime64BestEffortUSOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","h3kRing",0,0,"","","System","","","","","","",""
"25.6.2.5","moduloLegacy",0,0,"","","System","","","","","","",""
"25.6.2.5","printf",0,0,"","","System","
The `printf` function formats the given string with the values (strings, integers, floating-points etc.) listed in the arguments, similar to printf function in C++.
The format string can contain format specifiers starting with `%` character.
Anything not contained in `%` and the following format specifier is considered literal text and copied verbatim into the output.
Literal `%` character can be escaped by `%%`.","","","","**sum**

```sql title=Query
select printf('%%%s %s %d', 'Hello', 'World', 2024);
```

```response title=Response
%Hello World 2024
```

","","String Replacement"
"25.6.2.5","CRC32",0,1,"","","System","","","","","","",""
"25.6.2.5","domainWithoutWWWRFC",0,0,"","","System","Similar to `domainWithoutWWW` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.6.2.5","arrayEnumerateDenseRanked",0,0,"","","System","Returns an array the same size as the source array, indicating where each element first appears in the source array. It allows for enumeration of a multidimensional array with the ability to specify how deep to look inside the array.","arrayEnumerateDenseRanked(clear_depth, arr, max_array_depth)","- `clear_depth` — Enumerate elements at the specified level separately. [`(U)Int*`](../data-types/int-uint.md) less than or equal to `max_arr_depth`.
- `arr` — N-dimensional array to enumerate. [`Array(T)`](/sql-reference/data-types/array).
- `max_array_depth` — The maximum effective depth. Positive [`(U)Int*`](../data-types/int-uint.md) less than or equal to the depth of `arr`.
","Returns an array denoting where each element first appears in the source array. [Array](/sql-reference/data-types/array).","**Basic usage**

```sql title=Query
-- With clear_depth=1 and max_array_depth=1, the result is identical to what arrayEnumerateDense would give.

SELECT arrayEnumerateDenseRanked(1,[10, 20, 10, 30],1);
```

```response title=Response
[1,2,1,3]
```

**Usage with a multidimensional array**

```sql title=Query
-- In this example, arrayEnumerateDenseRanked is used to obtain an array indicating, for each element of the
-- multidimensional array, what its position is among elements of the same value.
-- For the first row of the passed array, [10, 10, 30, 20], the corresponding first row of the result is [1, 1, 2, 3],
-- indicating that 10 is the first number encountered in position 1 and 2, 30 the second number encountered in position 3
-- and 20 is the third number encountered in position 4.
-- For the second row, [40, 50, 10, 30], the corresponding second row of the result is [4,5,1,2], indicating that 40
-- and 50 are the fourth and fifth numbers encountered in position 1 and 2 of that row, that another 10
-- (the first encountered number) is in position 3 and 30 (the second number encountered) is in the last position.

SELECT arrayEnumerateDenseRanked(1,[[10,10,30,20],[40,50,10,30]],2);
```

```response title=Response
[[1,1,2,3],[4,5,1,2]]
```

**Example with increased clear_depth**

```sql title=Query
-- Changing clear_depth=2 results in the enumeration occurring separately for each row anew.

SELECT arrayEnumerateDenseRanked(2,[[10,10,30,20],[40,50,10,30]],2);
```

```response title=Response
[[1, 1, 2, 3], [1, 2, 3, 4]]
```

","20.1","Arrays"
"25.6.2.5","h3HexAreaM2",0,0,"","","System","","","","","","",""
"25.6.2.5","toYYYYMMDDhhmmss",0,0,"","","System","","","","","","",""
"25.6.2.5","h3NumHexagons",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsUUID",0,0,"","","System","","","","","","",""
"25.6.2.5","simpleJSONExtractFloat",0,0,"","","System","Parses Float64 from the value of the field named field_name. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.","simpleJSONExtractFloat(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the number parsed from the field if the field exists and contains a number, 0 otherwise.","**simple**

```sql title=Query
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractFloat(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
0
-4000
0
-3.4
5
```

","","JSON"
"25.6.2.5","h3EdgeLengthM",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayRotateLeft",0,0,"","","System","Rotates an array to the left by the specified number of elements. Negative values of `n` are treated as rotating to the right by the absolute value of the rotation.","arrayRotateLeft(arr, n)","- `arr` — The array for which to rotate the elements.[`Array(T)`](/sql-reference/data-types/array).
- `n` — Number of elements to rotate. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint).
","An array rotated to the left by the specified number of elements. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayRotateLeft([1,2,3,4,5,6], 2) as res;
```

```response title=Response
[3,4,5,6,1,2]
```

**Negative value of n**

```sql title=Query
SELECT arrayRotateLeft([1,2,3,4,5,6], -2) as res;
```

```response title=Response
[5,6,1,2,3,4]
```

","23.8","Arrays"
"25.6.2.5","changeMonth",0,0,"","","System","Changes the month component of a date or date time.","changeMonth(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime.","","","Dates and Times"
"25.6.2.5","cutToFirstSignificantSubdomainWithWWWRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainWithWWW` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.6.2.5","intDiv",0,0,"","","System","
Performs an integer division of two values `x` by `y`. In other words it
computes the quotient rounded down to the next smallest integer.

The result has the same width as the dividend (the first parameter).

An exception is thrown when dividing by zero, when the quotient does not fit
in the range of the dividend, or when dividing a minimal negative number by minus one.
    ","intDiv(x, y)","- `x` — Left hand operand.
- `y` — Right hand operand.
","Result of integer division of `x` and `y`","**Integer division of two floats**

```sql title=Query
SELECT intDiv(toFloat64(1), 0.001) AS res, toTypeName(res)
```

```response title=Response
┌──res─┬─toTypeName(intDiv(toFloat64(1), 0.001))─┐
│ 1000 │ Int64                                   │
└──────┴─────────────────────────────────────────┘
```

**Quotient does not fit in the range of the dividend**

```sql title=Query
SELECT
intDiv(1, 0.001) AS res,
toTypeName(res)
```

```response title=Response
Received exception from server (version 23.2.1):
Code: 153. DB::Exception: Received from localhost:9000. DB::Exception:
Cannot perform integer division, because it will produce infinite or too
large number: While processing intDiv(1, 0.001) AS res, toTypeName(res).
(ILLEGAL_DIVISION)
```

","1.1","Arithmetic"
"25.6.2.5","dateTimeToSnowflake",0,0,"","","System","","","","","","",""
"25.6.2.5","domain",0,0,"","","System","
Extracts the hostname from a URL.

The URL can be specified with or without a scheme.
If the argument can't be parsed as URL, the function returns an empty string.
        ","","","","**domain**

```sql title=Query
SELECT domain('svn+ssh://some.svn-hosting.com:80/repo/trunk')
```

```response title=Response

```

","","URL"
"25.6.2.5","cutToFirstSignificantSubdomain",0,0,"","","System","Returns the part of the domain that includes top-level subdomains up to the ""first significant subdomain"" (see documentation of the `firstSignificantSubdomain`).","","","","**cutToFirstSignificantSubdomain1**

```sql title=Query
SELECT cutToFirstSignificantSubdomain('https://news.clickhouse.com.tr/')
```

```response title=Response

```

**cutToFirstSignificantSubdomain2**

```sql title=Query
SELECT cutToFirstSignificantSubdomain('www.tr')
```

```response title=Response

```

**cutToFirstSignificantSubdomain3**

```sql title=Query
SELECT cutToFirstSignificantSubdomain('tr')
```

```response title=Response

```

","","URL"
"25.6.2.5","getMacro",0,0,"","","System","","","","","","",""
"25.6.2.5","toYear",0,0,"","","System","
Returns the year component (AD) of a `Date` or `DateTime` value.
    ","toYear(datetime)","- `datetime` — A `Date` or `DateTime` value to get the year from. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","Returns the year of the given Date or DateTime. [`UInt16`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toYear(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toYear(toDateTime('2023-04-21 10:20:30'))─┐
    │                                     2023  │
    └───────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","log",0,1,"","","System","","","","","","",""
"25.6.2.5","errorCodeToName",0,0,"","","System","","","","","","",""
"25.6.2.5","toTimeOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","h3GetDestinationIndexFromUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.6.2.5","toDate32OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","addMinutes",0,0,"","","System","
Adds a specified number of minutes to a date, a date with time or a string-encoded date or date with time.
    ","addMinutes(datetime, num)","- `datetime` — Date or date with time to add specified number of minutes to. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of minutes to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` minutes. [`DateTime`](../data-types/datetime.md)/[`DateTime64(3)`](../data-types/datetime64.md).","**Add minutes to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addMinutes(date, 20) AS add_minutes_with_date,
    addMinutes(date_time, 20) AS add_minutes_with_date_time,
    addMinutes(date_time_string, 20) AS add_minutes_with_date_time_string
```

```response title=Response
┌─add_minutes_with_date─┬─add_minutes_with_date_time─┬─add_minutes_with_date_time_string─┐
│   2024-01-01 00:20:00 │        2024-01-01 00:20:00 │           2024-01-01 00:20:00.000 │
└───────────────────────┴────────────────────────────┴───────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 minute)
```

```response title=Response
┌─plus(CAST('1⋯Minute(10))─┐
│      1998-06-16 00:10:00 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","roundDuration",0,0,"","","System","","","","","","",""
"25.6.2.5","URLPathHierarchy",0,0,"","","System","","","","","","",""
"25.6.2.5","h3HexRing",0,0,"","","System","","","","","","",""
"25.6.2.5","h3GetUnidirectionalEdgesFromHexagon",0,0,"","","System","","","","","","",""
"25.6.2.5","simpleJSONExtractUInt",0,0,"","","System","Parses UInt64 from the value of the field named field_name. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.","simpleJSONExtractUInt(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the number parsed from the field if the field exists and contains a number, 0 otherwise.","**simple**

```sql title=Query
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""4e3""}');
INSERT INTO jsons VALUES ('{""foo"":3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractUInt(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
0
4
0
3
5
```

","","JSON"
"25.6.2.5","getSettingOrDefault",0,0,"","","System","
Returns the current value of a custom setting or returns the default value specified in the 2nd argument if the custom setting is not set in the current profile.
","getSettingOrDefault('custom_setting', default_value)","- `custom_setting` — The setting name. Type: String.
- `default_value` — Value to return if custom_setting is not set. Value may be of any data type or Null.
","The setting's current value or the default_value if setting is not set.","**getSettingOrDefault**

```sql title=Query
SELECT getSettingOrDefault('custom_undef1', 'my_value');
```

```response title=Response
my_value
```

**getSettingOrDefault**

```sql title=Query
SELECT getSettingOrDefault('custom_undef1', 100);
```

```response title=Response
100
```

**getSettingOrDefault**

```sql title=Query
SELECT getSettingOrDefault('custom_undef1', NULL);
```

```response title=Response
NULL
```

","","Other"
"25.6.2.5","ngramMinHashArgCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramMinHashUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","compareSubstrings",0,0,"","","System","
                This function compares parts of two strings directly, without the need to copy the parts of the string into new columns.
                ","compareSubstrings(str1, str2, str1_off, str2_off, num_bytes)","- `string1` — Required. The string to compare.
- `string2` — Required. The string to compare.
- `string1_offset` — Positive number. The starting position (zero-based index) in `str1` from which the comparison begins.
- `string2_offset` — Positive number. The starting position (zero-based index) in `str2` from which the comparison begins.
- `num_bytes` — The number of bytes to compare in both strings, starting from their respective offsets.
","-1 if the substring from str1 is lexicographically smaller than the substring from str2, 0 if the substrings are equal, 1 if the substring from str1 is lexicographically greater than the substring from str2.","**typical**

```sql title=Query
SELECT compareSubstrings('123', '123', 0, 0, 3)
```

```response title=Response
┌─compareSubtr⋯', 0, 0, 3)─┐
             1. │                        0 │
                └──────────────────────────┘
```

","","String"
"25.6.2.5","plus",0,0,"","","System","
Calculates the sum of two values `x` and `y`. Alias: `x + y` (operator).
It is possible to add an integer and a date or date with time. The former
operation increments the number of days in the date, the latter operation
increments the number of seconds in the date with time.
    ","plus(x, y)","- `x` — Left hand operand.
- `y` — Right hand operand.
","The sum of x and y","**Adding two numbers**

```sql title=Query
SELECT plus(5,5)
```

```response title=Response
10
```

**Adding an integer and a date**

```sql title=Query
SELECT plus(toDate('2025-01-01'),5)
```

```response title=Response
2025-01-06
```

","1.1","Arithmetic"
"25.6.2.5","readWKTMultiPolygon",0,0,"","","System","","","","","","",""
"25.6.2.5","subtractYears",0,0,"","","System","
Subtracts a specified number of years from a date, a date with time or a string-encoded date or date with time.
    ","subtractYears(datetime, num)","- `datetime` — Date or date with time to subtract specified number of years from. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of years to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` years. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Subtract years from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractYears(date, 1) AS subtract_years_with_date,
    subtractYears(date_time, 1) AS subtract_years_with_date_time,
    subtractYears(date_time_string, 1) AS subtract_years_with_date_time_string
```

```response title=Response
┌─subtract_years_with_date─┬─subtract_years_with_date_time─┬─subtract_years_with_date_time_string─┐
│               2023-01-01 │           2023-01-01 00:00:00 │              2023-01-01 00:00:00.000 │
└──────────────────────────┴───────────────────────────────┴──────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 year)
```

```response title=Response
┌─minus(CAST('⋯alYear(10))─┐
│               1988-06-16 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","detectLanguageMixed",0,0,"","","System","","","","","","",""
"25.6.2.5","acosh",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayPushBack",0,0,"","","System","Adds one item to the end of the array.","arrayPushBack(arr, x)","- `arr` — The array for which to add value `x` to the end of. [`Array(T)`](/sql-reference/data-types/array).
- `x` — 
- Single value to add to the end of the array. [`Array(T)`](/sql-reference/data-types/array).

:::note
- Only numbers can be added to an array with numbers, and only strings can be added to an array of strings.
- When adding numbers, ClickHouse automatically sets the type of `x` for the data type of the array.
- Can be `NULL`. The function adds a `NULL` element to an array, and the type of array elements converts to `Nullable`.

For more information about the types of data in ClickHouse, see [Data types](/sql-reference/data-types).
:::
    
","Returns an array identical to `arr` but with an additional value `x` at the end of the array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayPushBack(['a'], 'b') AS res;
```

```response title=Response
['a','b']
```

","1.1","Arrays"
"25.6.2.5","domainWithoutWWW",0,0,"","","System","
Extracts the hostname from a URL, removing the leading ""www."" if present.

The URL can be specified with or without a scheme.
If the argument can't be parsed as URL, the function returns an empty string.
        ","","","","**domainWithoutWWW**

```sql title=Query
SELECT domainWithoutWWW('https://www.clickhouse.com')
```

```response title=Response

```

","","URL"
"25.6.2.5","hasSubsequenceCaseInsensitive",0,1,"","","System","","","","","","",""
"25.6.2.5","ngramSearchUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONExtractBool",0,0,"","","System","","","","","","",""
"25.6.2.5","tupleHammingDistance",0,0,"","","System","","","","","","",""
"25.6.2.5","readWKBMultiPolygon",0,0,"","","System","
        Parses a Well-Known Binary (WKB) representation of a MultiPolygon geometry and returns it in the internal ClickHouse format.
        ","readWKBMultiPolygon(wkt_string)","- `wkb_string` — The input WKB string representing a MultiPolygon geometry.
","The function returns a ClickHouse internal representation of the MultiPolygon geometry.","**first call**

```sql title=Query
SELECT readWKBMultiPolygon(unhex('0106000000020000000103000000020000000500000000000000000000400000000000000000000000000000244000000000000000000000000000002440000000000000244000000000000000000000000000002440000000000000004000000000000000000500000000000000000010400000000000001040000000000000144000000000000010400000000000001440000000000000144000000000000010400000000000001440000000000000104000000000000010400103000000010000000400000000000000000024c000000000000024c000000000000024c000000000000022c000000000000022c0000000000000244000000000000024c000000000000024c0'));
```

```response title=Response
┌─readWKBMultiPolygon(unhex'01060000000200000001030000000200000005000000000000000000004000000000000000000000000000002440...'))─┐
        │ [[[(2,0),(10,0),(10,10),(0,10),(2,0)],[(4,4),(5,4),(5,5),(4,5),(4,4)]],[[(-10,-10),(-10,-9),(-9,10),(-10,-10)]]]             │
        └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.6.2.5","h3ExactEdgeLengthRads",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetDateTime",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the DateTime if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","h3ToGeoBoundary",0,0,"","","System","","","","","","",""
"25.6.2.5","positionCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayShiftRight",0,0,"","","System","
Shifts an array to the right by the specified number of elements.
New elements are filled with the provided argument or the default value of the array element type.
If the number of elements is negative, the array is shifted to the left.
    ","arrayShiftRight(arr, n[, default])","- `arr` — The array for which to shift the elements. [`Array(T)`](/sql-reference/data-types/array).
- `n` — Number of elements to shift. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint).
- `default` — Optional. Default value for new elements.
","An array shifted to the right by the specified number of elements. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayShiftRight([1,2,3,4,5,6], 2) as res;
```

```response title=Response
[0,0,1,2,3,4]
```

**Negative value of n**

```sql title=Query
SELECT arrayShiftRight([1,2,3,4,5,6], -2) as res;
```

```response title=Response
[3,4,5,6,0,0]
```

**Using a default value**

```sql title=Query
SELECT arrayShiftRight([1,2,3,4,5,6], 2, 42) as res;
```

```response title=Response
[42,42,1,2,3,4]
```

","23.8","Arrays"
"25.6.2.5","h3ToString",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayRotateRight",0,0,"","","System","Rotates an array to the right by the specified number of elements. Negative values of `n` are treated as rotating to the left by the absolute value of the rotation.","arrayRotateRight(arr, n)","- `arr` — The array for which to rotate the elements.[`Array(T)`](/sql-reference/data-types/array).
- `n` — Number of elements to rotate. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint).
","An array rotated to the right by the specified number of elements. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayRotateRight([1,2,3,4,5,6], 2) as res;
```

```response title=Response
[5,6,1,2,3,4]
```

**Negative value of n**

```sql title=Query
SELECT arrayRotateRight([1,2,3,4,5,6], -2) as res;
```

```response title=Response
[3,4,5,6,1,2]
```

","23.8","Arrays"
"25.6.2.5","hasSubsequence",0,1,"","","System","","","","","","",""
"25.6.2.5","JSON_VALUE",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONExtract",0,0,"","","System","","","","","","",""
"25.6.2.5","tumbleStart",0,0,"","","System","","","","","","",""
"25.6.2.5","bitShiftRight",0,0,"","","System","
Shifts the binary representation of a value to the right by a specified number of bit positions.

A `FixedString` or a `String` is treated as a single multibyte value.

Bits of a `FixedString` value are lost as they are shifted out.
On the contrary, a `String` value is extended with additional bytes, so no bits are lost.
","bitShiftRight(a, N)","- `a` — A value to shift. [`(U)Int*`](../data-types/int-uint.md)/[`String`](../data-types/string.md)/[`FixedString`](../data-types/fixedstring.md).
- `N` — The number of positions to shift. [`UInt8/16/32/64`](../data-types/int-uint.md).
","Returns the shifted value with type equal to that of `a`.","**Usage example with binary encoding**

```sql title=Query
SELECT 101 AS a, bin(a), bitShiftRight(a, 2) AS a_shifted, bin(a_shifted);
```

```response title=Response
┌───a─┬─bin(101)─┬─a_shifted─┬─bin(bitShiftRight(101, 2))─┐
│ 101 │ 01100101 │        25 │ 00011001                   │
└─────┴──────────┴───────────┴────────────────────────────┘
```

**Usage example with hexadecimal encoding**

```sql title=Query
SELECT 'abc' AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);
```

```response title=Response
┌─a───┬─hex('abc')─┬─a_shifted─┬─hex(bitShiftRight('abc', 12))─┐
│ abc │ 616263     │           │ 0616                          │
└─────┴────────────┴───────────┴───────────────────────────────┘
```

**Usage example with Fixed String encoding**

```sql title=Query
SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftRight(a, 12) AS a_shifted, hex(a_shifted);
```

```response title=Response
┌─a───┬─hex(toFixedString('abc', 3))─┬─a_shifted─┬─hex(bitShiftRight(toFixedString('abc', 3), 12))─┐
│ abc │ 616263                       │           │ 000616                                          │
└─────┴──────────────────────────────┴───────────┴─────────────────────────────────────────────────┘
```

","1.1","Bit"
"25.6.2.5","today",0,0,"","","System","","","","","","",""
"25.6.2.5","tryBase58Decode",0,0,"","","System","","","","","","",""
"25.6.2.5","flattenTuple",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonsWithinSpherical",0,0,"","","System","","","","","","",""
"25.6.2.5","tryPunycodeDecode",0,0,"","","System","
Computes a Punycode representation of a string. Returns an empty string if the input is not valid Punycode.","punycodeDecode(str)","- `str` — A Punycode-encoded string
","The plaintext representation [String](/sql-reference/data-types/string.md).","**simple**

```sql title=Query
SELECT tryPunycodeDecode('Mnchen-3ya') AS plain;
```

```response title=Response
┌─plain───┐
│ München │
└─────────┘
```

","","Encoding"
"25.6.2.5","L2Normalize",0,0,"","","System","","","","","","",""
"25.6.2.5","YYYYMMDDhhmmssToDateTime64",0,0,"","","System","
Converts a number containing the year, month, day, hour, minute, and second to a `DateTime64`.
This function is the opposite of function [`toYYYYMMDDhhmmss()`](/sql-reference/functions/date-time-functions#toYYYYMMDDhhmmss).
The output is undefined if the input does not encode a valid `DateTime64` value.
    ","YYYYMMDDhhmmssToDateTime64(YYYYMMDDhhmmss[, precision[, timezone]])","- `YYYYMMDDhhmmss` — Number containing the year, month, day, hour, minute, and second. [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `precision` — Optional. Precision for the fractional part (0-9). [`UInt8`](../data-types/int-uint.md).
- `timezone` — Optional. Timezone name. [`String`](../data-types/string.md).
","Returns a `DateTime64` value from the provided arguments. [`DateTime64`](../data-types/datetime64.md).","**Example**

```sql title=Query
SELECT YYYYMMDDhhmmssToDateTime64(20230911131415, 3, 'Asia/Istanbul');
```

```response title=Response
┌─YYYYMMDDhhmm⋯/Istanbul')─┐
│  2023-09-11 13:14:15.000 │
└──────────────────────────┘
```

","23.9","Dates and Times"
"25.6.2.5","pow",0,1,"","","System","","","","","","",""
"25.6.2.5","geohashesInBox",0,0,"","","System","","","","","","",""
"25.6.2.5","hasSubsequenceUTF8",0,1,"","","System","","","","","","",""
"25.6.2.5","rightPadUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","rightPad",0,0,"","","System","","","","","","",""
"25.6.2.5","aes_encrypt_mysql",0,0,"","","System","","","","","","",""
"25.6.2.5","hasTokenOrNull",0,0,"","","System","Performs lookup of needle in haystack using tokenbf_v1 index. Returns null if needle is ill-formed.","","","","","","String Search"
"25.6.2.5","dictGetUUIDOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UUID if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","hasToken",0,0,"","","System","Performs lookup of needle in haystack using tokenbf_v1 index.","","","","","","String Search"
"25.6.2.5","tan",0,1,"","","System","","","","","","",""
"25.6.2.5","idnaEncode",0,0,"","","System","
Computes an ASCII representation of an Internationalized Domain Name. Throws an exception in case of error.","idnaEncode(str)","- `str` — Input string
","An ASCII-encoded domain name [String](/sql-reference/data-types/string.md).","**simple**

```sql title=Query
SELECT idnaEncode('straße.münchen.de') AS ascii;
```

```response title=Response
┌─ascii───────────────────────────┐
│ xn--strae-oqa.xn--mnchen-3ya.de │
└─────────────────────────────────┘
```

","","Encoding"
"25.6.2.5","substring",0,1,"","","System","","","","","","",""
"25.6.2.5","regionHierarchy",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateTime64OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonsWithinCartesian",0,0,"","","System","","","","","","",""
"25.6.2.5","materialize",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimalString",0,1,"","","System","
Returns string representation of a number. First argument is the number of any numeric type,
second argument is the desired number of digits in fractional part. Returns String.

        ","","","","**toDecimalString**

```sql title=Query
SELECT toDecimalString(2.1456,2)
```

```response title=Response

```

","","Type Conversion"
"25.6.2.5","idnaDecode",0,0,"","","System","
Computes the Unicode representation of ASCII-encoded Internationalized Domain Name.","idnaDecode(str)","- `str` — Input string
","An Unicode-encoded domain name [String](/sql-reference/data-types/string.md).","**simple**

```sql title=Query
SELECT idnaDecode('xn--strae-oqa.xn--mnchen-3ya.de') AS unicode;
```

```response title=Response
┌─unicode───────────┐
│ straße.münchen.de │
└───────────────────┘
```

","","Encoding"
"25.6.2.5","readWKTMultiLineString",0,0,"","","System","
Parses a Well-Known Text (WKT) representation of a MultiLineString geometry and returns it in the internal ClickHouse format.
","readWKTMultiLineString(wkt_string)","- `wkt_string` — The input WKT string representing a MultiLineString geometry.
","The function returns a ClickHouse internal representation of the multilinestring geometry.","**first call**

```sql title=Query
SELECT readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))');
```

```response title=Response
┌─readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))')─┐
│ [[(1,1),(2,2),(3,3)],[(4,4),(5,5),(6,6)]]                                    │
└──────────────────────────────────────────────────────────────────────────────┘
```

**second call**

```sql title=Query
SELECT toTypeName(readWKTLineString('MULTILINESTRING ((1 1, 2 2, 3 3, 1 1))'));
```

```response title=Response
┌─toTypeName(readWKTLineString('MULTILINESTRING ((1 1, 2 2, 3 3, 1 1))'))─┐
│ MultiLineString                                                         │
└─────────────────────────────────────────────────────────────────────────┘
```

","","Geo"
"25.6.2.5","ignore",0,0,"","","System","","","","","","",""
"25.6.2.5","h3GetUnidirectionalEdgeBoundary",0,0,"","","System","","","","","","",""
"25.6.2.5","globalNullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.6.2.5","fromDaysSinceYearZero32",0,0,"","","System","
Given the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601 return a corresponding date.
The calculation is the same as in MySQL's FROM_DAYS() function.
","","","","**typical**

```sql title=Query
SELECT fromDaysSinceYearZero32(713569)
```

```response title=Response
2023-09-08
```

","","Dates and Times"
"25.6.2.5","globalNotInIgnoreSet",0,0,"","","System","","","","","","",""
"25.6.2.5","splitByChar",0,0,"","","System","","","","","","",""
"25.6.2.5","toRelativeDayNum",0,0,"","","System","","","","","","",""
"25.6.2.5","notInIgnoreSet",0,0,"","","System","","","","","","",""
"25.6.2.5","globalInIgnoreSet",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayConcat",0,0,"","","System","Combines arrays passed as arguments.","arrayConcat(arr1 [, arr2, ... , arrN])","- `arr1 [, arr2, ... , arrN]` — N number of arrays to concatenate. [`Array(T)`](/sql-reference/data-types/array).
","Returns a single combined array from the provided array arguments.","**Usage example**

```sql title=Query
SELECT arrayConcat([1, 2], [3, 4], [5, 6]) AS res
```

```response title=Response
[1,2,3,4,5,6]
```

","1.1","Arrays"
"25.6.2.5","globalNotNullIn",0,0,"","","System","","","","","","",""
"25.6.2.5","sqrt",0,1,"","","System","","","","","","",""
"25.6.2.5","notNullIn",0,0,"","","System","","","","","","",""
"25.6.2.5","globalNullIn",0,0,"","","System","","","","","","",""
"25.6.2.5","nullIn",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetHierarchy",0,0,"","","System","
Creates an array, containing all the parents of a key in the hierarchical dictionary.
Accepts 2 parameters: name of the dictionary, key value - expression returning a UInt64-type value.
Returned value: parents for the key, type of Array(UInt64)
","","","","","","Dictionary"
"25.6.2.5","globalIn",0,0,"","","System","","","","","","",""
"25.6.2.5","indexHint",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateTime32",0,0,"","","System","","","","","","",""
"25.6.2.5","arraySplit",0,0,"","","System","Split a source array into multiple arrays. When `func(x [, y1, ..., yN])` returns something other than zero, the array will be split to the left of the element. The array will not be split before the first element.","arraySplit(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`).[Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to split [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array of arrays. [`Array(Array(T))`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arraySplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res
```

```response title=Response
[[1, 2, 3], [4, 5]]
```

","20.1","Arrays"
"25.6.2.5","initcapUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramDistanceCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","connectionId",0,1,"","","System","","","","","","",""
"25.6.2.5","startsWith",0,0,"","","System","","","","","","",""
"25.6.2.5","initialQueryID",0,0,"","","System","","","","","","",""
"25.6.2.5","murmurHash2_64",0,0,"","","System","","","","","","",""
"25.6.2.5","parseReadableSizeOrNull",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns `NULL`","parseReadableSizeOrNull(x)","- `x` — Readable size with ISO/IEC 80000-13  or decimal byte unit ([String](../../sql-reference/data-types/string.md))
","Number of bytes, rounded up to the nearest integer, or NULL if unable to parse the input (Nullable([UInt64](../../sql-reference/data-types/int-uint.md)))","**basic**

```sql title=Query
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes, parseReadableSizeOrNull(readable_sizes) AS sizes;
```

```response title=Response
┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
│ invalid        │    ᴺᵁᴸᴸ │
└────────────────┴─────────┘
```

","","Other"
"25.6.2.5","h3GetBaseCell",0,0,"","","System","","","","","","",""
"25.6.2.5","bitmapHasAll",0,0,"","","System","Checks if the first bitmap contains all set bits of the second bitmap.","bitmapHasAll(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns `1` if all set bits of the second bitmap are present in the first bitmap, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint/)","**Usage example**

```sql title=Query
SELECT bitmapHasAll(bitmapBuild([1, 2, 3]), bitmapBuild([2, 3])) AS res;
```

```response title=Response
┌─res─┐
│  1  │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","base58Decode",0,0,"","","System","","","","","","",""
"25.6.2.5","intDivOrNull",0,0,"","","System","
Same as `intDiv` but returns NULL when dividing by zero or when dividing a
minimal negative number by minus one.
    ","intDivOrNull(x, y)","- `x` — Left hand operand.
- `y` — Right hand operand.
","Result of integer division of `x` and `y`, or NULL.","**Integer division by zero**

```sql title=Query
SELECT intDivOrNull(1, 0)
```

```response title=Response
\N
```

**Dividing a minimal negative number by minus 1**

```sql title=Query
SELECT intDivOrNull(-9223372036854775808, -1)
```

```response title=Response
\N
```

","25.5","Arithmetic"
"25.6.2.5","isIPAddressInRange",0,0,"","","System","","","","","","",""
"25.6.2.5","JSON_EXISTS",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetDescendants",0,0,"","","System","
Returns all descendants as if dictGetChildren function was applied level times recursively.
Accepts 3 parameters: name of the dictionary, key value - expression returning a UInt64-type value, level — hierarchy level - If level = 0 returns all descendants to the end - UInt8
Returned value: descendants for the key, type of Array(UInt64)
","","","","","","Dictionary"
"25.6.2.5","readWKBMultiLineString",0,0,"","","System","
            Parses a Well-Known Binary (WKB) representation of a MultiLineString geometry and returns it in the internal ClickHouse format.
            ","readWKBMultiLineString(wkt_string)","- `wkb_string` — The input WKB string representing a MultiLineString geometry.
","The function returns a ClickHouse internal representation of the multilinestring geometry.","**first call**

```sql title=Query
SELECT readWKTMultiLineString(unhex('010500000002000000010200000003000000000000000000f03f000000000000f03f0000000000000040000000000000004000000000000008400000000000000840010200000003000000000000000000104000000000000010400000000000001440000000000000144000000000000018400000000000001840'));
```

```response title=Response
┌─readWKBMultiLineString('unhex('010500000002000000010200000003000000000...'))─┐
            │ [[(1,1),(2,2),(3,3)],[(4,4),(5,5),(6,6)]]                                    │
            └──────────────────────────────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.6.2.5","mapContainsValue",0,0,"","","System","Checks whether the map has the specified value.","","","","**mapContainsValue**

```sql title=Query
SELECT mapContainsValue(map('k1', 'v1', 'k2', 'v2'), 'v1')
```

```response title=Response

```

","25.5","Map"
"25.6.2.5","dictGetChildren",0,0,"","","System","
Returns first-level children as an array of indexes. It is the inverse transformation for dictGetHierarchy.
Accepts 2 parameters: name of the dictionary, key value - expression returning a UInt64-type value.
Returned value: first-level descendants for the key, type of Array(UInt64)
","","","","","","Dictionary"
"25.6.2.5","dictIsIn",0,0,"","","System","
Checks the ancestor of a key through the whole hierarchical chain in the dictionary.
Accepts 3 parameters: name of the dictionary, key to be checked - expression returning a UInt64-type value, alleged ancestor of the key - expression returning a UInt64-type.
Returned value: 0 if key is not a child of the ancestor, 1 if key is a child of the ancestor or if key is the ancestor, type of UInt8
","","","","","","Dictionary"
"25.6.2.5","dictGetStringOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the String if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","evalMLMethod",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetIPv6OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the IPv6 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","_CAST",0,1,"","","System","","","","","","",""
"25.6.2.5","dictGetIPv4OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the IPv4 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","UTCTimestamp",0,1,"","","System","
Returns the current date and time at the moment of query analysis. The function is a constant expression.
Same as `now('UTC')`. Was added only for MySQL support. `now` is preferred.

Example:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT UTCTimestamp();
```

```response title=Response

```

","","Dates and Times"
"25.6.2.5","dictGetFloat64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Float64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","s2RectAdd",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetFloat32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Float32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","keccak256",0,0,"","","System","Calculates the Keccak-256 cryptographic hash of the given string.
        This hash function is widely used in blockchain applications, particularly Ethereum.","SELECT keccak256(message)","- `message` — The input [String](../../sql-reference/data-types/string.md).
","A [FixedString(32)](../../sql-reference/data-types/fixedstring.md) containing the 32-byte Keccak-256 hash of the input string.","****

```sql title=Query
SELECT hex(keccak256('hello'))
```

```response title=Response
┌─hex(keccak256('hello'))──────────────────────────────────────────┐
│ 1C8AFF950685C2ED4BC3174F3472287B56D9517B9C948127319A09A7A36DEAC8 │
└──────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.6.2.5","dictGetInt64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","bitTestAll",0,0,"","","System","
Returns result of the [logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction) (AND operator) of all bits at the given positions.
Counts right-to-left, starting at 0.

The logical AND between two bits is true if and only if both input bits are true.
    ","bitTestAll(a, index1[, index2, ... , indexN])","- `a` — An integer value. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint).
- `index1[, index2, ... , indexN]` — One or multiple positions of bits. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint).
","Returns the result of the logical conjunction. [`UInt8`](../data-types/int-uint.md).","**Usage example 1**

```sql title=Query
SELECT bitTestAll(43, 0, 1, 3, 5);
```

```response title=Response
┌─bin(43)──┬─bitTestAll(43, 0, 1, 3, 5)─┐
│ 00101011 │                          1 │
└──────────┴────────────────────────────┘
```

**Usage example 2**

```sql title=Query
SELECT bitTestAll(43, 0, 1, 3, 5, 2);
```

```response title=Response
┌─bin(43)──┬─bitTestAll(4⋯1, 3, 5, 2)─┐
│ 00101011 │                        0 │
└──────────┴──────────────────────────┘
```

","1.1","Bit"
"25.6.2.5","normalizedQueryHash",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetInt32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","addressToLine",0,0,"","","System","","","","","","",""
"25.6.2.5","globalNotIn",0,0,"","","System","","","","","","",""
"25.6.2.5","dateTime64ToSnowflake",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetInt8OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int8 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","wordShingleMinHashCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetDateOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Date if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","dictGetUInt64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","dictGetUInt32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","h3ExactEdgeLengthM",0,0,"","","System","","","","","","",""
"25.6.2.5","countSubstringsCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","h3IsPentagon",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetUInt16OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt16 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","dictGetString",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the String if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","dictGetIPv6",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the IPv6 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","dictGetIPv4",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the IPv4 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","multiSearchFirstPosition",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetDate",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Date if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","reinterpretAsInt32",0,0,"","","System","","","","","","",""
"25.6.2.5","YYYYMMDDToDate32",0,1,"","","System","
Converts a number containing the year, month and day number to a `Date32`.
This function is the opposite of function [`toYYYYMMDD()`](/sql-reference/functions/date-time-functions#toYYYYMMDD).
The output is undefined if the input does not encode a valid `Date32` value.
    ","YYYYMMDDToDate32(YYYYMMDD)","- `YYYYMMDD` — Number containing the year, month and day. [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
","Returns a `Date32` value from the provided arguments. [`Date32`](../data-types/date32.md).","**Example**

```sql title=Query
SELECT YYYYMMDDToDate32(20000507);
```

```response title=Response
┌─YYYYMMDDToDate32(20000507)─┐
│                 2000-05-07 │
└────────────────────────────┘
```

","23.9","Dates and Times"
"25.6.2.5","dictGetFloat64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Float64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","greatCircleAngle",0,0,"","","System","","","","","","",""
"25.6.2.5","IPv6StringToNum",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetInt64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","min2",0,1,"","","System","
    Returns the smaller of two numeric values `x` and `y`. The returned value is of type Float64.
    ","min2(x, y)","- `x` — First value
- `y` — Second value
","Returns the smaller value of `x` and `y`","**Usage example**

```sql title=Query
SELECT min2(-1, 2)
```

```response title=Response
-1
```

","21.11","Arithmetic"
"25.6.2.5","dictGetInt16",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int16 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","isValidUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","h3PointDistKm",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetInt8",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int8 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","dictGetUInt64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","dictGetUInt32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","dictGetAll",0,0,"","","System","
Retrieves all values from a dictionary corresponding to the given key values.

Accepts 3 or 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- [optional] maximum number of values to return for each attribute;

Returned value: array of dictionary attribute values parsed in the attribute's data type if key is found, otherwise empty array.

Throws an exception if cannot parse the value of the attribute, the value does not match the attribute data type, or the dictionary doesn't support this function.
","","","","","","Dictionary"
"25.6.2.5","h3GetPentagonIndexes",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayInt16",0,0,"","","System","Returns an empty Int16 array","emptyArrayInt16()","","An empty Int16 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayInt16
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","replaceOne",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the attribute's data type if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","toFixedString",0,0,"","","System","","","","","","",""
"25.6.2.5","isNotDistinctFrom",0,0,"","","System","
Performs a null-safe comparison between two values. This function will consider
two `NULL` values as identical and will return `true`, which is distinct from the usual
equals behavior where comparing two `NULL` values would return `NULL`.

Currently, this function can only be used in the `JOIN ON` section of a query.
[example:join_on_is_not_distinct_from]
","","","","**join_on_is_not_distinct_from**

```sql title=Query
SELECT * FROM (SELECT NULL AS a) AS t1 JOIN (SELECT NULL AS b) AS t2 ON isNotDistinctFrom(t1.a, t2.b)
```

```response title=Response
NULL	NULL
```

","","Nullable"
"25.6.2.5","addWeeks",0,0,"","","System","
Adds a specified number of weeks to a date, a date with time or a string-encoded date or date with time.
    ","addWeeks(datetime, num)","- `datetime` — Date or date with time to add specified number of weeks to. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of weeks to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` weeks. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Add weeks to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addWeeks(date, 5) AS add_weeks_with_date,
    addWeeks(date_time, 5) AS add_weeks_with_date_time,
    addWeeks(date_time_string, 5) AS add_weeks_with_date_time_string
```

```response title=Response
┌─add_weeks_with_date─┬─add_weeks_with_date_time─┬─add_weeks_with_date_time_string─┐
│          2024-02-05 │      2024-02-05 00:00:00 │         2024-02-05 00:00:00.000 │
└─────────────────────┴──────────────────────────┴─────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 week)
```

```response title=Response
┌─plus(CAST('1⋯alWeek(10))─┐
│               1998-08-25 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","toDateTime64",0,0,"","","System","","","","","","",""
"25.6.2.5","yesterday",0,0,"","","System","","","","","","",""
"25.6.2.5","initializeAggregation",0,0,"","","System","","","","","","",""
"25.6.2.5","lgamma",0,0,"","","System","","","","","","",""
"25.6.2.5","h3PointDistM",0,0,"","","System","","","","","","",""
"25.6.2.5","runningDifferenceStartingWithFirstValue",0,0,"","","System","","","","","","",""
"25.6.2.5","h3CellAreaM2",0,0,"","","System","","","","","","",""
"25.6.2.5","normalizeUTF8NFC",0,0,"","","System","","","","","","",""
"25.6.2.5","like",0,0,"","","System","","","","","","",""
"25.6.2.5","cosineDistance",0,0,"","","System","","","","","","",""
"25.6.2.5","extractURLParameterNames",0,0,"","","System","","","","","","",""
"25.6.2.5","LinfNormalize",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalNanosecond",0,0,"","","System","","","","","","",""
"25.6.2.5","addDate",0,1,"","","System","","","","","","",""
"25.6.2.5","tupleIntDivOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","LpDistance",0,0,"","","System","","","","","","",""
"25.6.2.5","LinfDistance",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONSharedDataPathsWithTypes",0,0,"","","System","
Returns the list of paths that are stored in shared data structure and their types in each row in JSON column.
","JSONDynamicPathsWithTypes(json)","- `json` — JSON column
","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPathsWithTypes(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONDynamicPathsWithTypes(json)─┐
│ {""a"":""42""}                           │ {'a':'Int64'}                   │
│ {""b"":""Hello""}                        │ {}                              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))'}  │
└──────────────────────────────────────┴─────────────────────────────────┘
```

","","JSON"
"25.6.2.5","dictHas",0,0,"","","System","
Checks whether a key is present in a dictionary.
Accepts 2 parameters: name of the dictionary, key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration.
Returned value: 0 if there is no key, 1 if there is a key, type of UInt8
","","","","","","Dictionary"
"25.6.2.5","toDecimal256OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayInt64",0,0,"","","System","Returns an empty Int64 array","emptyArrayInt64()","","An empty Int64 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayInt64
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","arraySum",0,0,"","","System","
Returns the sum of elements in the source array.

If a lambda function `func` is specified, returns the sum of elements of the lambda results.
    ","arrayMax([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the sum of elements in the source array, or the sum of elements of the lambda results if provided.","**Basic example**

```sql title=Query
SELECT arraySum([1, 2, 3, 4]);
```

```response title=Response
10
```

**Usage with lambda function**

```sql title=Query
SELECT arraySum(x, y -> x+y, [1, 1, 1, 1], [1, 1, 1, 1]);
```

```response title=Response
8
```

","21.1","Arrays"
"25.6.2.5","L2SquaredDistance",0,0,"","","System","","","","","","",""
"25.6.2.5","h3GetResolution",0,0,"","","System","","","","","","",""
"25.6.2.5","encodeURLComponent",0,0,"","","System","","","","","","",""
"25.6.2.5","wordShingleMinHashArgCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","getSetting",0,0,"","","System","
Returns the current value of a custom setting.
","getSetting('custom_setting')","- `custom_setting` — The setting name. Type: String.
","The setting's current value.","**getSetting**

```sql title=Query
SET custom_a = 123; SELECT getSetting('custom_a');
```

```response title=Response
123
```

","","Other"
"25.6.2.5","LpNorm",0,0,"","","System","","","","","","",""
"25.6.2.5","toYYYYMM",0,0,"","","System","","","","","","",""
"25.6.2.5","L2Norm",0,0,"","","System","","","","","","",""
"25.6.2.5","extractTextFromHTML",0,0,"","","System","","","","","","",""
"25.6.2.5","L1Norm",0,0,"","","System","","","","","","",""
"25.6.2.5","fromUnixTimestamp64Milli",0,0,"","","System","","","","","","",""
"25.6.2.5","addSeconds",0,0,"","","System","
Adds a specified number of seconds to a date, a date with time or a string-encoded date or date with time.
    ","addSeconds(datetime, num)","- `datetime` — Date or date with time to add specified number of seconds to. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of seconds to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` seconds. [`DateTime`](../data-types/datetime.md)/[`DateTime64(3)`](../data-types/datetime64.md).","**Add seconds to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addSeconds(date, 30) AS add_seconds_with_date,
    addSeconds(date_time, 30) AS add_seconds_with_date_time,
    addSeconds(date_time_string, 30) AS add_seconds_with_date_time_string
```

```response title=Response
┌─add_seconds_with_date─┬─add_seconds_with_date_time─┬─add_seconds_with_date_time_string─┐
│   2024-01-01 00:00:30 │        2024-01-01 00:00:30 │           2024-01-01 00:00:30.000 │
└───────────────────────┴────────────────────────────┴───────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 second)
```

```response title=Response
┌─dateAdd('1998-06-16'::Date, INTERVAL 10 second)─┐
│                             1998-06-16 00:00:10 │
└─────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","tupleIntDivOrZeroByNumber",0,0,"","","System","","","","","","",""
"25.6.2.5","h3ToCenterChild",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetFloat32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Float32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","tupleModuloByNumber",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramSimHashUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayUInt8",0,0,"","","System","Returns an empty UInt8 array","emptyArrayUInt8()","","An empty UInt8 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayUInt8
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","dictGetUInt8",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt8 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","subtractTupleOfIntervals",0,0,"","","System","
Consecutively subtracts a tuple of intervals from a date or a date with time.
    ","subtractTupleOfIntervals(datetime, intervals)","- `datetime` — Date or date with time to subtract intervals from. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).
- `intervals` — Tuple of intervals to subtract from `datetime`. [`Tuple(T)`](../data-types/tuple.md)([`interval`](../data-types/special-data-types/interval.md)).
","Returns `date` with subtracted `intervals`. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Subtract tuple of intervals from date**

```sql title=Query
WITH toDate('2018-01-01') AS date SELECT subtractTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 YEAR))
```

```response title=Response
┌─subtractTupl⋯alYear(1)))─┐
│               2016-12-31 │
└──────────────────────────┘
```

","22.11","Dates and Times"
"25.6.2.5","addTupleOfIntervals",0,0,"","","System","
Consecutively adds a tuple of intervals to a date or a date with time.
    ","addTupleOfIntervals(datetime, intervals)","- `datetime` — Date or date with time to add intervals to. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).
- `intervals` — Tuple of intervals to add to `datetime`. [`tuple`](../data-types/tuple.md)([`interval`](../data-types/special-data-types/interval.md)).
","Returns `date` with added `intervals`. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Add tuple of intervals to date**

```sql title=Query
WITH toDate('2018-01-01') AS date
SELECT addTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 MONTH, INTERVAL 1 YEAR))
```

```response title=Response
┌─addTupleOfIntervals(date, (toIntervalDay(1), toIntervalMonth(1), toIntervalYear(1)))─┐
│                                                                           2019-02-02 │
└──────────────────────────────────────────────────────────────────────────────────────┘
```

","22.11","Dates and Times"
"25.6.2.5","__scalarSubqueryResult",0,0,"","","System","","","","","","",""
"25.6.2.5","tupleDivide",0,0,"","","System","","","","","","",""
"25.6.2.5","tupleMultiply",0,0,"","","System","","","","","","",""
"25.6.2.5","least",0,1,"","","System","
Returns the smallest value among the arguments.

- For arrays, returns the lexicographically least array.
- For DateTime types, the result type is promoted to the largest type (e.g., DateTime64 if mixed with DateTime32).
    ","least(x1[, x2, ..., xN])","- `x1[, x2, ..., xN]` — One or multiple values to compare. All arguments must be of comparable types.
","The least value among the arguments, promoted to the largest compatible type.","**Numeric types**

```sql title=Query
SELECT least(1, 2, toUInt8(3), 3.) AS result, toTypeName(result) AS type;
-- The type returned is a Float64 as the UInt8 must be promoted to 64 bit for the comparison.
```

```response title=Response
┌─result─┬─type────┐
│      1 │ Float64 │
└────────┴─────────┘
```

**Arrays**

```sql title=Query
SELECT least(['hello'], ['there'], ['world']);
```

```response title=Response
┌─least(['hell⋯ ['world'])─┐
│ ['hello']                │
└──────────────────────────┘
```

**DateTime types**

```sql title=Query
SELECT least(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3));
-- The type returned is a DateTime64 as the DateTime32 must be promoted to 64 bit for the comparison.
```

```response title=Response
┌─least(toDate⋯(now(), 3))─┐
│  2025-05-27 15:55:20.000 │
└──────────────────────────┘
```

","1.1","Conditional"
"25.6.2.5","tupleMinus",0,0,"","","System","","","","","","",""
"25.6.2.5","log10",0,1,"","","System","","","","","","",""
"25.6.2.5","lower",0,1,"","","System","","","","","","",""
"25.6.2.5","lowerUTF8",0,0,"","","System","Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.","lowerUTF8(input)","- `input` — Input with String type
","A String data type value","**first**

```sql title=Query
SELECT lowerUTF8('München') as Lowerutf8;
```

```response title=Response
münchen
```

","1.1","String"
"25.6.2.5","arrayPopFront",0,0,"","","System","Removes the first item from the array.","arrayPopFront(arr)","- `arr` — The array for which to remove the first element from. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array identical to `arr` but without the first element of `arr`. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayPopFront([1, 2, 3]) AS res;
```

```response title=Response
[2,3]
```

","1.1","Arrays"
"25.6.2.5","subtractMilliseconds",0,0,"","","System","
Subtracts a specified number of milliseconds from a date with time or a string-encoded date with time.
    ","subtractMilliseconds(datetime, num)","- `datetime` — Date with time to subtract specified number of milliseconds from. [`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of milliseconds to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` milliseconds. [`DateTime64`](../data-types/datetime64.md).","**Subtract milliseconds from different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractMilliseconds(date_time, 1000) AS subtract_milliseconds_with_date_time,
    subtractMilliseconds(date_time_string, 1000) AS subtract_milliseconds_with_date_time_string
```

```response title=Response
┌─subtract_milliseconds_with_date_time─┬─subtract_milliseconds_with_date_time_string─┐
│              2023-12-31 23:59:59.000 │                     2023-12-31 23:59:59.000 │
└──────────────────────────────────────┴─────────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::DateTime, INTERVAL 10 millisecond)
```

```response title=Response
┌─minus(CAST('⋯second(10))─┐
│  1998-06-15 23:59:59.990 │
└──────────────────────────┘
```

","22.6","Dates and Times"
"25.6.2.5","toSecond",0,0,"","","System","
Returns the second component (0-59) of a `Date` or `DateTime` value.
        ","toSecond(datetime)","- `datetime` — A `Date` or `DateTime` value to get the second from. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","Returns the second in the minute (0 - 59) of the given `Date` or `DateTime` value. [`UInt8`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toSecond(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toSecond(toDateTime('2023-04-21 10:20:30'))─┐
│                                          30 │
└─────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","filesystemCapacity",0,0,"","","System","","","","","","",""
"25.6.2.5","isZeroOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt8OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","leftPadUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","notILike",0,0,"","","System","","","","","","",""
"25.6.2.5","concatWithSeparator",0,0,"","","System","
Returns the concatenation strings separated by string separator. Syntax: concatWithSeparator(sep, expr1, expr2, expr3...)
        ","","","","**concatWithSeparator**

```sql title=Query
SELECT concatWithSeparator('a', '1', '2', '3')
```

```response title=Response

```

","","String"
"25.6.2.5","toMonthNumSinceEpoch",0,0,"","","System","Returns amount of months passed from year 1970","toMonthNumSinceEpoch(date)","- `date` — Date, DateTime or DateTime64
","Positive integer","**Example**

```sql title=Query
SELECT toMonthNumSinceEpoch(toDate('2024-10-01'))
```

```response title=Response
657
```

","25.3","Dates and Times"
"25.6.2.5","minSampleSizeContinuous",0,0,"","","System","","","","","","",""
"25.6.2.5","hopEnd",0,0,"","","System","","","","","","",""
"25.6.2.5","map",0,0,"","","System","","","","","","",""
"25.6.2.5","rand",0,1,"","","System","","","","","","",""
"25.6.2.5","toUUIDOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","h3GetUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.6.2.5","log1p",0,0,"","","System","","","","","","",""
"25.6.2.5","tgamma",0,0,"","","System","","","","","","",""
"25.6.2.5","geohashDecode",0,0,"","","System","","","","","","",""
"25.6.2.5","tryIdnaEncode",0,0,"","","System","
Computes a ASCII representation of an Internationalized Domain Name. Returns an empty string in case of error","punycodeEncode(str)","- `str` — Input string
","An ASCII-encoded domain name [String](/sql-reference/data-types/string.md).","**simple**

```sql title=Query
SELECT idnaEncodeOrNull('München') AS ascii;
```

```response title=Response
┌─ascii───────────────────────────┐
│ xn--strae-oqa.xn--mnchen-3ya.de │
└─────────────────────────────────┘
```

","","Encoding"
"25.6.2.5","SHA512",0,0,"","","System","Calculates the SHA512 hash of the given string.","SELECT SHA512(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA512 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).","****

```sql title=Query
SELECT HEX(SHA512('abc'));
```

```response title=Response
┌─hex(SHA512('abc'))───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ DDAF35A193617ABACC417349AE20413112E6FA4E89A97EA20A9EEEE64B55D39A2192992A274FC1A836BA3C23A3FEEBBD454D4423643CE80E2A9AC94FA54CA49F │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.6.2.5","notLike",0,0,"","","System","","","","","","",""
"25.6.2.5","shardCount",0,0,"","","System","","","","","","",""
"25.6.2.5","h3GetFaces",0,0,"","","System","","","","","","",""
"25.6.2.5","__getScalar",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetInt32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","mortonEncode",0,0,"","","System","
Calculates Morton encoding (ZCurve) for a list of unsigned integers

The function has two modes of operation:
- Simple
- Expanded

Simple: accepts up to 8 unsigned integers as arguments and produces a UInt64 code.
[example:simple]

Expanded: accepts a range mask (tuple) as a first argument and up to 8 unsigned integers as other arguments.
Each number in mask configures the amount of range expansion
1 - no expansion
2 - 2x expansion
3 - 3x expansion
....
Up to 8x expansion.
[example:range_expanded]
Note: tuple size must be equal to the number of the other arguments

Range expansion can be beneficial when you need a similar distribution for arguments with wildly different ranges (or cardinality)
For example: 'IP Address' (0...FFFFFFFF) and 'Country code' (0...FF)

Morton encoding for one argument is always the argument itself.
[example:identity]
Produces: `1`

You can expand one argument too:
[example:identity_expanded]
Produces: `32768`

The function also accepts columns as arguments:
[example:from_table]

But the range tuple must still be a constant:
[example:from_table_range]

Please note that you can fit only so much bits of information into Morton code as UInt64 has.
Two arguments will have a range of maximum 2^32 (64/2) each
Three arguments: range of max 2^21 (64/3) each
And so on, all overflow will be clamped to zero
","","","","**simple**

```sql title=Query
SELECT mortonEncode(1, 2, 3)
```

```response title=Response

```

**range_expanded**

```sql title=Query
SELECT mortonEncode((1,2), 1024, 16)
```

```response title=Response

```

**identity**

```sql title=Query
SELECT mortonEncode(1)
```

```response title=Response

```

**identity_expanded**

```sql title=Query
SELECT mortonEncode(tuple(2), 128)
```

```response title=Response

```

**from_table**

```sql title=Query
SELECT mortonEncode(n1, n2) FROM table
```

```response title=Response

```

**from_table_range**

```sql title=Query
SELECT mortonEncode((1,2), n1, n2) FROM table
```

```response title=Response

```

","","Encoding"
"25.6.2.5","toTypeName",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonsUnionCartesian",0,0,"","","System","","","","","","",""
"25.6.2.5","toDaysSinceYearZero",0,0,"","","System","
Returns for a given date or date with time, the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601.
The calculation is the same as in MySQL's TO_DAYS() function.
","","","","**typical**

```sql title=Query
SELECT toDaysSinceYearZero(toDate('2023-09-08'))
```

```response title=Response
713569
```

","","Dates and Times"
"25.6.2.5","reinterpretAsUInt16",0,0,"","","System","","","","","","",""
"25.6.2.5","arraySymmetricDifference",0,0,"","","System","Takes multiple arrays and returns an array with elements that are not present in all source arrays. The result contains only unique values.

:::note
The symmetric difference of _more than two sets_ is [mathematically defined](https://en.wikipedia.org/wiki/Symmetric_difference#n-ary_symmetric_difference)
as the set of all input elements which occur in an odd number of input sets.
In contrast, function `arraySymmetricDifference` simply returns the set of input elements which do not occur in all input sets.
:::
","arraySymmetricDifference(arr1, arr2, ... , arrN)","- `arrN` — N arrays from which to make the new array. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array of distinct elements not present in all source arrays. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT
arraySymmetricDifference([1, 2], [1, 2], [1, 2]) AS empty_symmetric_difference,
arraySymmetricDifference([1, 2], [1, 2], [1, 3]) AS non_empty_symmetric_difference;
```

```response title=Response
┌─empty_symmetric_difference─┬─non_empty_symmetric_difference─┐
│ []                         │ [3]                            │
└────────────────────────────┴────────────────────────────────┘
```

","25.4","Arrays"
"25.6.2.5","addMilliseconds",0,0,"","","System","
Adds a specified number of milliseconds to a date with time or a string-encoded date with time.
    ","addMilliseconds(datetime, num)","- `datetime` — Date with time to add specified number of milliseconds to. [`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of milliseconds to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` milliseconds. [`DateTime64`](../data-types/datetime64.md).","**Add milliseconds to different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addMilliseconds(date_time, 1000) AS add_milliseconds_with_date_time,
    addMilliseconds(date_time_string, 1000) AS add_milliseconds_with_date_time_string
```

```response title=Response
┌─add_milliseconds_with_date_time─┬─add_milliseconds_with_date_time_string─┐
│         2024-01-01 00:00:01.000 │                2024-01-01 00:00:01.000 │
└─────────────────────────────────┴────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::DateTime, INTERVAL 10 millisecond)
```

```response title=Response
┌─plus(CAST('1⋯second(10))─┐
│  1998-06-16 00:00:00.010 │
└──────────────────────────┘
```

","22.6","Dates and Times"
"25.6.2.5","multiSearchFirstPositionUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","encrypt",0,0,"","","System","","","","","","",""
"25.6.2.5","addYears",0,0,"","","System","
Adds a specified number of years to a date, a date with time or a string-encoded date or date with time.
    ","addYears(datetime, num)","- `datetime` — Date or date with time to add specified number of years to. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of years to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` years. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Add years to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addYears(date, 1) AS add_years_with_date,
    addYears(date_time, 1) AS add_years_with_date_time,
    addYears(date_time_string, 1) AS add_years_with_date_time_string
```

```response title=Response
┌─add_years_with_date─┬─add_years_with_date_time─┬─add_years_with_date_time_string─┐
│          2025-01-01 │      2025-01-01 00:00:00 │         2025-01-01 00:00:00.000 │
└─────────────────────┴──────────────────────────┴─────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 year)
```

```response title=Response
┌─plus(CAST('1⋯alYear(10))─┐
│               2008-06-16 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","toStartOfSecond",0,0,"","","System","","","","","","",""
"25.6.2.5","enabledRoles",0,0,"","","System","","","","","","",""
"25.6.2.5","concat",0,1,"","","System","","","","","","",""
"25.6.2.5","mapAdd",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayUnion",0,0,"","","System","Takes multiple arrays and returns an array which contains all elements that are present in one of the source arrays.The result contains only unique values.","arrayUnion(arr1, arr2, ..., arrN)","- `arrN` — N arrays from which to make the new array. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array with distinct elements from the source arrays. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT
arrayUnion([-2, 1], [10, 1], [-2], []) as num_example,
arrayUnion(['hi'], [], ['hello', 'hi']) as str_example,
arrayUnion([1, 3, NULL], [2, 3, NULL]) as null_example
```

```response title=Response
┌─num_example─┬─str_example────┬─null_example─┐
│ [10,-2,1]   │ ['hello','hi'] │ [3,2,1,NULL] │
└─────────────┴────────────────┴──────────────┘
```

","24.10","Arrays"
"25.6.2.5","multiSearchAllPositions",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt16",0,0,"","","System","","","","","","",""
"25.6.2.5","upper",0,1,"","","System","","","","","","",""
"25.6.2.5","arrayFlatten",0,0,"","","System","
Converts an array of arrays to a flat array.

Function:

- Applies to any depth of nested arrays.
- Does not change arrays that are already flat.

The flattened array contains all the elements from all source arrays.
","arrayFlatten(arr)","- `arr` — A multidimensional array. [`Array(T)`](/sql-reference/data-types/array)(`Array`)
","Returns a flattened array from the multidimensional array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayFlatten([[[1]], [[2], [3]]]);
```

```response title=Response
[1,2,3]
```

","20.1","Arrays"
"25.6.2.5","tupleIntDiv",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt256OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","pointInPolygon",0,0,"","","System","","","","","","",""
"25.6.2.5","splitByWhitespace",0,0,"","","System","","","","","","",""
"25.6.2.5","tryDecrypt",0,0,"","","System","Similar to `decrypt`, but returns NULL if decryption fails because of using the wrong key.","","","","","","Encryption"
"25.6.2.5","countSubstrings",0,1,"","","System","","","","","","",""
"25.6.2.5","parseDateTimeOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsFloat64",0,0,"","","System","","","","","","",""
"25.6.2.5","s2GetNeighbors",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchAnyCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","ascii",0,1,"","","System","
Returns the ASCII code point of the first character of str.  The result type is Int32.

If s is empty, the result is 0. If the first character is not an ASCII character or not part of the Latin-1 Supplement range of UTF-16, the result is undefined)
        ","","","","**ascii**

```sql title=Query
SELECT ascii('234')
```

```response title=Response

```

","","String"
"25.6.2.5","ngramDistanceCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","bitmapMax",0,0,"","","System","Returns the position of the greatest bit set in a bitmap, or `0` if the bitmap is empty.","bitmapMax(bitmap)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns the position of the greatest bit set in the bitmap, otherwise `0`. [`UInt64`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT bitmapMax(bitmapBuild([1, 2, 3, 4, 5])) AS res;
```

```response title=Response
┌─res─┐
│   5 │
└─────┘
```

","20.1","Bitmap"
"25.6.2.5","h3GetOriginIndexFromUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTime32BestEffortOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","blockNumber",0,0,"","","System","","","","","","",""
"25.6.2.5","rightUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","cutURLParameter",0,0,"","","System","","","","","","",""
"25.6.2.5","positionCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchFirstPositionCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","subtractHours",0,0,"","","System","
Subtracts a specified number of hours from a date, a date with time or a string-encoded date or date with time.
    ","subtractHours(datetime, num)","- `datetime` — Date or date with time to subtract specified number of hours from. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of hours to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` hours. [`DateTime`](../data-types/datetime.md)/[`DateTime64(3)`](../data-types/datetime64.md).","**Subtract hours from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractHours(date, 12) AS subtract_hours_with_date,
    subtractHours(date_time, 12) AS subtract_hours_with_date_time,
    subtractHours(date_time_string, 12) AS subtract_hours_with_date_time_string
```

```response title=Response
┌─subtract_hours_with_date─┬─subtract_hours_with_date_time─┬─subtract_hours_with_date_time_string─┐
│      2023-12-31 12:00:00 │           2023-12-31 12:00:00 │              2023-12-31 12:00:00.000 │
└──────────────────────────┴───────────────────────────────┴──────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 hour)
```

```response title=Response
┌─minus(CAST('⋯alHour(10))─┐
│      1998-06-15 14:00:00 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","geoToS2",0,0,"","","System","","","","","","",""
"25.6.2.5","indexOf",0,0,"","","System","
Returns the index of the first element with value 'x' (starting from 1) if it is in the array.
If the array does not contain the searched-for value, the function returns `0`.

Elements set to `NULL` are handled as normal values.
    ","indexOf(arr, x)","- `arr` — An array to search in for `x`. [`Array`](/sql-reference/data-types/array).
- `x` — Value of the first matching element in `arr` for which to return an index. UInt64.
","Returns the index (numbered from one) of the first `x` in `arr` if it exists. Otherwise, returns `0`.","**Basic example**

```sql title=Query
SELECT indexOf([5, 4, 1, 3], 3)
```

```response title=Response
4
```

**Array with nulls**

```sql title=Query
SELECT indexOf([1, 3, NULL, NULL], NULL)
```

```response title=Response
3
```

","1.1","Arrays"
"25.6.2.5","emptyArrayString",0,0,"","","System","Returns an empty String array","emptyArrayString()","","An empty String array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayString
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","tryBase64URLDecode",0,0,"","","System","Decodes an URL from base64, like base64URLDecode but returns an empty string in case of an error.","tryBase64URLDecode(encodedUrl)","- `encodedURL` — String column or constant. If the string is not a valid Base64-encoded value with URL-specific modifications, returns an empty string.
","A string containing the decoded value of the argument.","**valid**

```sql title=Query
SELECT tryBase64URLDecode('aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ')
```

```response title=Response
https://clickhouse.com
```

**invalid**

```sql title=Query
SELECT tryBase64UrlDecode('aHR0cHM6Ly9jbGlja')
```

```response title=Response

```

","24.6","Encoding"
"25.6.2.5","h3IsValid",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayUInt32",0,0,"","","System","Returns an empty UInt32 array","emptyArrayUInt32()","","An empty UInt32 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayUInt32
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","concatAssumeInjective",0,0,"","","System","","","","","","",""
"25.6.2.5","sinh",0,0,"","","System","","","","","","",""
"25.6.2.5","toModifiedJulianDayOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","multiplyDecimal",0,0,"","","System","
Performs multiplication on two decimals. Result value will be of type [Decimal256](/sql-reference/data-types/decimal).
Result scale can be explicitly specified by `result_scale` argument (const Integer in range `[0, 76]`). If not specified, the result scale is the max scale of given arguments.

:::note
These functions work significantly slower than usual `multiply`.
In case you don't really need controlled precision and/or need fast computation, consider using [multiply](#multiply)
:::
    ","multiplyDecimal(a, b[, result_scale])","- `a` — First value. Type [Decimal](/sql-reference/data-types/decimal).
- `b` — Second value. Type [Decimal](/sql-reference/data-types/decimal).
- `result_scale` — Scale of result. Type [Int/UInt](/sql-reference/data-types/int-uint).
","The result of multiplication with the given scale. Type: [Decimal256](/sql-reference/data-types/decimal).","**Usage example**

```sql title=Query
SELECT multiplyDecimal(toDecimal256(-12, 0), toDecimal32(-2.1, 1), 1)
```

```response title=Response
25.2
```

**Difference with regular multiplication**

```sql title=Query
SELECT multiplyDecimal(toDecimal256(-12, 0), toDecimal32(-2.1, 1), 1)
```

```response title=Response
┌─multiply(toDecimal64(-12.647, 3), toDecimal32(2.1239, 4))─┐
│                                               -26.8609633 │
└───────────────────────────────────────────────────────────┘
┌─multiplyDecimal(toDecimal64(-12.647, 3), toDecimal32(2.1239, 4))─┐
│                                                         -26.8609 │
└──────────────────────────────────────────────────────────────────┘
```

**Decimal overflow**

```sql title=Query
SELECT
    toDecimal64(-12.647987876, 9) AS a,
    toDecimal64(123.967645643, 9) AS b,
    multiplyDecimal(a, b);
SELECT
    toDecimal64(-12.647987876, 9) AS a,
    toDecimal64(123.967645643, 9) AS b,
    a * b;
```

```response title=Response
┌─────────────a─┬─────────────b─┬─multiplyDecimal(toDecimal64(-12.647987876, 9), toDecimal64(123.967645643, 9))─┐
│ -12.647987876 │ 123.967645643 │                                                               -1567.941279108 │
└───────────────┴───────────────┴───────────────────────────────────────────────────────────────────────────────┘
Received exception from server (version 22.11.1):
Code: 407. DB::Exception: Received from localhost:9000. DB::Exception: Decimal math overflow:
While processing toDecimal64(-12.647987876, 9) AS a, toDecimal64(123.967645643, 9) AS b, a * b. (DECIMAL_OVERFLOW)
```

","22.12","Arithmetic"
"25.6.2.5","tumble",0,0,"","","System","","","","","","",""
"25.6.2.5","ngrams",0,0,"","","System","Splits a UTF-8 string into n-grams symbols.","","","","","","String Splitting"
"25.6.2.5","readWKBPolygon",0,0,"","","System","
                Parses a Well-Known Binary (WKB) representation of a Polygon geometry and returns it in the internal ClickHouse format.
                ","readWKBPolygon(wkt_string)","- `wkb_string` — The input WKB string representing a Polygon geometry.
","The function returns a ClickHouse internal representation of the Polygon geometry.","**first call**

```sql title=Query
SELECT readWKBPolygon(unhex('01030000000100000005000000000000000000f03f0000000000000000000000000000244000000000000000000000000000002440000000000000244000000000000000000000000000002440000000000000f03f0000000000000000'));
```

```response title=Response
┌─readWKBPolygon(unhex'01030000000200000005000000000000000000000000000000000000000000000000002440000000000000000000000000000024...'))─┐
                │ (1,0),(10,0),(10,10),(0,10),(1,0)]]                                                                                                 │
                └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.6.2.5","normalizeQuery",0,0,"","","System","","","","","","",""
"25.6.2.5","randExponential",0,0,"","","System","
Returns a random number from the exponential distribution.
Accepts one parameter - lambda value.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randExponential(0, 5) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","randomString",0,0,"","","System","","","","","","",""
"25.6.2.5","normalizeUTF8NFKD",0,0,"","","System","","","","","","",""
"25.6.2.5","toUnixTimestamp64Milli",0,0,"","","System","","","","","","",""
"25.6.2.5","firstSignificantSubdomainCustom",0,0,"","","System","","","","","","",""
"25.6.2.5","simpleJSONExtractBool",0,0,"","","System","Parses a true/false value from the value of the field named field_name. The result is UInt8.","simpleJSONExtractBool(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns 1 if the value of the field is true, 0 otherwise. This means this function will return 0 including (and not only) in the following cases:
 - If the field doesn't exists.
 - If the field contains true as a string, e.g.: {""field"":""true""}.
 - If the field contains 1 as a numerical value.","**simple**

```sql title=Query
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":false,""bar"":true}');
INSERT INTO jsons VALUES ('{""foo"":""true"",""qux"":1}');

SELECT simpleJSONExtractBool(json, 'bar') FROM jsons ORDER BY json;
SELECT simpleJSONExtractBool(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
0
1
0
0
```

","","JSON"
"25.6.2.5","normalizeUTF8NFKC",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchFirstIndexCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","normalizeUTF8NFD",0,0,"","","System","","","","","","",""
"25.6.2.5","toDateTime64OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","tid",0,0,"","","System","","","","","","",""
"25.6.2.5","port",0,0,"","","System","Returns the port or `default_port` if there is no port in the URL (or in case of validation error).","","","","","","URL"
"25.6.2.5","subtractSeconds",0,0,"","","System","
Subtracts a specified number of seconds from a date, a date with time or a string-encoded date or date with time.
    ","subtractSeconds(datetime, num)","- `datetime` — Date or date with time to subtract specified number of seconds from. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of seconds to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` seconds. [`DateTime`](../data-types/datetime.md)/[`DateTime64(3)`](../data-types/datetime64.md).","**Subtract seconds from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractSeconds(date, 60) AS subtract_seconds_with_date,
    subtractSeconds(date_time, 60) AS subtract_seconds_with_date_time,
    subtractSeconds(date_time_string, 60) AS subtract_seconds_with_date_time_string
```

```response title=Response
┌─subtract_seconds_with_date─┬─subtract_seconds_with_date_time─┬─subtract_seconds_with_date_time_string─┐
│        2023-12-31 23:59:00 │             2023-12-31 23:59:00 │                2023-12-31 23:59:00.000 │
└────────────────────────────┴─────────────────────────────────┴────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 second)
```

```response title=Response
┌─minus(CAST('⋯Second(10))─┐
│      1998-06-15 23:59:50 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","BLAKE3",0,0,"","","System","
    Calculates BLAKE3 hash string and returns the resulting set of bytes as FixedString.
    This cryptographic hash-function is integrated into ClickHouse with BLAKE3 Rust library.
    The function is rather fast and shows approximately two times faster performance compared to SHA-2, while generating hashes of the same length as SHA-256.
    It returns a BLAKE3 hash as a byte array with type FixedString(32).
    ","","","","**hash**

```sql title=Query
SELECT hex(BLAKE3('ABC'))
```

```response title=Response

```

","","Hash"
"25.6.2.5","toMinute",0,0,"","","System","
Returns the minute component (0-59) of a `Date` or `DateTime` value.
    ","toMinute(datetime)","- `datetime` — A `Date` or `DateTime` value to get the minute from. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","Returns the minute of the hour (0 - 59) of the given `Date` or `DateTime` value. [`UInt8`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toMinute(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toMinute(toDateTime('2023-04-21 10:20:30'))─┐
│                                          20 │
└─────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","atan",0,1,"","","System","","","","","","",""
"25.6.2.5","arrayLevenshteinDistance",0,0,"","","System","Calculates the Levenshtein distance for two arrays.","arrayLevenshteinDistance(from, to)","- `from` — The first array. [`Array(T)`](/sql-reference/data-types/array).
- `to` — The second array. [`Array(T)`](/sql-reference/data-types/array).
","Levenshtein distance between the first and the second arrays. [`Float64`](/sql-reference/data-types/float).","**Usage example**

```sql title=Query
SELECT arrayLevenshteinDistance([1, 2, 4], [1, 2, 3])
```

```response title=Response
1
```

","25.4","Arrays"
"25.6.2.5","ifNotFinite",0,0,"","","System","
Checks whether a floating point value is finite.

You can get a similar result by using the [ternary operator](/sql-reference/functions/conditional-functions#if): `isFinite(x) ? x : y`.
    ","ifNotFinite(x,y)","- `x` — Value to check if infinite. Float32/Float64
- `y` — Fallback value. Float32/Float64
","- `x` if `x` is finite.
- `y` if `x` is not finite.","**Usage example**

```sql title=Query
SELECT 1/0 AS infimum, ifNotFinite(infimum,42)
```

```response title=Response
inf  42
```

","20.3","Arithmetic"
"25.6.2.5","bitmapSubsetInRange",0,0,"","","System","Returns a subset of the bitmap, containing only the set bits in the specified range [start, end). Uses 1-based indexing.","bitmapSubsetInRange(bitmap, start, end)","- `bitmap` — Bitmap to extract the subset from. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `start` — Start of the range (inclusive). [`UInt*`](/sql-reference/data-types/int-uint)
- `end` — End of the range (exclusive). [`UInt*`](/sql-reference/data-types/int-uint)
","Returns a bitmap containing only the set bits in the specified range. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapSubsetInRange(bitmapBuild([1, 2, 3, 4, 5]), 2, 5)) AS res;
```

```response title=Response
┌─res───────┐
│ [2, 3, 4] │
└───────────┘
```

","20.1","Bitmap"
"25.6.2.5","nullIf",0,1,"","","System","","","","","","",""
"25.6.2.5","toDecimal256OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","multiMatchAny",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTime64OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","extractKeyValuePairsWithEscaping",0,0,"","","System","Same as `extractKeyValuePairs` but with escaping support.

            Escape sequences supported: `\x`, `\N`, `\a`, `\b`, `\e`, `\f`, `\n`, `\r`, `\t`, `\v` and `\0`.
            Non standard escape sequences are returned as it is (including the backslash) unless they are one of the following:
            `\\`, `'`, `""`, `backtick`, `/`, `=` or ASCII control characters (c <= 31).

            This function will satisfy the use case where pre-escaping and post-escaping are not suitable. For instance, consider the following
            input string: `a: ""aaaa\""bbb""`. The expected output is: `a: aaaa\""bbbb`.
            - Pre-escaping: Pre-escaping it will output: `a: ""aaaa""bbb""` and `extractKeyValuePairs` will then output: `a: aaaa`
            - Post-escaping: `extractKeyValuePairs` will output `a: aaaa\` and post-escaping will keep it as it is.

            Leading escape sequences will be skipped in keys and will be considered invalid for values.

            **Escape sequences with escape sequence support turned on**
            ```sql
            arthur :) select extractKeyValuePairsWithEscaping('age:a\\x0A\\n\\0') as kv

            SELECT extractKeyValuePairsWithEscaping('age:a\\x0A\\n\\0') AS kv

            Query id: 44c114f0-5658-4c75-ab87-4574de3a1645

            ┌─kv───────────────┐
            │ {'age':'a\n\n\0'} │
            └──────────────────┘
            ```","","","","","","Map"
"25.6.2.5","parseDateTime64OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","snowflakeToDateTime64",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTimeOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","tupleMultiplyByNumber",0,0,"","","System","","","","","","",""
"25.6.2.5","randomStringUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","max2",0,1,"","","System","
    Returns the bigger of two numeric values `x` and `y`. The returned value is of type Float64.
    ","max2(x, y)","- `x` — First value
- `y` — Second value
","Returns the bigger value of `x` and `y`","**Usage example**

```sql title=Query
SELECT max2(-1, 2)
```

```response title=Response
2
```

","21.11","Arithmetic"
"25.6.2.5","mapFromArrays",0,0,"","","System","","","","","","",""
"25.6.2.5","cutToFirstSignificantSubdomainCustomWithWWWRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainCustomWithWWW` but follows stricter rules according to RFC 3986.","","","","","","URL"
"25.6.2.5","initialQueryStartTime",0,0,"","","System","Returns the start time of the initial current query.","initialQueryStartTime()","","Start time of the initial query.","**simple**

```sql title=Query
SELECT initialQueryStartTime()
```

```response title=Response
2025-01-28 11:38:04
```

","","Other"
"25.6.2.5","parseDateTime",0,0,"","","System","","","","","","",""
"25.6.2.5","empty",0,0,"","","System","
Checks whether the input array is empty.

An array is considered empty if it does not contain any elements.

:::note
Can be optimized by enabling the [`optimize_functions_to_subcolumns` setting](/operations/settings/settings#optimize_functions_to_subcolumns). With `optimize_functions_to_subcolumns = 1` the function reads only [size0](/sql-reference/data-types/array#array-size) subcolumn instead of reading and processing the whole array column. The query `SELECT empty(arr) FROM TABLE;` transforms to `SELECT arr.size0 = 0 FROM TABLE;`.
:::

The function also works for [strings](string-functions.md#empty) or [UUID](uuid-functions.md#empty).
    ","empty(arr)","- `arr` — Input array. [`Array(T)`](/sql-reference/data-types/array).
","Returns `1` for an empty array or `0` for a non-empty array. [`UInt8`](../data-types/int-uint.md).","**Usage example**

```sql title=Query
SELECT empty([]);
```

```response title=Response
1
```

","1.1","Arrays"
"25.6.2.5","dotProduct",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayUInt16",0,0,"","","System","Returns an empty UInt16 array","emptyArrayUInt16()","","An empty UInt16 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayUInt16
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","parseReadableSizeOrZero",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns `0`","parseReadableSizeOrZero(x)","- `x` — Readable size with ISO/IEC 80000-13 or decimal byte unit ([String](../../sql-reference/data-types/string.md))
","Number of bytes, rounded up to the nearest integer, or 0 if unable to parse the input ([UInt64](../../sql-reference/data-types/int-uint.md))","**basic**

```sql title=Query
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes, parseReadableSizeOrZero(readable_sizes) AS sizes;
```

```response title=Response
┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
│ invalid        │       0 │
└────────────────┴─────────┘
```

","","Other"
"25.6.2.5","parseReadableSize",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it throws an exception.","parseReadableSize(x)","- `x` — Readable size with ISO/IEC 80000-13 or decimal byte unit ([String](../../sql-reference/data-types/string.md))
","Number of bytes, rounded up to the nearest integer ([UInt64](../../sql-reference/data-types/int-uint.md))","**basic**

```sql title=Query
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB']) AS readable_sizes, parseReadableSize(readable_sizes) AS sizes;
```

```response title=Response
┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
└────────────────┴─────────┘
```

","","Other"
"25.6.2.5","parseTimeDelta",0,0,"","","System","","","","","","",""
"25.6.2.5","toTime64OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","stem",0,0,"","","System","","","","","","",""
"25.6.2.5","subtractMinutes",0,0,"","","System","
Subtracts a specified number of minutes from a date, a date with time or a string-encoded date or date with time.
    ","subtractMinutes(datetime, num)","- `datetime` — Date or date with time to subtract specified number of minutes from. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of minutes to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` minutes. [`DateTime`](../data-types/datetime.md)/[`DateTime64(3)`](../data-types/datetime64.md).","**Subtract minutes from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractMinutes(date, 30) AS subtract_minutes_with_date,
    subtractMinutes(date_time, 30) AS subtract_minutes_with_date_time,
    subtractMinutes(date_time_string, 30) AS subtract_minutes_with_date_time_string
```

```response title=Response
┌─subtract_minutes_with_date─┬─subtract_minutes_with_date_time─┬─subtract_minutes_with_date_time_string─┐
│        2023-12-31 23:30:00 │             2023-12-31 23:30:00 │                2023-12-31 23:30:00.000 │
└────────────────────────────┴─────────────────────────────────┴────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 minute)
```

```response title=Response
┌─minus(CAST('⋯Minute(10))─┐
│      1998-06-15 23:50:00 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","e",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayProduct",0,0,"","","System","
Returns the product of elements in the source array.

If a lambda function `func` is specified, returns the product of elements of the lambda results.
    ","arrayProduct([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the product of elements in the source array, or the product of elements of the lambda results if provided. [`Float64`](/sql-reference/data-types/float).","**Basic example**

```sql title=Query
SELECT arrayProduct([1, 2, 3, 4]);
```

```response title=Response
24
```

**Usage with lambda function**

```sql title=Query
SELECT arrayProduct(x, y -> x+y, [2, 2], [2, 2]) AS res;
```

```response title=Response
16
```

","21.1","Arrays"
"25.6.2.5","polygonsIntersectionSpherical",0,0,"","","System","","","","","","",""
"25.6.2.5","h3PointDistRads",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonsUnionSpherical",0,0,"","","System","","","","","","",""
"25.6.2.5","byteSize",0,0,"","","System","","","","","","",""
"25.6.2.5","IPv4StringToNum",0,0,"","","System","","","","","","",""
"25.6.2.5","positionUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","hasSubsequenceCaseInsensitiveUTF8",0,1,"","","System","","","","","","",""
"25.6.2.5","pi",0,1,"","","System","","","","","","",""
"25.6.2.5","randCanonical",0,0,"","","System","
The function generates pseudo random results with independent and identically distributed uniformly distributed values in [0, 1).
Non-deterministic. Return type is Float64.
        ","","","","**randCanonical**

```sql title=Query
SELECT randCanonical()
```

```response title=Response

```

","","Random Number"
"25.6.2.5","multiSearchAllPositionsCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","timezoneOffset",0,0,"","","System","
Returns the timezone offset in seconds from [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
The function takes daylight saving time and historical timezone changes at the specified date and time into account.
    ","timeZoneOffset(datetime)","- `datetime` — `DateTime` value to get the timezone offset for. [`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","Returns the offset from UTC in seconds. [`Int32`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toDateTime('2021-04-21 10:20:30', 'America/New_York') AS Time,
toTypeName(Time) AS Type,
timeZoneOffset(Time) AS Offset_in_seconds,
(Offset_in_seconds / 3600) AS Offset_in_hours;
```

```response title=Response
┌────────────────Time─┬─Type─────────────────────────┬─Offset_in_seconds─┬─Offset_in_hours─┐
│ 2021-04-21 10:20:30 │ DateTime('America/New_York') │            -14400 │              -4 │
└─────────────────────┴──────────────────────────────┴───────────────────┴─────────────────┘
```

","21.6","Dates and Times"
"25.6.2.5","transform",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayLevenshteinDistanceWeighted",0,0,"","","System","
Calculates Levenshtein distance for two arrays with custom weights for each element.
The number of elements for the array and its weights should match.
    ","arrayLevenshteinDistanceWeighted(from, to, from_weights, to_weights)","- `from` — first array. [`Array(T)`](/sql-reference/data-types/array).
- `to` — second array. [`Array(T)`](/sql-reference/data-types/array).
- `from_weights` — weights for the first array. [`Array((U)Int*|Float*)`](/sql-reference/data-types/array).
- `to_weights` — weights for the second array. [`Array((U)Int*|Float*)`](/sql-reference/data-types/array).
","Levenshtein distance between the first and the second arrays with custom weights for each element. [`Float64`](/sql-reference/data-types/float).","**Usage example**

```sql title=Query
SELECT arrayLevenshteinDistanceWeighted(['A', 'B', 'C'], ['A', 'K', 'L'], [1.0, 2, 3], [3.0, 4, 5])
```

```response title=Response
14
```

","25.4","Arrays"
"25.6.2.5","base32Encode",0,0,"","","System","
Encode a string with [Base32](https://datatracker.ietf.org/doc/html/rfc4648) encoding.","","- `arg` — A string to be encoded
","","**simple_encoding1**

```sql title=Query
SELECT base32Encode('a')
```

```response title=Response
ME======
```

**simple_encoding2**

```sql title=Query
SELECT base32Encode('Hello')
```

```response title=Response
JBSWY3DP
```

","25.5","String"
"25.6.2.5","randConstant",0,0,"","","System","","","","","","",""
"25.6.2.5","randPoisson",0,0,"","","System","
Returns a random number from the poisson distribution.
Accepts one parameter - the mean number of occurrences.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randPoisson(3) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","nowInBlock",0,0,"","","System","","","","","","",""
"25.6.2.5","randNegativeBinomial",0,0,"","","System","
Returns a random number from the negative binomial distribution.
Accepts two parameters - number of experiments and probability of success in each experiment.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randNegativeBinomial(10, 0.1) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","toUnixTimestamp64Micro",0,0,"","","System","","","","","","",""
"25.6.2.5","randBinomial",0,0,"","","System","
Returns a random number from the binomial distribution.
Accepts two parameters - number of experiments and probability of success in each experiment.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randBinomial(10, 0.1) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","randBernoulli",0,0,"","","System","
Returns a random number from the Bernoulli distribution.
Accepts one parameter - probability of success.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randBernoulli(0.1) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","toInt32OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","randStudentT",0,0,"","","System","
Returns a random number from the t-distribution.
Accepts one parameter - degree of freedom.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randStudentT(5) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","sipHash64",0,0,"","","System","","","","","","",""
"25.6.2.5","catboostEvaluate",0,0,"","","System","","","","","","",""
"25.6.2.5","randNormal",0,0,"","","System","
Returns a random number from the normal distribution.
Accepts two parameters - mean and standard deviation.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randNormal(0, 5) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","arrayReverseFill",0,0,"","","System","
The `arrayReverseFill` function sequentially processes a source array from the last
element to the first, evaluating a lambda condition at each position using elements
from the source and condition arrays. When the condition evaluates to false at
position i, the function replaces that element with the element at position i+1
from the current state of the array. The last element is always preserved
regardless of any condition.
    ","arrayReverseFill(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array with elements of the source array replaced by the results of the lambda. [`Array(T)`](/sql-reference/data-types/array).","**Example with a single array**

```sql title=Query
SELECT arrayReverseFill(x -> not isNull(x), [1, null, 2, null]) AS res
```

```response title=Response
[1,2,2,NULL]
```

**Example with two arrays**

```sql title=Query
SELECT arrayReverseFill(x, y, z -> x > y AND x < z, [5, 3, 6, 2], [4, 7, 1, 3], [10, 2, 8, 5]) AS res;
```

```response title=Response
[5,6,6,2]
```

","20.1","Arrays"
"25.6.2.5","in",0,0,"","","System","","","","","","",""
"25.6.2.5","xxh3",0,0,"","","System","Calculates value of XXH3 64-bit hash function. Refer to https://github.com/Cyan4973/xxHash for detailed documentation.","","","","**hash**

```sql title=Query
SELECT xxh3('ClickHouse')
```

```response title=Response

```

","","Hash"
"25.6.2.5","trimBoth",0,0,"","","System","","","","","","",""
"25.6.2.5","normalizeQueryKeepNames",0,0,"","","System","","","","","","",""
"25.6.2.5","wordShingleMinHashArgUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","variantElement",0,0,"","","System","
Extracts a column with specified type from a `Variant` column.
","variantElement(variant, type_name, [, default_value])","- `variant` — Variant column
- `type_name` — The name of the variant type to extract
- `default_value` — The default value that will be used if variant doesn't have variant with specified type. Can be any type. Optional
","","**Example**

```sql title=Query
CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT v, variantElement(v, 'String'), variantElement(v, 'UInt64'), variantElement(v, 'Array(UInt64)') FROM test;
```

```response title=Response
┌─v─────────────┬─variantElement(v, 'String')─┬─variantElement(v, 'UInt64')─┬─variantElement(v, 'Array(UInt64)')─┐
│ ᴺᵁᴸᴸ          │ ᴺᵁᴸᴸ                        │                        ᴺᵁᴸᴸ │ []                                 │
│ 42            │ ᴺᵁᴸᴸ                        │                          42 │ []                                 │
│ Hello, World! │ Hello, World!               │                        ᴺᵁᴸᴸ │ []                                 │
│ [1,2,3]       │ ᴺᵁᴸᴸ                        │                        ᴺᵁᴸᴸ │ [1,2,3]                            │
└───────────────┴─────────────────────────────┴─────────────────────────────┴────────────────────────────────────┘
```

","","JSON"
"25.6.2.5","asinh",0,0,"","","System","","","","","","",""
"25.6.2.5","randUniform",0,0,"","","System","
Returns a random number from the uniform distribution in the specified range.
Accepts two parameters - minimum bound and maximum bound.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randUniform(0, 1) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","randomFixedString",0,0,"","","System","","","","","","",""
"25.6.2.5","globalNotNullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt64OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetUInt16",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt16 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","parseDateTime64InJodaSyntaxOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","YYYYMMDDhhmmssToDateTime",0,1,"","","System","
Converts a number containing the year, month, day, hour, minute, and second to a `DateTime`.
This function is the opposite of function [`toYYYYMMDDhhmmss()`](/sql-reference/functions/date-time-functions#toYYYYMMDDhhmmss).
The output is undefined if the input does not encode a valid `DateTime` value.
    ","YYYYMMDDhhmmssToDateTime(YYYYMMDDhhmmss[, timezone])","- `YYYYMMDDhhmmss` — Number containing the year, month, day, hour, minute, and second. [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `timezone` — Optional. Timezone name. [`String`](../data-types/string.md).
","Returns a `DateTime` value from the provided arguments. [`DateTime`](../data-types/datetime.md).","**Example**

```sql title=Query
SELECT YYYYMMDDToDateTime(20230911131415);
```

```response title=Response
┌──────YYYYMMDDhhmmssToDateTime(20230911131415)─┐
│                           2023-09-11 13:14:15 │
└───────────────────────────────────────────────┘
```

","23.9","Dates and Times"
"25.6.2.5","readWKTPolygon",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayShiftLeft",0,0,"","","System","
Shifts an array to the left by the specified number of elements.
New elements are filled with the provided argument or the default value of the array element type.
If the number of elements is negative, the array is shifted to the right.
    ","arrayShiftLeft(arr, n[, default])","- `arr` — The array for which to shift the elements.[`Array(T)`](/sql-reference/data-types/array).
- `n` — Number of elements to shift.[`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint).
- `default` — Optional. Default value for new elements.
","An array shifted to the left by the specified number of elements. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayShiftLeft([1,2,3,4,5,6], 2) as res;
```

```response title=Response
[3,4,5,6,0,0]
```

**Negative value of n**

```sql title=Query
SELECT arrayShiftLeft([1,2,3,4,5,6], -2) as res;
```

```response title=Response
[0,0,1,2,3,4]
```

**Using a default value**

```sql title=Query
SELECT arrayShiftLeft([1,2,3,4,5,6], 2, 42) as res;
```

```response title=Response
[3,4,5,6,42,42]
```

","23.8","Arrays"
"25.6.2.5","netloc",0,0,"","","System","","","","","","",""
"25.6.2.5","regionToDistrict",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpret",0,0,"","","System","","","","","","",""
"25.6.2.5","appendTrailingCharIfAbsent",0,0,"","","System","","","","","","",""
"25.6.2.5","negate",0,0,"","","System","Negates the argument `x`. The result is always signed.","negate(x)","- `x` — The value to negate.
","Returns -x from x","**Usage example**

```sql title=Query
SELECT negate(10)
```

```response title=Response
-10
```

","1.1","Arithmetic"
"25.6.2.5","queryID",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsFixedString",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsString",0,0,"","","System","","","","","","",""
"25.6.2.5","notEquals",0,0,"","","System","Compares two values for inequality.","notEquals(a, b)
    -- a != b
    -- a <> b","- `a` — First value.<sup>[*](#comparison-rules)</sup>
- `b` — Second value.<sup>[*](#comparison-rules)</sup>
","Returns `1` if `a` is not equal to `b`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint/)","**Usage example**

```sql title=Query
SELECT 1 != 2, 1 != 1;
```

```response title=Response
┌─notEquals(1, 2)─┬─notEquals(1, 1)─┐
│               1 │               0 │
└─────────────────┴─────────────────┘
```

","1.1","Comparison"
"25.6.2.5","snowflakeToDateTime",0,0,"","","System","","","","","","",""
"25.6.2.5","left",0,1,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsDateTime",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalDay",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsFloat32",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTime64",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsInt256",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayToSingle",0,0,"","","System","
Accepts an empty array and returns a one-element array that is equal to the default value.
    ","emptyArrayToSingle(arr)","- `arr` — An empty array. [`Array(T)`](/sql-reference/data-types/array)
","An array with a single value of the Array's default type.","**Basic example**

```sql title=Query
CREATE TABLE test (
  a Array(Int32),
  b Array(String),
  c Array(DateTime)
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO test VALUES ([], [], []);

SELECT emptyArrayToSingle(a), emptyArrayToSingle(b), emptyArrayToSingle(c) FROM test;
```

```response title=Response
┌─emptyArrayToSingle(a)─┬─emptyArrayToSingle(b)─┬─emptyArrayToSingle(c)───┐
│ [0]                   │ ['']                  │ ['1970-01-01 01:00:00'] │
└───────────────────────┴───────────────────────┴─────────────────────────┘
```

","1.1","Arrays"
"25.6.2.5","h3ToChildren",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsInt128",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfMillisecond",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsInt64",0,0,"","","System","","","","","","",""
"25.6.2.5","toTimeWithFixedDate",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsInt16",0,0,"","","System","","","","","","",""
"25.6.2.5","normalizedQueryHashKeepNames",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt256OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","tupleModulo",0,0,"","","System","","","","","","",""
"25.6.2.5","toStringCutToZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt8OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","not",0,1,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsInt8",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt256OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt32",0,0,"","","System","","","","","","",""
"25.6.2.5","decodeHTMLComponent",0,0,"","","System","","","","","","",""
"25.6.2.5","fromUnixTimestamp",0,0,"","","System","","","","","","",""
"25.6.2.5","LinfNorm",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsUInt8",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt8",0,0,"","","System","","","","","","",""
"25.6.2.5","range",0,0,"","","System","
Returns an array of numbers from `start` to `end - 1` by `step`.

The supported types are:
- `UInt8/16/32/64`
- `Int8/16/32/64]`

- All arguments `start`, `end`, `step` must be one of the above supported types. Elements of the returned array will be a super type of the arguments.
- An exception is thrown if the function returns an array with a total length more than the number of elements specified by setting [`function_range_max_elements_in_block`](../../operations/settings/settings.md#function_range_max_elements_in_block).
- Returns `NULL` if any argument has Nullable(nothing) type. An exception is thrown if any argument has `NULL` value (Nullable(T) type).
    ","range([start, ] end [, step])","- `start` — Optional. The first element of the array. Required if `step` is used. Default value: `0`.
- `end` — Required. The number before which the array is constructed.
- `step` — Optional. Determines the incremental step between each element in the array. Default value: `1`.
","Array of numbers from `start` to `end - 1` by `step`.","**Usage example**

```sql title=Query
SELECT range(5), range(1, 5), range(1, 5, 2), range(-1, 5, 2);
```

```response title=Response
┌─range(5)────┬─range(1, 5)─┬─range(1, 5, 2)─┬─range(-1, 5, 2)─┐
│ [0,1,2,3,4] │ [1,2,3,4]   │ [1,3]          │ [-1,1,3]        │
└─────────────┴─────────────┴────────────────┴─────────────────┘
```

","1.1","Arrays"
"25.6.2.5","kafkaMurmurHash",0,0,"","","System","","","","","","",""
"25.6.2.5","notIn",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetUInt8OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt8 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","arrayIntersect",0,0,"","","System","Takes multiple arrays and returns an array with elements which are present in all source arrays. The result contains only unique values.","arrayIntersect(arr, arr1, ..., arrN)","- `arrN` — N arrays from which to make the new array. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array with distinct elements that are present in all N arrays. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT
arrayIntersect([1, 2], [1, 3], [2, 3]) AS empty_intersection,
arrayIntersect([1, 2], [1, 3], [1, 4]) AS non_empty_intersection
```

```response title=Response
┌─non_empty_intersection─┬─empty_intersection─┐
│ []                     │ [1]                │
└────────────────────────┴────────────────────┘
```

","1.1","Arrays"
"25.6.2.5","subtractDays",0,0,"","","System","
Subtracts a specified number of days from a date, a date with time or a string-encoded date or date with time.
    ","subtractDays(datetime, num)","- `datetime` — Date or date with time to subtract specified number of days from. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of days to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` days. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Subtract days from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractDays(date, 31) AS subtract_days_with_date,
    subtractDays(date_time, 31) AS subtract_days_with_date_time,
    subtractDays(date_time_string, 31) AS subtract_days_with_date_time_string
```

```response title=Response
┌─subtract_days_with_date─┬─subtract_days_with_date_time─┬─subtract_days_with_date_time_string─┐
│              2023-12-01 │          2023-12-01 00:00:00 │             2023-12-01 00:00:00.000 │
└─────────────────────────┴──────────────────────────────┴─────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 day)
```

```response title=Response
┌─minus(CAST('⋯valDay(10))─┐
│               1998-06-06 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","ngramSimHashCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","repeat",0,1,"","","System","","","","","","",""
"25.6.2.5","JSONExtractKeysAndValues",0,0,"","","System","","","","","","",""
"25.6.2.5","extractKeyValuePairs",0,0,"","","System","Extracts key-value pairs from any string. The string does not need to be 100% structured in a key value pair format;

            It can contain noise (e.g. log files). The key-value pair format to be interpreted should be specified via function arguments.

            A key-value pair consists of a key followed by a `key_value_delimiter` and a value. Quoted keys and values are also supported. Key value pairs must be separated by pair delimiters.

            **Syntax**
            ```sql
            extractKeyValuePairs(data, [key_value_delimiter], [pair_delimiter], [quoting_character])
            ```

            **Arguments**
            - `data` - String to extract key-value pairs from. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `key_value_delimiter` - Character to be used as delimiter between the key and the value. Defaults to `:`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `pair_delimiters` - Set of character to be used as delimiters between pairs. Defaults to `\space`, `,` and `;`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `quoting_character` - Character to be used as quoting character. Defaults to `""`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).

            **Returned values**
            - The extracted key-value pairs in a Map(String, String).

            **Examples**

            Query:

            **Simple case**
            ```sql
            arthur :) select extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv

            SELECT extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv

            Query id: f9e0ca6f-3178-4ee2-aa2c-a5517abb9cee

            ┌─kv──────────────────────────────────────────────────────────────────────┐
            │ {'name':'neymar','age':'31','team':'psg','nationality':'brazil'}        │
            └─────────────────────────────────────────────────────────────────────────┘
            ```

            **Single quote as quoting character**
            ```sql
            arthur :) select extractKeyValuePairs('name:\'neymar\';\'age\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\'') as kv

            SELECT extractKeyValuePairs('name:\'neymar\';\'age\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\'') as kv

            Query id: 0e22bf6b-9844-414a-99dc-32bf647abd5e

            ┌─kv───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
            │ {'name':'neymar','age':'31','team':'psg','nationality':'brazil','last_key':'last_value'}                                 │
            └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
            ```

            **Escape sequences without escape sequences support**
            ```sql
            arthur :) select extractKeyValuePairs('age:a\\x0A\\n\\0') as kv

            SELECT extractKeyValuePairs('age:a\\x0A\\n\\0') AS kv

            Query id: e9fd26ee-b41f-4a11-b17f-25af6fd5d356

            ┌─kv────────────────────┐
            │ {'age':'a\\x0A\\n\\0'} │
            └───────────────────────┘
            ```","","","","","","Map"
"25.6.2.5","replicate",0,0,"","","System","","","","","","",""
"25.6.2.5","formatRow",0,0,"","","System","","","","","","",""
"25.6.2.5","detectLanguage",0,0,"","","System","","","","","","",""
"25.6.2.5","tupleElement",0,0,"","","System","","","","","","",""
"25.6.2.5","roundAge",0,0,"","","System","","","","","","",""
"25.6.2.5","SHA224",0,0,"","","System","Calculates the SHA224 hash of the given string.","SELECT SHA224(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA224 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).","****

```sql title=Query
SELECT HEX(SHA224('abc'));
```

```response title=Response
┌─hex(SHA224('abc'))───────────────────────────────────────┐
│ 23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7 │
└──────────────────────────────────────────────────────────┘
```

","","Hash"
"25.6.2.5","toDecimal32OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","partitionId",0,0,"","","System","","","","","","",""
"25.6.2.5","mapSubtract",0,0,"","","System","","","","","","",""
"25.6.2.5","roundToExp2",0,0,"","","System","","","","","","",""
"25.6.2.5","wordShingleMinHashCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","s2CapUnion",0,0,"","","System","","","","","","",""
"25.6.2.5","firstLine",0,0,"","","System","Returns first line of a multi-line string.","firstLine(string)","- `string` — The string to process.
","The first line of the string or the whole string if there is no line separators.","**Return first line**

```sql title=Query
firstLine('Hello\nWorld')
```

```response title=Response
'Hello'
```

**Return whole string**

```sql title=Query
firstLine('Hello World')
```

```response title=Response
'Hello World'
```

","","String"
"25.6.2.5","currentProfiles",0,0,"","","System","","","","","","",""
"25.6.2.5","CAST",0,1,"","","System","","","","","","",""
"25.6.2.5","mapUpdate",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsUInt256",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramDistanceUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","s2RectUnion",0,0,"","","System","","","","","","",""
"25.6.2.5","filesystemAvailable",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsDate",0,0,"","","System","","","","","","",""
"25.6.2.5","s2ToGeo",0,0,"","","System","","","","","","",""
"25.6.2.5","toMonday",0,0,"","","System","
Rounds down a date or date with time to the Monday of the same week. Returns the date.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toMonday(value)","- `value` — The date or date with time to round down to the Monday of the week. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).
","Returns the date of the Monday of the same week for the given date or date with time. [`Date`](../data-types/date.md).","**Round down to the Monday of the week**

```sql title=Query
SELECT
toMonday(toDateTime('2023-04-21 10:20:30')), -- A Friday
toMonday(toDate('2023-04-24'));              -- Already a Monday
```

```response title=Response
┌─toMonday(toDateTime('2023-04-21 10:20:30'))─┬─toMonday(toDate('2023-04-24'))─┐
│                                  2023-04-17 │                     2023-04-24 │
└─────────────────────────────────────────────┴────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","toColumnTypeName",0,0,"","","System","","","","","","",""
"25.6.2.5","overlayUTF8",0,0,"","","System","
Replace a part of a string `input` with another string `replace`, starting at 1-based index `offset`. By default, the number of characters removed from `input` equals the length of `replace`. If `length` (the optional fourth argument) is specified, a different number of characters is removed.

Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.
","","","","","","String Replacement"
"25.6.2.5","positiveModuloOrNull",0,1,"","","System","
Calculates the remainder when dividing `a` by `b`. Similar to function `positiveModulo` except that `positiveModuloOrNull` will return NULL
if the right argument is 0.
    ","positiveModuloOrNull(x, y)","- `x` — The dividend. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
- `x` — The divisor (modulus). [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","Returns the difference between `x` and the nearest integer not greater than
`x` divisible by `y`, `null` when the divisor is zero.","**positiveModuloOrNull**

```sql title=Query
SELECT positiveModuloOrNull(5, 0)
```

```response title=Response
\N
```

","25.5","Arithmetic"
"25.6.2.5","sipHash128Reference",0,0,"","","System","Like [sipHash128](#hash_functions-siphash128) but implements the 128-bit algorithm from the original authors of SipHash.","","","","**hash**

```sql title=Query
SELECT hex(sipHash128Reference('foo', '\x01', 3))
```

```response title=Response

```

","","Hash"
"25.6.2.5","seriesOutliersDetectTukey",0,0,"","","System","
Detects outliers in series data using [Tukey Fences](https://en.wikipedia.org/wiki/Outlier#Tukey%27s_fences).

**Syntax**

```sql
seriesOutliersDetectTukey(series);
seriesOutliersDetectTukey(series, min_percentile, max_percentile, k);
```

**Arguments**

- `series` - An array of numeric values.
- `min_quantile` - The minimum quantile to be used to calculate inter-quantile range [(IQR)](https://en.wikipedia.org/wiki/Interquartile_range). The value must be in range [0.02,0.98]. The default is 0.25.
- `max_quantile` - The maximum quantile to be used to calculate inter-quantile range (IQR). The value must be in range [0.02, 0.98]. The default is 0.75.
- `k` - Non-negative constant value to detect mild or stronger outliers. The default value is 1.5

At least four data points are required in `series` to detect outliers.

**Returned value**

- Returns an array of the same length as the input array where each value represents score of possible anomaly of corresponding element in the series. A non-zero score indicates a possible anomaly.

Type: [Array](../../sql-reference/data-types/array.md).

**Examples**

Query:

```sql
SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4, 5, 12, 45, 12, 3, 3, 4, 5, 6]) AS print_0;
```

Result:

```text
┌───────────print_0─────────────────┐
│[0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0] │
└───────────────────────────────────┘
```

Query:

```sql
SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4.50, 5, 12, 45, 12, 3.40, 3, 4, 5, 6], 0.2, 0.8, 1.5) AS print_0;
```

Result:

```text
┌─print_0──────────────────────────────┐
│ [0,0,0,0,0,0,0,0,0,19.5,0,0,0,0,0,0] │
└──────────────────────────────────────┘
```","","","","","","Time Series"
"25.6.2.5","intExp2",0,0,"","","System","","","","","","",""
"25.6.2.5","toYearNumSinceEpoch",0,0,"","","System","Returns amount of years passed from year 1970","toYearNumSinceEpoch(date)","- `date` — Date, DateTime or DateTime64
","Positive integer","**Example**

```sql title=Query
SELECT toYearNumSinceEpoch(toDate('2024-10-01'))
```

```response title=Response
54
```

","25.3","Dates and Times"
"25.6.2.5","getServerPort",0,0,"","","System","","","","","","",""
"25.6.2.5","runningDifference",0,0,"","","System","","","","","","",""
"25.6.2.5","getMaxTableNameLengthForDatabase",0,0,"","","System","Returns the maximum table name length in a specified database.","getMaxTableNameLengthForDatabase(database_name)","- `database_name` — The name of the specified database. String.
","Returns the length of the maximum table name, an Integer","**typical**

```sql title=Query
SELECT getMaxTableNameLengthForDatabase('default');
```

```response title=Response
┌─getMaxTableNameLengthForDatabase('default')─┐
            │                                         206 │
            └─────────────────────────────────────────────┘
```

","","Other"
"25.6.2.5","parseDateTime64InJodaSyntaxOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","concatWithSeparatorAssumeInjective",0,0,"","","System","
Same as concatWithSeparator, the difference is that you need to ensure that concatWithSeparator(sep, expr1, expr2, expr3...) → result is injective, it will be used for optimization of GROUP BY.

The function is named ""injective"" if it always returns different result for different values of arguments. In other words: different arguments never yield identical result.
        ","","","","**concatWithSeparatorAssumeInjective**

```sql title=Query
SELECT concatWithSeparatorAssumeInjective('a', '1', '2', '3')
```

```response title=Response

```

","","String"
"25.6.2.5","cutWWW",0,0,"","","System","","","","","","",""
"25.6.2.5","buildId",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramMinHashCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","randFisherF",0,0,"","","System","
Returns a random number from the f-distribution.
The F-distribution is the distribution of X = (S1 / d1) / (S2 / d2) where d1 and d2 are degrees of freedom.
Accepts two parameters - degrees of freedom.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randFisherF(5) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","firstSignificantSubdomainCustomRFC",0,0,"","","System","","","","","","",""
"25.6.2.5","serverUUID",0,0,"","","System","","","","","","",""
"25.6.2.5","hostName",0,0,"","","System","","","","","","",""
"25.6.2.5","L2SquaredNorm",0,0,"","","System","","","","","","",""
"25.6.2.5","mapPartialReverseSort",0,0,"","","System","The same as arrayPartialReverseSort.","","","","**mapPartialReverseSort**

```sql title=Query
SELECT mapPartialReverseSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))
```

```response title=Response

```

","23.4","Map"
"25.6.2.5","extractURLParameter",0,0,"","","System","","","","","","",""
"25.6.2.5","zookeeperSessionUptime",0,0,"","","System","","","","","","",""
"25.6.2.5","jumpConsistentHash",0,0,"","","System","","","","","","",""
"25.6.2.5","minSampleSizeConversion",0,0,"","","System","","","","","","",""
"25.6.2.5","displayName",0,0,"","","System","
Returns the value of `display_name` from config or server FQDN if not set.

[example:displayName]
","","","","**displayName**

```sql title=Query
SELECT displayName();
```

```response title=Response

```

","","Other"
"25.6.2.5","sigmoid",0,0,"","","System","","","","","","",""
"25.6.2.5","sign",0,1,"","","System","","","","","","",""
"25.6.2.5","toTimeOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","sin",0,1,"","","System","Returns the sine of the argument.","sin(x)","- `x` — The number whose sine will be returned. (U)Int*, Float* or Decimal*.
","The sine of x.","**simple**

```sql title=Query
SELECT sin(1.23)
```

```response title=Response
0.9424888019316975
```

","","Mathematical"
"25.6.2.5","polygonPerimeterSpherical",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonsIntersectionCartesian",0,0,"","","System","","","","","","",""
"25.6.2.5","wkt",0,0,"","","System","","","","","","",""
"25.6.2.5","soundex",0,1,"","","System","Returns Soundex code of a string.","","","","","","String"
"25.6.2.5","sleepEachRow",0,0,"","","System","","","","","","",""
"25.6.2.5","YYYYMMDDToDate",0,1,"","","System","
Converts a number containing the year, month and day number to a `Date`.
This function is the opposite of function [`toYYYYMMDD()`](/sql-reference/functions/date-time-functions#toYYYYMMDD).
The output is undefined if the input does not encode a valid Date value.
    ","YYYYMMDDToDate(YYYYMMDD)","- `YYYYMMDD` — Number containing the year, month and day. [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
","Returns a `Date` value from the provided arguments. [`Date`](../data-types/date.md).","**Example**

```sql title=Query
SELECT YYYYMMDDToDate(20230911);
```

```response title=Response
┌─toYYYYMMDD(20230911)─┐
│           2023-09-11 │
└──────────────────────┘
```

","23.9","Dates and Times"
"25.6.2.5","sleep",0,0,"","","System","","","","","","",""
"25.6.2.5","__bitWrapperFunc",0,0,"","","System","","","","","","",""
"25.6.2.5","formatQuery",0,0,"","","System","Returns a formatted, possibly multi-line, version of the given SQL query. Throws in case of a parsing error.
[example:multiline]","formatQuery(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","**multiline**

```sql title=Query
SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

```response title=Response
SELECT
    a,
    b
FROM tab
WHERE (a > 3) AND (b < 3)
```

","","Other"
"25.6.2.5","parseDateTimeInJodaSyntax",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonConvexHullCartesian",0,0,"","","System","","","","","","",""
"25.6.2.5","murmurHash3_32",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayElementOrNull",0,0,"","","System","
Gets the element of the provided array with index `n` where `n` can be any integer type.
If the index falls outside of the bounds of an array, `NULL` is returned instead of a default value.

:::note
Arrays in ClickHouse are one-indexed.
:::

Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, `arr[-1]` is the last item in the array.
","arrayElementOrNull(arrays)","- `arrays` — Arbitrary number of arguments of [`Array`](/sql-reference/data-types/array) type.
","Returns a single combined array from the provided array arguments.","**Usage example**

```sql title=Query
SELECT arrayElementOrNull(arr, 2) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
2
```

**Negative indexing**

```sql title=Query
SELECT arrayElementOrNull(arr, -1) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
3
```

**Index out of array bounds**

```sql title=Query
SELECT arrayElementOrNull(arr, 4) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
NULL
```

","1.1","Arrays"
"25.6.2.5","mortonDecode",0,0,"","","System","
Decodes a Morton encoding (ZCurve) into the corresponding unsigned integer tuple

The function has two modes of operation:
- Simple
- Expanded

Simple: accepts a resulting tuple size as a first argument and the code as a second argument.
[example:simple]
Will decode into: `(1,2,3,4)`
The resulting tuple size cannot be more than 8

Expanded: accepts a range mask (tuple) as a first argument and the code as a second argument.
Each number in mask configures the amount of range shrink
1 - no shrink
2 - 2x shrink
3 - 3x shrink
....
Up to 8x shrink.
[example:range_shrank]
Note: see mortonEncode() docs on why range change might be beneficial.
Still limited to 8 numbers at most.

Morton code for one argument is always the argument itself (as a tuple).
[example:identity]
Produces: `(1)`

You can shrink one argument too:
[example:identity_shrank]
Produces: `(128)`

The function accepts a column of codes as a second argument:
[example:from_table]

The range tuple must be a constant:
[example:from_table_range]
","","","","**simple**

```sql title=Query
SELECT mortonDecode(4, 2149)
```

```response title=Response

```

**range_shrank**

```sql title=Query
SELECT mortonDecode((1,2), 1572864)
```

```response title=Response

```

**identity**

```sql title=Query
SELECT mortonDecode(1, 1)
```

```response title=Response

```

**identity_shrank**

```sql title=Query
SELECT mortonDecode(tuple(2), 32768)
```

```response title=Response

```

**from_table**

```sql title=Query
SELECT mortonDecode(2, code) FROM table
```

```response title=Response

```

**from_table_range**

```sql title=Query
SELECT mortonDecode((1,2), code) FROM table
```

```response title=Response

```

","","Encoding"
"25.6.2.5","subBitmap",0,0,"","","System","Returns a subset of the bitmap, starting from position `offset`. The maximum cardinality of the returned bitmap is `cardinality_limit`.","subBitmap(bitmap, offset, cardinality_limit)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `offset` — Number of set bits to skip from the beginning (zero-based). [`UInt32`](/sql-reference/data-types/int-uint)
- `cardinality_limit` — Maximum number of set bits to include in the subset. [`UInt32`](/sql-reference/data-types/int-uint)
","Returns a bitmap containing at most `limit` set bits, starting after skipping `offset` set bits in ascending order. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(subBitmap(bitmapBuild([1, 2, 3, 4, 5]), 2, 2)) AS res;
```

```response title=Response
┌─res────┐
│ [3, 4] │
└────────┘
```

","21.9","Bitmap"
"25.6.2.5","base64Decode",0,0,"","","System","Accepts a String and decodes it from base64, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-4). Throws an exception in case of an error. Alias: FROM_BASE64.","base64Decode(encoded)","- `encoded` — String column or constant. If the string is not a valid Base64-encoded value, an exception is thrown.
","A string containing the decoded value of the argument.","**Example**

```sql title=Query
SELECT base64Decode('Y2xpY2tob3VzZQ==')
```

```response title=Response
clickhouse
```

","18.16","Encoding"
"25.6.2.5","defaultValueOfArgumentType",0,0,"","","System","","","","","","",""
"25.6.2.5","decrypt",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt16OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toWeek",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsUInt32",0,0,"","","System","","","","","","",""
"25.6.2.5","base64URLDecode",0,0,"","","System","Accepts a base64-encoded URL and decodes it from base64 with URL-specific modifications, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-5).","base64URLDecode(encodedURL)","- `encodedURL` — String column or constant. If the string is not a valid Base64-encoded value, an exception is thrown.
","A string containing the decoded value of the argument.","**Example**

```sql title=Query
SELECT base64URLDecode('aHR0cDovL2NsaWNraG91c2UuY29t')
```

```response title=Response
https://clickhouse.com
```

","24.6","Encoding"
"25.6.2.5","arrayDotProduct",0,0,"","","System","
Returns the dot product of two arrays.

:::note
The sizes of the two vectors must be equal. Arrays and Tuples may also contain mixed element types.
:::
","arrayDotProduct(v1, v2)","- `v1` — First vector. [Array(T)](/sql-reference/data-types/array) or [Tuple(T1, T2, ...)](../data-types/tuple.md) of numeric values.
- `v2` — Second vector. [Array(T)](/sql-reference/data-types/array) or [Tuple(T1, T2, ...)](../data-types/tuple.md) of numeric values.
","The dot product of the two vectors. [Numeric](/native-protocol/columns#numeric-types).

:::note
The return type is determined by the type of the arguments. If Arrays or Tuples contain mixed element types then the result type is the supertype.
:::","**Array example**

```sql title=Query
SELECT arrayDotProduct([1, 2, 3], [4, 5, 6]) AS res, toTypeName(res);
```

```response title=Response
32    UInt16
```

**Tuple example**

```sql title=Query
SELECT dotProduct((1::UInt16, 2::UInt8, 3::Float32),(4::Int16, 5::Float32, 6::UInt8)) AS res, toTypeName(res);
```

```response title=Response
32    Float64
```

","23.5","Arrays"
"25.6.2.5","punycodeEncode",0,0,"","","System","
Computes a Punycode representation of a string.","punycodeEncode(str)","- `str` — Input string
","The punycode representation [String](/sql-reference/data-types/string.md).","**simple**

```sql title=Query
SELECT punycodeEncode('München') AS puny;
```

```response title=Response
┌─puny───────┐
│ Mnchen-3ya │
└────────────┘
```

","","Encoding"
"25.6.2.5","arrayElement",0,0,"","","System","
Gets the element of the provided array with index `n` where `n` can be any integer type.
If the index falls outside of the bounds of an array, it returns a default value (0 for numbers, an empty string for strings, etc.),
except for arguments of a non-constant array and a constant index 0. In this case there will be an error `Array indices are 1-based`.

:::note
Arrays in ClickHouse are one-indexed.
:::

Negative indexes are supported. In this case, the corresponding element is selected, numbered from the end. For example, `arr[-1]` is the last item in the array.

Operator `[n]` provides the same functionality.
    ","arrayElement(arr, n)","- `arr` — The array to search. [`Array(T)`](/sql-reference/data-types/array).
- `n` — Position of the element to get. [`(U)Int*`](/sql-reference/data-types/int-uint).
","Returns a single combined array from the provided array arguments. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayElement(arr, 2) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
2
```

**Negative indexing**

```sql title=Query
SELECT arrayElement(arr, -1) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
3
```

**Using [n] notation**

```sql title=Query
SELECT arr[2] FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
2
```

**Index out of array bounds**

```sql title=Query
SELECT arrayElement(arr, 4) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
0
```

","1.1","Arrays"
"25.6.2.5","RIPEMD160",0,0,"","","System","Calculates the RIPEMD-160 hash of the given string.","SELECT RIPEMD160(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The RIPEMD160 hash of the given input string returned as a [FixedString(20)](../../sql-reference/data-types/fixedstring.md).","****

```sql title=Query
SELECT HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'));
```

```response title=Response
┌─HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'))─┐
│ 37F332F68DB77BD9D7EDD4969571AD671CF9DD3B                      │
└───────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.6.2.5","sqidDecode",0,0,"","","System","
Transforms a [Sqid](https://sqids.org/) back into an array of numbers.","sqidDecode(number1, ...)","- `sqid` — A sqid
","An array of [UInt64](/sql-reference/data-types/int-uint.md).","**simple**

```sql title=Query
SELECT sqidDecode('gXHfJ1C6dN');
```

```response title=Response
┌─sqidDecode('gXHfJ1C6dN')─┐
│ [1,2,3,4,5]              │
└──────────────────────────┘
```

","","Encoding"
"25.6.2.5","farmHash64",0,0,"","","System","","","","","","",""
"25.6.2.5","snowflakeIDToDateTime64",0,0,"","","System","Returns the timestamp component of a [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as a value of type [DateTime64](../data-types/datetime64.md).","snowflakeIDToDateTime64(value[, epoch[, time_zone]])","- `value` — Snowflake ID. [UInt64](../data-types/int-uint.md)
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
- `time_zone` — [Timezone](/operations/server-configuration-parameters/settings.md/#server_configuration_parameters-timezone). The function parses `time_string` according to the timezone. Optional. [String](../data-types/string.md)
","The timestamp component of `value` as a [DateTime64](../data-types/datetime64.md) with scale = 3, i.e. millisecond precision.","**simple**

```sql title=Query
SELECT snowflakeIDToDateTime64(7204436857747984384)
```

```response title=Response
2024-06-06 10:59:58
```

","24.6","UUID"
"25.6.2.5","arrayReverseSplit",0,0,"","","System","Split a source array into multiple arrays. When `func(x[, y1, ..., yN])` returns something other than zero, the array will be split to the right of the element. The array will not be split after the last element.","arrayReverseSplit(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array of arrays. [`Array(Array(T))`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayReverseSplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res
```

```response title=Response
[[1], [2, 3, 4], [5]]
```

","20.1","Arrays"
"25.6.2.5","transactionOldestSnapshot",0,0,"","","System","","","","","","",""
"25.6.2.5","dumpColumnStructure",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchFirstIndex",0,0,"","","System","","","","","","",""
"25.6.2.5","ngramMinHashArg",0,0,"","","System","","","","","","",""
"25.6.2.5","snowflakeIDToDateTime",0,0,"","","System","Returns the timestamp component of a [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as a value of type [DateTime](../data-types/datetime.md).","snowflakeIDToDateTime(value[, epoch[, time_zone]])","- `value` — Snowflake ID. [UInt64](../data-types/int-uint.md)
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
- `time_zone` — [Timezone](/operations/server-configuration-parameters/settings.md/#server_configuration_parameters-timezone). The function parses `time_string` according to the timezone. Optional. [String](../data-types/string.md)
","The timestamp component of `value` as a [DateTime](../data-types/datetime.md) value.","**simple**

```sql title=Query
SELECT snowflakeIDToDateTime(7204436857747984384)
```

```response title=Response
2024-06-06 10:59:58
```

","24.6","UUID"
"25.6.2.5","protocol",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchAllPositionsUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","divideOrNull",0,0,"","","System","
Same as `divide` but returns NULL when dividing by zero.
    ","divideOrNull(x, y)","- `x` — Dividend
- `y` — Divisor
","The quotient of x and y, or NULL.","**Dividing by zero**

```sql title=Query
SELECT divideOrNull(25, 0)
```

```response title=Response
\N
```

","25.5","Arithmetic"
"25.6.2.5","toYearWeek",0,0,"","","System","","","","","","",""
"25.6.2.5","toInt8",0,0,"","","System","","","","","","",""
"25.6.2.5","s2RectContains",0,0,"","","System","","","","","","",""
"25.6.2.5","synonyms",0,1,"","","System","","","","","","",""
"25.6.2.5","ULIDStringToDateTime",0,0,"","","System","
This function extracts the timestamp from a ULID and returns it as a DateTime64(3) typed value.
The function expects the ULID to be provided as the first argument, which can be either a String or a FixedString(26) data type.
An optional second argument can be passed to specify a timezone for the timestamp.
","","","","**ulid**

```sql title=Query
SELECT ULIDStringToDateTime(generateULID())
```

```response title=Response

```

**timezone**

```sql title=Query
SELECT ULIDStringToDateTime(generateULID(), 'Asia/Istanbul')
```

```response title=Response

```

","","ULID"
"25.6.2.5","addNanoseconds",0,0,"","","System","
Adds a specified number of nanoseconds to a date with time or a string-encoded date with time.
    ","addNanoseconds(datetime, num)","- `datetime` — Date with time to add specified number of nanoseconds to. [`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of nanoseconds to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` nanoseconds. [`DateTime64`](../data-types/datetime64.md).","**Add nanoseconds to different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addNanoseconds(date_time, 1000) AS add_nanoseconds_with_date_time,
    addNanoseconds(date_time_string, 1000) AS add_nanoseconds_with_date_time_string
```

```response title=Response
┌─add_nanoseconds_with_date_time─┬─add_nanoseconds_with_date_time_string─┐
│  2024-01-01 00:00:00.000001000 │         2024-01-01 00:00:00.000001000 │
└────────────────────────────────┴───────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::DateTime, INTERVAL 1000 nanosecond)
```

```response title=Response
┌─plus(CAST('199⋯osecond(1000))─┐
│ 1998-06-16 00:00:00.000001000 │
└───────────────────────────────┘
```

","22.6","Dates and Times"
"25.6.2.5","timestamp",0,1,"","","System","
Converts the first argument `expr` to type [`DateTime64(6)`](/sql-reference/data-types/datetime64).
If a second argument `expr_time` is provided, it adds the specified time to the converted value.
    ","timestamp(expr[, expr_time])","- `expr` — Date or date with time. [`String`](/sql-reference/data-types/string).
- `expr_time` — Optional. Time to add to the converted value. [`String`](/sql-reference/data-types/string).
","Returns the converted value of `expr`, or `expr` with added time. [`DateTime64(6)`](../data-types/datetime64.md).","**Convert date string to DateTime64(6)**

```sql title=Query
SELECT timestamp('2023-12-31') AS ts;
```

```response title=Response
┌─────────────────────────ts─┐
│ 2023-12-31 00:00:00.000000 │
└────────────────────────────┘
```

**Add time to date string**

```sql title=Query
SELECT timestamp('2023-12-31 12:00:00', '12:00:00.11') AS ts;
```

```response title=Response
┌─────────────────────────ts─┐
│ 2024-01-01 00:00:00.110000 │
└────────────────────────────┘
```

","23.9","Dates and Times"
"25.6.2.5","toDayOfWeek",0,0,"","","System","
Returns the number of the day within the week of a `Date` or `DateTime` value.

The two-argument form of `toDayOfWeek()` enables you to specify whether the week starts on Monday or Sunday,
and whether the return value should be in the range from 0 to 6 or 1 to 7.

| Mode | First day of week | Range                                          |
|------|-------------------|------------------------------------------------|
| 0    | Monday            | 1-7: Monday = 1, Tuesday = 2, ..., Sunday = 7  |
| 1    | Monday            | 0-6: Monday = 0, Tuesday = 1, ..., Sunday = 6  |
| 2    | Sunday            | 0-6: Sunday = 0, Monday = 1, ..., Saturday = 6 |
| 3    | Sunday            | 1-7: Sunday = 1, Monday = 2, ..., Saturday = 7 |
        ","toDayOfWeek(datetime[, mode[, timezone]])","- `datetime` — A Date or DateTime value to get the day of week from. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
- `mode` — Optional. Integer specifying the week mode (0-3). Defaults to 0 if omitted.
- `timezone` — Optional. String specifying the timezone.
","Returns the day of the week for the given `Date` or `DateTime`. [`UInt8`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
-- The following date is April 21, 2023, which was a Friday:
SELECT
    toDayOfWeek(toDateTime('2023-04-21')),
    toDayOfWeek(toDateTime('2023-04-21'), 1)
```

```response title=Response
┌─toDayOfWeek(toDateTime('2023-04-21'))─┬─toDayOfWeek(toDateTime('2023-04-21'), 1)─┐
│                                     5 │                                        4 │
└───────────────────────────────────────┴──────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","randChiSquared",0,0,"","","System","
Returns a random number from the chi-squared distribution (a distribution of a sum of the squares of k independent standard normal random variables).
Accepts one parameter - degree of freedom.

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT randChiSquared(5) FROM numbers(100000);
```

```response title=Response

```

","","Random Number"
"25.6.2.5","abs",0,1,"","","System","Calculates the absolute value of `x`. Has no effect if `x` is of an unsigned type. If `x` is of a signed type, it returns an unsigned number.","abs(x)","- `x` — Value to get the absolute value of
","The absolute value of `x`","**Usage example**

```sql title=Query
SELECT abs(-0.5)
```

```response title=Response
0.5
```

","1.1","Arithmetic"
"25.6.2.5","toValidUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfYear",0,0,"","","System","
Rounds down a date or date with time to the first day of the year. Returns the date as a `Date` object.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfYear(value)","- `value` — The date or date with time to round down. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).
","Returns the first day of the year for the given date/time. [`Date`](../data-types/date.md).","**Round down to the first day of the year**

```sql title=Query
SELECT toStartOfYear(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toStartOfYear(toDateTime('2023-04-21 10:20:30'))─┐
│                                       2023-01-01 │
└──────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","demangle",0,0,"","","System","","","","","","",""
"25.6.2.5","bin",0,1,"","","System","","","","","","",""
"25.6.2.5","toDayOfYear",0,0,"","","System","
Returns the number of the day within the year (1-366) of a `Date` or `DateTime` value.
        ","toDayOfYear(datetime)","- `datetime` — A Date or DateTime value to get the day of year from. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","Returns the day of the year of the given Date or DateTime. [`UInt16`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toDayOfYear(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toDayOfYear(toDateTime('2023-04-21 10:20:30'))─┐
│                                            111 │
└────────────────────────────────────────────────┘
```

","18.4","Dates and Times"
"25.6.2.5","mapSort",0,0,"","","System","The same as arraySort.","","","","**mapSort**

```sql title=Query
SELECT mapSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))
```

```response title=Response

```

","23.4","Map"
"25.6.2.5","h3CellAreaRads2",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfDay",0,0,"","","System","","","","","","",""
"25.6.2.5","readWKBPoint",0,0,"","","System","
    Parses a Well-Known Binary (WKB) representation of a Point geometry and returns it in the internal ClickHouse format.
    ","readWKBPoint(wkt_string)","- `wkb_string` — The input WKB string representing a Point geometry.
","The function returns a ClickHouse internal representation of the point geometry.","**first call**

```sql title=Query
SELECT readWKBPoint(unhex('010100000000000000000000000000000000000000'));
```

```response title=Response
┌─readWKBPoint(unhex'010100000000000000000000000...'))─┐
    │ (0,0)                                                │
    └──────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.6.2.5","arrayAUCPR",0,0,"","","System","
Calculates the area under the precision-recall (PR) curve.
A precision-recall curve is created by plotting precision on the y-axis and recall on the x-axis across all thresholds.
The resulting value ranges from 0 to 1, with a higher value indicating better model performance.
The PR AUC is particularly useful for imbalanced datasets, providing a clearer comparison of performance compared to ROC AUC on those cases.
For more details, please see [here](https://developers.google.com/machine-learning/glossary#pr-auc-area-under-the-pr-curve), [here](https://developers.google.com/machine-learning/crash-course/classification/roc-and-auc#expandable-1) and [here](https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve).
","arrayAUCPR(scores, labels[, partial_offsets])","- `cores` — Scores prediction model gives. [Array](/sql-reference/data-types/array) of [Integers](../data-types/int-uint.md) or [Floats](../data-types/float.md).
- `labels` — Labels of samples, usually 1 for positive sample and 0 for negative sample. [Array](/sql-reference/data-types/array) of [Integers](../data-types/int-uint.md) or [Enums](../data-types/enum.md).
- `partial_offsets` — 
- Optional. An [`Array(T)`](/sql-reference/data-types/array) of three non-negative integers for calculating a partial area under the PR curve (equivalent to a vertical band of the PR space) instead of the whole AUC. This option is useful for distributed computation of the PR AUC. The array must contain the following elements [`higher_partitions_tp`, `higher_partitions_fp`, `total_positives`]. [Array](/sql-reference/data-types/array) of non-negative [Integers](../data-types/int-uint.md). Optional.
    - `higher_partitions_tp`: The number of positive labels in the higher-scored partitions.
    - `higher_partitions_fp`: The number of negative labels in the higher-scored partitions.
    - `total_positives`: The total number of positive samples in the entire dataset.

::::note
When `arr_partial_offsets` is used, the `arr_scores` and `arr_labels` should be only a partition of the entire dataset, containing an interval of scores.
The dataset should be divided into contiguous partitions, where each partition contains the subset of the data whose scores fall within a specific range.
For example:
- One partition could contain all scores in the range [0, 0.5).
- Another partition could contain scores in the range [0.5, 1.0].
::::

","Returns area under the precision-recall (PR) curve. [Float64](../data-types/float.md).","**Usage example**

```sql title=Query
SELECT arrayAUCPR([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1]);
```

```response title=Response
┌─arrayAUCPR([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1])─┐
│                              0.8333333333333333 │
└─────────────────────────────────────────────────┘
```

","20.4","Arrays"
"25.6.2.5","SHA1",0,0,"","","System","Calculates the SHA1 hash of the given string.","SELECT SHA1(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA1 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).","****

```sql title=Query
SELECT HEX(SHA1('abc'));
```

```response title=Response
┌─hex(SHA1('abc'))─────────────────────────┐
│ A9993E364706816ABA3E25717850C26C9CD0D89D │
└──────────────────────────────────────────┘
```

","","Hash"
"25.6.2.5","toModifiedJulianDay",0,0,"","","System","","","","","","",""
"25.6.2.5","toMonth",0,0,"","","System","
Returns the month component (1-12) of a `Date` or `DateTime` value.
    ","toMonth(datetime)","- `datetime` — A Date or DateTime value to get the month from. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64).
","Returns the month of the given date/time. [`UInt8`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT toMonth(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toMonth(toDateTime('2023-04-21 10:20:30'))─┐
│                                          4 │
└────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","greatest",0,1,"","","System","
Returns the greatest value among the arguments.

- For arrays, returns the lexicographically greatest array.
- For DateTime types, the result type is promoted to the largest type (e.g., DateTime64 if mixed with DateTime32).
    ","greatest(x1[, x2, ..., xN])","- `x1[, x2, ..., xN]` — One or multiple values to compare. All arguments must be of comparable types.
","The greatest value among the arguments, promoted to the largest compatible type.","**Numeric types**

```sql title=Query
SELECT greatest(1, 2, toUInt8(3), 3.) AS result, toTypeName(result) AS type;
-- The type returned is a Float64 as the UInt8 must be promoted to 64 bit for the comparison.
```

```response title=Response
┌─result─┬─type────┐
│      3 │ Float64 │
└────────┴─────────┘
```

**Arrays**

```sql title=Query
SELECT greatest(['hello'], ['there'], ['world']);
```

```response title=Response
┌─greatest(['hello'], ['there'], ['world'])─┐
│ ['world']                                 │
└───────────────────────────────────────────┘
```

**DateTime types**

```sql title=Query
SELECT greatest(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3));
-- The type returned is a DateTime64 as the DateTime32 must be promoted to 64 bit for the comparison.
```

```response title=Response
┌─greatest(toD⋯(now(), 3))─┐
│  2025-05-28 15:50:53.000 │
└──────────────────────────┘
```

","1.1","Conditional"
"25.6.2.5","toRelativeMinuteNum",0,0,"","","System","","","","","","",""
"25.6.2.5","hypot",0,1,"","","System","","","","","","",""
"25.6.2.5","initcap",0,1,"","","System","","","","","","",""
"25.6.2.5","dictGetDateTimeOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the DateTime if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","file",0,0,"","","System","","","","","","",""
"25.6.2.5","toRelativeMonthNum",0,0,"","","System","","","","","","",""
"25.6.2.5","multiFuzzyMatchAny",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfWeek",0,0,"","","System","","","","","","",""
"25.6.2.5","toDecimal256",0,0,"","","System","","","","","","",""
"25.6.2.5","asin",0,1,"","","System","
Calculates the arcsine of the argument.

Takes arbitrary numeric type, which includes floating point and integer numbers, as well as big integers and decimals and returns Float64.

For arguments in range [-1, 1] it returns the value in range of [-pi() / 2, pi() / 2].

It represents an inverse function to function 'sin' on this range:
[example:inverse]

It always returns Float64, even if the argument has Float32 type:
[example:float32]

For arguments outside of this range, it returns nan:
[example:nan]

Every self-respectful data scientist knows how to apply arcsine to improve ads click-through rate with ClickHouse.
For more details, see [https://en.wikipedia.org/wiki/Inverse_trigonometric_functions].
","","","","**inverse**

```sql title=Query
SELECT asin(1.0) = pi() / 2, sin(asin(1)), asin(sin(1))
```

```response title=Response

```

**float32**

```sql title=Query
SELECT toTypeName(asin(1.0::Float32))
```

```response title=Response

```

**nan**

```sql title=Query
SELECT asin(1.1), asin(-2), asin(inf), asin(nan)
```

```response title=Response

```

","","Mathematical"
"25.6.2.5","cutFragment",0,0,"","","System","","","","","","",""
"25.6.2.5","h3Line",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchFirstPositionCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","tokens",0,0,"","","System","Splits the text into tokens by a given tokenizer.","","","","","","String Splitting"
"25.6.2.5","emptyArrayFloat64",0,0,"","","System","Returns an empty Float64 array","emptyArrayFloat64()","","An empty Float64 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayFloat64
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","multiSearchAnyUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","age",0,1,"","","System","","","","","","",""
"25.6.2.5","mapConcat",0,0,"","","System","The same as arrayConcat.","","","","**mapConcat**

```sql title=Query
SELECT mapConcat(map('k1', 'v1'), map('k2', 'v2'))
```

```response title=Response

```

","23.4","Map"
"25.6.2.5","subtractNanoseconds",0,0,"","","System","
Subtracts a specified number of nanoseconds from a date with time or a string-encoded date with time.
    ","subtractNanoseconds(datetime, num)","- `datetime` — Date with time to subtract specified number of nanoseconds from. [`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of nanoseconds to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` nanoseconds. [`DateTime64`](../data-types/datetime64.md).","**Subtract nanoseconds from different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractNanoseconds(date_time, 1000) AS subtract_nanoseconds_with_date_time,
    subtractNanoseconds(date_time_string, 1000) AS subtract_nanoseconds_with_date_time_string
```

```response title=Response
┌─subtract_nanoseconds_with_date_time─┬─subtract_nanoseconds_with_date_time_string─┐
│       2023-12-31 23:59:59.999999000 │              2023-12-31 23:59:59.999999000 │
└─────────────────────────────────────┴────────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::DateTime, INTERVAL 10 nanosecond)
```

```response title=Response
┌─minus(CAST('19⋯anosecond(10))─┐
│ 1998-06-15 23:59:59.999999990 │
└───────────────────────────────┘
```

","20.1","Dates and Times"
"25.6.2.5","queryStringAndFragment",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt32OrDefault",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayFloat32",0,0,"","","System","Returns an empty Float32 array","emptyArrayFloat32()","","An empty Float32 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayFloat32
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","multiFuzzyMatchAllIndices",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayInt32",0,0,"","","System","Returns an empty Int32 array","emptyArrayInt32()","","An empty Int32 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayInt32
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","array",0,0,"","","System","
Creates an array from the function arguments.

The arguments should be constants and have types that share a common supertype.
At least one argument must be passed, because otherwise it isn't clear which type of array to create.
This means that you can't use this function to create an empty array. To do so, use the `emptyArray*` function.

Use the `[ ]` operator for the same functionality.
    ","array(x1 [, x2, ..., xN])","- `x1` — Constant value of any type T. If only this argument is provided, the array will be of type T.
- `[, x2, ..., xN]` — Additional N constant values sharing a common supertype with `x1`
","Returns an 'Array(T)' type result, where 'T' is the smallest common type out of the passed arguments.","**Valid usage**

```sql title=Query
SELECT array(toInt32(1), toUInt16(2), toInt8(3)) AS a, toTypeName(a)
```

```response title=Response
┌─a───────┬─toTypeName(a)─┐
│ [1,2,3] │ Array(Int32)  │
└─────────┴───────────────┘
```

**Invalid usage**

```sql title=Query
SELECT array(toInt32(5), toDateTime('1998-06-16'), toInt8(5)) AS a, toTypeName(a)
```

```response title=Response
Received exception from server (version 25.4.3):
Code: 386. DB::Exception: Received from localhost:9000. DB::Exception:
There is no supertype for types Int32, DateTime, Int8 ...
```

","1.1","Arrays"
"25.6.2.5","simpleJSONExtractString",0,0,"","","System","Parses String in double quotes from the value of the field named field_name.

        There is currently no support for code points in the format \uXXXX\uYYYY that are not from the basic multilingual plane (they are converted to CESU-8 instead of UTF-8).","simpleJSONExtractString(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the value of a field as a String, including separators. The value is unescaped. It returns an empty String: if the field doesn't contain a double quoted string, if unescaping fails or if the field doesn't exist.","**simple**

```sql title=Query
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""\\n\\u0000""}');
INSERT INTO jsons VALUES ('{""foo"":""\\u263""}');
INSERT INTO jsons VALUES ('{""foo"":""\\u263a""}');
INSERT INTO jsons VALUES ('{""foo"":""hello}');

SELECT simpleJSONExtractString(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
\n\0

☺
```

","","JSON"
"25.6.2.5","toUInt128",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayUInt64",0,0,"","","System","Returns an empty UInt64 array","emptyArrayUInt64()","","An empty UInt64 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayUInt64
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","mapKeys",0,0,"","","System","Returns an array with the keys of map.","","","","**mapKeys**

```sql title=Query
SELECT mapKeys(map('k1', 'v1', 'k2', 'v2'))
```

```response title=Response

```

","21.2","Map"
"25.6.2.5","arrayEnumerate",0,0,"","","System","
Returns the array `[1, 2, 3, ..., length (arr)]`

This function is normally used with the [`ARRAY JOIN`](/sql-reference/statements/select/array-join) clause. It allows counting something just
once for each array after applying `ARRAY JOIN`.
This function can also be used in higher-order functions. For example, you can use it to get array indexes for elements that match a condition.
","arrayEnumerate(arr)","- `arr` — The array to enumerate. [`Array`](/sql-reference/data-types/array).
","Returns the array `[1, 2, 3, ..., length (arr)]`. Array(UInt32)","**Basic example with ARRAY JOIN**

```sql title=Query
CREATE TABLE test
(
    `id` UInt8,
    `tag` Array(String),
    `version` Array(String)
)
ENGINE = MergeTree
ORDER BY id;

INSERT INTO test VALUES (1, ['release-stable', 'dev', 'security'], ['2.4.0', '2.6.0-alpha', '2.4.0-sec1']);

SELECT
    id,
    tag,
    version,
    seq
FROM test
ARRAY JOIN
    tag,
    version,
    arrayEnumerate(tag) AS seq
```

```response title=Response
┌─id─┬─tag────────────┬─version─────┬─seq─┐
│  1 │ release-stable │ 2.4.0       │   1 │
│  1 │ dev            │ 2.6.0-alpha │   2 │
│  1 │ security       │ 2.4.0-sec1  │   3 │
└────┴────────────────┴─────────────┴─────┘
```

","1.1","Arrays"
"25.6.2.5","tupleNegate",0,0,"","","System","","","","","","",""
"25.6.2.5","toRelativeQuarterNum",0,0,"","","System","","","","","","",""
"25.6.2.5","widthBucket",0,0,"","","System","
Returns the number of the bucket in which `operand` falls in a histogram having `count` equal-width buckets spanning the range `low` to `high`. Returns `0` if `operand < low`, and returns `count+1` if `operand >= high`.

`operand`, `low`, `high` can be any native number type. `count` can only be unsigned native integer and its value cannot be zero.

**Syntax**

```sql
widthBucket(operand, low, high, count)
```

There is also a case insensitive alias called `WIDTH_BUCKET` to provide compatibility with other databases.

**Example**

Query:
[example:simple]

Result:

```text
┌─widthBucket(10.15, -8.6, 23, 18)─┐
│                               11 │
└──────────────────────────────────┘
```
","","","","**simple**

```sql title=Query
SELECT widthBucket(10.15, -8.6, 23, 18)
```

```response title=Response

```

","","Mathematical"
"25.6.2.5","toNullable",0,0,"","","System","","","","","","",""
"25.6.2.5","formatReadableSize",0,0,"","","System","","","","","","",""
"25.6.2.5","logTrace",0,0,"","","System","","","","","","",""
"25.6.2.5","minus",0,0,"","","System","
Calculates the difference of two values `a` and `b`. The result is always signed.
Similar to plus, it is possible to subtract an integer from a date or date with time.
Additionally, subtraction between date with time is supported, resulting in the time difference between them.
    ","minus(x, y)","- `x` — Minuend
- `y` — Subtrahend
","x minus y","**Subtracting two numbers**

```sql title=Query
SELECT minus(10,5)
```

```response title=Response
5
```

**Subtracting an integer and a date**

```sql title=Query
SELECT minus(toDate('2025-01-01'),5)
```

```response title=Response
2024-12-27
```

","1.1","Arithmetic"
"25.6.2.5","bitmapToArray",0,0,"","","System","Converts a bitmap to an array of unsigned integers. It is the opposite of function [`bitmapBuild`](/sql-reference/functions/bitmap-functions#bitmapbuild).","bitmapToArray(bitmap)","- `bitmap` — Bitmap to convert. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
","Returns an array of unsigned integers contained in the bitmap. [`Array(UInt*)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapBuild([1, 2, 3, 4, 5])) AS res;
```

```response title=Response
┌─res─────────────┐
│ [1, 2, 3, 4, 5] │
└─────────────────┘
```

","20.1","Bitmap"
"25.6.2.5","arrayMax",0,0,"","","System","
Returns the maximum element in the source array.

If a lambda function `func` is specified, returns the maximum element of the lambda results.
    ","arrayMax([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the maximum element in the source array, or the minimum element of the lambda results if provided.","**Basic example**

```sql title=Query
SELECT arrayMax([5, 3, 2, 7]);
```

```response title=Response
7
```

**Usage with lambda function**

```sql title=Query
SELECT arrayMax(x, y -> x/y, [4, 8, 12, 16], [1, 2, 1, 2]);
```

```response title=Response
12
```

","21.1","Arrays"
"25.6.2.5","toRelativeYearNum",0,0,"","","System","","","","","","",""
"25.6.2.5","LpNormalize",0,0,"","","System","","","","","","",""
"25.6.2.5","toYYYYMMDD",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfFifteenMinutes",0,0,"","","System","","","","","","",""
"25.6.2.5","toRelativeWeekNum",0,0,"","","System","","","","","","",""
"25.6.2.5","wordShingleMinHashArg",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayROCAUC",0,0,"","","System","
Calculates the area under the receiver operating characteristic (ROC) curve.
A ROC curve is created by plotting True Positive Rate (TPR) on the y-axis and False Positive Rate (FPR) on the x-axis across all thresholds.
The resulting value ranges from zero to one, with a higher value indicating better model performance.

The ROC AUC (also known as simply AUC) is a concept in machine learning.
For more details, please see [here](https://developers.google.com/machine-learning/glossary#pr-auc-area-under-the-pr-curve), [here](https://developers.google.com/machine-learning/crash-course/classification/roc-and-auc#expandable-1) and [here](https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve).
","arrayROCAUC(scores, labels[, scale[, partial_offsets]])","- `scores` — Scores prediction model gives. [`Array(T)`](/sql-reference/data-types/array) of [Integers](../data-types/int-uint.md) or [Floats](../data-types/float.md).
- `labels` — Labels of samples, usually 1 for positive sample and 0 for negative sample. [Array](/sql-reference/data-types/array) of [Integers](../data-types/int-uint.md) or [Enums](../data-types/enum.md).
- `scale` — Decides whether to return the normalized area. If false, returns the area under the TP (true positives) x FP (false positives) curve instead. Default value: true. [Bool](../data-types/boolean.md). Optional.
- `partial_offsets` — 
- An array of four non-negative integers for calculating a partial area under the ROC curve (equivalent to a vertical band of the ROC space) instead of the whole AUC. This option is useful for distributed computation of the ROC AUC. The array must contain the following elements [`higher_partitions_tp`, `higher_partitions_fp`, `total_positives`, `total_negatives`]. [Array](/sql-reference/data-types/array) of non-negative [Integers](../data-types/int-uint.md). Optional.
    - `higher_partitions_tp`: The number of positive labels in the higher-scored partitions.
    - `higher_partitions_fp`: The number of negative labels in the higher-scored partitions.
    - `total_positives`: The total number of positive samples in the entire dataset.
    - `total_negatives`: The total number of negative samples in the entire dataset.

::::note
When `arr_partial_offsets` is used, the `arr_scores` and `arr_labels` should be only a partition of the entire dataset, containing an interval of scores.
The dataset should be divided into contiguous partitions, where each partition contains the subset of the data whose scores fall within a specific range.
For example:
- One partition could contain all scores in the range [0, 0.5).
- Another partition could contain scores in the range [0.5, 1.0].
::::

","Returns area under the receiver operating characteristic (ROC) curve. [Float64](../data-types/float.md).","**Usage example**

```sql title=Query
SELECT arrayROCAUC([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1]);
```

```response title=Response
0.75
```

","20.4","Arrays"
"25.6.2.5","toStartOfFiveMinutes",0,0,"","","System","","","","","","",""
"25.6.2.5","sparseGrams",0,0,"","","System","Finds all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.","","- `s` — An input string
- `min_ngram_length` — The minimum length of extracted ngram. The default and minimal value is 3
- `max_ngram_length` — The maximum length of extracted ngram. The default value is 100. Should be not less than 'min_ngram_length'
","An array of selected substrings","","","String"
"25.6.2.5","IPv4ToIPv6",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfMicrosecond",0,0,"","","System","","","","","","",""
"25.6.2.5","reinterpretAsUInt128",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayDistinct",0,0,"","","System","Returns an array containing only the distinct elements of an array.","arrayDistinct(arr)","- `arr` — Array for which to extract distinct elements. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array containing the distinct elements. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayDistinct([1, 2, 2, 3, 1]);
```

```response title=Response
[1,2,3]
```

","1.1","Arrays"
"25.6.2.5","byteSwap",0,1,"","","System","
Reverses the bytes of an integer, i.e. changes its [endianness](https://en.wikipedia.org/wiki/Endianness).

The below example can be worked out in the following manner:

1. Convert the base-10 integer to its equivalent hexadecimal format in big-endian format, i.e. 3351772109 -> C7 C7 FB CD (4 bytes)
2. Reverse the bytes, i.e. C7 C7 FB CD -> CD FB C7 C7
3. Convert the result back to an integer assuming big-endian, i.e. CD FB C7 C7 -> 3455829959
One use case of this function is reversing IPv4s:

```result
┌─toIPv4(byteSwap(toUInt32(toIPv4('205.251.199.199'))))─┐
│ 199.199.251.205                                       │
└───────────────────────────────────────────────────────┘
```
    ","byteSwap(x)","- `x` — An integer value.
","x with bytes reversed","**Usage example**

```sql title=Query
SELECT byteSwap(3351772109)
```

```response title=Response
3455829959
```

**8-bit**

```sql title=Query
SELECT byteSwap(54)
```

```response title=Response
54
```

**16-bit**

```sql title=Query
SELECT byteSwap(4135)
```

```response title=Response
10000
```

**32-bit**

```sql title=Query
SELECT byteSwap(3351772109)
```

```response title=Response
3455829959
```

**64-bit**

```sql title=Query
SELECT byteSwap(123294967295)
```

```response title=Response
18439412204227788800
```

","23.10","Arithmetic"
"25.6.2.5","arrayCount",0,0,"","","System","
Returns the number of elements for which `func(arr1[i], ..., arrN[i])` returns true.
If `func` is not specified, it returns the number of non-zero elements in the array.

`arrayCount` is a [higher-order function](/sql-reference/functions/overview#higher-order-functions).
    ","arrayCount([func, ] arr1, ...)","- `func` — Function to apply to each element of the array(s). Optional. [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `arr1, ..., arrN` — N arrays. [Array(T)](/sql-reference/data-types/array).
","Returns the number of elements for which `func` returns true. Otherwise, returns the number of non-zero elements in the array.","**Usage example**

```sql title=Query
SELECT arrayCount(x -> (x % 2), groupArray(number) FROM numbers(10)
```

```response title=Response
5
```

","1.1","Arrays"
"25.6.2.5","hasColumnInTable",0,0,"","","System","","","","","","",""
"25.6.2.5","toRelativeHourNum",0,0,"","","System","","","","","","",""
"25.6.2.5","CRC64",0,1,"","","System","","","","","","",""
"25.6.2.5","bitNot",0,0,"","","System","Performs the bitwise NOT operation.","bitNot(a)","- `a` — Value for which to apply bitwise NOT operation. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float)/[String](/sql-reference/data-types/string).
","Returns the result of `~a` i.e `a` with bits flipped.","**Usage example**

```sql title=Query
SELECT
    CAST('5', 'UInt8') AS original,
    bin(original) AS original_binary,
    bitNot(original) AS result,
    bin(bitNot(original)) AS result_binary;
```

```response title=Response
┌─original─┬─original_binary─┬─result─┬─result_binary─┐
│        5 │ 00000101        │    250 │ 11111010      │
└──────────┴─────────────────┴────────┴───────────────┘
```

","1.1","Bit"
"25.6.2.5","joinGet",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchAnyCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","upperUTF8",0,0,"","","System","Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.","upperUTF8(input)","- `input` — Input with String type
","A String data type value","**first**

```sql title=Query
SELECT upperUTF8('München') as Upperutf8;
```

```response title=Response
MÜNCHEN
```

","1.1","String"
"25.6.2.5","validateNestedArraySizes",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfInterval",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfMonth",0,0,"","","System","
Rounds down a date or date with time to the first day of the month.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfMonth(value)","- `value` — The date or date with time to round down to the first day of the month. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).
","Returns the first day of the month for the given date or date with time. [`Date`](../data-types/date.md).","**Round down to the first day of the month**

```sql title=Query
SELECT toStartOfMonth(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toStartOfMonth(toDateTime('2023-04-21 10:20:30'))─┐
│                                        2023-04-01 │
└───────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","toStartOfQuarter",0,0,"","","System","
Rounds down a date or date with time to the first day of the quarter. The first day of the quarter is either 1 January, 1 April, 1 July, or 1 October.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfQuarter(value)","- `value` — The date or date with time to round down to the first day of the quarter. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).
","Returns the first day of the quarter for the given date or date with time. [`Date`](../data-types/date.md).","**Round down to the first day of the quarter**

```sql title=Query
SELECT toStartOfQuarter(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toStartOfQuarter(toDateTime('2023-04-21 10:20:30'))─┐
│                                          2023-04-01 │
└─────────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","structureToCapnProtoSchema",0,0,"","","System","
Function that converts ClickHouse table structure to CapnProto format schema
","","","","**random**

```sql title=Query
SELECT structureToCapnProtoSchema('s String, x UInt32', 'MessageName') format TSVRaw
```

```response title=Response
struct MessageName
{
    s @0 : Data;
    x @1 : UInt32;
}
```

","","Other"
"25.6.2.5","variantType",0,0,"","","System","
Returns the variant type name for each row of `Variant` column. If row contains NULL, it returns 'None' for it.
","variantType(variant)","- `variant` — Variant column
","","**Example**

```sql title=Query
CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT variantType(v) FROM test;
```

```response title=Response
┌─variantType(v)─┐
│ None           │
│ UInt64         │
│ String         │
│ Array(UInt64)  │
└────────────────┘
```

","","JSON"
"25.6.2.5","mapExtractKeyLike",0,0,"","","System","Returns a map with elements which key matches the specified pattern.","","","","**mapExtractKeyLike**

```sql title=Query
SELECT mapExtractKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')
```

```response title=Response

```

","23.4","Map"
"25.6.2.5","toUnixTimestamp",0,0,"","","System","
Converts a `String`, `Date`, or `DateTime` to a Unix timestamp (seconds since `1970-01-01 00:00:00 UTC`) as `UInt32`.
    ","toUnixTimestamp(date, [timezone])","- `date` — Value to convert. [`Date`](/sql-reference/data-types/date)/[`Date32`](/sql-reference/data-types/date32)/[`DateTime`](/sql-reference/data-types/datetime)/[`DateTime64`](/sql-reference/data-types/datetime64)/[`String`](/sql-reference/data-types/string).
- `timezone` — Optional. Timezone to use for conversion. If not specified, the server's timezone is used. [`String`](/sql-reference/data-types/string).
","Returns the Unix timestamp as [`UInt32`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT
'2017-11-05 08:07:47' AS dt_str,
toUnixTimestamp(dt_str) AS from_str,
toUnixTimestamp(dt_str, 'Asia/Tokyo') AS from_str_tokyo,
toUnixTimestamp(toDateTime(dt_str)) AS from_datetime,
toUnixTimestamp(toDateTime64(dt_str, 0)) AS from_datetime64,
toUnixTimestamp(toDate(dt_str)) AS from_date,
toUnixTimestamp(toDate32(dt_str)) AS from_date32
FORMAT Vertical;
```

```response title=Response
Row 1:
──────
dt_str:          2017-11-05 08:07:47
from_str:        1509869267
from_str_tokyo:  1509836867
from_datetime:   1509869267
from_datetime64: 1509869267
from_date:       1509840000
from_date32:     1509840000
```

","1.1","Dates and Times"
"25.6.2.5","clamp",0,0,"","","System","
Restricts a value to be within the specified minimum and maximum bounds.

If the value is less than the minimum, returns the minimum. If the value is greater than the maximum, returns the maximum. Otherwise, returns the value itself.

All arguments must be of comparable types. The result type is the largest compatible type among all arguments.
    ","clamp(value, min, max)","- `value` — The value to clamp.
- `min` — The minimum bound.
- `max` — The maximum bound.
","Returns the value, restricted to the [min, max] range.","**Basic usage**

```sql title=Query
SELECT clamp(5, 1, 10) AS result;
```

```response title=Response
┌─result─┐
│      5 │
└────────┘
```

**Value below minimum**

```sql title=Query
SELECT clamp(-3, 0, 7) AS result;
```

```response title=Response
┌─result─┐
│      0 │
└────────┘
```

**Value above maximum**

```sql title=Query
SELECT clamp(15, 0, 7) AS result;
```

```response title=Response
┌─result─┐
│      7 │
└────────┘
```

","24.5","Conditional"
"25.6.2.5","h3GetRes0Indexes",0,0,"","","System","","","","","","",""
"25.6.2.5","tupleIntDivByNumber",0,0,"","","System","","","","","","",""
"25.6.2.5","mapContainsValueLike",0,0,"","","System","Checks whether map contains value LIKE specified pattern.","","","","**mapContainsValueLike**

```sql title=Query
SELECT mapContainsValueLike(map(1, 'v1-1', '2, 'v2-2'), 'v1%')
```

```response title=Response

```

","25.5","Map"
"25.6.2.5","tanh",0,1,"","","System","","","","","","",""
"25.6.2.5","murmurHash3_128",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonPerimeterCartesian",0,0,"","","System","","","","","","",""
"25.6.2.5","runningAccumulate",0,0,"","","System","","","","","","",""
"25.6.2.5","exp2",0,0,"","","System","","","","","","",""
"25.6.2.5","L2Distance",0,0,"","","System","","","","","","",""
"25.6.2.5","decodeURLFormComponent",0,0,"","","System","","","","","","",""
"25.6.2.5","toLastDayOfMonth",0,0,"","","System","
Rounds up a date or date with time to the last day of the month.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toLastDayOfMonth(value)","- `value` — The date or date with time to round up to the last day of the month. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).
","Returns the date of the last day of the month for the given date or date with time. [`Date`](../data-types/date.md).","**Round up to the last day of the month**

```sql title=Query
SELECT toLastDayOfMonth(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toLastDayOfMonth(toDateTime('2023-04-21 10:20:30'))─┐
│                                          2023-04-30 │
└─────────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","randomPrintableASCII",0,0,"","","System","","","","","","",""
"25.6.2.5","sipHash128ReferenceKeyed",0,0,"","","System","Same as [sipHash128Reference](#hash_functions-siphash128reference) but additionally takes an explicit key argument instead of using a fixed key.","","","","**hash**

```sql title=Query
SELECT hex(sipHash128ReferenceKeyed((506097522914230528, 1084818905618843912),'foo', '\x01', 3));
```

```response title=Response

```

","","Hash"
"25.6.2.5","mapPartialSort",0,0,"","","System","The same as arrayReverseSort.","","","","**mapPartialSort**

```sql title=Query
SELECT mapPartialSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))
```

```response title=Response

```

","23.4","Map"
"25.6.2.5","mapReverseSort",0,0,"","","System","The same as arrayReverseSort.","","","","**mapReverseSort**

```sql title=Query
SELECT mapReverseSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))
```

```response title=Response

```

","23.4","Map"
"25.6.2.5","h3EdgeLengthKm",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetOrNull",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the attribute's data type if key is found, otherwise NULL.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","arrayShingles",0,0,"","","System","Generates an array of shingles (similar to ngrams for strings), i.e. consecutive sub-arrays with a specified length of the input array.","arrayShingles(arr, l)","- `arr` — Array for which to generate an array of shingles. [`Array(T)`](/sql-reference/data-types/array).
- `l` — The length of each shingle. [`(U)Int*`](/sql-reference/data-types/int-uint)
","An array of generated shingles. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayShingles([1,2,3,4], 3) as res;
```

```response title=Response
[[1,2,3],[2,3,4]]
```

","24.1","Arrays"
"25.6.2.5","inIgnoreSet",0,0,"","","System","","","","","","",""
"25.6.2.5","dictGetUUID",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UUID if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","L1Distance",0,0,"","","System","","","","","","",""
"25.6.2.5","mapContainsKey",0,0,"","","System","Checks whether the map has the specified key.","","","","**mapContainsKey**

```sql title=Query
SELECT mapContainsKey(map('k1', 'v1', 'k2', 'v2'), 'k1')
```

```response title=Response

```

","25.5","Map"
"25.6.2.5","notNullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.6.2.5","mapValues",0,0,"","","System","Returns an array with the values of map.","","","","**mapValues**

```sql title=Query
SELECT mapValues(map('k1', 'v1', 'k2', 'v2'))
```

```response title=Response

```

","21.2","Map"
"25.6.2.5","match",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayPopBack",0,0,"","","System","Removes the last element from the array.","arrayPopBack(arr)","- `arr` — The array for which to remove the last element from. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array identical to `arr` but without the last element of `arr`. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayPopBack([1, 2, 3]) AS res;
```

```response title=Response
[1,2]
```

","1.1","Arrays"
"25.6.2.5","arrayAvg",0,0,"","","System","
Returns the average of elements in the source array.

If a lambda function `func` is specified, returns the average of elements of the lambda results.
    ","arrayAvg([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the average of elements in the source array, or the average of elements of the lambda results if provided. [`Float64`](/sql-reference/data-types/float).","**Basic example**

```sql title=Query
SELECT arrayAvg([1, 2, 3, 4]);
```

```response title=Response
2.5
```

**Usage with lambda function**

```sql title=Query
SELECT arrayAvg(x, y -> x*y, [2, 3], [2, 3]) AS res;
```

```response title=Response
6.5
```

","21.1","Arrays"
"25.6.2.5","arrayLastOrNull",0,0,"","","System","
Returns the last element in the source array for which a lambda `func(x [, y1, y2, ... yN])` returns true, otherwise it returns `NULL`.
    ","arrayLastOrNull(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x [, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the last element of the source array for which `λ` is not true, otherwise returns `NULL`.","**Usage example**

```sql title=Query
SELECT arrayLastOrNull(x, y -> x=y, ['a', 'b', 'c'], ['a', 'b', 'c'])
```

```response title=Response
c
```

**No match**

```sql title=Query
SELECT arrayLastOrNull(x, y -> x=y, [0, 1, 2], [3, 3, 3]) AS res, toTypeName(res)
```

```response title=Response
NULL Nullable(UInt8)
```

","1.1","Arrays"
"25.6.2.5","mapExtractValueLike",0,0,"","","System","Returns a map with elements which value matches the specified pattern.","","","","**mapExtractValueLike**

```sql title=Query
SELECT mapExtractValueLike(map('k1-1', 'v1-1', 'k2-1', 'v2-1'), 'v1%')
```

```response title=Response

```

","25.5","Map"
"25.6.2.5","subDate",0,1,"","","System","","","","","","",""
"25.6.2.5","ngramMinHashCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","makeDateTime64",0,1,"","","System","
Creates a `DateTime64` from year, month, day, hour, minute, second, with optional fraction, precision, and timezone.
    ","makeDateTime64(year, month, day, hour, minute, second[, fraction[, precision[, timezone]]])","- `year` — Year number. [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `month` — Month number (1-12). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `day` — Day of the month (1-31). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `hour` — Hour (0-23). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `minute` — Minute (0-59). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `second` — Second (0-59). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `fraction` — Optional. Fractional part of the second. [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `precision` — Optional. Precision for the fractional part (0-9). [`UInt8`](../data-types/int-uint.md).
- `timezone` — Optional. Timezone name. [`String`](../data-types/string.md).
","Returns a `DateTime64` value constructed from the provided arguments. [`DateTime64`](../data-types/datetime64.md).","**DateTime64 from year, month, day, hour, minute, second**

```sql title=Query
SELECT makeDateTime64(2023, 5, 15, 10, 30, 45, 779, 5);
```

```response title=Response
┌─makeDateTime64(2023, 5, 15, 10, 30, 45, 779, 5)─┐
│                       2023-05-15 10:30:45.00779 │
└─────────────────────────────────────────────────┘
```

","22.6","Dates and Times"
"25.6.2.5","isDynamicElementInSharedData",0,0,"","","System","
Returns true for rows in Dynamic column that are not separated into subcolumns and stored inside shared variant in binary form.
","isDynamicElementInSharedData(dynamic)","- `dynamic` — Dynamic column
","","**Example**

```sql title=Query
CREATE TABLE test (d Dynamic(max_types=2)) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, isDynamicElementInSharedData(d) FROM test;
```

```response title=Response
┌─d─────────────┬─isDynamicElementInSharedData(d)─┐
│ ᴺᵁᴸᴸ          │ false              │
│ 42            │ false              │
│ Hello, World! │ true               │
│ [1,2,3]       │ true               │
└───────────────┴────────────────────┘
```

","","JSON"
"25.6.2.5","tcpPort",0,0,"","","System","","","","","","",""
"25.6.2.5","encodeXMLComponent",0,0,"","","System","","","","","","",""
"25.6.2.5","changeHour",0,0,"","","System","Changes the hour component of a date or date time.","changeHour(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.","","","Dates and Times"
"25.6.2.5","wordShingleMinHashArgCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","subtractWeeks",0,0,"","","System","
Subtracts a specified number of weeks from a date, a date with time or a string-encoded date or date with time.
    ","subtractWeeks(datetime, num)","- `datetime` — Date or date with time to subtract specified number of weeks from. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of weeks to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` weeks. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Subtract weeks from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractWeeks(date, 1) AS subtract_weeks_with_date,
    subtractWeeks(date_time, 1) AS subtract_weeks_with_date_time,
    subtractWeeks(date_time_string, 1) AS subtract_weeks_with_date_time_string
```

```response title=Response
┌─subtract_weeks_with_date─┬─subtract_weeks_with_date_time─┬─subtract_weeks_with_date_time_string─┐
│               2023-12-25 │           2023-12-25 00:00:00 │              2023-12-25 00:00:00.000 │
└──────────────────────────┴───────────────────────────────┴──────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 week)
```

```response title=Response
┌─minus(CAST('⋯alWeek(10))─┐
│               1998-04-07 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","tupleConcat",0,0,"","","System","","","","","","",""
"25.6.2.5","toUUID",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayLast",0,0,"","","System","
Returns the last element in the source array for which a lambda `func(x [, y1, y2, ... yN])` returns true, otherwise it returns a default value.
    ","arrayLast(func(x[, y1, ..., yN]), source[, cond1, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1, ... , condN]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the last element of the source array for which `func` is true, otherwise returns the default value of `T`.","**Usage example**

```sql title=Query
SELECT arrayLast(x, y -> x=y, ['a', 'b', 'c'], ['a', 'b', 'c'])
```

```response title=Response
c
```

**No match**

```sql title=Query
SELECT arrayFirst(x, y -> x=y, [0, 1, 2], [3, 3, 3]) AS res, toTypeName(res)
```

```response title=Response
0 UInt8
```

","1.1","Arrays"
"25.6.2.5","sipHash64Keyed",0,0,"","","System","","","","","","",""
"25.6.2.5","extractAll",0,0,"","","System","","","","","","",""
"25.6.2.5","MD4",0,0,"","","System","Calculates the MD4 hash of the given string.","SELECT MD4(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The MD4 hash of the given input string returned as a [FixedString(16)](../../sql-reference/data-types/fixedstring.md).","****

```sql title=Query
SELECT HEX(MD4('abc'));
```

```response title=Response
┌─hex(MD4('abc'))──────────────────┐
│ A448017AAF21D8525FC10AE87AA6729D │
└──────────────────────────────────┘
```

","","Hash"
"25.6.2.5","moduloOrZero",0,0,"","","System","
Like modulo but returns zero when the divisor is zero, as opposed to an
exception with the modulo function.
    ","moduloOrZero(a, b)","- `a` — The dividend. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
- `b` — The divisor (modulus). [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","The remainder of a % b, or `0` when the divisor is `0`.","**Usage example**

```sql title=Query
SELECT moduloOrZero(5, 0)
```

```response title=Response
0
```

","20.3","Arithmetic"
"25.6.2.5","s2CapContains",0,0,"","","System","","","","","","",""
"25.6.2.5","filesystemUnreserved",0,0,"","","System","","","","","","",""
"25.6.2.5","defaultValueOfTypeName",0,0,"","","System","","","","","","",""
"25.6.2.5","tuplePlus",0,0,"","","System","","","","","","",""
"25.6.2.5","readWKTPoint",0,0,"","","System","","","","","","",""
"25.6.2.5","firstSignificantSubdomain",0,0,"","","System","
Returns the ""first significant subdomain"".

The first significant subdomain is a second-level domain if it is 'com', 'net', 'org', or 'co'.
Otherwise, it is a third-level domain.

For example, firstSignificantSubdomain('https://news.clickhouse.com/') = 'clickhouse', firstSignificantSubdomain ('https://news.clickhouse.com.tr/') = 'clickhouse'.

The list of ""insignificant"" second-level domains and other implementation details may change in the future.
        ","","","","**firstSignificantSubdomain**

```sql title=Query
SELECT firstSignificantSubdomain('https://news.clickhouse.com/')
```

```response title=Response

```

","","URL"
"25.6.2.5","h3HexAreaKm2",0,0,"","","System","","","","","","",""
"25.6.2.5","hasThreadFuzzer",0,0,"","","System","","","","","","",""
"25.6.2.5","multiMatchAllIndices",0,0,"","","System","","","","","","",""
"25.6.2.5","toUnixTimestamp64Nano",0,0,"","","System","","","","","","",""
"25.6.2.5","path",0,0,"","","System","","","","","","",""
"25.6.2.5","now",0,1,"","","System","","","","","","",""
"25.6.2.5","arrayCumSumNonNegative",0,0,"","","System","Returns an array of the partial (running) sums of the elements in the source array, replacing any negative running sum with zero. If a lambda function is specified, the sum is computed from applying the lambda to the array elements at each position.","arrayCumSumNonNegative([func,] arr1[, arr2, ... , arrN])","- `func` — Optional. A lambda function to apply to the array elements at each position. [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `arr1` — The source array of numeric values. [`Array(T)`](/sql-reference/data-types/array).
- `[arr2, ..., arrN]` — Optional. Additional arrays of the same size, passed as arguments to the lambda function if specified. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array of the partial sums of the elements in the source array, with any negative running sum replaced by zero. The result type matches the input array's numeric type.","**Basic usage**

```sql title=Query
SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res
```

```response title=Response
[1, 2, 0, 1]
```

**With lambda**

```sql title=Query
SELECT arrayCumSumNonNegative(x -> x * 2, [1, -2, 3]) AS res
```

```response title=Response
[2, 0, 6]
```

","18.12","Arrays"
"25.6.2.5","detectCharset",0,0,"","","System","","","","","","",""
"25.6.2.5","dynamicType",0,0,"","","System","
Returns the variant type name for each row of `Dynamic` column. If row contains NULL, it returns 'None' for it.
","dynamicType(dynamic)","- `dynamic` — Dynamic column
","","**Example**

```sql title=Query
CREATE TABLE test (d Dynamic) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, dynamicType(d) FROM test;
```

```response title=Response
┌─d─────────────┬─dynamicType(d)─┐
│ ᴺᵁᴸᴸ          │ None           │
│ 42            │ Int64          │
│ Hello, World! │ String         │
│ [1,2,3]       │ Array(Int64)   │
└───────────────┴────────────────┘
```

","","JSON"
"25.6.2.5","translateUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayInt8",0,0,"","","System","Returns an empty Int8 array","emptyArrayInt8()","","An empty Int8 array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayInt8
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","has",0,0,"","","System","Returns whether the array contains the specified element.","has(arr, x)","- `arr` — The source array. [`Array(T)`](/sql-reference/data-types/array).
- `x` — The value to search for in the array.
","Returns `1` if the array contains the specified element, otherwise `0`. [UInt8](/sql-reference/data-types/int-uint).","**Basic usage**

```sql title=Query
SELECT has([1, 2, 3], 2)
```

```response title=Response
1
```

**Not found**

```sql title=Query
SELECT has([1, 2, 3], 4)
```

```response title=Response
0
```

","1.1","Arrays"
"25.6.2.5","leftPad",0,0,"","","System","","","","","","",""
"25.6.2.5","tupleToNameValuePairs",0,0,"","","System","","","","","","",""
"25.6.2.5","h3ToParent",0,0,"","","System","","","","","","",""
"25.6.2.5","getSizeOfEnumType",0,0,"","","System","","","","","","",""
"25.6.2.5","encodeURLFormComponent",0,0,"","","System","","","","","","",""
"25.6.2.5","makeDateTime",0,1,"","","System","
Creates a `DateTime` from year, month, day, hour, minute, and second, with optional timezone.
    ","makeDateTime(year, month, day, hour, minute, second[, timezone])","- `year` — Year number. [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `month` — Month number (1-12). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `day` — Day of the month (1-31). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `hour` — Hour (0-23). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `minute` — Minute (0-59). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `second` — Second (0-59). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `timezone` — Optional. Timezone name. [`String`](../data-types/string.md).
","Returns a `DateTime` value constructed from the provided arguments. [`DateTime`](../data-types/datetime.md).","**DateTime from year, month, day, hour, minute, second**

```sql title=Query
SELECT makeDateTime(2023, 2, 28, 17, 12, 33) AS DateTime;
```

```response title=Response
┌────────────DateTime─┐
│ 2023-02-28 17:12:33 │
└─────────────────────┘
```

","22.6","Dates and Times"
"25.6.2.5","simpleJSONExtractRaw",0,0,"","","System","Returns the value of the field named field_name as a String, including separators.","simpleJSONExtractRaw(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the value of the field as a String including separators if the field exists, or an empty String otherwise.","**simple**

```sql title=Query
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":{""def"":[1,2,3]}}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractRaw(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
""-4e3""
-3.4
5
{""def"":[1,2,3]}
```

","","JSON"
"25.6.2.5","regionToContinent",0,0,"","","System","","","","","","",""
"25.6.2.5","makeDate32",0,1,"","","System","
Creates a `Date32` from either:
- a year, month and day
- a year and day of year
    ","makeDate32(year, month, day)
makeDate32(year, day_of_year)","- `year` — Year number. [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `month` — Month number (1-12). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `day` — Day of the month (1-31). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `day_of_year` — Day of the year (1-365). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
","Returns a `Date32` value constructed from the provided arguments. [`Date32`](../data-types/date32.md).","**Date32 from a year, month, day**

```sql title=Query
SELECT makeDate(2023, 2, 28) AS date;
```

```response title=Response
┌───────date─┐
│ 2023-02-28 │
└────────────┘
```

**Date32 from year and day of year**

```sql title=Query
SELECT makeDate(2023, 42) AS date;
```

```response title=Response
┌───────date─┐
│ 2023-02-11 │
└────────────┘
```

","22.6","Dates and Times"
"25.6.2.5","accurateCastOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","length",0,1,"","","System","
Calculates the length of a string or array.

- For String or FixedString arguments: calculates the number of bytes in the string.
- For Array arguments: calculates the number of elements in the array.
- If applied to a FixedString argument, the function is a constant expression.

Please note that the number of bytes in a string is not the same as the number of
Unicode ""code points"" and it is not the same as the number of Unicode ""grapheme clusters""
(what we usually call ""characters"") and it is not the same as the visible string width.

It is ok to have ASCII NUL bytes in strings, and they will be counted as well.
    ","length(x)","- `x` — String, FixedString or Array for which to calculate the number of bytes (for String/FixedString) or elements (for Array).
","Returns the number of number of bytes in the String/FixedString `x` / the number of elements in array `x`","**string1**

```sql title=Query
SELECT length('Hello, world!')
```

```response title=Response
13
```

**arr1**

```sql title=Query
SELECT length(['Hello', 'world'])
```

```response title=Response
2
```

**constexpr**

```sql title=Query
WITH 'hello' || toString(number) AS str
SELECT str,
isConstant(length(str)) AS str_length_is_constant,
isConstant(length(str::FixedString(6))) AS fixed_str_length_is_constant
FROM numbers(3)
```

```response title=Response
┌─str────┬─str_length_is_constant─┬─fixed_str_length_is_constant─┐
│ hello0 │                      0 │                            1 │
│ hello1 │                      0 │                            1 │
│ hello2 │                      0 │                            1 │
└────────┴────────────────────────┴──────────────────────────────┘
```

**unicode**

```sql title=Query
SELECT 'ёлка' AS str1, length(str1), lengthUTF8(str1), normalizeUTF8NFKD(str1) AS str2, length(str2), lengthUTF8(str2)
```

```response title=Response
┌─str1─┬─length(str1)─┬─lengthUTF8(str1)─┬─str2─┬─length(str2)─┬─lengthUTF8(str2)─┐
│ ёлка │            8 │                4 │ ёлка │           10 │                5 │
└──────┴──────────────┴──────────────────┴──────┴──────────────┴──────────────────┘
```

**ascii_vs_utf8**

```sql title=Query
SELECT 'ábc' AS str, length(str), lengthUTF8(str)
```

```response title=Response
┌─str─┬─length(str)──┬─lengthUTF8(str)─┐
│ ábc │            4 │               3 │
└─────┴──────────────┴─────────────────┘
```

","1.1","Arrays"
"25.6.2.5","h3ToGeo",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayEnumerateDense",0,0,"","","System","Returns an array of the same size as the source array, indicating where each element first appears in the source array.","arrayEnumerateDense(arr)","- `arr` — The array to enumerate. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array of the same size as `arr`, indicating where each element first appears in the source array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayEnumerateDense([10, 20, 10, 30])
```

```response title=Response
[1,2,1,3]
```

","18.12","Arrays"
"25.6.2.5","parseDateTime64BestEffortOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","domainRFC",0,0,"","","System","Similar to `domain` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.6.2.5","bitmapSubsetLimit",0,0,"","","System","Returns a subset of a bitmap from position `range_start` with at most `cardinality_limit` set bits. Uses 1-based indexing.","bitmapSubsetLimit(bitmap, range_start, cardinality_limit)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction).
- `range_start` — Start of the range (inclusive). [`UInt32`](/sql-reference/data-types/int-uint)
- `cardinality_limit` — Maximum cardinality of the subset. [`UInt32`](/sql-reference/data-types/int-uint)
","Returns a bitmap containing at most `cardinality_limit` set bits, starting from `range_start`. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapSubsetLimit(bitmapBuild([1, 5, 3, 2, 8]), 3, 2)) AS res;
```

```response title=Response
┌─res────┐
│ [5, 3] │
└────────┘
```

","20.1","Bitmap"
"25.6.2.5","mapExists",0,0,"","","System","The same as arrayExists.","","","","**mapExists**

```sql title=Query
SELECT mapExists((k, v) -> v = 1, map('k1', 1, 'k2', 2))
```

```response title=Response

```

","23.4","Map"
"25.6.2.5","endsWith",0,0,"","","System","","","","","","",""
"25.6.2.5","rand64",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayNormalizedGini",0,0,"","","System","Calculates the normalized Gini coefficient.","arrayNormalizedGini(predicted, label)","- `predicted` — The predicted value. [`Array(T)`](/sql-reference/data-types/array).
- `label` — The actual value. [`Array(T)`](/sql-reference/data-types/array).
","A tuple containing the Gini coefficients of the predicted values, the Gini coefficient of the normalized values, and the normalized Gini coefficient (= the ratio of the former two Gini coefficients). [Tuple(Float64, Float64, Float64)](/sql-reference/data-types/tuple).","**Usage example**

```sql title=Query
SELECT arrayNormalizedGini([0.9, 0.3, 0.8, 0.7],[6, 1, 0, 2]);
```

```response title=Response
(0.18055555555555558,0.2638888888888889,0.6842105263157896)
```

","25.1","Arrays"
"25.6.2.5","rowNumberInAllBlocks",0,0,"","","System","","","","","","",""
"25.6.2.5","multiSearchFirstIndexCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONExtractFloat",0,0,"","","System","","","","","","",""
"25.6.2.5","tuple",0,0,"","","System","
Returns a tuple by grouping input arguments.

For columns C1, C2, ... with the types T1, T2, ..., it returns a named Tuple(C1 T1, C2 T2, ...) type tuple containing these columns if their names are unique and can be treated as unquoted identifiers, otherwise a Tuple(T1, T2, ...) is returned. There is no cost to execute the function.
Tuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can't be written to a table.

The function implements the operator `(x, y, ...)`.
","","","","**typical**

```sql title=Query
SELECT tuple(1, 2)
```

```response title=Response
(1,2)
```

","","Tuple"
"25.6.2.5","atanh",0,0,"","","System","","","","","","",""
"25.6.2.5","kql_array_sort_desc",0,0,"","","System","","","","","","",""
"25.6.2.5","generateRandomStructure",0,0,"","","System","
Generates a random table structure.
This function takes 2 optional constant arguments:
the number of columns in the result structure (random by default) and random seed (random by default)
The maximum number of columns is 128.
The function returns a value of type String.
","","","","**random**

```sql title=Query
SELECT generateRandomStructure()
```

```response title=Response
c1 UInt32, c2 FixedString(25)
```

**with specified number of columns**

```sql title=Query
SELECT generateRandomStructure(3)
```

```response title=Response
c1 String, c2 Array(Int32), c3 LowCardinality(String)
```

**with specified seed**

```sql title=Query
SELECT generateRandomStructure(1, 42)
```

```response title=Response
c1 UInt128
```

","","Random Number"
"25.6.2.5","isNullable",0,0,"","","System","","","","","","",""
"25.6.2.5","regexpExtract",0,0,"","","System","Extracts the first string in haystack that matches the regexp pattern and corresponds to the regex group index.","","","","","","String Search"
"25.6.2.5","sqidEncode",0,0,"","","System","
Transforms numbers into a [Sqid](https://sqids.org/) which is a Youtube-like ID string.","sqidEncode(number1, ...)","- `number1, ...` — Arbitrarily many UInt8, UInt16, UInt32 or UInt64 arguments
","A hash id [String](/sql-reference/data-types/string.md).","**simple**

```sql title=Query
SELECT sqidEncode(1, 2, 3, 4, 5);
```

```response title=Response
┌─sqidEncode(1, 2, 3, 4, 5)─┐
│ gXHfJ1C6dN                │
└───────────────────────────┘
```

","","Encoding"
"25.6.2.5","fromUnixTimestampInJodaSyntax",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayFold",0,0,"","","System","Applies a lambda function to one or more equally-sized arrays and collects the result in an accumulator.","arrayFold(λ(acc, x1 [, x2, x3, ... xN]), arr1 [, arr2, arr3, ... arrN], acc)","- `λ(x, x1 [, x2, x3, ... xN])` — A lambda function `λ(acc, x1 [, x2, x3, ... xN]) → F(acc, x1 [, x2, x3, ... xN])` where `F` is an operation applied to `acc` and array values from `x` with the result of `acc` re-used. [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `arr1 [, arr2, arr3, ... arrN]` — N arrays over which to operate. [`Array(T)`](/sql-reference/data-types/array)
- `acc` — Accumulator value with the same type as the return type of the Lambda function.
","Returns the final `acc` value.","**Usage example**

```sql title=Query
SELECT arrayFold(acc,x -> acc + x*2, [1, 2, 3, 4], 3::Int64) AS res;
```

```response title=Response
23
```

**Fibonacci sequence**

```sql title=Query
SELECT arrayFold(acc, x -> (acc.2, acc.2 + acc.1),range(number),(1::Int64, 0::Int64)).1 AS fibonacci FROM numbers(1,10);
```

```response title=Response
┌─fibonacci─┐
│         0 │
│         1 │
│         1 │
│         2 │
│         3 │
│         5 │
│         8 │
│        13 │
│        21 │
│        34 │
└───────────┘
```

**Example using multiple arrays**

```sql title=Query
SELECT arrayFold(
(acc, x, y) -> acc + (x * y),
[1, 2, 3, 4],
[10, 20, 30, 40],
0::Int64
) AS res;
```

```response title=Response
300
```

","23.10","Arrays"
"25.6.2.5","arrayMin",0,0,"","","System","
Returns the minimum element in the source array.

If a lambda function `func` is specified, returns the minimum element of the lambda results.
    ","arrayMin([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the minimum element in the source array, or the minimum element of the lambda results if provided.","**Basic example**

```sql title=Query
SELECT arrayMin([5, 3, 2, 7]);
```

```response title=Response
2
```

**Usage with lambda function**

```sql title=Query
SELECT arrayMin(x, y -> x/y, [4, 8, 12, 16], [1, 2, 1, 2]);
```

```response title=Response
4
```

","21.1","Arrays"
"25.6.2.5","basename",0,0,"","","System","","","","","","",""
"25.6.2.5","toISOWeek",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt32OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","accurateCast",0,0,"","","System","","","","","","",""
"25.6.2.5","mapFilter",0,0,"","","System","The same as arrayFilter.","","","","**mapFilter**

```sql title=Query
SELECT mapFilter((k, v) -> v > 1, map('k1', 1, 'k2', 2))
```

```response title=Response

```

","22.3","Map"
"25.6.2.5","arrayCompact",0,0,"","","System","Removes consecutive duplicate elements from an array, including `null` values. The order of values in the resulting array is determined by the order in the source array.","arrayCompact(arr)","- `arr` — An array to remove duplicates from. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array without duplicate values. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayCompact([1, 1, nan, nan, 2, 3, 3, 3]);
```

```response title=Response
[1,nan,2,3]
```

","20.1","Arrays"
"25.6.2.5","kql_array_sort_asc",0,0,"","","System","","","","","","",""
"25.6.2.5","toIntervalMicrosecond",0,0,"","","System","","","","","","",""
"25.6.2.5","L1Normalize",0,0,"","","System","","","","","","",""
"25.6.2.5","toInterval",0,0,"","","System","Creates an interval from a value and a unit.","","","","","","Type Conversion"
"25.6.2.5","arrayReverse",0,0,"","","System","
Reverses the order of elements of a given array.

:::note
Function `reverse(arr)` performs the same functionality but works on other data-types
in addition to Arrays.
:::
","arrayReverse(arr)","- `arr` — The array to reverse. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array of the same size as the original array containing the elements in reverse order. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayReverse([1, 2, 3])
```

```response title=Response
[3,2,1]
```

","1.1","Arrays"
"25.6.2.5","icebergTruncate",0,0,"","","System","Implements logic of iceberg truncate transform: https://iceberg.apache.org/spec/#truncate-transform-details.","icebergTruncate(N, value)","- `value` — String, integer or Decimal value.
","The same type as argument","**Example**

```sql title=Query
SELECT icebergTruncate(3, 'iceberg')
```

```response title=Response
ice
```

","25.3","Other"
"25.6.2.5","toDecimal64",0,0,"","","System","","","","","","",""
"25.6.2.5","now64",0,1,"","","System","","","","","","",""
"25.6.2.5","tupleNames",0,0,"","","System","
Converts a tuple into an array of column names. For a tuple in the form `Tuple(a T, b T, ...)`, it returns an array of strings representing the named columns of the tuple. If the tuple elements do not have explicit names, their indices will be used as the column names instead.
","","","","**typical**

```sql title=Query
SELECT tupleNames(tuple(1 as a, 2 as b))
```

```response title=Response
['a','b']
```

","","Tuple"
"25.6.2.5","URLHash",0,0,"","","System","","","","","","",""
"25.6.2.5","topLevelDomainRFC",0,0,"","","System","Similar to topLevelDomain, but conforms to RFC 3986.","","","","","","URL"
"25.6.2.5","arrayLastIndex",0,0,"","","System","
Returns the index of the last element in the source array for which `func(x[, y1, y2, ... yN])` returns true, otherwise it returns '0'.
","arrayLastIndex(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the index of the last element of the source array for which `func` is true, otherwise returns `0`. [`UInt32`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT arrayLastIndex(x, y -> x=y, ['a', 'b', 'c'], ['a', 'b', 'c']);
```

```response title=Response
3
```

**No match**

```sql title=Query
SELECT arrayLastIndex(x, y -> x=y, ['a', 'b', 'c'], ['d', 'e', 'f']);
```

```response title=Response
0
```

","1.1","Arrays"
"25.6.2.5","bitSlice",0,0,"","","System","Returns a substring starting with the bit from the 'offset' index that is 'length' bits long.","bitSlice(s, offset[, length])","- `s` — The String or Fixed String to slice. [`String`](../data-types/string.md)/[`FixedString(N)`](../data-types/fixedstring.md).
- `offset` — 
The starting bit position (1-based indexing). [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
  - Positive values: count from the beginning of the string.
  - Negative values: count from the end of the string.
        
- `length` — 
Optional. The number of bits to extract. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
  - Positive values: extract `length` bits.
  - Negative values: extract from the offset to `(string_length - |length|)`.
  - Omitted: extract from offset to end of string.
  - If length is not a multiple of 8, the result is padded with zeros on the right.
    
","Returns a string containing the extracted bits, represented as a binary sequence. The result is always padded to byte boundaries (multiples of 8 bits). [`String`](../data-types/string.md)","**Usage example**

```sql title=Query
SELECT bin('Hello'), bin(bitSlice('Hello', 1, 8));
SELECT bin('Hello'), bin(bitSlice('Hello', 1, 2));
SELECT bin('Hello'), bin(bitSlice('Hello', 1, 9));
SELECT bin('Hello'), bin(bitSlice('Hello', -4, 8));
```

```response title=Response
┌─bin('Hello')─────────────────────────────┬─bin(bitSlice('Hello', 1, 8))─┐
│ 0100100001100101011011000110110001101111 │ 01001000                     │
└──────────────────────────────────────────┴──────────────────────────────┘
┌─bin('Hello')─────────────────────────────┬─bin(bitSlice('Hello', 1, 2))─┐
│ 0100100001100101011011000110110001101111 │ 01000000                     │
└──────────────────────────────────────────┴──────────────────────────────┘
┌─bin('Hello')─────────────────────────────┬─bin(bitSlice('Hello', 1, 9))─┐
│ 0100100001100101011011000110110001101111 │ 0100100000000000             │
└──────────────────────────────────────────┴──────────────────────────────┘
┌─bin('Hello')─────────────────────────────┬─bin(bitSlice('Hello', -4, 8))─┐
│ 0100100001100101011011000110110001101111 │ 11110000                      │
└──────────────────────────────────────────┴───────────────────────────────┘
```

","22.2","Bit"
"25.6.2.5","firstSignificantSubdomainRFC",0,0,"","","System","Returns the ""first significant subdomain"" according to RFC 1034.","","","","","","URL"
"25.6.2.5","shardNum",0,0,"","","System","","","","","","",""
"25.6.2.5","parseDateTimeInJodaSyntaxOrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","startsWithUTF8",0,0,"","","System","
Returns whether string `str` starts with `prefix`, the difference between `startsWithUTF8` and `startsWith` is that `startsWithUTF8` match `str` and `suffix` by UTF-8 characters.
        ","","","","**startsWithUTF8**

```sql title=Query
select startsWithUTF8('富强民主文明和谐', '富强');
```

```response title=Response

```

","","String"
"25.6.2.5","portRFC",0,0,"","","System","Similar to `port`, but conforms to RFC 3986.","","","","","","URL"
"25.6.2.5","readWKBLineString",0,0,"","","System","
    Parses a Well-Known Binary (WKB) representation of a LineString geometry and returns it in the internal ClickHouse format.
    ","readWKBLineString(wkt_string)","- `wkb_string` — The input WKB string representing a LineString geometry.
","The function returns a ClickHouse internal representation of the linestring geometry.","**first call**

```sql title=Query
SELECT readWKBLineString(unhex('010200000004000000000000000000f03f000000000000f03f0000000000000040000000000000004000000000000008400000000000000840000000000000f03f000000000000f03f'));
```

```response title=Response
┌─readWKBLineString(unhex'0102000000040000000000...'))─┐
    │ [(1,1),(2,2),(3,3),(1,1)]                            │
    └──────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.6.2.5","bitTest",0,0,"","","System","Takes any number and converts it into [binary form](https://en.wikipedia.org/wiki/Binary_number), then returns the value of the bit at a specified position. Counting is done right-to-left, starting at 0.","bitTest(a, i)","- `a` — Number to convert. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
- `i` — Position of the bit to return. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","Returns the value of the bit at position `i` in the binary representation of `a`. [`UInt8`](../data-types/int-uint.md).","**Usage example**

```sql title=Query
SELECT bin(2), bitTest(2, 1);
```

```response title=Response
┌─bin(2)───┬─bitTest(2, 1)─┐
│ 00000010 │             1 │
└──────────┴───────────────┘
```

","1.1","Bit"
"25.6.2.5","countSubstringsCaseInsensitive",0,0,"","","System","","","","","","",""
"25.6.2.5","topLevelDomain",0,0,"","","System","
Extracts the the top-level domain from a URL.

Returns an empty string if the argument cannot be parsed as a URL or does not contain a top-level domain.
        ","","","","**topLevelDomain**

```sql title=Query
SELECT topLevelDomain('svn+ssh://www.some.svn-hosting.com:80/repo/trunk')
```

```response title=Response

```

","","URL"
"25.6.2.5","decodeURLComponent",0,0,"","","System","","","","","","",""
"25.6.2.5","fragment",0,0,"","","System","","","","","","",""
"25.6.2.5","polygonsSymDifferenceSpherical",0,0,"","","System","","","","","","",""
"25.6.2.5","base32Decode",0,0,"","","System","
Decode a [Base32](https://datatracker.ietf.org/doc/html/rfc4648) encoded string. The input string must be a valid Base32 encoded string, otherwise an exception will be thrown.","","- `arg` — A Base32 (rfc4648) encoded string
","","**simple_decoding1**

```sql title=Query
SELECT base32Decode('ME======')
```

```response title=Response
a
```

**simple_decoding2**

```sql title=Query
SELECT base32Decode('JBSWY3DP')
```

```response title=Response
Hello
```

**empty_string**

```sql title=Query
SELECT base32Decode('')
```

```response title=Response

```

**non_ascii**

```sql title=Query
SELECT hex(base32Decode('4W2HIXV4'))
```

```response title=Response
E5B4745EBC
```

","25.5","String"
"25.6.2.5","timezoneOf",0,0,"","","System","
Returns the timezone name of a [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) value.
    ","timeZoneOf(datetime)","- `datetime` — A value of type [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64).
","Returns the timezone name for `datetime`. [`String`](/sql-reference/data-types/string).","**Usage example**

```sql title=Query
SELECT timezoneOf(now());
```

```response title=Response
┌─timezoneOf(now())─┐
│ Europe/Amsterdam  │
└───────────────────┘
```

","21.4","Dates and Times"
"25.6.2.5","tupleDivideByNumber",0,0,"","","System","","","","","","",""
"25.6.2.5","toUInt16OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","toString",0,0,"","","System","","","","","","",""
"25.6.2.5","emptyArrayDateTime",0,0,"","","System","Returns an empty DateTime array","emptyArrayDateTime()","","An empty DateTime array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT emptyArrayDateTime
```

```response title=Response
[]
```

","1.1","Arrays"
"25.6.2.5","indexOfAssumeSorted",0,0,"","","System","
Returns the index of the first element with value 'x' (starting from `1`) if it is in the array.
If the array does not contain the searched-for value, the function returns `0`.

:::note
Unlike the `indexOf` function, this function assumes that the array is sorted in
ascending order. If the array is not sorted, results are undefined.
:::
    ","indexOfAssumeSorted(arr, x)","- `arr` — A sorted array to search. [`Array(T)`](/sql-reference/data-types/array).
- `x` — Value of the first matching element in sorted `arr` for which to return an index.UInt64
","Returns the index (numbered from one) of the first `x` in `arr` if it exists. Otherwise, returns `0`.","**Basic example**

```sql title=Query
SELECT indexOfAssumeSorted([1, 3, 3, 3, 4, 4, 5], 4)
```

```response title=Response
5
```

","24.12","Arrays"
"25.6.2.5","xor",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONExtractInt",0,0,"","","System","","","","","","",""
"25.6.2.5","subtractMonths",0,0,"","","System","
Subtracts a specified number of months from a date, a date with time or a string-encoded date or date with time.
    ","subtractMonths(datetime, num)","- `datetime` — Date or date with time to subtract specified number of months from. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of months to subtract. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` minus `num` months. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Subtract months from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractMonths(date, 1) AS subtract_months_with_date,
    subtractMonths(date_time, 1) AS subtract_months_with_date_time,
    subtractMonths(date_time_string, 1) AS subtract_months_with_date_time_string
```

```response title=Response
┌─subtract_months_with_date─┬─subtract_months_with_date_time─┬─subtract_months_with_date_time_string─┐
│                2023-12-01 │            2023-12-01 00:00:00 │               2023-12-01 00:00:00.000 │
└───────────────────────────┴────────────────────────────────┴───────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 month)
```

```response title=Response
┌─minus(CAST('⋯lMonth(10))─┐
│               1997-08-16 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","toUInt256",0,0,"","","System","","","","","","",""
"25.6.2.5","arraySimilarity",0,0,"","","System","
Calculates the similarity of two arrays from `0` to `1` based on weighted Levenshtein distance.
","arraySimilarity(from, to, from_weights, to_weights)","- `from` — first array
- `to` — second array
- `from_weights` — weights for the first array. [`Array((U)Int*|Float*)`](/sql-reference/data-types/array).
- `to_weights` — weights for the second array. [`Array((U)Int*|Float*)`](/sql-reference/data-types/array).
","Returns the similarity between `0` and `1` of the two arrays based on the weighted Levenshtein distance. [`Float64`](/sql-reference/data-types/float).","**Usage example**

```sql title=Query
SELECT arraySimilarity(['A', 'B', 'C'], ['A', 'K', 'L'], [1.0, 2, 3], [3.0, 4, 5]);
```

```response title=Response
0.2222222222222222
```

","25.4","Arrays"
"25.6.2.5","arrayEnumerateUniqRanked",0,0,"","","System","
Returns an array (or multi-dimensional array) with the same dimensions as the source array,
indicating for each element what it's position is among elements with the same value.
It allows for enumeration of a multi-dimensional array with the ability to specify how deep to look inside the array.
","arrayEnumerateUniqRanked(clear_depth, arr, max_array_depth)","- `clear_depth` — Enumerate elements at the specified level separately. Positive [Integer](../data-types/int-uint.md) less than or equal to `max_arr_depth`.
- `arr` — N-dimensional array to enumerate. [Array](/sql-reference/data-types/array).
- `max_array_depth` — The maximum effective depth. Positive [Integer](../data-types/int-uint.md) less than or equal to the depth of `arr`.
","Returns an N-dimensional array the same size as `arr` with each element showing the position of that element in relation to other elements of the same value.","**Example 1**

```sql title=Query
-- With clear_depth=1 and max_array_depth=1, the result of arrayEnumerateUniqRanked
-- is identical to that which arrayEnumerateUniq would give for the same array.

SELECT arrayEnumerateUniqRanked(1, [1, 2, 1], 1);
```

```response title=Response
[1, 1, 2]
```

**Example 2**

```sql title=Query
-- with clear_depth=1 and max_array_depth=1, the result of arrayEnumerateUniqRanked
-- is identical to that which arrayEnumerateUniqwould give for the same array.

SELECT arrayEnumerateUniqRanked(1, [[1, 2, 3], [2, 2, 1], [3]], 2);"", ""[[1, 1, 1], [2, 3, 2], [2]]
```

```response title=Response
[1, 1, 2]
```

**Example 3**

```sql title=Query
-- In this example, arrayEnumerateUniqRanked is used to obtain an array indicating,
-- for each element of the multidimensional array, what its position is among elements
-- of the same value. For the first row of the passed array, [1, 2, 3], the corresponding
-- result is [1, 1, 1], indicating that this is the first time 1, 2 and 3 are encountered.
-- For the second row of the provided array, [2, 2, 1], the corresponding result is [2, 3, 3],
-- indicating that 2 is encountered for a second and third time, and 1 is encountered
-- for the second time. Likewise, for the third row of the provided array [3] the
-- corresponding result is [2] indicating that 3 is encountered for the second time.

SELECT arrayEnumerateUniqRanked(1, [[1, 2, 3], [2, 2, 1], [3]], 2);
```

```response title=Response
[[1, 1, 1], [2, 3, 2], [2]]
```

**Example 4**

```sql title=Query
-- Changing clear_depth=2, results in elements being enumerated separately for each row.
SELECT arrayEnumerateUniqRanked(2,[[1, 2, 3],[2, 2, 1],[3]], 2);
```

```response title=Response
[[1, 1, 1], [1, 2, 1], [1]]
```

","20.1","Arrays"
"25.6.2.5","or",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONSharedDataPaths",0,0,"","","System","
Returns the list of paths that are stored in shared data structure in JSON column.
","JSONDynamicPaths(json)","- `json` — JSON column
","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONSharedDataPaths(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONSharedDataPaths(json)─┐
│ {""a"":""42""}                           │ []                        │
│ {""b"":""Hello""}                        │ ['b']                     │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['c']                     │
└──────────────────────────────────────┴───────────────────────────┘
```

","","JSON"
"25.6.2.5","arrayExists",0,0,"","","System","
Returns `1` if there is at least one element in a source array for which `func(x[, y1, y2, ... yN])` returns true. Otherwise, it returns `0`.
","arrayExists(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns `1` if the lambda function returns true for at least one element, `0` otherwise. [`UInt8`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT arrayExists(x, y -> x=y, [1, 2, 3], [0, 0, 0])
```

```response title=Response
0
```

","1.1","Arrays"
"25.6.2.5","parseDateTimeInJodaSyntaxOrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","stringBytesEntropy",0,0,"","","System","Calculates Shannon's entropy of byte distribution in a string.","stringBytesEntropy(s);","- `s` — The string to analyze. [String](../../sql-reference/data-types/string.md))
","The Shannon entropy of the byte distribution. [Float64](../../sql-reference/data-types/float.md).","**Example**

```sql title=Query
SELECT stringBytesEntropy('Hello, world!');
```

```response title=Response
3.180832987205441
```

","25.5","String"
"25.6.2.5","arrayPushFront",0,0,"","","System","Adds one element to the beginning of the array.","arrayPushFront(arr, x)","- `arr` — The array for which to add value `x` to the end of. [`Array(T)`](/sql-reference/data-types/array).
- `x` — 
- Single value to add to the start of the array. [`Array(T)`](/sql-reference/data-types/array).

:::note
- Only numbers can be added to an array with numbers, and only strings can be added to an array of strings.
- When adding numbers, ClickHouse automatically sets the type of `x` for the data type of the array.
- Can be `NULL`. The function adds a `NULL` element to an array, and the type of array elements converts to `Nullable`.

For more information about the types of data in ClickHouse, see [Data types](/sql-reference/data-types).
:::
    
","Returns an array identical to `arr` but with an additional value `x` at the beginning of the array. [`Array(T)`](/sql-reference/data-types/array).","**Usage example**

```sql title=Query
SELECT arrayPushFront(['b'], 'a') AS res;
```

```response title=Response
['a','b']
```

","1.1","Arrays"
"25.6.2.5","throwIf",0,0,"","","System","","","","","","",""
"25.6.2.5","detectLanguageUnknown",0,0,"","","System","","","","","","",""
"25.6.2.5","and",0,0,"","","System","","","","","","",""
"25.6.2.5","uniqThetaIntersect",0,0,"","","System","
Two uniqThetaSketch objects to do intersect calculation(set operation ∩), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
select finalizeAggregation(uniqThetaIntersect(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

```response title=Response

```

","","Other"
"25.6.2.5","addQuarters",0,0,"","","System","
Adds a specified number of quarters to a date, a date with time or a string-encoded date or date with time.
    ","addQuarters(datetime, num)","- `datetime` — Date or date with time to add specified number of quarters to. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of quarters to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` quarters. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Add quarters to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addQuarters(date, 1) AS add_quarters_with_date,
    addQuarters(date_time, 1) AS add_quarters_with_date_time,
    addQuarters(date_time_string, 1) AS add_quarters_with_date_time_string
```

```response title=Response
┌─add_quarters_with_date─┬─add_quarters_with_date_time─┬─add_quarters_with_date_time_string─┐
│             2024-04-01 │         2024-04-01 00:00:00 │            2024-04-01 00:00:00.000 │
└────────────────────────┴─────────────────────────────┴────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 quarter)
```

```response title=Response
┌─plus(CAST('1⋯uarter(10))─┐
│               2000-12-16 │
└──────────────────────────┘
```

","20.1","Dates and Times"
"25.6.2.5","multiply",0,0,"","","System","Calculates the product of two values `x` and `y`.","multiply(x, y)","- `x` — factor
- `y` — factor
","The product of x and y","**Multiplying two numbers**

```sql title=Query
SELECT multiply(5,5)
```

```response title=Response
25
```

","1.1","Arithmetic"
"25.6.2.5","ilike",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayJoin",0,0,"","","System","
The `arrayJoin` function takes a row that contains an array and unfolds it, generating multiple rows – one for each element in the array.
This is in contrast to Regular Functions in ClickHouse which map input values to output values within the same row,
and Aggregate Functions which take a group of rows and ""compress"" or ""reduce"" them into a single summary row
(or a single value within a summary row if used with `GROUP BY`).

All the values in the columns are simply copied, except the values in the column where this function is applied;
these are replaced with the corresponding array value.
","arrayJoin(arr)","- `arr` — An array to unfold. [`Array(T)`](/sql-reference/data-types/array).
","Returns a set of rows unfolded from `arr`.","**Basic usage**

```sql title=Query
SELECT arrayJoin([1, 2, 3] AS src) AS dst, 'Hello', src
```

```response title=Response
┌─dst─┬─\'Hello\'─┬─src─────┐
│   1 │ Hello     │ [1,2,3] │
│   2 │ Hello     │ [1,2,3] │
│   3 │ Hello     │ [1,2,3] │
└─────┴───────────┴─────────┘
```

**arrayJoin affects all sections of the query**

```sql title=Query
-- The arrayJoin function affects all sections of the query, including the WHERE section. Notice the result 2, even though the subquery returned 1 row.

SELECT sum(1) AS impressions
FROM
(
    SELECT ['Istanbul', 'Berlin', 'Bobruisk'] AS cities
)
WHERE arrayJoin(cities) IN ['Istanbul', 'Berlin'];
```

```response title=Response
┌─impressions─┐
│           2 │
└─────────────┘
```

**Using multiple arrayJoin functions**

```sql title=Query
- A query can use multiple arrayJoin functions. In this case, the transformation is performed multiple times and the rows are multiplied.

SELECT
    sum(1) AS impressions,
    arrayJoin(cities) AS city,
    arrayJoin(browsers) AS browser
FROM
(
    SELECT
        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,
        ['Firefox', 'Chrome', 'Chrome'] AS browsers
)
GROUP BY
    2,
    3
```

```response title=Response
┌─impressions─┬─city─────┬─browser─┐
│           2 │ Istanbul │ Chrome  │
│           1 │ Istanbul │ Firefox │
│           2 │ Berlin   │ Chrome  │
│           1 │ Berlin   │ Firefox │
│           2 │ Bobruisk │ Chrome  │
│           1 │ Bobruisk │ Firefox │
└─────────────┴──────────┴─────────┘
```

**Unexpected results due to optimizations**

```sql title=Query
-- Using multiple arrayJoin with the same expression may not produce the expected result due to optimizations.
-- For these cases, consider modifying the repeated array expression with extra operations that do not affect join result.
- e.g. arrayJoin(arraySort(arr)), arrayJoin(arrayConcat(arr, []))

SELECT
    arrayJoin(dice) as first_throw,
    /* arrayJoin(dice) as second_throw */ -- is technically correct, but will annihilate result set
    arrayJoin(arrayConcat(dice, [])) as second_throw -- intentionally changed expression to force re-evaluation
FROM (
    SELECT [1, 2, 3, 4, 5, 6] as dice
);
```

```response title=Response
┌─first_throw─┬─second_throw─┐
│           1 │            1 │
│           1 │            2 │
│           1 │            3 │
│           1 │            4 │
│           1 │            5 │
│           1 │            6 │
│           2 │            1 │
│           2 │            2 │
│           2 │            3 │
│           2 │            4 │
│           2 │            5 │
│           2 │            6 │
│           3 │            1 │
│           3 │            2 │
│           3 │            3 │
│           3 │            4 │
│           3 │            5 │
│           3 │            6 │
│           4 │            1 │
│           4 │            2 │
│           4 │            3 │
│           4 │            4 │
│           4 │            5 │
│           4 │            6 │
│           5 │            1 │
│           5 │            2 │
│           5 │            3 │
│           5 │            4 │
│           5 │            5 │
│           5 │            6 │
│           6 │            1 │
│           6 │            2 │
│           6 │            3 │
│           6 │            4 │
│           6 │            5 │
│           6 │            6 │
└─────────────┴──────────────┘
```

**Using the ARRAY JOIN syntax**

```sql title=Query
-- Note the ARRAY JOIN syntax in the `SELECT` query below, which provides broader possibilities.
-- ARRAY JOIN allows you to convert multiple arrays with the same number of elements at a time.

SELECT
    sum(1) AS impressions,
    city,
    browser
FROM
(
    SELECT
        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,
        ['Firefox', 'Chrome', 'Chrome'] AS browsers
)
ARRAY JOIN
    cities AS city,
    browsers AS browser
GROUP BY
    2,
    3
```

```response title=Response
┌─impressions─┬─city─────┬─browser─┐
│           1 │ Istanbul │ Firefox │
│           1 │ Berlin   │ Chrome  │
│           1 │ Bobruisk │ Chrome  │
└─────────────┴──────────┴─────────┘
```

**Using Tuple**

```sql title=Query
-- You can also use Tuple

SELECT
    sum(1) AS impressions,
    (arrayJoin(arrayZip(cities, browsers)) AS t).1 AS city,
    t.2 AS browser
FROM
(
    SELECT
        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,
        ['Firefox', 'Chrome', 'Chrome'] AS browsers
)
GROUP BY
    2,
    3
```

```response title=Response
┌─impressions─┬─city─────┬─browser─┐
│           1 │ Istanbul │ Firefox │
│           1 │ Berlin   │ Chrome  │
│           1 │ Bobruisk │ Chrome  │
└─────────────┴──────────┴─────────┘
```

","1.1","Arrays"
"25.6.2.5","arrayMap",0,0,"","","System","
Returns an array obtained from the original arrays by applying a lambda function to each element.
","arrayMap(func, arr)","- `func` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `arr` — N arrays to process. [Array(T)](/sql-reference/data-types/array).
","Returns an array from the lambda results. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayMap(x -> (x + 2), [1, 2, 3]) as res;
```

```response title=Response
[3,4,5]
```

**Creating a tuple of elements from different arrays**

```sql title=Query
SELECT arrayMap((x, y) -> (x, y), [1, 2, 3], [4, 5, 6]) AS res
```

```response title=Response
[(1,4),(2,5),(3,6)]
```

","1.1","Arrays"
"25.6.2.5","arrayPartialShuffle",0,1,"","","System","
Returns an array of the same size as the original array where elements in range `[1..limit]` are a random
subset of the original array. Remaining `(limit..n]` shall contain the elements not in `[1..limit]` range in undefined order.
Value of limit shall be in range `[1..n]`. Values outside of that range are equivalent to performing full `arrayShuffle`:

:::note
This function will not materialize constants.

The value of `limit` should be in the range `[1..N]`. Values outside of that range are equivalent to performing full [`arrayShuffle`](#arrayshuffle).
:::
    ","arrayPartialShuffle(arr [, limit[, seed]])","- `arr` — The array to shuffle. [`Array(T)`](/sql-reference/data-types/array).
- `seed` — Optional. The seed to be used with random number generation. If not provided, a random one is used. [`(U)Int*`](../data-types/int-uint.md).
- `limit` — Optional. The number to limit element swaps to, in the range `[1..N]`. [`(U)Int*`](../data-types/int-uint.md).
","Array with elements partially shuffled. [`Array(T)`](/sql-reference/data-types/array)).","**no_limit1**

```sql title=Query
SELECT arrayPartialShuffle([1, 2, 3, 4], 0)
```

```response title=Response
[2,4,3,1]
```

**no_limit2**

```sql title=Query
SELECT arrayPartialShuffle([1, 2, 3, 4])
```

```response title=Response
[4,1,3,2]
```

**random_seed**

```sql title=Query
SELECT arrayPartialShuffle([1, 2, 3, 4], 2)
```

```response title=Response
[3,4,1,2]
```

**explicit_seed**

```sql title=Query
SELECT arrayPartialShuffle([1, 2, 3, 4], 2, 41)
```

```response title=Response
[3,2,1,4]
```

**materialize**

```sql title=Query
SELECT arrayPartialShuffle(materialize([1, 2, 3, 4]), 2, 42), arrayPartialShuffle([1, 2, 3], 2, 42) FROM numbers(10)
```

```response title=Response
┌─arrayPartial⋯4]), 2, 42)─┬─arrayPartial⋯ 3], 2, 42)─┐
│ [3,2,1,4]                │ [3,2,1]                  │
│ [3,2,1,4]                │ [3,2,1]                  │
│ [4,3,2,1]                │ [3,2,1]                  │
│ [1,4,3,2]                │ [3,2,1]                  │
│ [3,4,1,2]                │ [3,2,1]                  │
│ [1,2,3,4]                │ [3,2,1]                  │
│ [1,4,3,2]                │ [3,2,1]                  │
│ [1,4,3,2]                │ [3,2,1]                  │
│ [3,1,2,4]                │ [3,2,1]                  │
│ [1,3,2,4]                │ [3,2,1]                  │
└──────────────────────────┴──────────────────────────┘
```

","23.2","Arrays"
"25.6.2.5","arrayFirstIndex",0,0,"","","System","
Returns the index of the first element in the source array for which `func(x[, y1, y2, ... yN])` returns true, otherwise it returns '0'.
","arrayFirstIndex(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the index of the first element of the source array for which `func` is true, otherwise returns `0`. [`UInt32`](/sql-reference/data-types/int-uint).","**Usage example**

```sql title=Query
SELECT arrayFirstIndex(x, y -> x=y, ['a', 'b', 'c'], ['c', 'b', 'a'])
```

```response title=Response
2
```

**No match**

```sql title=Query
SELECT arrayFirstIndex(x, y -> x=y, ['a', 'b', 'c'], ['d', 'e', 'f'])
```

```response title=Response
0
```

","1.1","Arrays"
"25.6.2.5","multiSearchFirstIndexUTF8",0,0,"","","System","","","","","","",""
"25.6.2.5","moduloOrNull",0,0,"","","System","
Calculates the remainder when dividing `a` by `b`. Similar to function `modulo` except that `moduloOrNull` will return NULL
if the right argument is 0.
    ","moduloOrNull(x, y)","- `x` — The dividend. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
- `y` — The divisor (modulus). [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float).
","Returns the remainder of the division of `x` by `y`, or null when the divisor is zero.","**moduloOrNull by zero**

```sql title=Query
SELECT moduloOrNull(5, 0)
```

```response title=Response
\N
```

","25.5","Arithmetic"
"25.6.2.5","parseDateTimeBestEffortUS",0,0,"","","System","","","","","","",""
"25.6.2.5","mapPopulateSeries",0,0,"","","System","","","","","","",""
"25.6.2.5","divideDecimal",0,0,"","","System","
Performs division on two decimals. Result value will be of type [Decimal256](/sql-reference/data-types/decimal).
Result scale can be explicitly specified by `result_scale` argument (const Integer in range `[0, 76]`). If not specified, the result scale is the max scale of given arguments.

:::note
These function work significantly slower than usual `divide`.
In case you don't really need controlled precision and/or need fast computation, consider using [divide](#divide).
:::
    ","divideDecimal(x, y[, result_scale])","- `x` — First value: [Decimal](/sql-reference/data-types/decimal).
- `y` — Second value: [Decimal](/sql-reference/data-types/decimal).
- `result_scale` — Scale of result. Type [Int/UInt](/sql-reference/data-types/int-uint).
","The result of division with given scale. Type: [Decimal256](/sql-reference/data-types/decimal.md).","**Example 1**

```sql title=Query
divideDecimal(toDecimal256(-12, 0), toDecimal32(2.1, 1), 10)
```

```response title=Response
┌─divideDecimal(toDecimal256(-12, 0), toDecimal32(2.1, 1), 10)─┐
│                                                -5.7142857142 │
└──────────────────────────────────────────────────────────────┘
```

**Example 2**

```sql title=Query
SELECT toDecimal64(-12, 1) / toDecimal32(2.1, 1);
SELECT toDecimal64(-12, 1) as a, toDecimal32(2.1, 1) as b, divideDecimal(a, b, 1), divideDecimal(a, b, 5);
```

```response title=Response
┌─divide(toDecimal64(-12, 1), toDecimal32(2.1, 1))─┐
│                                             -5.7 │
└──────────────────────────────────────────────────┘
┌───a─┬───b─┬─divideDecimal(toDecimal64(-12, 1), toDecimal32(2.1, 1), 1)─┬─divideDecimal(toDecimal64(-12, 1), toDecimal32(2.1, 1), 5)─┐
│ -12 │ 2.1 │                                                       -5.7 │                                                   -5.71428 │
└─────┴─────┴────────────────────────────────────────────────────────────┴────────────────────────────────────────────────────────────┘
```

","22.12","Arithmetic"
"25.6.2.5","globalVariable",0,0,"","","System","","","","","","",""
"25.6.2.5","tryBase64Decode",0,0,"","","System","Decodes a String or FixedString from base64, like base64Decode but returns an empty string in case of an error.","tryBase64Decode(encoded)","- `encoded` — String column or constant. If the string is not a valid Base64-encoded value, returns an empty string.
","A string containing the decoded value of the argument.","**valid**

```sql title=Query
SELECT tryBase64Decode('Y2xpY2tob3VzZQ==')
```

```response title=Response
clickhouse
```

**invalid**

```sql title=Query
SELECT tryBase64Decode('invalid')
```

```response title=Response

```

","18.16","Encoding"
"25.6.2.5","bech32Encode",0,0,"","","System","","","","","","",""
"25.6.2.5","toStartOfTenMinutes",0,0,"","","System","","","","","","",""
"25.6.2.5","nullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayZipUnaligned",0,0,"","","System","Combines multiple arrays into a single array, allowing for unaligned arrays (arrays of differing lengths). The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.","arrayZipUnaligned(arr1, arr2, ..., arrN)","- `arr1, arr2, ..., arrN` — N arrays to combine into a single array. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array with elements from the source arrays grouped in tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed. [`Array(T)`](/sql-reference/data-types/array)([`Tuple(T1, T2, ...)`](/sql-reference/data-types/tuple)).","**Usage example**

```sql title=Query
SELECT arrayZipUnaligned(['a'], [1, 2, 3]);
```

```response title=Response
[('a', 1),(NULL, 2),(NULL, 3)]
```

","20.1","Arrays"
"25.6.2.5","dictGet",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the attribute's data type if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.6.2.5","toLowCardinality",0,0,"","","System","","","","","","",""
"25.6.2.5","s2CellsIntersect",0,0,"","","System","","","","","","",""
"25.6.2.5","hilbertEncode",0,0,"","","System","
Calculates code for Hilbert Curve for a list of unsigned integers.

The function has two modes of operation:
- Simple
- Expanded

Simple: accepts up to 2 unsigned integers as arguments and produces a UInt64 code.
[example:simple]
Produces: `31`

Expanded: accepts a range mask (tuple) as a first argument and up to 2 unsigned integers as other arguments.
Each number in the mask configures the number of bits by which the corresponding argument will be shifted left, effectively scaling the argument within its range.
[example:range_expanded]
Produces: `4031541586602`
Note: tuple size must be equal to the number of the other arguments

Range expansion can be beneficial when you need a similar distribution for arguments with wildly different ranges (or cardinality)
For example: 'IP Address' (0...FFFFFFFF) and 'Country code' (0...FF)

For a single argument without a tuple, the function returns the argument itself as the Hilbert index, since no dimensional mapping is needed.
[example:identity]
Produces: `1`

If a single argument is provided with a tuple specifying bit shifts, the function shifts the argument left by the specified number of bits.
[example:identity_expanded]
Produces: `512`

The function also accepts columns as arguments:
[example:from_table]

But the range tuple must still be a constant:
[example:from_table_range]

Please note that you can fit only so much bits of information into Hilbert code as UInt64 has.
Two arguments will have a range of maximum 2^32 (64/2) each
All overflow will be clamped to zero
","","","","**simple**

```sql title=Query
SELECT hilbertEncode(3, 4)
```

```response title=Response

```

**range_expanded**

```sql title=Query
SELECT hilbertEncode((10,6), 1024, 16)
```

```response title=Response

```

**identity**

```sql title=Query
SELECT hilbertEncode(1)
```

```response title=Response

```

**identity_expanded**

```sql title=Query
SELECT hilbertEncode(tuple(2), 128)
```

```response title=Response

```

**from_table**

```sql title=Query
SELECT hilbertEncode(n1, n2) FROM table
```

```response title=Response

```

**from_table_range**

```sql title=Query
SELECT hilbertEncode((1,2), n1, n2) FROM table
```

```response title=Response

```

","","Encoding"
"25.6.2.5","stringBytesUniq",0,0,"","","System","Counts the number of distinct bytes in a string.","stringBytesUniq(s);","- `s` — The string to analyze. [String](../../sql-reference/data-types/string.md)
","The number of distinct bytes in the string. [UInt16](../../sql-reference/data-types/int-uint.md).","**Example**

```sql title=Query
SELECT stringBytesUniq('Hello, world!');
```

```response title=Response
10
```

","25.5","String"
"25.6.2.5","uniqThetaUnion",0,0,"","","System","
Two uniqThetaSketch objects to do union calculation(set operation ∪), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
select finalizeAggregation(uniqThetaUnion(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

```response title=Response

```

","","Other"
"25.6.2.5","URLHierarchy",0,0,"","","System","","","","","","",""
"25.6.2.5","toFloat64OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayZip",0,0,"","","System","Combines multiple arrays into a single array. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.","arrayZip(arr1, arr2, ... , arrN)","- `arr1, arr2, ... , arrN` — N arrays to combine into a single array. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array with elements from the source arrays grouped in tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed. [`Array(T)`](/sql-reference/data-types/array)([`Tuple`](/sql-reference/data-types/tuple)).","**Usage example**

```sql title=Query
SELECT arrayZip(['a', 'b', 'c'], [5, 2, 1]);
```

```response title=Response
[('a', 5), ('b', 2), ('c', 1)]
```

","20.1","Arrays"
"25.6.2.5","subtractInterval",0,0,"","","System","
Adds a negated interval to another interval or tuple of intervals.

Note: Intervals of the same type will be combined into a single interval. For instance if `toIntervalDay(2)` and `toIntervalDay(1)` are
passed then the result will be `(1)` rather than `(2,1)`.
    ","subtractInterval(interval_1, interval_2)","- `interval_1` — First interval or interval of tuples. [`interval`](../data-types/special-data-types/interval.md)/[`tuple`](../data-types/tuple.md)([`interval`](../data-types/special-data-types/interval.md)).
- `interval_2` — Second interval to be negated. [`interval`](../data-types/special-data-types/interval.md).
","Returns a tuple of intervals. [`tuple`](../data-types/tuple.md)([`interval`](../data-types/special-data-types/interval.md)).","**Subtract intervals**

```sql title=Query
SELECT subtractInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH);
SELECT subtractInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH);
SELECT subtractInterval(INTERVAL 2 DAY, INTERVAL 1 DAY);
```

```response title=Response
┌─subtractInterval(toIntervalDay(1), toIntervalMonth(1))─┐
│ (1,-1)                                                 │
└────────────────────────────────────────────────────────┘
┌─subtractInterval((toIntervalDay(1), toIntervalYear(1)), toIntervalMonth(1))─┐
│ (1,1,-1)                                                                    │
└─────────────────────────────────────────────────────────────────────────────┘
┌─subtractInterval(toIntervalDay(2), toIntervalDay(1))─┐
│ (1)                                                  │
└──────────────────────────────────────────────────────┘
```

","22.11","Dates and Times"
"25.6.2.5","defaultRoles",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayFilter",0,0,"","","System","Returns an array containing only the elements in the source array for which a lambda function returns true.","arrayFilter(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])]","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns a subset of the source array. [`Array(T)`](/sql-reference/data-types/array).","**Example 1**

```sql title=Query
SELECT arrayFilter(x -> x LIKE '%World%', ['Hello', 'abc World']) AS res
```

```response title=Response
['abc World']
```

**Example 2**

```sql title=Query
SELECT
    arrayFilter(
        (i, x) -> x LIKE '%World%',
        arrayEnumerate(arr),
        ['Hello', 'abc World'] AS arr)
    AS res
```

```response title=Response
[2]
```

","1.1","Arrays"
"25.6.2.5","multiIf",0,0,"","","System","
Allows writing the [`CASE`](/sql-reference/operators#conditional-expression) operator more compactly in the query.
Evaluates each condition in order. For the first condition that is true (non-zero and not `NULL`), returns the corresponding branch value.
If none of the conditions are true, returns the `else` value.

Setting [`short_circuit_function_evaluation`](/operations/settings/settings#short_circuit_function_evaluation) controls
whether short-circuit evaluation is used. If enabled, the `then_i` expression is evaluated only on rows where
`((NOT cond_1) AND ... AND (NOT cond_{i-1}) AND cond_i)` is true.

For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the following query:

```sql
SELECT multiIf(number = 2, intDiv(1, number), number = 5) FROM numbers(10)
```

All branch and else expressions must have a common supertype. `NULL` conditions are treated as false.
    ","multiIf(cond_1, then_1, cond_2, then_2, ..., else)","- `cond_N` — The N-th evaluated condition which controls if `then_N` is returned. Each must be UInt8, Nullable(UInt8), or NULL.
- `then_N` — The result of the function when `cond_N` is true.
- `else` — The result of the function if none of the conditions is true.
","Returns the result of `then_N` for matching `cond_N`, otherwise returns the `else` condition.","**Example usage**

```sql title=Query
CREATE TABLE LEFT_RIGHT (left Nullable(UInt8), right Nullable(UInt8)) ENGINE = Memory;
INSERT INTO LEFT_RIGHT VALUES (NULL, 4), (1, 3), (2, 2), (3, 1), (4, NULL);

SELECT
    left,
    right,
    multiIf(left < right, 'left is smaller', left > right, 'left is greater', left = right, 'Both equal', 'Null value') AS result
FROM LEFT_RIGHT;
```

```response title=Response
┌─left─┬─right─┬─result──────────┐
│ ᴺᵁᴸᴸ │     4 │ Null value      │
│    1 │     3 │ left is smaller │
│    2 │     2 │ Both equal      │
│    3 │     1 │ left is greater │
│    4 │  ᴺᵁᴸᴸ │ Null value      │
└──────┴───────┴─────────────────┘
```

","1.1","Conditional"
"25.6.2.5","caseWithExpression",0,0,"","","System","","","","","","",""
"25.6.2.5","readWKTRing",0,0,"","","System","","","","","","",""
"25.6.2.5","JSONMergePatch",0,0,"","","System","Returns the merged JSON object string, which is formed by merging multiple JSON objects.","","","","","","JSON"
"25.6.2.5","arrayFirst",0,0,"","","System","
Returns the first element in the source array for which `func(x[, y1, y2, ... yN])` returns true, otherwise it returns a default value.
    ","arrayFirst(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the first element of the source array for which `λ` is true, otherwise returns the default value of `T`.","**Usage example**

```sql title=Query
SELECT arrayFirst(x, y -> x=y, ['a', 'b', 'c'], ['c', 'b', 'a'])
```

```response title=Response
b
```

**No match**

```sql title=Query
SELECT arrayFirst(x, y -> x=y, [0, 1, 2], [3, 3, 3]) AS res, toTypeName(res)
```

```response title=Response
0 UInt8
```

","1.1","Arrays"
"25.6.2.5","toIntervalYear",0,0,"","","System","","","","","","",""
"25.6.2.5","addInterval",0,0,"","","System","
Adds an interval to another interval or tuple of intervals.

Note: Intervals of the same type will be combined into a single interval. For instance if `toIntervalDay(1)` and `toIntervalDay(2)` are passed then the result will be `(3)` rather than `(1,1)`.
    ","addInterval(interval_1, interval_2)","- `interval_1` — First interval or tuple of intervals. [`interval`](../data-types/special-data-types/interval.md)/[`tuple`](../data-types/tuple.md)([`interval`](../data-types/special-data-types/interval.md)).
- `interval_2` — Second interval to be added. [`interval`](../data-types/special-data-types/interval.md).
","Returns a tuple of intervals. [`tuple`](../data-types/tuple.md)([`interval`](../data-types/special-data-types/interval.md)).","**Add intervals**

```sql title=Query
SELECT addInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH);
SELECT addInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH);
SELECT addInterval(INTERVAL 2 DAY, INTERVAL 1 DAY)
```

```response title=Response
┌─addInterval(toIntervalDay(1), toIntervalMonth(1))─┐
│ (1,1)                                             │
└───────────────────────────────────────────────────┘
┌─addInterval((toIntervalDay(1), toIntervalYear(1)), toIntervalMonth(1))─┐
│ (1,1,1)                                                                │
└────────────────────────────────────────────────────────────────────────┘
┌─addInterval(toIntervalDay(2), toIntervalDay(1))─┐
│ (3)                                             │
└─────────────────────────────────────────────────┘
```

","22.11","Dates and Times"
"25.6.2.5","rowNumberInBlock",0,0,"","","System","","","","","","",""
"25.6.2.5","splitByString",0,0,"","","System","","","","","","",""
"25.6.2.5","nested",0,0,"","","System","
This is a function used internally by the ClickHouse engine and not meant to be used directly.

Returns the array of tuples from multiple arrays.

The first argument must be a constant array of Strings determining the names of the resulting Tuple.
The other arguments must be arrays of the same size.
","","","","**nested**

```sql title=Query
SELECT nested(['keys', 'values'], ['key_1', 'key_2'], ['value_1','value_2'])
```

```response title=Response

```

","","Other"
"25.6.2.5","toIPv4OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","readWKTLineString",0,0,"","","System","
Parses a Well-Known Text (WKT) representation of a LineString geometry and returns it in the internal ClickHouse format.
","readWKTLineString(wkt_string)","- `wkt_string` — The input WKT string representing a LineString geometry.
","The function returns a ClickHouse internal representation of the linestring geometry.","**first call**

```sql title=Query
SELECT readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)');
```

```response title=Response
┌─readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)')─┐
│ [(1,1),(2,2),(3,3),(1,1)]                            │
└──────────────────────────────────────────────────────┘
```

**second call**

```sql title=Query
SELECT toTypeName(readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)'));
```

```response title=Response
┌─toTypeName(readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)'))─┐
│ LineString                                                       │
└──────────────────────────────────────────────────────────────────┘
```

","","UUID"
"25.6.2.5","jaroSimilarity",0,0,"","","System","Calculates the Jaro similarity between two byte-string.","","","","","","String"
"25.6.2.5","h3IsResClassIII",0,0,"","","System","","","","","","",""
"25.6.2.5","cutQueryStringAndFragment",0,0,"","","System","","","","","","",""
"25.6.2.5","makeDate",0,1,"","","System","
Creates a `Date` from either:
- a year, month and day
- a year and day of year
    ","makeDate(year, month, day)
makeDate(year, day_of_year)","- `year` — Year number. [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `month` — Month number (1-12). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `day` — Day of the month (1-31). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
- `day_of_year` — Day of the year (1-365). [`(U)Int*`](../data-types/int-uint.md)/[`Float32/64`](../data-types/float.md)/[`Decimal`](../data-types/decimal.md).
","Returns a `Date` value constructed from the provided arguments. [`Date`](../data-types/date.md).","**Date from a year, month, day**

```sql title=Query
SELECT makeDate(2023, 2, 28) AS date;
```

```response title=Response
┌───────date─┐
│ 2023-02-28 │
└────────────┘
```

**Date from year and day of year**

```sql title=Query
SELECT makeDate(2023, 42) AS date;
```

```response title=Response
┌───────date─┐
│ 2023-02-11 │
└────────────┘
```

","22.6","Dates and Times"
"25.6.2.5","toUInt256OrNull",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayFirstOrNull",0,0,"","","System","
Returns the first element in the source array for which `func(x[, y1, y2, ... yN])` returns true, otherwise it returns `NULL`.
    ","arrayFirstOrNull(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns the first element of the source array for which `func` is true, otherwise returns `NULL`.","**Usage example**

```sql title=Query
SELECT arrayFirstOrNull(x, y -> x=y, ['a', 'b', 'c'], ['c', 'b', 'a'])
```

```response title=Response
b
```

**No match**

```sql title=Query
SELECT arrayFirstOrNull(x, y -> x=y, [0, 1, 2], [3, 3, 3]) AS res, toTypeName(res)
```

```response title=Response
NULL Nullable(UInt8)
```

","1.1","Arrays"
"25.6.2.5","addMonths",0,0,"","","System","
Adds a specified number of months to a date, a date with time or a string-encoded date or date with time.
    ","addMonths(datetime, num)","- `datetime` — Date or date with time to add specified number of months to. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md)/[`String`](../data-types/string.md).
- `num` — Number of months to add. [`(U)Int*`](../data-types/int-uint.md)/[`Float*`](../data-types/float.md).
","Returns `datetime` plus `num` months. [`Date`](../data-types/date.md)/[`Date32`](../data-types/date32.md)/[`DateTime`](../data-types/datetime.md)/[`DateTime64`](../data-types/datetime64.md).","**Add months to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addMonths(date, 6) AS add_months_with_date,
    addMonths(date_time, 6) AS add_months_with_date_time,
    addMonths(date_time_string, 6) AS add_months_with_date_time_string
```

```response title=Response
┌─add_months_with_date─┬─add_months_with_date_time─┬─add_months_with_date_time_string─┐
│           2024-07-01 │       2024-07-01 00:00:00 │          2024-07-01 00:00:00.000 │
└──────────────────────┴───────────────────────────┴──────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 month)
```

```response title=Response
┌─plus(CAST('1⋯lMonth(10))─┐
│               1999-04-16 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.6.2.5","toInt64OrZero",0,0,"","","System","","","","","","",""
"25.6.2.5","arrayAll",0,0,"","","System","
Returns `1` if lambda `func(x [, y1, y2, ... yN])` returns true for all elements. Otherwise, it returns `0`.
","arrayAll(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda).
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array).
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array).
","Returns `1` if the lambda function returns true for all elements, `0` otherwise. [`UInt8`](/sql-reference/data-types/int-uint).","**All elements match**

```sql title=Query
SELECT arrayAll(x, y -> x=y, [1, 2, 3], [1, 2, 3])
```

```response title=Response
1
```

**Not all elements match**

```sql title=Query
SELECT arrayAll(x, y -> x=y, [1, 2, 3], [1, 1, 1])
```

```response title=Response
0
```

","1.1","Arrays"
"25.6.2.5","FROM_UNIXTIME",0,1,"fromUnixTimestamp","","System","","","","","","",""
"25.6.2.5","truncate",0,1,"trunc","","System","","","","","","",""
"25.6.2.5","ceiling",0,1,"ceil","","System","","","","","","",""
"25.6.2.5","DAY",0,1,"toDayOfMonth","","System","","","","","","",""
"25.6.2.5","HOUR",0,1,"toHour","","System","","","","","","",""
"25.6.2.5","connection_id",0,1,"connectionID","","System","","","","","","",""
"25.6.2.5","SVG",0,0,"svg","","System","","","","","","",""
"25.6.2.5","fullHostName",0,0,"FQDN","","System","","","","","","",""
"25.6.2.5","str_to_map",0,1,"extractKeyValuePairs","","System","","","","","","",""
"25.6.2.5","LAST_DAY",0,1,"toLastDayOfMonth","","System","","","","","","",""
"25.6.2.5","INET6_ATON",0,1,"IPv6StringToNum","","System","","","","","","",""
"25.6.2.5","INET_ATON",0,1,"IPv4StringToNum","","System","","","","","","",""
"25.6.2.5","levenshteinDistanceUTF8",0,0,"editDistanceUTF8","","System","","","","","","",""
"25.6.2.5","levenshteinDistance",0,0,"editDistance","","System","","","","","","",""
"25.6.2.5","mismatches",0,0,"byteHammingDistance","","System","","","","","","",""
"25.6.2.5","caseWithExpr",0,0,"caseWithExpression","","System","","","","","","",""
"25.6.2.5","SUBSTRING_INDEX",0,1,"substringIndex","","System","","","","","","",""
"25.6.2.5","initial_query_start_time",0,1,"initialQueryStartTime","","System","","","","","","",""
"25.6.2.5","INET_NTOA",0,1,"IPv4NumToString","","System","","","","","","",""
"25.6.2.5","current_database",0,1,"currentDatabase","","System","","","","","","",""
"25.6.2.5","SCHEMA",0,1,"currentDatabase","","System","","","","","","",""
"25.6.2.5","replace",0,1,"replaceAll","","System","","","","","","",""
"25.6.2.5","DATE_TRUNC",0,1,"dateTrunc","","System","","","","","","",""
"25.6.2.5","FORMAT_BYTES",0,1,"formatReadableSize","","System","","","","","","",""
"25.6.2.5","visitParamHas",0,0,"simpleJSONHas","","System","","","","","","",""
"25.6.2.5","timeZoneOffset",0,0,"timezoneOffset","","System","","","","","","",""
"25.6.2.5","timestamp_diff",0,0,"dateDiff","","System","","","","","","",""
"25.6.2.5","distanceL2",0,1,"L2Distance","","System","","","","","","",""
"25.6.2.5","positive_modulo_or_null",0,1,"positiveModuloOrNull","","System","","","","","","",""
"25.6.2.5","lcase",0,1,"lower","","System","","","","","","",""
"25.6.2.5","DATE_DIFF",0,0,"dateDiff","","System","","","","","","",""
"25.6.2.5","time_bucket",0,1,"toStartOfInterval","","System","","","","","","",""
"25.6.2.5","rand32",0,0,"rand","","System","","","","","","",""
"25.6.2.5","date_diff",0,0,"dateDiff","","System","","","","","","",""
"25.6.2.5","timestampDiff",0,0,"dateDiff","","System","","","","","","",""
"25.6.2.5","toTimeZone",0,0,"toTimezone","","System","","","","","","",""
"25.6.2.5","timeZone",0,1,"timezone","","System","","","","","","",""
"25.6.2.5","INET6_NTOA",0,1,"IPv6NumToString","","System","","","","","","",""
"25.6.2.5","JSON_ARRAY_LENGTH",0,1,"JSONArrayLength","","System","","","","","","",""
"25.6.2.5","CHAR_LENGTH",0,1,"lengthUTF8","","System","","","","","","",""
"25.6.2.5","instr",0,1,"positionCaseInsensitive","","System","","","","","","",""
"25.6.2.5","byteSlice",0,1,"substring","","System","","","","","","",""
"25.6.2.5","mid",0,1,"substring","","System","","","","","","",""
"25.6.2.5","curdate",0,1,"today","","System","","","","","","",""
"25.6.2.5","splitByAlpha",0,0,"alphaTokens","","System","","","","","","",""
"25.6.2.5","ST_MPolyFromWKB",0,0,"readWKBMultiPolygon","","System","","","","","","",""
"25.6.2.5","REGEXP_REPLACE",0,1,"replaceRegexpAll","","System","","","","","","",""
"25.6.2.5","ST_PolyFromWKB",0,0,"readWKBPolygon","","System","","","","","","",""
"25.6.2.5","ST_MLineFromWKB",0,0,"readWKBMultiLineString","","System","","","","","","",""
"25.6.2.5","current_date",0,1,"today","","System","","","","","","",""
"25.6.2.5","ST_LineFromWKB",0,0,"readWKBLineString","","System","","","","","","",""
"25.6.2.5","date_bin",0,1,"toStartOfInterval","","System","","","","","","",""
"25.6.2.5","minSampleSizeContinous",0,0,"minSampleSizeContinuous","","System","","","","","","",""
"25.6.2.5","MILLISECOND",0,1,"toMillisecond","","System","","","","","","",""
"25.6.2.5","power",0,1,"pow","","System","","","","","","",""
"25.6.2.5","modOrNull",0,1,"moduloOrNull","","System","","","","","","",""
"25.6.2.5","SECOND",0,1,"toSecond","","System","","","","","","",""
"25.6.2.5","normalizeLinf",0,1,"LinfNormalize","","System","","","","","","",""
"25.6.2.5","initial_query_id",0,1,"initialQueryID","","System","","","","","","",""
"25.6.2.5","normalizeL2",0,1,"L2Normalize","","System","","","","","","",""
"25.6.2.5","current_query_id",0,1,"currentQueryID","","System","","","","","","",""
"25.6.2.5","REGEXP_EXTRACT",0,1,"regexpExtract","","System","","","","","","",""
"25.6.2.5","normalizeL1",0,1,"L1Normalize","","System","","","","","","",""
"25.6.2.5","CHARACTER_LENGTH",0,1,"lengthUTF8","","System","","","","","","",""
"25.6.2.5","TIMESTAMP_DIFF",0,0,"dateDiff","","System","","","","","","",""
"25.6.2.5","visitParamExtractFloat",0,0,"simpleJSONExtractFloat","","System","","","","","","",""
"25.6.2.5","substr",0,1,"substring","","System","","","","","","",""
"25.6.2.5","distanceLinf",0,1,"LinfDistance","","System","","","","","","",""
"25.6.2.5","partitionID",0,0,"partitionId","","System","","","","","","",""
"25.6.2.5","distanceL2Squared",0,1,"L2SquaredDistance","","System","","","","","","",""
"25.6.2.5","distanceL1",0,1,"L1Distance","","System","","","","","","",""
"25.6.2.5","TO_BASE64",0,1,"base64Encode","","System","","","","","","",""
"25.6.2.5","normL1",0,1,"L1Norm","","System","","","","","","",""
"25.6.2.5","yandexConsistentHash",0,0,"kostikConsistentHash","","System","","","","","","",""
"25.6.2.5","scalarProduct",0,1,"dotProduct","","System","","","","","","",""
"25.6.2.5","DAYOFMONTH",0,1,"toDayOfMonth","","System","","","","","","",""
"25.6.2.5","vectorDifference",0,1,"tupleMinus","","System","","","","","","",""
"25.6.2.5","vectorSum",0,1,"tuplePlus","","System","","","","","","",""
"25.6.2.5","user",0,1,"currentUser","","System","","","","","","",""
"25.6.2.5","normL2Squared",0,1,"L2SquaredNorm","","System","","","","","","",""
"25.6.2.5","hostname",0,0,"hostName","","System","","","","","","",""
"25.6.2.5","caseWithoutExpression",0,0,"multiIf","","System","","","","","","",""
"25.6.2.5","concat_ws",0,1,"concatWithSeparator","","System","","","","","","",""
"25.6.2.5","FROM_BASE64",0,1,"base64Decode","","System","","","","","","",""
"25.6.2.5","extractAllGroups",0,0,"extractAllGroupsVertical","","System","","","","","","",""
"25.6.2.5","UTC_timestamp",0,1,"UTCTimestamp","","System","","","","","","",""
"25.6.2.5","ln",0,1,"log","","System","","","","","","",""
"25.6.2.5","distanceLp",0,1,"LpDistance","","System","","","","","","",""
"25.6.2.5","QUARTER",0,1,"toQuarter","","System","","","","","","",""
"25.6.2.5","current_timestamp",0,1,"now","","System","","","","","","",""
"25.6.2.5","query_id",0,1,"queryID","","System","","","","","","",""
"25.6.2.5","positive_modulo",0,1,"positiveModulo","","System","","","","","","",""
"25.6.2.5","MAP_FROM_ARRAYS",0,0,"mapFromArrays","","System","","","","","","",""
"25.6.2.5","normLinf",0,1,"LinfNorm","","System","","","","","","",""
"25.6.2.5","visitParamExtractInt",0,0,"simpleJSONExtractInt","","System","","","","","","",""
"25.6.2.5","sqid",0,0,"sqidEncode","","System","","","","","","",""
"25.6.2.5","normLp",0,1,"LpNorm","","System","","","","","","",""
"25.6.2.5","current_schemas",0,1,"currentSchemas","","System","","","","","","",""
"25.6.2.5","current_user",0,1,"currentUser","","System","","","","","","",""
"25.6.2.5","TO_UNIXTIME",0,1,"parseDateTime","","System","","","","","","",""
"25.6.2.5","OCTET_LENGTH",0,1,"length","","System","","","","","","",""
"25.6.2.5","timeZoneOf",0,0,"timezoneOf","","System","","","","","","",""
"25.6.2.5","normalizeLp",0,1,"LpNormalize","","System","","","","","","",""
"25.6.2.5","yearweek",0,1,"toYearWeek","","System","","","","","","",""
"25.6.2.5","visitParamExtractUInt",0,0,"simpleJSONExtractUInt","","System","","","","","","",""
"25.6.2.5","week",0,1,"toWeek","","System","","","","","","",""
"25.6.2.5","trim",0,0,"trimBoth","","System","","","","","","",""
"25.6.2.5","pmodOrNull",0,1,"positiveModuloOrNull","","System","","","","","","",""
"25.6.2.5","rtrim",0,0,"trimRight","","System","","","","","","",""
"25.6.2.5","visitParamExtractBool",0,0,"simpleJSONExtractBool","","System","","","","","","",""
"25.6.2.5","flatten",0,1,"arrayFlatten","","System","","","","","","",""
"25.6.2.5","to_utc_timestamp",0,1,"toUTCTimestamp","","System","","","","","","",""
"25.6.2.5","DATABASE",0,1,"currentDatabase","","System","","","","","","",""
"25.6.2.5","width_bucket",0,1,"widthBucket","","System","","","","","","",""
"25.6.2.5","MINUTE",0,1,"toMinute","","System","","","","","","",""
"25.6.2.5","jsonMergePatch",0,0,"JSONMergePatch","","System","","","","","","",""
"25.6.2.5","ltrim",0,0,"trimLeft","","System","","","","","","",""
"25.6.2.5","DAYOFYEAR",0,1,"toDayOfYear","","System","","","","","","",""
"25.6.2.5","from_utc_timestamp",0,1,"fromUTCTimestamp","","System","","","","","","",""
"25.6.2.5","TO_DAYS",0,1,"toDaysSinceYearZero","","System","","","","","","",""
"25.6.2.5","str_to_date",0,1,"parseDateTimeOrNull","","System","","","","","","",""
"25.6.2.5","toStartOfFiveMinute",0,0,"toStartOfFiveMinutes","","System","","","","","","",""
"25.6.2.5","mapFromString",0,0,"extractKeyValuePairs","","System","","","","","","",""
"25.6.2.5","mapContains",0,0,"mapContainsKey","","System","","","","","","",""
"25.6.2.5","ucase",0,1,"upper","","System","","","","","","",""
"25.6.2.5","rpad",0,1,"rightPad","","System","","","","","","",""
"25.6.2.5","mod",0,1,"modulo","","System","","","","","","",""
"25.6.2.5","MONTH",0,1,"toMonth","","System","","","","","","",""
"25.6.2.5","YEAR",0,1,"toYear","","System","","","","","","",""
"25.6.2.5","serverTimeZone",0,0,"serverTimezone","","System","","","","","","",""
"25.6.2.5","visitParamExtractRaw",0,0,"simpleJSONExtractRaw","","System","","","","","","",""
"25.6.2.5","arrayPRAUC",0,0,"arrayAUCPR","","System","","","","","","",""
"25.6.2.5","arrayAUC",0,0,"arrayROCAUC","","System","","","","","","",""
"25.6.2.5","REGEXP_MATCHES",0,1,"match","","System","","","","","","",""
"25.6.2.5","visitParamExtractString",0,0,"simpleJSONExtractString","","System","","","","","","",""
"25.6.2.5","FROM_DAYS",0,1,"fromDaysSinceYearZero","","System","","","","","","",""
"25.6.2.5","pmod",0,1,"positiveModulo","","System","","","","","","",""
"25.6.2.5","ST_PointFromWKB",0,0,"readWKBPoint","","System","","","","","","",""
"25.6.2.5","normL2",0,1,"L2Norm","","System","","","","","","",""
"25.6.2.5","DATE_FORMAT",0,1,"formatDateTime","","System","","","","","","",""
"25.6.2.5","caseWithoutExpr",0,0,"multiIf","","System","","","","","","",""
"25.6.2.5","lpad",0,1,"leftPad","","System","","","","","","",""
"25.6.2.5","DAYOFWEEK",0,1,"toDayOfWeek","","System","","","","","","",""
"25.6.2.5","exponentialTimeDecayedCount",1,0,"","","System","","","","","","",""
"25.6.2.5","exponentialTimeDecayedMax",1,0,"","","System","","","","","","",""
"25.6.2.5","lead",1,0,"","","System","","","","","","",""
"25.6.2.5","lag",1,0,"","","System","","","","","","",""
"25.6.2.5","lagInFrame",1,0,"","","System","","","","","","",""
"25.6.2.5","nth_value",1,1,"","","System","","","","","","",""
"25.6.2.5","ntile",1,1,"","","System","","","","","","",""
"25.6.2.5","row_number",1,1,"","","System","","","","","","",""
"25.6.2.5","percentRank",1,0,"","","System","","","","","","",""
"25.6.2.5","timeSeriesInstantDeltaToGrid",1,0,"","","System","","","","","","",""
"25.6.2.5","largestTriangleThreeBuckets",1,0,"","","System","","","","","","",""
"25.6.2.5","flameGraph",1,0,"","","System","","","","","","",""
"25.6.2.5","exponentialMovingAverage",1,0,"","","System","","","","","","",""
"25.6.2.5","nothingUInt64",1,0,"","","System","","","","","","",""
"25.6.2.5","nothingNull",1,0,"","","System","","","","","","",""
"25.6.2.5","nothing",1,0,"","","System","","","","","","",""
"25.6.2.5","singleValueOrNull",1,0,"","","System","","","","","","",""
"25.6.2.5","meanZTest",1,0,"","","System","","","","","","",""
"25.6.2.5","analysisOfVariance",1,1,"","","System","","","","","","",""
"25.6.2.5","studentTTest",1,0,"","","System","","","","","","",""
"25.6.2.5","timeSeriesInstantRateToGrid",1,0,"","","System","","","","","","",""
"25.6.2.5","rankCorr",1,0,"","","System","","","","","","",""
"25.6.2.5","aggThrow",1,0,"","","System","","","","","","",""
"25.6.2.5","categoricalInformationValue",1,0,"","","System","","","","","","",""
"25.6.2.5","groupArrayMovingSum",1,0,"","","System","","","","","","",""
"25.6.2.5","simpleLinearRegression",1,0,"","","System","","","","","","",""
"25.6.2.5","entropy",1,0,"","","System","","","","","","",""
"25.6.2.5","stochasticLogisticRegression",1,0,"","","System","","","","","","",""
"25.6.2.5","histogram",1,0,"","","System","","","","","","",""
"25.6.2.5","mannWhitneyUTest",1,0,"","","System","","","","","","",""
"25.6.2.5","maxIntersections",1,0,"","","System","","","","","","",""
"25.6.2.5","groupBitmapXor",1,0,"","","System","","","","","","",""
"25.6.2.5","cramersVBiasCorrected",1,0,"","","System","","","","","","",""
"25.6.2.5","contingency",1,0,"","","System","","","","","","",""
"25.6.2.5","theilsU",1,0,"","","System","","","","","","",""
"25.6.2.5","groupBitmapAnd",1,0,"","","System","","","","","","",""
"25.6.2.5","cramersV",1,0,"","","System","","","","","","",""
"25.6.2.5","groupBitXor",1,0,"","","System","","","","","","",""
"25.6.2.5","groupBitAnd",1,0,"","","System","","","","","","",""
"25.6.2.5","approx_top_sum",1,1,"","","System","","","","","","",""
"25.6.2.5","exponentialTimeDecayedSum",1,0,"","","System","","","","","","",""
"25.6.2.5","topKWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","topK",1,0,"","","System","","","","","","",""
"25.6.2.5","uniqUpTo",1,0,"","","System","","","","","","",""
"25.6.2.5","stochasticLinearRegression",1,0,"","","System","","","","","","",""
"25.6.2.5","uniqCombined64",1,0,"","","System","","","","","","",""
"25.6.2.5","intervalLengthSum",1,0,"","","System","","","","","","",""
"25.6.2.5","uniqCombined",1,0,"","","System","","","","","","",""
"25.6.2.5","uniqTheta",1,0,"","","System","","","","","","",""
"25.6.2.5","nonNegativeDerivative",1,0,"","","System","","","","","","",""
"25.6.2.5","uniqExact",1,0,"","","System","","","","","","",""
"25.6.2.5","uniq",1,0,"","","System","","","","","","",""
"25.6.2.5","kurtPop",1,0,"","","System","","","","","","",""
"25.6.2.5","sumMapFiltered",1,0,"","","System","","","","","","",""
"25.6.2.5","distinctJSONPathsAndTypes",1,0,"","","System","","","","","","",""
"25.6.2.5","distinctJSONPaths",1,0,"","","System","","","","","","",""
"25.6.2.5","minMappedArrays",1,0,"","","System","","","","","","",""
"25.6.2.5","quantiles",1,0,"","","System","","","","","","",""
"25.6.2.5","sum",1,1,"","","System","","","","","","",""
"25.6.2.5","corrMatrix",1,0,"","","System","","","","","","",""
"25.6.2.5","timeSeriesRateToGrid",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileExactWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","sumMapFilteredWithOverflow",1,0,"","","System","","","","","","",""
"25.6.2.5","corr",1,1,"","","System","","","","","","",""
"25.6.2.5","skewPop",1,0,"","","System","","","","","","",""
"25.6.2.5","corrStable",1,0,"","","System","","","","","","",""
"25.6.2.5","covarPopMatrix",1,0,"","","System","","","","","","",""
"25.6.2.5","groupBitmapOr",1,0,"","","System","","","","","","",""
"25.6.2.5","covarSampMatrix",1,0,"","","System","","","","","","",""
"25.6.2.5","sumMappedArrays",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileExactWeightedInterpolated",1,0,"","","System","","","","","","",""
"25.6.2.5","skewSamp",1,0,"","","System","","","","","","",""
"25.6.2.5","distinctDynamicTypes",1,0,"","","System","","","","","","",""
"25.6.2.5","sumMapWithOverflow",1,0,"","","System","","","","","","",""
"25.6.2.5","stddevSamp",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileExactHigh",1,0,"","","System","","","","","","",""
"25.6.2.5","varPop",1,0,"","","System","","","","","","",""
"25.6.2.5","sumCount",1,0,"","","System","","","","","","",""
"25.6.2.5","covarPop",1,0,"","","System","","","","","","",""
"25.6.2.5","varSamp",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileTimingWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","covarPopStable",1,0,"","","System","","","","","","",""
"25.6.2.5","stddevPopStable",1,0,"","","System","","","","","","",""
"25.6.2.5","any_respect_nulls",1,0,"","","System","","","","","","",""
"25.6.2.5","argMin",1,0,"","","System","","","","","","",""
"25.6.2.5","windowFunnel",1,0,"","","System","","","","","","",""
"25.6.2.5","retention",1,0,"","","System","","","","","","",""
"25.6.2.5","sequenceMatch",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesExactHigh",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileGK",1,0,"","","System","","","","","","",""
"25.6.2.5","anyLast_respect_nulls",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesBFloat16Weighted",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileBFloat16Weighted",1,0,"","","System","","","","","","",""
"25.6.2.5","deltaSumTimestamp",1,0,"","","System","","","","","","",""
"25.6.2.5","varSampStable",1,0,"","","System","","","","","","",""
"25.6.2.5","any",1,0,"","","System","","","","","","",""
"25.6.2.5","sparkbar",1,0,"","","System","","","","","","",""
"25.6.2.5","sequenceMatchEvents",1,0,"","","System","","","","","","",""
"25.6.2.5","max",1,1,"","","System","","","","","","",""
"25.6.2.5","quantilesDD",1,0,"","","System","","","","","","",""
"25.6.2.5","denseRank",1,0,"","","System","","","","","","",""
"25.6.2.5","quantile",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesExact",1,0,"","","System","","","","","","",""
"25.6.2.5","uniqHLL12",1,0,"","","System","","","","","","",""
"25.6.2.5","min",1,1,"","","System","","","","","","",""
"25.6.2.5","quantileExactInclusive",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileDD",1,0,"","","System","","","","","","",""
"25.6.2.5","kurtSamp",1,0,"","","System","","","","","","",""
"25.6.2.5","estimateCompressionRatio",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileTDigest",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileTDigestWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileDeterministic",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesTDigest",1,0,"","","System","","","","","","",""
"25.6.2.5","avg",1,1,"","","System","","","","","","",""
"25.6.2.5","covarSampStable",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesTiming",1,0,"","","System","","","","","","",""
"25.6.2.5","leadInFrame",1,0,"","","System","","","","","","",""
"25.6.2.5","timeSeriesResampleToGridWithStaleness",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesExactExclusive",1,0,"","","System","","","","","","",""
"25.6.2.5","groupArrayMovingAvg",1,0,"","","System","","","","","","",""
"25.6.2.5","anyHeavy",1,0,"","","System","","","","","","",""
"25.6.2.5","groupArrayIntersect",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileInterpolatedWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileExactLow",1,0,"","","System","","","","","","",""
"25.6.2.5","groupBitmap",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesInterpolatedWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesTDigestWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","timeSeriesDeltaToGrid",1,0,"","","System","","","","","","",""
"25.6.2.5","stddevSampStable",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesExactWeightedInterpolated",1,0,"","","System","","","","","","",""
"25.6.2.5","groupUniqArray",1,0,"","","System","","","","","","",""
"25.6.2.5","sumKahan",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesExactWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesDeterministic",1,0,"","","System","","","","","","",""
"25.6.2.5","groupArrayInsertAt",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesGK",1,0,"","","System","","","","","","",""
"25.6.2.5","rank",1,1,"","","System","","","","","","",""
"25.6.2.5","maxIntersectionsPosition",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesBFloat16",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesExactInclusive",1,0,"","","System","","","","","","",""
"25.6.2.5","groupConcat",1,0,"","","System","","","","","","",""
"25.6.2.5","boundingRatio",1,0,"","","System","","","","","","",""
"25.6.2.5","sequenceNextNode",1,0,"","","System","","","","","","",""
"25.6.2.5","anyLast",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesTimingWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","groupArray",1,0,"","","System","","","","","","",""
"25.6.2.5","count",1,1,"","","System","","","","","","",""
"25.6.2.5","quantileExact",1,0,"","","System","","","","","","",""
"25.6.2.5","groupArraySorted",1,0,"","","System","","","","","","",""
"25.6.2.5","timeSeriesLastTwoSamples",1,0,"","","System","","","","","","",""
"25.6.2.5","maxMappedArrays",1,0,"","","System","","","","","","",""
"25.6.2.5","stddevPop",1,0,"","","System","","","","","","",""
"25.6.2.5","groupArrayLast",1,0,"","","System","","","","","","",""
"25.6.2.5","kolmogorovSmirnovTest",1,1,"","","System","","","","","","",""
"25.6.2.5","sumWithOverflow",1,0,"","","System","","","","","","",""
"25.6.2.5","sequenceCount",1,0,"","","System","","","","","","",""
"25.6.2.5","exponentialTimeDecayedAvg",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileExactExclusive",1,0,"","","System","","","","","","",""
"25.6.2.5","avgWeighted",1,0,"","","System","","","","","","",""
"25.6.2.5","argMax",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileBFloat16",1,0,"","","System","","","","","","",""
"25.6.2.5","groupBitOr",1,0,"","","System","","","","","","",""
"25.6.2.5","approx_top_k",1,1,"","","System","","","","","","",""
"25.6.2.5","deltaSum",1,0,"","","System","","","","","","",""
"25.6.2.5","welchTTest",1,0,"","","System","","","","","","",""
"25.6.2.5","covarSamp",1,0,"","","System","","","","","","",""
"25.6.2.5","varPopStable",1,0,"","","System","","","","","","",""
"25.6.2.5","quantileTiming",1,0,"","","System","","","","","","",""
"25.6.2.5","quantilesExactLow",1,0,"","","System","","","","","","",""
"25.6.2.5","groupArraySample",1,0,"","","System","","","","","","",""
"25.6.2.5","BIT_AND",1,1,"groupBitAnd","","System","","","","","","",""
"25.6.2.5","approx_top_count",1,1,"approx_top_k","","System","","","","","","",""
"25.6.2.5","STD",1,1,"stddevPop","","System","","","","","","",""
"25.6.2.5","lttb",1,0,"largestTriangleThreeBuckets","","System","","","","","","",""
"25.6.2.5","STDDEV_POP",1,1,"stddevPop","","System","","","","","","",""
"25.6.2.5","anova",1,1,"analysisOfVariance","","System","","","","","","",""
"25.6.2.5","STDDEV_SAMP",1,1,"stddevSamp","","System","","","","","","",""
"25.6.2.5","VAR_SAMP",1,1,"varSamp","","System","","","","","","",""
"25.6.2.5","VAR_POP",1,1,"varPop","","System","","","","","","",""
"25.6.2.5","lastValueRespectNulls",1,0,"anyLast_respect_nulls","","System","","","","","","",""
"25.6.2.5","last_value_respect_nulls",1,1,"anyLast_respect_nulls","","System","","","","","","",""
"25.6.2.5","any_value_respect_nulls",1,1,"any_respect_nulls","","System","","","","","","",""
"25.6.2.5","BIT_OR",1,1,"groupBitOr","","System","","","","","","",""
"25.6.2.5","anyLastRespectNulls",1,0,"anyLast_respect_nulls","","System","","","","","","",""
"25.6.2.5","firstValueRespectNulls",1,0,"any_respect_nulls","","System","","","","","","",""
"25.6.2.5","first_value_respect_nulls",1,1,"any_respect_nulls","","System","","","","","","",""
"25.6.2.5","COVAR_SAMP",1,1,"covarSamp","","System","","","","","","",""
"25.6.2.5","any_value",1,1,"any","","System","","","","","","",""
"25.6.2.5","medianDD",1,0,"quantileDD","","System","","","","","","",""
"25.6.2.5","percent_rank",1,1,"percentRank","","System","","","","","","",""
"25.6.2.5","sparkBar",1,0,"sparkbar","","System","","","","","","",""
"25.6.2.5","medianInterpolatedWeighted",1,0,"quantileInterpolatedWeighted","","System","","","","","","",""
"25.6.2.5","medianTDigestWeighted",1,0,"quantileTDigestWeighted","","System","","","","","","",""
"25.6.2.5","medianBFloat16",1,0,"quantileBFloat16","","System","","","","","","",""
"25.6.2.5","first_value",1,1,"any","","System","","","","","","",""
"25.6.2.5","medianTDigest",1,0,"quantileTDigest","","System","","","","","","",""
"25.6.2.5","BIT_XOR",1,1,"groupBitXor","","System","","","","","","",""
"25.6.2.5","medianTimingWeighted",1,0,"quantileTimingWeighted","","System","","","","","","",""
"25.6.2.5","group_concat",1,1,"groupConcat","","System","","","","","","",""
"25.6.2.5","medianExactHigh",1,0,"quantileExactHigh","","System","","","","","","",""
"25.6.2.5","dense_rank",1,1,"denseRank","","System","","","","","","",""
"25.6.2.5","medianExactWeightedInterpolated",1,0,"quantileExactWeightedInterpolated","","System","","","","","","",""
"25.6.2.5","medianBFloat16Weighted",1,0,"quantileBFloat16Weighted","","System","","","","","","",""
"25.6.2.5","anyValueRespectNulls",1,0,"any_respect_nulls","","System","","","","","","",""
"25.6.2.5","medianExactWeighted",1,0,"quantileExactWeighted","","System","","","","","","",""
"25.6.2.5","median",1,0,"quantile","","System","","","","","","",""
"25.6.2.5","medianExact",1,0,"quantileExact","","System","","","","","","",""
"25.6.2.5","medianExactLow",1,0,"quantileExactLow","","System","","","","","","",""
"25.6.2.5","medianTiming",1,0,"quantileTiming","","System","","","","","","",""
"25.6.2.5","array_agg",1,1,"groupArray","","System","","","","","","",""
"25.6.2.5","medianGK",1,0,"quantileGK","","System","","","","","","",""
"25.6.2.5","medianDeterministic",1,0,"quantileDeterministic","","System","","","","","","",""
"25.6.2.5","last_value",1,1,"anyLast","","System","","","","","","",""
"25.6.2.5","COVAR_POP",1,1,"covarPop","","System","","","","","","",""
"25.6.2.5","anyRespectNulls",1,0,"any_respect_nulls","","System","","","","","","",""
"25.6.2.5","array_concat_agg",1,1,"groupArrayArray","","System","","","","","","",""

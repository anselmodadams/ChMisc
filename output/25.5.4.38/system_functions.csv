"ch_version","name","is_aggregate","case_insensitive","alias_to","create_query","origin","description","syntax","arguments","returned_value","examples","introduced_in","categories"
"25.5.4.38","halfMD5",0,0,"","","System","
[Interprets](../..//sql-reference/functions/type-conversion-functions.md/#type_conversion_functions-reinterpretAsString) all the input
parameters as strings and calculates the MD5 hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the
resulting string, and interprets them as [UInt64](../../../sql-reference/data-types/int-uint.md) in big-endian byte order. The function is
relatively slow (5 million short strings per second per processor core).

Consider using the [sipHash64](../../sql-reference/functions/hash-functions.md/#hash_functions-siphash64) function instead.
                       ","SELECT halfMD5(par1,par2,...,parN);","- `par1,par2,...,parN` — 
The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated
value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed
Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).
                       
","The computed half MD5 hash of the given input params returned as a [UInt64](../../../sql-reference/data-types/int-uint.md) in big-endian byte order.",":

```sql
SELECT HEX(halfMD5('abc', 'cde', 'fgh'));
```

Result:

```text

┌─hex(halfMD5('abc', 'cde', 'fgh'))─┐
│ 2C9506B7374CFAF4                  │
└───────────────────────────────────┘
            
```
","","Hash"
"25.5.4.38","wyHash64",0,0,"","","System","","","","","","",""
"25.5.4.38","xxHash64",0,0,"","","System","","","","","","",""
"25.5.4.38","javaHashUTF16LE",0,0,"","","System","","","","","","",""
"25.5.4.38","javaHash",0,0,"","","System","","","","","","",""
"25.5.4.38","metroHash64",0,0,"","","System","","","","","","",""
"25.5.4.38","farmFingerprint64",0,0,"","","System","","","","","","",""
"25.5.4.38","sipHash128",0,0,"","","System","","","","","","",""
"25.5.4.38","log2",0,1,"","","System","","","","","","",""
"25.5.4.38","regionToName",0,0,"","","System","","","","","","",""
"25.5.4.38","regionIn",0,0,"","","System","","","","","","",""
"25.5.4.38","cityHash64",0,0,"","","System","","","","","","",""
"25.5.4.38","regionToTopContinent",0,0,"","","System","","","","","","",""
"25.5.4.38","regionToArea",0,0,"","","System","","","","","","",""
"25.5.4.38","regionToCity",0,0,"","","System","","","","","","",""
"25.5.4.38","cutQueryString",0,0,"","","System","","","","","","",""
"25.5.4.38","UUIDStringToNum",0,0,"","","System","","","","","","",""
"25.5.4.38","roundDown",0,0,"","","System","","","","","","",""
"25.5.4.38","trunc",0,1,"","","System","","","","","","",""
"25.5.4.38","ceil",0,1,"","","System","","","","","","",""
"25.5.4.38","floor",0,1,"","","System","","","","","","",""
"25.5.4.38","roundBankers",0,0,"","","System","","","","","","",""
"25.5.4.38","multiFuzzyMatchAnyIndex",0,0,"","","System","","","","","","",""
"25.5.4.38","blockSerializedSize",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONDynamicPathsWithTypes",0,0,"","","System","
Returns the list of dynamic paths that are stored as separate subcolumns and their types in each row in JSON column.
","JSONDynamicPathsWithTypes(json)","- `json` — JSON column
","","Example:

```sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPathsWithTypes(json) FROM test;

```

Result:

```text

┌─json─────────────────────────────────┬─JSONDynamicPathsWithTypes(json)─┐
│ {""a"":""42""}                           │ {'a':'Int64'}                   │
│ {""b"":""Hello""}                        │ {}                              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))'}  │
└──────────────────────────────────────┴─────────────────────────────────┘

```
","","JSON"
"25.5.4.38","JSONDynamicPaths",0,0,"","","System","
Returns the list of dynamic paths that are stored as separate subcolumns in JSON column.
","JSONDynamicPaths(json)","- `json` — JSON column
","","Example:

```sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPaths(json) FROM test;

```

Result:

```text

┌─json─────────────────────────────────┬─JSONDynamicPaths(json)─┐
│ {""a"":""42""}                           │ ['a']                  │
│ {""b"":""Hello""}                        │ []                     │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['a']                  │
└──────────────────────────────────────┴────────────────────────┘

```
","","JSON"
"25.5.4.38","JSONAllPathsWithTypes",0,0,"","","System","
Returns the list of all paths and their data types stored in each row in JSON column.
","JSONAllPathsWithTypes(json)","- `json` — JSON column
","","Example:

```sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONAllPathsWithTypes(json) FROM test;

```

Result:

```text

┌─json─────────────────────────────────┬─JSONAllPathsWithTypes(json)───────────────┐
│ {""a"":""42""}                           │ {'a':'Int64'}                             │
│ {""b"":""Hello""}                        │ {'b':'String'}                            │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))','c':'Date'} │
└──────────────────────────────────────┴───────────────────────────────────────────┘

```
","","JSON"
"25.5.4.38","JSONAllPaths",0,0,"","","System","
Returns the list of all paths stored in each row in JSON column.
","JSONAllPaths(json)","- `json` — JSON column
","","Example:

```sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONAllPaths(json) FROM test;

```

Result:

```text

┌─json─────────────────────────────────┬─JSONAllPaths(json)─┐
│ {""a"":""42""}                           │ ['a']              │
│ {""b"":""Hello""}                        │ ['b']              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['a','c']          │
└──────────────────────────────────────┴────────────────────┘

```
","","JSON"
"25.5.4.38","generateSerialID",0,0,"","","System","
Generates and returns sequential numbers starting from the previous counter value.
This function takes a constant string argument - a series identifier.

The server should be configured with Keeper.
The series are stored in Keeper nodes under the path, which can be configured in `series_keeper_path` in the server configuration.
","generateSerialID('series_identifier')","- `series_identifier` — Series identifier, (a short constant String)
","Sequential numbers starting from the previous counter value","first call:

```sql
SELECT generateSerialID('id1')
```

Result:

```text

┌─generateSerialID('id1')──┐
│                        1 │
└──────────────────────────┘
```
second call:

```sql
SELECT generateSerialID('id1')
```

Result:

```text

┌─generateSerialID('id1')──┐
│                        2 │
└──────────────────────────┘
```
column call:

```sql
SELECT *, generateSerialID('id1') FROM test_table
```

Result:

```text

┌─CounterID─┬─UserID─┬─ver─┬─generateSerialID('id1')──┐
│         1 │      3 │   3 │                        3 │
│         1 │      1 │   1 │                        4 │
│         1 │      2 │   2 │                        5 │
│         1 │      5 │   5 │                        6 │
│         1 │      4 │   4 │                        7 │
└───────────┴────────┴─────┴──────────────────────────┘
                  
```
","","Other"
"25.5.4.38","polygonsDistanceCartesian",0,0,"","","System","","","","","","",""
"25.5.4.38","bitShiftLeft",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramSearchCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramSearchCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramDistance",0,0,"","","System","","","","","","",""
"25.5.4.38","__bitBoolMaskOr",0,0,"","","System","","","","","","",""
"25.5.4.38","extractAllGroupsVertical",0,0,"","","System","","","","","","",""
"25.5.4.38","getTypeSerializationStreams",0,0,"","","System","","","","","","",""
"25.5.4.38","gcd",0,0,"","","System","
    Returns the greatest common divisor of two values a and b.

    An exception is thrown when dividing by zero or when dividing a minimal
    negative number by minus one.
    ","gcd(x, y)","- `x` — First integer
- `y` — Second integer
","The greatest common divisor of `x` and `y`.",":

```sql
SELECT gcd(12, 18)
```

Result:

```text
6
```
","1.1","Arithmetic"
"25.5.4.38","toIntervalHour",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalMinute",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalMillisecond",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime64BestEffortUSOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime64BestEffortUS",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime64BestEffortOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime64BestEffort",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime32BestEffort",0,0,"","","System","","","","","","",""
"25.5.4.38","detectProgrammingLanguage",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeBestEffortUSOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeBestEffortOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeBestEffortOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toIPv6OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toUUIDOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal64OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal32OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateTimeOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toBFloat16OrNull",0,0,"","","System","
Converts String to Nullable(BFloat16).

If the string does not represent a floating point value, the function returns NULL.

The function allows a silent loss of precision while converting from the string representation. In that case, it will return the truncated result.

Example of successful conversion:
[example:typical]

Examples of not successful conversion:
[example:invalid1]
[example:invalid2]

Example of a loss of precision:
[example:precision]
","","","","typical:

```sql
SELECT toBFloat16OrNull('12.3');
```

Result:

```text
12.3125
```
invalid1:

```sql
SELECT toBFloat16OrNull('abc');
```

Result:

```text
NULL
```
invalid2:

```sql
SELECT toBFloat16OrNull(' 1');
```

Result:

```text
NULL
```
precision:

```sql
SELECT toBFloat16OrNull('12.3456789');
```

Result:

```text
12.375
```
","","Type Conversion"
"25.5.4.38","toInt128OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","UUIDv7ToDateTime",0,0,"","","System","
This function extracts the timestamp from a UUID and returns it as a DateTime64(3) typed value.
The function expects the UUID having version 7 to be provided as the first argument.
An optional second argument can be passed to specify a timezone for the timestamp.
","","","","uuid:

```sql
select UUIDv7ToDateTime(generateUUIDv7())
```

Result:

```text

```
uuid:

```sql
select generateUUIDv7() as uuid, UUIDv7ToDateTime(uuid), UUIDv7ToDateTime(uuid, 'America/New_York')
```

Result:

```text

```
","","UUID"
"25.5.4.38","toInt64OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeBestEffortUSOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt32OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt128OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt64OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","hiveHash",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt8OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal256OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal64OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal32OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateTimeOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toDate32OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toFloat64OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toBFloat16OrZero",0,0,"","","System","
Converts String to BFloat16.

If the string does not represent a floating point value, the function returns zero.

The function allows a silent loss of precision while converting from the string representation. In that case, it will return the truncated result.

Example of successful conversion:
[example:typical]

Examples of not successful conversion:
[example:invalid1]
[example:invalid2]

Example of a loss of precision:
[example:precision]
","","","","typical:

```sql
SELECT toBFloat16OrZero('12.3');
```

Result:

```text
12.3125
```
invalid1:

```sql
SELECT toBFloat16OrZero('abc');
```

Result:

```text
0
```
invalid2:

```sql
SELECT toBFloat16OrZero(' 1');
```

Result:

```text
0
```
precision:

```sql
SELECT toBFloat16OrZero('12.3456789');
```

Result:

```text
12.375
```
","","Type Conversion"
"25.5.4.38","toInt128OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt8OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt128OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt32OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toIPv6",0,0,"","","System","","","","","","",""
"25.5.4.38","toIPv4",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateTime",0,0,"","","System","","","","","","",""
"25.5.4.38","toDate32",0,0,"","","System","","","","","","",""
"25.5.4.38","DATE",0,1,"","","System","","","","","","",""
"25.5.4.38","toDate",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal128",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal32",0,0,"","","System","","","","","","",""
"25.5.4.38","toFloat64",0,0,"","","System","","","","","","",""
"25.5.4.38","toFloat32",0,0,"","","System","","","","","","",""
"25.5.4.38","toBFloat16",0,0,"","","System","
Converts Float32 to BFloat16 with losing the precision.

Example:
[example:typical]
","","","","typical:

```sql
SELECT toBFloat16(12.3::Float32);
```

Result:

```text
12.3125
```
","","Type Conversion"
"25.5.4.38","toInt128",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt64",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt32",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt16",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt64",0,0,"","","System","","","","","","",""
"25.5.4.38","formatDateTimeInJodaSyntax",0,0,"","","System","","","","","","",""
"25.5.4.38","sipHash128Keyed",0,0,"","","System","","","","","","",""
"25.5.4.38","addMicroseconds",0,0,"","","System","","","","","","",""
"25.5.4.38","formatDateTime",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapContains",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapXor",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapOr",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapAnd",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapAndnotCardinality",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapOrCardinality",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapAndCardinality",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapCardinality",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapBuild",0,0,"","","System","","","","","","",""
"25.5.4.38","blockSize",0,0,"","","System","","","","","","",""
"25.5.4.38","isNotNull",0,0,"","","System","","","","","","",""
"25.5.4.38","seriesPeriodDetectFFT",0,0,"","","System","
Finds the period of the given time series data using FFT
FFT - Fast Fourier transform (https://en.wikipedia.org/wiki/Fast_Fourier_transform)

**Syntax**

```sql
seriesPeriodDetectFFT(series);
```

**Arguments**

- `series` - An array of numeric values

**Returned value**

- A real value equal to the period of time series
- Returns NAN when number of data points are less than four.

Type: [Float64](../../sql-reference/data-types/float.md).

**Examples**

Query:

```sql
SELECT seriesPeriodDetectFFT([1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6]) AS print_0;
```

Result:

```text
┌───────────print_0──────┐
│                      3 │
└────────────────────────┘
```

```sql
SELECT seriesPeriodDetectFFT(arrayMap(x -> abs((x % 6) - 3), range(1000))) AS print_0;
```

Result:

```text
┌─print_0─┐
│       6 │
└─────────┘
```
","","","","","","Time Series"
"25.5.4.38","alphaTokens",0,0,"","","System","","","","","","",""
"25.5.4.38","toIPv6OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","sparseGramsHashesUTF8",0,0,"","","System","Finds hashes of all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.","","- `s` — An input string
- `min_ngram_length` — The minimum length of extracted ngram. The default and minimal value is 3
- `max_ngram_length` — The maximum length of extracted ngram. The default value is 100. Should be not less than 'min_ngram_length'
","An array of selected substrings hashes","","","String"
"25.5.4.38","sparseGramsHashes",0,0,"","","System","Finds hashes of all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.","","- `s` — An input string
- `min_ngram_length` — The minimum length of extracted ngram. The default and minimal value is 3
- `max_ngram_length` — The maximum length of extracted ngram. The default value is 100. Should be not less than 'min_ngram_length'
","An array of selected substrings hashes","","","String"
"25.5.4.38","sparseGramsUTF8",0,0,"","","System","Finds all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.","","- `s` — An input string
- `min_ngram_length` — The minimum length of extracted ngram. The default and minimal value is 3
- `max_ngram_length` — The maximum length of extracted ngram. The default value is 100. Should be not less than 'min_ngram_length'
","An array of selected substrings","","","String"
"25.5.4.38","h3GetIndexesFromUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchAllPositionsCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","unbin",0,1,"","","System","","","","","","",""
"25.5.4.38","unhex",0,1,"","","System","","","","","","",""
"25.5.4.38","hex",0,1,"","","System","","","","","","",""
"25.5.4.38","detectTonality",0,0,"","","System","","","","","","",""
"25.5.4.38","bitXor",0,0,"","","System","","","","","","",""
"25.5.4.38","round",0,1,"","","System","","","","","","",""
"25.5.4.38","hasTokenCaseInsensitiveOrNull",0,1,"","","System","Performs case insensitive lookup of needle in haystack using tokenbf_v1 index. Returns null if needle is ill-formed.","","","","","","String Search"
"25.5.4.38","hasTokenCaseInsensitive",0,1,"","","System","Performs case insensitive lookup of needle in haystack using tokenbf_v1 index.","","","","","","String Search"
"25.5.4.38","extractGroups",0,0,"","","System","","","","","","",""
"25.5.4.38","transactionLatestSnapshot",0,0,"","","System","","","","","","",""
"25.5.4.38","transactionID",0,0,"","","System","","","","","","",""
"25.5.4.38","bitCount",0,0,"","","System","","","","","","",""
"25.5.4.38","SHA512_256",0,0,"","","System","Calculates the SHA512_256 hash of the given string.","SELECT SHA512_256(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA512_256 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

```sql
SELECT HEX(SHA512_256('abc'));
```

Result:

```text

┌─hex(SHA512_256('abc'))───────────────────────────────────────────┐
│ 53048E2681941EF99B2E29B76B4C7DABE4C2D0C634FC6D46E0E2F13107E7AF23 │
└──────────────────────────────────────────────────────────────────┘
            
```
","","Hash"
"25.5.4.38","SHA384",0,0,"","","System","Calculates the SHA384 hash of the given string.","SELECT SHA384(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA384 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

```sql
SELECT HEX(SHA384('abc'));
```

Result:

```text

┌─hex(SHA384('abc'))───────────────────────────────────────────────────────────────────────────────┐
│ CB00753F45A35E8BB5A03D699AC65007272C32AB0EDED1631A8B605A43FF5BED8086072BA1E7CC2358BAECA134C825A7 │
└──────────────────────────────────────────────────────────────────────────────────────────────────┘
            
```
","","Hash"
"25.5.4.38","MD5",0,0,"","","System","Calculates the MD5 hash of the given string.","SELECT MD5(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The MD5 hash of the given input string returned as a [FixedString(16)](../../sql-reference/data-types/fixedstring.md).",":

```sql
SELECT HEX(MD5('abc'));
```

Result:

```text

┌─hex(MD5('abc'))──────────────────┐
│ 900150983CD24FB0D6963F7D28E17F72 │
└──────────────────────────────────┘
            
```
","","Hash"
"25.5.4.38","polygonsEqualsCartesian",0,0,"","","System","","","","","","",""
"25.5.4.38","geoToH3",0,0,"","","System","","","","","","",""
"25.5.4.38","intExp10",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt16OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","timeSlots",0,0,"","","System","","","","","","",""
"25.5.4.38","char",0,1,"","","System","","","","","","",""
"25.5.4.38","addDays",0,0,"","","System","","","","","","",""
"25.5.4.38","regexpQuoteMeta",0,0,"","","System","","","","","","",""
"25.5.4.38","toUTCTimestamp",0,0,"","","System","","","","","","",""
"25.5.4.38","cbrt",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONExtractKeys",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONExtractKeysAndValuesRaw",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt16OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONExtractRaw",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONExtractString",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayReduce",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONExtractUInt",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONType",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapMin",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONKey",0,0,"","","System","","","","","","",""
"25.5.4.38","extract",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONLength",0,0,"","","System","","","","","","",""
"25.5.4.38","isValidJSON",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONHas",0,0,"","","System","","","","","","",""
"25.5.4.38","SHA256",0,0,"","","System","Calculates the SHA256 hash of the given string.","SELECT SHA256(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA256 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

```sql
SELECT HEX(SHA256('abc'));
```

Result:

```text

┌─hex(SHA256('abc'))───────────────────────────────────────────────┐
│ BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD │
└──────────────────────────────────────────────────────────────────┘
            
```
","","Hash"
"25.5.4.38","h3Distance",0,0,"","","System","","","","","","",""
"25.5.4.38","extractAllGroupsHorizontal",0,0,"","","System","","","","","","",""
"25.5.4.38","reverse",0,1,"","","System","","","","","","",""
"25.5.4.38","simpleJSONHas",0,0,"","","System","Checks whether there is a field named field_name.  The result is UInt8.","simpleJSONHas(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns 1 if the field exists, 0 otherwise.","simple:

```sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""true"",""qux"":1}');

SELECT simpleJSONHas(json, 'foo') FROM jsons;
SELECT simpleJSONHas(json, 'bar') FROM jsons;
```

Result:

```text
1
0
```
","","JSON"
"25.5.4.38","arrayPartialReverseSort",0,0,"","","System","
This function is the same as `arrayReverseSort` but with an additional `limit` argument allowing partial sorting.

:::tip
To retain only the sorted elements use `arrayResize`.
:::
    ","arrayPartialReverseSort([f,] arr [, arr1, ... ,arrN], limit)","- `f(arr[, arr1, ... ,arrN])` — The lambda function to apply to elements of array `x`.
- `arr` — Array to be sorted. [`Array(T)`](/sql-reference/data-types/array).
- `arr1, ... ,arrN` — N additional arrays, in the case when `f` accepts multiple arguments. [`Array(T)`](/sql-reference/data-types/array).
- `limit` — Index value up until which sorting will occur. [`(U)Int*`](/sql-reference/data-types/int-uint)`]
","
Returns an array of the same size as the original array where elements in the range `[1..limit]` are sorted
in descending order. The remaining elements `(limit..N]` are in an unspecified order.
    ","simple_int:

```sql
SELECT arrayPartialReverseSort(2, [5, 9, 1, 3])
```

Result:

```text
[9,5,1,3]
```
simple_string:

```sql
SELECT arrayPartialReverseSort(2, ['expenses','lasso','embolism','gladly'])
```

Result:

```text
['lasso','gladly','expenses','embolism']
```
retain_sorted:

```sql
SELECT arrayResize(arrayPartialReverseSort(2, [5, 9, 1, 3]), 2)
```

Result:

```text
[9,5]
```
lambda_simple:

```sql
SELECT arrayPartialReverseSort((x) -> -x, 2, [5, 9, 1, 3])
```

Result:

```text
[1,3,5,9]
```
lambda_complex:

```sql
SELECT arrayPartialReverseSort((x, y) -> -y, 1, [0, 1, 2], [1, 2, 3]) as res
```

Result:

```text
[0,1,2]
```
","23.2","Arrays"
"25.5.4.38","toHour",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayPartialSort",0,0,"","","System","
This function is the same as `arraySort` but with an additional `limit` argument allowing partial sorting.

:::tip
To retain only the sorted elements use `arrayResize`.
:::
    ","arrayPartialSort([f,] arr [, arr1, ... ,arrN], limit)","- `f(arr[, arr1, ... ,arrN])` — The lambda function to apply to elements of array `x`.
- `arr` — Array to be sorted. [`Array(T)`](/sql-reference/data-types/array).
- `arr1, ... ,arrN` — N additional arrays, in the case when `f` accepts multiple arguments. [`Array(T)`](/sql-reference/data-types/array).
- `limit` — Index value up until which sorting will occur. [`(U)Int*`](/sql-reference/data-types/int-uint)`]
","
Returns an array of the same size as the original array where elements in the range `[1..limit]` are sorted
in ascending order. The remaining elements `(limit..N]` are in an unspecified order.
    ","simple_int:

```sql
SELECT arrayPartialSort(2, [5, 9, 1, 3])
```

Result:

```text
[1,3,5,9]
```
simple_string:

```sql
SELECT arrayPartialSort(2, ['expenses','lasso','embolism','gladly'])
```

Result:

```text
['embolism','expenses','gladly','lasso']
```
retain_sorted:

```sql
SELECT arrayResize(arrayPartialSort(2, [5, 9, 1, 3]), 2)
```

Result:

```text
[1,3]
```
lambda_simple:

```sql
SELECT arrayPartialSort((x) -> -x, 2, [5, 9, 1, 3])
```

Result:

```text
[9,5,1,3]
```
lambda_complex:

```sql
SELECT arrayPartialSort((x, y) -> -y, 1, [0, 1, 2], [1, 2, 3]) as res
```

Result:

```text
[2,1,0]
```
","23.2","Arrays"
"25.5.4.38","bitRotateRight",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayReverseSort",0,0,"","","System","
Sorts the elements of an array in descending order.
If a function `f` is specified, the provided array is sorted according to the result
of the function applied to the elements of the array, and then the sorted array is reversed.
If `f` accepts multiple arguments, the `arrayReverseSort` function is passed several arrays that
the arguments of `func` will correspond to.

If the array to sort contains `-Inf`, `NULL`, `NaN`, or `Inf` they will be sorted in the following order:

1. `-Inf`
2. `Inf`
3. `NaN`
4. `NULL`

`arrayReverseSort` is a [higher-order function](/sql-reference/functions/overview#higher-order-functions).
    ","arrayReverseSort([f,] arr [, arr1, ... ,arrN)","- `f(y1[, y2 ... yN])` — The lambda function to apply to elements of array `x`.
- `arr` — An array to be sorted. [`Array(T)`](/sql-reference/data-types/array)
- `arr1, ..., yN` — Optional. N additional arrays, in the case when `f` accepts multiple arguments.
","
Returns the array `x` sorted in descending order if no lambda function is provided, otherwise
it returns an array sorted according to the logic of the provided lambda function, and then reversed. [`Array(T)`](/sql-reference/data-types/array).
    ","Example 1:

```sql
SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;
```

Result:

```text
[5,3,4]
```
Example 2:

```sql
SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;
```

Result:

```text
[4,3,5]
```
","1.1","Arrays"
"25.5.4.38","arraySort",0,0,"","","System","
Sorts the elements of the provided array in ascending order.
If a lambda function `f` is specified, sorting order is determined by the result of
the lambda applied to each element of the array.
If the lambda accepts multiple arguments, the `arraySort` function is passed several
arrays that the arguments of `f` will correspond to.

If the array to sort contains `-Inf`, `NULL`, `NaN`, or `Inf` they will be sorted in the following order:

1. `-Inf`
2. `Inf`
3. `NaN`
4. `NULL`

`arraySort` is a [higher-order function](/sql-reference/functions/overview#higher-order-functions).
","arraySort([f,] arr [, arr1, ... ,arrN])","- `f(y1[, y2 ... yN])` — The lambda function to apply to elements of array `x`.
- `arr` — An array to be sorted. [`Array(T)`](/sql-reference/data-types/array)
- `arr1, ..., yN` — Optional. N additional arrays, in the case when `f` accepts multiple arguments.
","
Returns the array `arr` sorted in ascending order if no lambda function is provided, otherwise
it returns an array sorted according to the logic of the provided lambda function. [`Array(T)`](/sql-reference/data-types/array).
    ","Example 1:

```sql
SELECT arraySort([1, 3, 3, 0]);
```

Result:

```text
[0,1,3,3]
```
Example 2:

```sql
SELECT arraySort(['hello', 'world', '!']);
```

Result:

```text
['!','hello','world']
```
Example 3:

```sql
SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);
```

Result:

```text
[-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]
```
","1.1","Arrays"
"25.5.4.38","isConstant",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalQuarter",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchAny",0,0,"","","System","","","","","","",""
"25.5.4.38","pointInEllipses",0,0,"","","System","","","","","","",""
"25.5.4.38","right",0,1,"","","System","","","","","","",""
"25.5.4.38","arrayResize",0,0,"","","System","Changes the length of the array.","arrayResize(arr, size[, extender])","- `arr` — Array to resize. [Array(T)](/sql-reference/data-types/array)
- `size` — 
-The new length of the array.
If `size` is less than the original size of the array, the array is truncated from the right.
If `size` is larger than the initial size of the array, the array is extended to the right with `extender` values or default values for the data type of the array items.

- `extender` — Value to use for extending the array. Can be `NULL`.
","An array of length `size`. [Array(T)](/sql-reference/data-types/array).","Example 1:

```sql
SELECT arrayResize([1], 3);
```

Result:

```text
[1,0,0]
```
Example 2:

```sql
SELECT arrayResize([1], 3, NULL);
```

Result:

```text
[1,NULL,NULL]
```
","1.1","Arrays"
"25.5.4.38","IPv6StringToNumOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapAndnot",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapXorCardinality",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv6StringToNumOrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv6NumToString",0,0,"","","System","","","","","","",""
"25.5.4.38","UUIDNumToString",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv4StringToNumOrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv4NumToStringClassC",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv4NumToString",0,0,"","","System","","","","","","",""
"25.5.4.38","isIPv6String",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv4CIDRToRange",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv6CIDRToRange",0,0,"","","System","","","","","","",""
"25.5.4.38","MACStringToOUI",0,0,"","","System","","","","","","",""
"25.5.4.38","MACStringToNum",0,0,"","","System","","","","","","",""
"25.5.4.38","MACNumToString",0,0,"","","System","","","","","","",""
"25.5.4.38","punycodeDecode",0,0,"","","System","
Computes a Punycode representation of a string. Throws an exception if the input is not valid Punycode.","punycodeDecode(str)","- `str` — A Punycode-encoded string
","The plaintext representation [String](/sql-reference/data-types/string.md).","simple:

```sql
SELECT punycodeDecode('Mnchen-3ya') AS plain;
```

Result:

```text

┌─plain───┐
│ München │
└─────────┘
            
```
","","Encoding"
"25.5.4.38","coalesce",0,1,"","","System","","","","","","",""
"25.5.4.38","intHash64",0,0,"","","System","","","","","","",""
"25.5.4.38","intHash32",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayStringConcat",0,0,"","","System","","","","","","",""
"25.5.4.38","splitByNonAlpha",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeBestEffort",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal128OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","locate",0,1,"","","System","Like function `position` but with arguments `haystack` and `locate` switched. The behavior of this function depends on the ClickHouse version: In versions < v24.3, `locate` was an alias of function `position` and accepted arguments `(haystack, needle[, start_pos])`. In versions >= 24.3,, `locate` is an individual function (for better compatibility with MySQL) and accepts arguments `(needle, haystack[, start_pos])`. The previous behavior can be restored using setting `function_locate_has_mysql_compatible_argument_order = false`.","location(needle, haystack[, start_pos])","- `needle` — Substring to be searched (String)
- `haystack` — String in which the search is performed (String).
- `start_pos` — Position (1-based) in `haystack` at which the search starts (UInt*).
","Starting position in bytes and counting from 1, if the substring was found. 0, if the substring was not found.","Example:

```sql
SELECT locate('abcabc', 'ca');
```

Result:

```text
3
```
","18.16","String Search"
"25.5.4.38","toInt256",0,0,"","","System","","","","","","",""
"25.5.4.38","formatReadableDecimalSize",0,0,"","","System","
Accepts the size (number of bytes). Returns a rounded size with a suffix (KB, MB, etc.) as a string.
","","","","formatReadableDecimalSize:

```sql
SELECT formatReadableDecimalSize(1000)
```

Result:

```text

```
","","Other"
"25.5.4.38","FQDN",0,1,"","","System","","","","","","",""
"25.5.4.38","lcm",0,0,"","","System","
Returns the least common multiple of two values `x` and `y`.

An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.
    ","lcm(x, y)","- `x` — First integer
- `y` — Second integer
","The least common multiple of `x` and `y`.",":

```sql
SELECT lcm(6, 8)
```

Result:

```text
24
```
","1.1","Arithmetic"
"25.5.4.38","base64URLEncode",0,0,"","","System","Encodes an URL (String or FixedString) as base64 with URL-specific modifications, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-5).","base64URLEncode(url)","- `url` — String column or constant.
","A string containing the encoded value of the argument.","Example:

```sql
SELECT base64URLEncode('https://clickhouse.com')
```

Result:

```text
aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ
```
","24.6","Encoding"
"25.5.4.38","addressToLineWithInlines",0,0,"","","System","","","","","","",""
"25.5.4.38","seriesDecomposeSTL",0,0,"","","System","
Decomposes a time series using STL [(Seasonal-Trend Decomposition Procedure Based on Loess)](https://www.wessa.net/download/stl.pdf) into a season, a trend and a residual component.

**Syntax**

```sql
seriesDecomposeSTL(series, period);
```

**Arguments**

- `series` - An array of numeric values
- `period` - A positive number

The number of data points in `series` should be at least twice the value of `period`.

**Returned value**

- An array of four arrays where the first array include seasonal components, the second array - trend, the third array - residue component, and the fourth array - baseline(seasonal + trend) component.

Type: [Array](../../sql-reference/data-types/array.md).

**Examples**

Query:

```sql
SELECT seriesDecomposeSTL([10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34], 3) AS print_0;
```

Result:

```text
┌───────────print_0──────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ [[
        -13.529999, -3.1799996, 16.71,      -13.53,     -3.1799996, 16.71,      -13.53,     -3.1799996,
        16.71,      -13.530001, -3.18,      16.710001,  -13.530001, -3.1800003, 16.710001,  -13.530001,
        -3.1800003, 16.710001,  -13.530001, -3.1799994, 16.71,      -13.529999, -3.1799994, 16.709997
    ],
    [
        23.63,     23.63,     23.630003, 23.630001, 23.630001, 23.630001, 23.630001, 23.630001,
        23.630001, 23.630001, 23.630001, 23.63,     23.630001, 23.630001, 23.63,     23.630001,
        23.630001, 23.63,     23.630001, 23.630001, 23.630001, 23.630001, 23.630001, 23.630003
    ],
    [
        0, 0.0000019073486, -0.0000019073486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0000019073486, 0,
        0
    ],
    [
        10.1, 20.449999, 40.340004, 10.100001, 20.45, 40.34, 10.100001, 20.45, 40.34, 10.1, 20.45, 40.34,
        10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.100002, 20.45, 40.34
    ]]                                                                                                                   │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```","","","","","","Time Series"
"25.5.4.38","monthName",0,1,"","","System","","","","","","",""
"25.5.4.38","version",0,1,"","","System","","","","","","",""
"25.5.4.38","splitByRegexp",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayReverseFill",0,0,"","","System","","","","","","",""
"25.5.4.38","addHours",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayFill",0,0,"","","System","","","","","","",""
"25.5.4.38","bitTestAny",0,0,"","","System","","","","","","",""
"25.5.4.38","erf",0,0,"","","System","","","","","","",""
"25.5.4.38","bitOr",0,0,"","","System","","","","","","",""
"25.5.4.38","showCertificate",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalSecond",0,0,"","","System","","","","","","",""
"25.5.4.38","kostikConsistentHash",0,0,"","","System","","","","","","",""
"25.5.4.38","proportionsZTest",0,0,"","","System","","","","","","",""
"25.5.4.38","if",0,1,"","","System","","","","","","",""
"25.5.4.38","jaroWinklerSimilarity",0,0,"","","System","Calculates the Jaro-Winkler similarity between two byte-string.","","","","","","String"
"25.5.4.38","stringJaccardIndexUTF8",0,0,"","","System","Calculates the Jaccard similarity index between two UTF8 strings.","","","","","","String"
"25.5.4.38","stringJaccardIndex",0,0,"","","System","Calculates the Jaccard similarity index between two byte strings.","","","","","","String"
"25.5.4.38","damerauLevenshteinDistance",0,0,"","","System","Calculates the Damerau-Levenshtein distance two between two byte-string.","","","","","","String"
"25.5.4.38","UUIDToNum",0,0,"","","System","
This function accepts a UUID and returns a FixedString(16) as its binary representation, with its format optionally specified by variant (Big-endian by default).
","","","","uuid:

```sql
select toUUID(UUIDNumToString(toFixedString('a/<@];!~p{jTj={)', 16))) as uuid, UUIDToNum(uuid) as uuidNum, UUIDToNum(uuid, 2) as uuidMsNum
```

Result:

```text

┌─uuid─────────────────────────────────┬─uuidNum──────────┬─uuidMsNum────────┐
│ 612f3c40-5d3b-217e-707b-6a546a3d7b29 │ a/<@];!~p{jTj={) │ @</a];!~p{jTj={) │
└──────────────────────────────────────┴──────────────────┴──────────────────┘

```
","","UUID"
"25.5.4.38","editDistanceUTF8",0,0,"","","System","Calculates the edit distance between two UTF8 strings.","","","","","","String"
"25.5.4.38","editDistance",0,0,"","","System","Calculates the edit distance between two byte-strings.","","","","","","String"
"25.5.4.38","toIPv4OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","byteHammingDistance",0,0,"","","System","Calculates Hamming distance between two byte-strings.","","","","","","String"
"25.5.4.38","arraySlice",0,0,"","","System","Returns a slice of the array, with `NULL` elements included.","arraySlice(arr, offset [, length])","- `arr` — Array to slice. [`Array(T)`](/sql-reference/data-types/array).
- `offset` — Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with `1`. [`(U)Int*`](/sql-reference/data-types/int-uint).
- `length` — The length of the required slice. If you specify a negative value, the function returns an open slice `[offset, array_length - length]`. If you omit the value, the function returns the slice `[offset, the_end_of_array]`. [`(U)Int*`](/sql-reference/data-types/int-uint).
","Returns a slice of the array with `length` elements from the specified `offset`. [`Array(T)`](/sql-reference/data-types/array).","Usage example:

```sql
SELECT arraySlice([1, 2, NULL, 4, 5], 2, 3) AS res;
```

Result:

```text
[2,NULL,4]
```
","1.1","Arrays"
"25.5.4.38","arrayJaccardIndex",0,0,"","","System","","","","","","",""
"25.5.4.38","base64Encode",0,0,"","","System","Encodes a String as base64, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-4). Alias: TO_BASE64.","base64Encode(plaintext)","- `plaintext` — String column or constant.
","A string containing the encoded value of the argument.","Example:

```sql
SELECT base64Encode('clickhouse')
```

Result:

```text
Y2xpY2tob3VzZQ==
```
","18.16","String"
"25.5.4.38","__actionName",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayReduceInRanges",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonsDistanceSpherical",0,0,"","","System","","","","","","",""
"25.5.4.38","bitHammingDistance",0,0,"","","System","","","","","","",""
"25.5.4.38","bitRotateLeft",0,0,"","","System","","","","","","",""
"25.5.4.38","isNaN",0,0,"","","System","Returns `1` if the Float32 and Float64 argument is `NaN`, otherwise returns `0`.","isNaN(x)","- `x` — Argument to evaluate for if it is `NaN`
","`1` if `NaN`, otherwise `0`",":

```sql
SELECT isNaN(NaN)
```

Result:

```text
1
```
","1.1","Arithmetic"
"25.5.4.38","intDivOrZero",0,0,"","","System","
Same as `intDiv` but returns zero when dividing by zero or when dividing a
minimal negative number by minus one.
    ","intDivOrZero(a, b)","- `a` — Left hand operand.
- `b` — Right hand operand.
","Result of integer division of a and b, or zero.","Integer division by zero:

```sql
SELECT intDivOrZero(1, 0)
```

Result:

```text
0
```
Dividing a minimal negative number by minus 1:

```sql
SELECT intDivOrZero(0.05, -1)
```

Result:

```text
0
```
","1.1","Arithmetic"
"25.5.4.38","__bitSwapLastTwo",0,0,"","","System","","","","","","",""
"25.5.4.38","lowCardinalityKeys",0,0,"","","System","","","","","","",""
"25.5.4.38","timeSlot",0,0,"","","System","","","","","","",""
"25.5.4.38","changeMinute",0,0,"","","System","Changes the minute component of a date or date time.","changeMinute(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.","","","Dates and Times"
"25.5.4.38","changeDay",0,0,"","","System","Changes the day component of a date or date time.","changeDay(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime.","","","Dates and Times"
"25.5.4.38","changeYear",0,0,"","","System","Changes the year component of a date or date time.","changeYear(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime.","","","Dates and Times"
"25.5.4.38","queryString",0,0,"","","System","","","","","","",""
"25.5.4.38","getSubcolumn",0,0,"","","System","
Receives the expression or identifier and constant string with the name of subcolumn.

Returns requested subcolumn extracted from the expression.
","","","","getSubcolumn:

```sql
SELECT getSubcolumn(array_col, 'size0'), getSubcolumn(tuple_col, 'elem_name')
```

Result:

```text

```
","","Other"
"25.5.4.38","hasAll",0,0,"","","System","
Checks whether one array is a subset of another.

- An empty array is a subset of any array.
- `Null` is processed as a value.
- The order of values in both the arrays does not matter.
","hasAll(set, subset)","- `set` — Array of any type with a set of elements. [`Array`](/sql-reference/data-types/array).
- `subset` — Array of any type that shares a common supertype with `set` containing elements that should be tested to be a subset of `set`. [`Array`](/sql-reference/data-types/array).
","
- `1`, if `set` contains all of the elements from `subset`.
- `0`, otherwise.

Raises a `NO_COMMON_TYPE` exception if the set and subset elements do not share a common supertype.
","Empty arrays:

```sql
SELECT hasAll([], [])
```

Result:

```text
1
```
Arrays containing NULL values:

```sql
SELECT hasAll([1, Null], [Null])
```

Result:

```text
1
```
Arrays containing values of a different type:

```sql
SELECT hasAll([1.0, 2, 3, 4], [1, 3])
```

Result:

```text
1
```
Arrays containing String values:

```sql
SELECT hasAll(['a', 'b'], ['a'])
```

Result:

```text
1
```
Arrays without a common type:

```sql
SELECT hasAll([1], ['a'])
```

Result:

```text
Raises a NO_COMMON_TYPE exception
```
Array of arrays:

```sql
SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [3, 5]])
```

Result:

```text
0
```
","1.1","Arrays"
"25.5.4.38","toIPv6OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toIPv4OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toUUIDOrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal128OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal64OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateTime64OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateTimeOrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","runningConcurrency",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateOrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toFloat64OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toFloat32OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt256OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt128OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toISOYear",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt64OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt32OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt8OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt256OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt128OrDefault",0,0,"","","System","
Converts a string in the first argument of the function to UInt128 by parsing it.
If it cannot parse the value, returns the default value, which can be provided as the second function argument, and if provided, must be of UInt128 type.
If the default value is not provided in the second argument, it is assumed to be zero.
","","","","Successful conversion:

```sql
SELECT toUInt128OrDefault('1', 2::UInt128)
```

Result:

```text
1
```
Default value:

```sql
SELECT toUInt128OrDefault('upyachka', 123456789012345678901234567890::UInt128)
```

Result:

```text
123456789012345678901234567890
```
Implicit default value:

```sql
SELECT toUInt128OrDefault('upyachka')
```

Result:

```text
0
```
","","Type Conversion"
"25.5.4.38","toUInt16OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","accurateCastOrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","tryBase32Decode",0,0,"","","System","
Decode a [Base32](https://datatracker.ietf.org/doc/html/rfc4648) encoded string. If the input string is not a valid Base32 return an empty string.","","- `arg` — A Base32 (rfc4648) encoded string
","","simple_decoding1:

```sql
SELECT tryBase32Decode('ME======')
```

Result:

```text
a
```
simple_decoding2:

```sql
SELECT tryBase32Decode('JBSWY3DP')
```

Result:

```text
Hello
```
non_ascii:

```sql
SELECT hex(tryBase32Decode('4W2HIXV4'))
```

Result:

```text
E5B4745EBC
```
invalid_base32:

```sql
SELECT tryBase32Decode('invalid_base32')
```

Result:

```text

```
empty_string:

```sql
SELECT tryBase32Decode('')
```

Result:

```text

```
non_base32_characters:

```sql
SELECT tryBase32Decode('12345')
```

Result:

```text

```
","","String"
"25.5.4.38","addressToSymbol",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal128OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt16OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","extractURLParameters",0,0,"","","System","","","","","","",""
"25.5.4.38","leftUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","substringIndex",0,0,"","","System","","","","","","",""
"25.5.4.38","less",0,0,"","","System","","","","","","",""
"25.5.4.38","lowCardinalityIndices",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapHasAny",0,0,"","","System","","","","","","",""
"25.5.4.38","generateSnowflakeID",0,0,"","","System","Generates a Snowflake ID. The generated Snowflake ID contains the current Unix timestamp in milliseconds (41 + 1 top zero bits), followed by a machine id (10 bits), and a counter (12 bits) to distinguish IDs within a millisecond. For any given timestamp (unix_ts_ms), the counter starts at 0 and is incremented by 1 for each new Snowflake ID until the timestamp changes. In case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to 0. Function generateSnowflakeID guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.","generateSnowflakeID([expression, [machine_id]])","- `expression` — The expression is used to bypass common subexpression elimination if the function is called multiple times in a query but otherwise ignored. Optional.
- `machine_id` — A machine ID, the lowest 10 bits are used. Optional.
","A value of type UInt64","no_arguments:

```sql
SELECT generateSnowflakeID()
```

Result:

```text
7201148511606784000
```
with_machine_id:

```sql
SELECT generateSnowflakeID(1)
```

Result:

```text
7201148511606784001
```
with_expression_and_machine_id:

```sql
SELECT generateSnowflakeID('some_expression', 1)
```

Result:

```text
7201148511606784002
```
","24.6","UUID"
"25.5.4.38","arrayEnumerateUniq",0,0,"","","System","","","","","","",""
"25.5.4.38","fromModifiedJulianDayOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","fromModifiedJulianDay",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalMonth",0,0,"","","System","","","","","","",""
"25.5.4.38","fromUTCTimestamp",0,0,"","","System","","","","","","",""
"25.5.4.38","defaultProfiles",0,0,"","","System","","","","","","",""
"25.5.4.38","enabledProfiles",0,0,"","","System","","","","","","",""
"25.5.4.38","convertCharset",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayRandomSample",0,0,"","","System","","","","","","",""
"25.5.4.38","cosh",0,0,"","","System","","","","","","",""
"25.5.4.38","countDigits",0,0,"","","System","","","","","","",""
"25.5.4.38","geohashEncode",0,0,"","","System","","","","","","",""
"25.5.4.38","formatReadableTimeDelta",0,0,"","","System","","","","","","",""
"25.5.4.38","getClientHTTPHeader",0,0,"","","System","
Get the value of an HTTP header.

If there is no such header or the current request is not performed via the HTTP interface, the function returns an empty string.
Certain HTTP headers (e.g., `Authentication` and `X-ClickHouse-*`) are restricted.

The function requires the setting `allow_get_client_http_header` to be enabled.
The setting is not enabled by default for security reasons, because some headers, such as `Cookie`, could contain sensitive info.

HTTP headers are case sensitive for this function.

If the function is used in the context of a distributed query, it returns non-empty result only on the initiator node.
"",
            .syntax = ""getClientHTTPHeader(name","","- `name` — The HTTP header name (String)
","The value of the header (String).","","","Other"
"25.5.4.38","currentDatabase",0,0,"","","System","","","","","","",""
"25.5.4.38","hilbertDecode",0,0,"","","System","
Decodes a Hilbert curve index back into a tuple of unsigned integers, representing coordinates in multi-dimensional space.

The function has two modes of operation:
- Simple
- Expanded

Simple Mode: Accepts the desired tuple size as the first argument (up to 2) and the Hilbert index as the second argument. This mode decodes the index into a tuple of the specified size.
[example:simple]
Will decode into: `(8, 0)`
The resulting tuple size cannot be more than 2

Expanded Mode: Takes a range mask (tuple) as the first argument and the Hilbert index as the second argument.
Each number in the mask specifies the number of bits by which the corresponding decoded argument will be right-shifted, effectively scaling down the output values.
[example:range_shrank]
Note: see hilbertEncode() docs on why range change might be beneficial.
Still limited to 2 numbers at most.

Hilbert code for one argument is always the argument itself (as a tuple).
[example:identity]
Produces: `(1)`

A single argument with a tuple specifying bit shifts will be right-shifted accordingly.
[example:identity_shrank]
Produces: `(128)`

The function accepts a column of codes as a second argument:
[example:from_table]

The range tuple must be a constant:
[example:from_table_range]
","","","","simple:

```sql
SELECT hilbertDecode(2, 64)
```

Result:

```text

```
range_shrank:

```sql
SELECT hilbertDecode((1,2), 1572864)
```

Result:

```text

```
identity:

```sql
SELECT hilbertDecode(1, 1)
```

Result:

```text

```
identity_shrank:

```sql
SELECT hilbertDecode(tuple(2), 512)
```

Result:

```text

```
from_table:

```sql
SELECT hilbertDecode(2, code) FROM table
```

Result:

```text

```
from_table_range:

```sql
SELECT hilbertDecode((1,2), code) FROM table
```

Result:

```text

```
","","Encoding"
"25.5.4.38","currentQueryID",0,0,"","","System","
Returns current Query id.
","currentQueryID()","","","Example:

```sql

SELECT currentQueryID();

```

Result:

```text

┌─currentQueryID()─────────────────────┐
│ 1280d0e8-1a08-4524-be6e-77975bb68e7d │
└──────────────────────────────────────┘

```
","","Other"
"25.5.4.38","__bitBoolMaskAnd",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt64OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","hasSubstr",0,0,"","","System","
Checks whether all the elements of array2 appear in a array1 in the same exact order.
Therefore, the function will return `1`, if and only if array1 = prefix + array2 + suffix.

In other words, the functions will check whether all the elements of array2 are contained in array1 like the `hasAll` function.
In addition, it will check that the elements are observed in the same order in both array1 and array2.

- The function will return `1` if array2 is empty.
- `Null` is processed as a value. In other words `hasSubstr([1, 2, NULL, 3, 4], [2,3])` will return `0`. However, `hasSubstr([1, 2, NULL, 3, 4], [2,NULL,3])` will return `1`
- The order of values in both the arrays does matter.

Raises a `NO_COMMON_TYPE` exception if any of the elements of the two arrays do not share a common supertype.
","hasSubstr(arr1, arr2)","- `arr1` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array).
- `arr2` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array).
","Returns `1` if array `arr1` contains array `arr2`. Otherwise, returns `0`.","Both arrays are empty:

```sql
SELECT hasSubstr([], [])
```

Result:

```text
1
```
Arrays containing NULL values:

```sql
SELECT hasSubstr([1, Null], [Null])
```

Result:

```text
1
```
Arrays containing values of a different type:

```sql
SELECT hasSubstr([1.0, 2, 3, 4], [1, 3])
```

Result:

```text
0
```
Arrays containing strings:

```sql
SELECT hasSubstr(['a', 'b'], ['a'])
```

Result:

```text
1
```
Arrays with valid ordering:

```sql
SELECT hasSubstr(['a', 'b' , 'c'], ['a', 'b'])
```

Result:

```text
1
```
Arrays with invalid ordering:

```sql
SELECT hasSubstr(['a', 'b' , 'c'], ['a', 'c'])
```

Result:

```text
0
```
Array of arrays:

```sql
SELECT hasSubstr([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4]])
```

Result:

```text
1
```
Arrays without a common type:

```sql
SELECT hasSubstr([1, 2, NULL, 3, 4], ['a'])
```

Result:

```text
Raises a `NO_COMMON_TYPE` exception
```
","20.6","Arrays"
"25.5.4.38","exp",0,1,"","","System","","","","","","",""
"25.5.4.38","replaceRegexpAll",0,0,"","","System","","","","","","",""
"25.5.4.38","toDayOfMonth",0,0,"","","System","","","","","","",""
"25.5.4.38","icebergBucket",0,0,"","","System","Implements logic of iceberg bucket transform: https://iceberg.apache.org/spec/#bucket-transform-details.","icebergBucket(N, value)","- `N` — modulo, positive integer, always constant.
- `value` — Integer, bool, decimal, float, string, fixed_string, uuid, date, time or datetime value.
","Int32","Example:

```sql
SELECT icebergBucket(5, 1.0 :: Float32)
```

Result:

```text
4
```
","25.5","Other"
"25.5.4.38","h3ExactEdgeLengthKm",0,0,"","","System","","","","","","",""
"25.5.4.38","simpleJSONExtractInt",0,0,"","","System","Parses Int64 from the value of the field named field_name. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.","simpleJSONExtractInt(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the number parsed from the field if the field exists and contains a number, 0 otherwise.","simple:

```sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractInt(json, 'foo') FROM jsons ORDER BY json;
```

Result:

```text
0
-4
0
-3
5
```
","","JSON"
"25.5.4.38","toLastDayOfWeek",0,0,"","","System","","","","","","",""
"25.5.4.38","equals",0,0,"","","System","","","","","","",""
"25.5.4.38","currentUser",0,0,"","","System","","","","","","",""
"25.5.4.38","s2RectIntersection",0,0,"","","System","","","","","","",""
"25.5.4.38","mapContainsKeyLike",0,0,"","","System","Checks whether map contains key LIKE specified pattern.","","","","mapContainsKeyLike:

```sql
SELECT mapContainsKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')
```

Result:

```text

```
","","Map"
"25.5.4.38","timeDiff",0,1,"","","System","
Returns the difference between two dates or dates with time values. The difference is calculated in seconds units (see toRelativeSecondNum).
It is same as `dateDiff` and was added only for MySQL support. `dateDiff` is preferred.

Example:
[example:typical]
","","","","typical:

```sql
SELECT timeDiff(UTCTimestamp(), now());
```

Result:

```text

```
","","Dates and Times"
"25.5.4.38","uptime",0,0,"","","System","","","","","","",""
"25.5.4.38","toJSONString",0,0,"","","System","","","","","","",""
"25.5.4.38","stringToH3",0,0,"","","System","","","","","","",""
"25.5.4.38","dateName",0,1,"","","System","","","","","","",""
"25.5.4.38","xxHash32",0,0,"","","System","","","","","","",""
"25.5.4.38","dateTimeToSnowflakeID",0,0,"","","System","Converts a [DateTime](../data-types/datetime.md) value to the first [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) at the giving time.","dateTimeToSnowflakeID(value[, epoch])","- `value` — Date with time. [DateTime](../data-types/datetime.md).
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
","Input value converted to [UInt64](../data-types/int-uint.md) as the first Snowflake ID at that time.","simple:

```sql
SELECT dateTimeToSnowflakeID(toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai'))
```

Result:

```text
6832626392367104000
```
","24.6","UUID"
"25.5.4.38","getMergeTreeSetting",0,0,"","","System","
Returns the current value of merge tree setting.
","getMergeTreeSetting('custom_setting')","- `custom_setting` — The setting name. Type: String.
","The setting's current value.","getMergeTreeSetting:

```sql
SELECT getMergeTreeSetting('index_granularity');
```

Result:

```text
8192
```
","","Other"
"25.5.4.38","isDecimalOverflow",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfHour",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalWeek",0,0,"","","System","","","","","","",""
"25.5.4.38","toUnixTimestamp64Second",0,0,"","","System","","","","","","",""
"25.5.4.38","toRelativeSecondNum",0,0,"","","System","","","","","","",""
"25.5.4.38","replaceAll",0,0,"","","System","","","","","","",""
"25.5.4.38","neighbor",0,0,"","","System","","","","","","",""
"25.5.4.38","structureToProtobufSchema",0,0,"","","System","
Function that converts ClickHouse table structure to Protobuf format schema
","","","","random:

```sql
SELECT structureToCapnProtoSchema('s String, x UInt32', 'MessageName') format TSVRaw
```

Result:

```text
syntax = ""proto3"";

message MessageName
{
    bytes s = 1;
    uint32 x = 2;
}
```
","","Other"
"25.5.4.38","base58Encode",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonAreaSpherical",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayUniq",0,0,"","","System","
For a single argument passed, counts the number of different elements in the array.
For multiple arguments passed, it counts the number of different **tuples** made of elements at matching positions across multiple arrays.

For example `SELECT arrayUniq([1,2], [3,4], [5,6])` will form the following tuples:
* Position 1: (1,3,5)
* Position 2: (2,4,6)

It will then count the number of unique tuples. In this case `2`.

All arrays passed must have the same length.

:::tip
If you want to get a list of unique items in an array, you can use `arrayReduce('groupUniqArray', arr)`.
:::
","arrayUniq(arr1[, arr2, ..., arrN])","- `arr1` — Array for which to count the number of unique elements. [`Array(T)`](/sql-reference/data-types/array).
- `[, arr2, ..., arrN] (optional)` — Optional. Additional arrays used to count the number of unique tuples of elements at corresponding positions in multiple arrays. [`Array(T)`](/sql-reference/data-types/array).
","
For a single argument returns the number of unique
elements. For multiple arguments returns the number of unique tuples made from
elements at corresponding positions across the arrays.
[`UInt32`](/sql-reference/data-types/int-uint).
","Single argument:

```sql
SELECT arrayUniq([1, 1, 2, 2])
```

Result:

```text
2
```
Multiple argument:

```sql
SELECT arrayUniq([1, 2, 3, 1], [4, 5, 6, 4])
```

Result:

```text
3
```
","1.1","Arrays"
"25.5.4.38","polygonAreaCartesian",0,0,"","","System","","","","","","",""
"25.5.4.38","regionToPopulation",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt8OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfISOYear",0,0,"","","System","","","","","","",""
"25.5.4.38","format",0,0,"","","System","","","","","","",""
"25.5.4.38","lemmatize",0,0,"","","System","","","","","","",""
"25.5.4.38","dateTrunc",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramSearch",0,0,"","","System","","","","","","",""
"25.5.4.38","lessOrEquals",0,0,"","","System","","","","","","",""
"25.5.4.38","subtractQuarters",0,0,"","","System","","","","","","",""
"25.5.4.38","fromUnixTimestamp64Nano",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapTransform",0,0,"","","System","","","","","","",""
"25.5.4.38","cutIPv6",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayShuffle",0,1,"","","System","
Returns an array of the same size as the original array containing the elements in shuffled order.
Elements are reordered in such a way that each possible permutation of those elements has equal probability of appearance.

:::note
This function will not materialize constants.
:::
    ","arrayShuffle(arr [, seed])","- `arr` — The array to shuffle. [`Array(T)`](/sql-reference/data-types/array).
- `seed (optional)` — Optional. The seed to be used with random number generation. If not provided a random one is used. [`(U)Int*`](../data-types/int-uint.md).
","Array with elements shuffled. [`Array(T)`](/sql-reference/data-types/array).","Example without seed (unstable results):

```sql
SELECT arrayShuffle([1, 2, 3, 4]);
```

Result:

```text
[1,4,2,3]
```
Example without seed (stable results):

```sql
SELECT arrayShuffle([1, 2, 3, 4], 41);
```

Result:

```text
[3,2,1,4]
```
","23.2","Arrays"
"25.5.4.38","revision",0,1,"","","System","","","","","","",""
"25.5.4.38","visibleWidth",0,0,"","","System","","","","","","",""
"25.5.4.38","degrees",0,1,"","","System","","","","","","",""
"25.5.4.38","svg",0,0,"","","System","","","","","","",""
"25.5.4.38","modulo",0,0,"","","System","
    Calculates the remainder of the division of two values a by b.

    The result type is an integer if both inputs are integers. If one of the
    inputs is a floating-point number, the result type is Float64.

    The remainder is computed like in C++. Truncated division is used for
    negative numbers.

    An exception is thrown when dividing by zero or when dividing a minimal
    negative number by minus one.
    ","modulo(a, b)","- `a` — The dividend
- `b` — The divisor (modulus)
","The remainder of a % b",":

```sql
SELECT modulo(5, 2)
```

Result:

```text
1
```
","1.1","Arithmetic"
"25.5.4.38","getOSKernelVersion",0,0,"","","System","","","","","","",""
"25.5.4.38","pathFull",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramMinHashArgCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramMinHashArgUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayDifference",0,0,"","","System","","","","","","",""
"25.5.4.38","wordShingleMinHash",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramMinHash",0,0,"","","System","","","","","","",""
"25.5.4.38","formatRowNoNewline",0,0,"","","System","","","","","","",""
"25.5.4.38","wordShingleSimHashCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","wordShingleSimHashUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime32BestEffortOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","cutToFirstSignificantSubdomainWithWWW",0,0,"","","System","Returns the part of the domain that includes top-level subdomains up to the ""first significant subdomain"", without stripping ""www"".","","","","","","URL"
"25.5.4.38","mapApply",0,0,"","","System","The same as arrayMap.","","","","mapApply:

```sql
SELECT mapApply((k, v) -> (k, v * 2), map('k1', 1, 'k2', 2))
```

Result:

```text

```
","","Map"
"25.5.4.38","wordShingleSimHashCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","finalizeAggregation",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramSimHashCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramSimHash",0,0,"","","System","","","","","","",""
"25.5.4.38","regionToCountry",0,0,"","","System","","","","","","",""
"25.5.4.38","generateUUIDv7",0,0,"","","System","Generates a UUID of version 7. The generated UUID contains the current Unix timestamp in milliseconds (48 bits), followed by version ""7"" (4 bits), a counter (42 bit, including a variant field ""2"", 2 bit) to distinguish UUIDs within a millisecond, and a random field (32 bits). For any given timestamp (unix_ts_ms), the counter starts at a random value and is incremented by 1 for each new UUID until the timestamp changes. In case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to a random new start value. Function generateUUIDv7 guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.","SELECT generateUUIDv7()","- `expression` — The expression is used to bypass common subexpression elimination if the function is called multiple times in a query but otherwise ignored. Optional.
","A value of type UUID version 7.","single:

```sql
SELECT generateUUIDv7()
```

Result:

```text

```
multiple:

```sql
SELECT generateUUIDv7(1), generateUUIDv7(2)
```

Result:

```text

```
","24.5","UUID"
"25.5.4.38","toTimezone",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayDate",0,0,"","","System","","","","","","",""
"25.5.4.38","CRC32IEEE",0,1,"","","System","","","","","","",""
"25.5.4.38","notEmpty",0,0,"","","System","","","","","","",""
"25.5.4.38","tumbleEnd",0,0,"","","System","","","","","","",""
"25.5.4.38","isInfinite",0,0,"","","System","
    Returns `1` if the Float32 or Float64 argument is infinite, otherwise this function returns `0`.
    Note that `0` is returned for a `NaN`.
    ","isInfinite(x)","- `x` — Number to check for infiniteness. Float32 or Float64.
","`1` if x is infinite, otherwise `0` (including for `NaN`).","Test if a number is infinite:

```sql
SELECT isInfinite(inf), isInfinite(NaN), isInfinite(10))
```

Result:

```text
1 0 0
```
","1.1","Arithmetic"
"25.5.4.38","murmurHash2_32",0,0,"","","System","","","","","","",""
"25.5.4.38","exp10",0,0,"","","System","","","","","","",""
"25.5.4.38","replaceRegexpOne",0,0,"","","System","","","","","","",""
"25.5.4.38","isNull",0,1,"","","System","","","","","","",""
"25.5.4.38","factorial",0,1,"","","System","
Computes the factorial of an integer value. It works with any native integer type including UInt(8|16|32|64) and Int(8|16|32|64). The return type is UInt64.

The factorial of 0 is 1. Likewise, the factorial() function returns 1 for any negative value. The maximum positive value for the input argument is 20, a value of 21 or greater will cause exception throw.
","","","","factorial:

```sql
SELECT factorial(10)
```

Result:

```text

```
","","Mathematical"
"25.5.4.38","aes_decrypt_mysql",0,0,"","","System","","","","","","",""
"25.5.4.38","formatQuerySingleLine",0,0,"","","System","Like formatQuery() but the returned formatted string contains no line breaks. Throws in case of a parsing error.
[example:multiline]","formatQuerySingleLine(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","multiline:

```sql
SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

Result:

```text
SELECT a, b FROM tab WHERE (a > 3) AND (b < 3)
```
","","Other"
"25.5.4.38","position",0,1,"","","System","","","","","","",""
"25.5.4.38","cutToFirstSignificantSubdomainCustomRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainCustom` but follows stricter rules according to RFC 3986.","","","","","","URL"
"25.5.4.38","h3UnidirectionalEdgeIsValid",0,0,"","","System","","","","","","",""
"25.5.4.38","substringUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","serverTimezone",0,0,"","","System","
Returns the timezone name in which server operates.

[example:serverTimezone]
    ","","","","serverTimezone:

```sql
SELECT serverTimezone();
```

Result:

```text

```
","","Other"
"25.5.4.38","cutToFirstSignificantSubdomainCustomWithWWW",0,0,"","","System","
Returns the part of the domain that includes top-level subdomains up to the first significant subdomain without stripping `www`.
Accepts custom TLD list name from config.

Can be useful if you need fresh TLD list or you have custom.
        ","","","","cutToFirstSignificantSubdomainCustomWithWWW:

```sql
SELECT cutToFirstSignificantSubdomainCustomWithWWW('www.foo', 'public_suffix_list')
```

Result:

```text

```
","","URL"
"25.5.4.38","dictGetInt16OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int16 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","cutToFirstSignificantSubdomainCustom",0,0,"","","System","
Returns the part of the domain that includes top-level subdomains up to the first significant subdomain. Accepts custom TLD list name.

Can be useful if you need fresh TLD list or you have custom.
        ","","","","cutToFirstSignificantSubdomainCustom:

```sql
SELECT cutToFirstSignificantSubdomainCustom('bar.foo.there-is-no-such-domain', 'public_suffix_list');
```

Result:

```text

```
","","URL"
"25.5.4.38","atan2",0,1,"","","System","","","","","","",""
"25.5.4.38","JSONExtractArrayRaw",0,0,"","","System","","","","","","",""
"25.5.4.38","joinGetOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","trimRight",0,0,"","","System","","","","","","",""
"25.5.4.38","translate",0,0,"","","System","","","","","","",""
"25.5.4.38","formatQueryOrNull",0,0,"","","System","Returns a formatted, possibly multi-line, version of the given SQL query. Returns NULL in case of a parsing error.
[example:multiline]","formatQueryOrNull(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","multiline:

```sql
SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

Result:

```text
SELECT
    a,
    b
FROM tab
WHERE (a > 3) AND (b < 3)
```
","","Other"
"25.5.4.38","lengthUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","toFloat32OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","h3IndexesAreNeighbors",0,0,"","","System","","","","","","",""
"25.5.4.38","endsWithUTF8",0,0,"","","System","
Returns whether string `str` ends with `suffix`, the difference between `endsWithUTF8` and `endsWith` is that `endsWithUTF8` match `str` and `suffix` by UTF-8 characters.
        ","","","","endsWithUTF8:

```sql
select endsWithUTF8('富强民主文明和谐', '富强');
```

Result:

```text

```
","","String"
"25.5.4.38","mapAll",0,0,"","","System","The same as arrayAll.","","","","mapAll:

```sql
SELECT mapAll((k, v) -> v = 1, map('k1', 1, 'k2', 2))
```

Result:

```text

```
","","Map"
"25.5.4.38","overlay",0,1,"","","System","
Replace a part of a string `input` with another string `replace`, starting at 1-based index `offset`. By default, the number of bytes removed from `input` equals the length of `replace`. If `length` (the optional fourth argument) is specified, a different number of bytes is removed.
","","","","","","String Replacement"
"25.5.4.38","toStartOfMinute",0,0,"","","System","","","","","","",""
"25.5.4.38","wordShingleSimHash",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayCumSum",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv4StringToNumOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","trimLeft",0,0,"","","System","","","","","","",""
"25.5.4.38","formatReadableQuantity",0,0,"","","System","","","","","","",""
"25.5.4.38","countMatchesCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","concat",0,1,"","","System","","","","","","",""
"25.5.4.38","mapAdd",0,0,"","","System","","","","","","",""
"25.5.4.38","enabledRoles",0,0,"","","System","","","","","","",""
"25.5.4.38","toQuarter",0,0,"","","System","","","","","","",""
"25.5.4.38","isFinite",0,0,"","","System","
Returns `1` if the Float32 or Float64 argument not infinite and not a `NaN`,
otherwise this function returns `0`.
    ","isFinite(x)","- `x` — Number to check for finiteness. Float32 or Float64.
","`1` if x is not infinite and not `NaN`, otherwise `0`.","Test if a number is finite:

```sql
SELECT isFinite(inf)
```

Result:

```text
0
```
","1.1","Arithmetic"
"25.5.4.38","countMatches",0,0,"","","System","","","","","","",""
"25.5.4.38","fromDaysSinceYearZero",0,0,"","","System","
Given the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601 return a corresponding date.
The calculation is the same as in MySQL's FROM_DAYS() function.
","","","","typical:

```sql
SELECT fromDaysSinceYearZero(713569)
```

Result:

```text
2023-09-08
```
","","Dates and Times"
"25.5.4.38","arrayWithConstant",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfNanosecond",0,0,"","","System","","","","","","",""
"25.5.4.38","fromUnixTimestamp64Second",0,0,"","","System","","","","","","",""
"25.5.4.38","countEqual",0,0,"","","System","
Returns the number of elements in the array equal to `x`. Equivalent to `arrayCount(elem -> elem = x, arr)`.

`NULL` elements are handled as separate values.
","countEqual(arr, x)","- `arr` — Array to search. [`Array(T)`](/sql-reference/data-types/array).
- `x` — Value in the array to count. Any type.
","Returns the number of elements in the array equal to `x`. [UInt64](/sql-reference/data-types/int-uint).","Usage example:

```sql
SELECT countEqual([1, 2, NULL, NULL], NULL)
```

Result:

```text
2
```
","1.1","Arrays"
"25.5.4.38","JSONArrayLength",0,0,"","","System","Returns the number of elements in the outermost JSON array. The function returns NULL if input JSON string is invalid.","","","","","","JSON"
"25.5.4.38","timezone",0,0,"","","System","
Returns the default timezone for current session.
Used as default timezone for parsing DateTime|DateTime64 without explicitly specified timezone.
Can be changed with SET timezone = 'New/Tz'

[example:timezone]
    ","","","","timezone:

```sql
SELECT timezone();
```

Result:

```text

```
","","Other"
"25.5.4.38","dynamicElement",0,0,"","","System","
Extracts a column with specified type from a `Dynamic` column.
","dynamicElement(dynamic, type_name)","- `dynamic` — Dynamic column
- `type_name` — The name of the variant type to extract
","","Example:

```sql

CREATE TABLE test (d Dynamic) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, dynamicType(d), dynamicElement(d, 'String'), dynamicElement(d, 'Int64'), dynamicElement(d, 'Array(Int64)'), dynamicElement(d, 'Date'), dynamicElement(d, 'Array(String)') FROM test;
```

Result:

```text

┌─d─────────────┬─dynamicType(d)─┬─dynamicElement(d, 'String')─┬─dynamicElement(d, 'Int64')─┬─dynamicElement(d, 'Array(Int64)')─┬─dynamicElement(d, 'Date')─┬─dynamicElement(d, 'Array(String)')─┐
│ ᴺᵁᴸᴸ          │ None           │ ᴺᵁᴸᴸ                        │                       ᴺᵁᴸᴸ │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ 42            │ Int64          │ ᴺᵁᴸᴸ                        │                         42 │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ Hello, World! │ String         │ Hello, World!               │                       ᴺᵁᴸᴸ │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ [1,2,3]       │ Array(Int64)   │ ᴺᵁᴸᴸ                        │                       ᴺᵁᴸᴸ │ [1,2,3]                           │                      ᴺᵁᴸᴸ │ []                                 │
└───────────────┴────────────────┴─────────────────────────────┴────────────────────────────┴───────────────────────────────────┴───────────────────────────┴────────────────────────────────────┘

```
","","JSON"
"25.5.4.38","divide",0,0,"","","System","
    Calculates the quotient of two values `a` and `b`. The result type is always [Float64](/sql-reference/data-types/float).
    Integer division is provided by the `intDiv` function.

    :::note
    Division by `0` returns `inf`, `-inf`, or `nan`.
    :::
    ","divide(x, y)","- `x` — Dividend
- `y` — Divisor
","The quotient of x and y","Dividing two numbers:

```sql
SELECT divide(25,5) AS quotient, toTypeName(quotient)
```

Result:

```text
5 Float64
```
Dividing by zero:

```sql
SELECT divide(25,0)
```

Result:

```text
inf
```
","1.1","Arithmetic"
"25.5.4.38","uniqThetaNot",0,0,"","","System","
Two uniqThetaSketch objects to do a_not_b calculation(set operation ×), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","typical:

```sql
select finalizeAggregation(uniqThetaNot(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

Result:

```text

```
","","Other"
"25.5.4.38","h3EdgeAngle",0,0,"","","System","","","","","","",""
"25.5.4.38","acos",0,1,"","","System","","","","","","",""
"25.5.4.38","fromUnixTimestamp64Micro",0,0,"","","System","","","","","","",""
"25.5.4.38","cos",0,1,"","","System","","","","","","",""
"25.5.4.38","windowID",0,0,"","","System","","","","","","",""
"25.5.4.38","multiMatchAnyIndex",0,0,"","","System","","","","","","",""
"25.5.4.38","hopStart",0,0,"","","System","","","","","","",""
"25.5.4.38","dateDiff",0,1,"","","System","","","","","","",""
"25.5.4.38","hop",0,0,"","","System","","","","","","",""
"25.5.4.38","hasAny",0,0,"","","System","
Checks whether two arrays have intersection by some elements.

- `Null` is processed as a value.
- The order of the values in both of the arrays does not matter.
","hasAny(arr_x, arr_y)","- `arr_x` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array).
- `arr_y` — Array of any type that shares a common supertype with array `arr_x`. [`Array(T)`](/sql-reference/data-types/array).
","
- `1`, if `arr_x` and `arr_y` have one similar element at least.
- `0`, otherwise.

Raises a `NO_COMMON_TYPE` exception if any of the elements of the two arrays do not share a common supertype.
","One array is empty:

```sql
SELECT hasAny([1], [])
```

Result:

```text
1
```
Arrays containing NULL values:

```sql
SELECT hasAny([Null], [Null, 1])
```

Result:

```text
1
```
Arrays containing values of a different type:

```sql
SELECT hasAny([-128, 1., 512], [1])
```

Result:

```text
1
```
Arrays without a common type:

```sql
SELECT hasAny([[1, 2], [3, 4]], ['a', 'c'])
```

Result:

```text
Raises a `NO_COMMON_TYPE` exception
```
Array of arrays:

```sql
SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [1, 2]])
```

Result:

```text
1
```
","1.1","Arrays"
"25.5.4.38","fuzzBits",0,0,"","","System","","","","","","",""
"25.5.4.38","formatQuerySingleLineOrNull",0,0,"","","System","Like formatQuery() but the returned formatted string contains no line breaks. Returns NULL in case of a parsing error.
[example:multiline]","formatQuerySingleLineOrNull(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","multiline:

```sql
SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

Result:

```text
SELECT a, b FROM tab WHERE (a > 3) AND (b < 3)
```
","","Other"
"25.5.4.38","randLogNormal",0,0,"","","System","
Returns a random number from the lognormal distribution (a distribution of a random variable whose logarithm is normally distributed).
Accepts two parameters - mean and standard deviation.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randLogNormal(0, 5) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","ifNull",0,1,"","","System","","","","","","",""
"25.5.4.38","generateULID",0,0,"","","System","
Generates a Universally Unique Lexicographically Sortable Identifier (ULID).
This function takes an optional argument, the value of which is discarded to generate different values in case the function is called multiple times.
The function returns a value of type FixedString(26).
","","","","ulid:

```sql
SELECT generateULID()
```

Result:

```text

```
multiple:

```sql
SELECT generateULID(1), generateULID(2)
```

Result:

```text

```
","","ULID"
"25.5.4.38","bar",0,0,"","","System","","","","","","",""
"25.5.4.38","space",0,1,"","","System","","","","","","",""
"25.5.4.38","toMillisecond",0,0,"","","System","
Returns the millisecond component (0-999) of a date with time.
    ","toMillisecond(value)","- `value` — DateTime or DateTime64
","The millisecond in the minute (0 - 59) of the given date/time","toMillisecond:

```sql
SELECT toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3)
```

Result:

```text
456
```
","","Dates and Times"
"25.5.4.38","parseDateTime64InJodaSyntax",0,0,"","","System","","","","","","",""
"25.5.4.38","generateUUIDv4",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsUInt64",0,0,"","","System","","","","","","",""
"25.5.4.38","erfc",0,0,"","","System","","","","","","",""
"25.5.4.38","hasSubsequenceUTF8",0,1,"","","System","","","","","","",""
"25.5.4.38","geohashesInBox",0,0,"","","System","","","","","","",""
"25.5.4.38","cutToFirstSignificantSubdomainRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomain` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.5.4.38","wordShingleMinHashUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","toBool",0,0,"","","System","","","","","","",""
"25.5.4.38","radians",0,1,"","","System","","","","","","",""
"25.5.4.38","toFloat32OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","bitAnd",0,0,"","","System","","","","","","",""
"25.5.4.38","decodeXMLComponent",0,0,"","","System","","","","","","",""
"25.5.4.38","subtractMicroseconds",0,0,"","","System","","","","","","",""
"25.5.4.38","toDate32OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","getServerSetting",0,0,"","","System","
Returns the current value of server setting.
","getServerSetting('custom_setting')","- `custom_setting` — The setting name. Type: String.
","The setting's current value.","getServerSetting:

```sql
SELECT getSetting('page_cache_size_ratio');
```

Result:

```text
SRLU
```
","","Other"
"25.5.4.38","identity",0,0,"","","System","","","","","","",""
"25.5.4.38","icebergHash",0,0,"","","System","Implements logic of iceberg hashing transform: https://iceberg.apache.org/spec/#appendix-b-32-bit-hash-requirements.","icebergHash(N, value)","- `value` — Integer, bool, decimal, float, string, fixed_string, uuid, date, time, datetime.
","Int32","Example:

```sql
SELECT icebergHash(1.0 :: Float32)
```

Result:

```text
-142385009
```
","25.5","Other"
"25.5.4.38","geoDistance",0,0,"","","System","","","","","","",""
"25.5.4.38","greatCircleDistance",0,0,"","","System","","","","","","",""
"25.5.4.38","isIPv4String",0,0,"","","System","","","","","","",""
"25.5.4.38","JSON_QUERY",0,0,"","","System","","","","","","",""
"25.5.4.38","greater",0,0,"","","System","","","","","","",""
"25.5.4.38","substringIndexUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonsSymDifferenceCartesian",0,0,"","","System","","","","","","",""
"25.5.4.38","gccMurmurHash",0,0,"","","System","","","","","","",""
"25.5.4.38","reverseUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","murmurHash3_64",0,0,"","","System","","","","","","",""
"25.5.4.38","greaterOrEquals",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime64BestEffortUSOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","h3kRing",0,0,"","","System","","","","","","",""
"25.5.4.38","moduloLegacy",0,0,"","","System","","","","","","",""
"25.5.4.38","printf",0,0,"","","System","
The `printf` function formats the given string with the values (strings, integers, floating-points etc.) listed in the arguments, similar to printf function in C++.
The format string can contain format specifiers starting with `%` character.
Anything not contained in `%` and the following format specifier is considered literal text and copied verbatim into the output.
Literal `%` character can be escaped by `%%`.","","","","sum:

```sql
select printf('%%%s %s %d', 'Hello', 'World', 2024);
```

Result:

```text
%Hello World 2024
```
","","String Replacement"
"25.5.4.38","CRC32",0,1,"","","System","","","","","","",""
"25.5.4.38","domainWithoutWWWRFC",0,0,"","","System","Similar to `domainWithoutWWW` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.5.4.38","arrayEnumerateDenseRanked",0,0,"","","System","","","","","","",""
"25.5.4.38","h3HexAreaM2",0,0,"","","System","","","","","","",""
"25.5.4.38","toYYYYMMDDhhmmss",0,0,"","","System","","","","","","",""
"25.5.4.38","h3NumHexagons",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsUUID",0,0,"","","System","","","","","","",""
"25.5.4.38","simpleJSONExtractFloat",0,0,"","","System","Parses Float64 from the value of the field named field_name. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.","simpleJSONExtractFloat(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the number parsed from the field if the field exists and contains a number, 0 otherwise.","simple:

```sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractFloat(json, 'foo') FROM jsons ORDER BY json;
```

Result:

```text
0
-4000
0
-3.4
5
```
","","JSON"
"25.5.4.38","h3EdgeLengthM",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayRotateLeft",0,0,"","","System","
Returns an array of the same size as the original array with elements rotated
to the left by the specified number of positions.
[example:simple_int]
[example:overflow_int]
[example:simple_string]
[example:simple_array]
[example:simple_nested_array]

Negative rotate values are treated as rotating to the right by the absolute
value of the rotation.
[example:negative_rotation_int]
","","","","simple_int:

```sql
SELECT arrayRotateLeft([1, 2, 3, 4, 5], 3)
```

Result:

```text
[4, 5, 1, 2, 3]
```
simple_string:

```sql
SELECT arrayRotateLeft(['a', 'b', 'c', 'd', 'e'], 3)
```

Result:

```text
['d', 'e', 'a', 'b', 'c']
```
simple_array:

```sql
SELECT arrayRotateLeft([[1, 2], [3, 4], [5, 6]], 2)
```

Result:

```text
[[5, 6], [1, 2], [3, 4]]
```
simple_nested_array:

```sql
SELECT arrayRotateLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)
```

Result:

```text
[[[5, 6], [7, 8]], [[1, 2], [3, 4]]]
```
negative_rotation_int:

```sql
SELECT arrayRotateLeft([1, 2, 3, 4, 5], -3)
```

Result:

```text
[3, 4, 5, 1, 2]
```
overflow_int:

```sql
SELECT arrayRotateLeft([1, 2, 3, 4, 5], 8)
```

Result:

```text
[4, 5, 1, 2, 3]
```
","","Arrays"
"25.5.4.38","changeMonth",0,0,"","","System","Changes the month component of a date or date time.","changeMonth(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime.","","","Dates and Times"
"25.5.4.38","cutToFirstSignificantSubdomainWithWWWRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainWithWWW` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.5.4.38","intDiv",0,0,"","","System","
Performs an integer division of two values `x` by `y`. In other words it
computes the quotient rounded down to the next smallest integer.

The result has the same width as the dividend (the first parameter).

An exception is thrown when dividing by zero, when the quotient does not fit
in the range of the dividend, or when dividing a minimal negative number by minus one.
    ","intDiv(x, y)","- `x` — Left hand operand.
- `y` — Right hand operand.
","Result of integer division of `x` and `y`","Integer division of two floats:

```sql
SELECT intDiv(toFloat64(1), 0.001) AS res, toTypeName(res)
```

Result:

```text

┌──res─┬─toTypeName(intDiv(toFloat64(1), 0.001))─┐
│ 1000 │ Int64                                   │
└──────┴─────────────────────────────────────────┘
    
```
Quotient does not fit in the range of the dividend:

```sql

SELECT
intDiv(1, 0.001) AS res,
toTypeName(res)
        
```

Result:

```text

Received exception from server (version 23.2.1):
Code: 153. DB::Exception: Received from localhost:9000. DB::Exception:
Cannot perform integer division, because it will produce infinite or too
large number: While processing intDiv(1, 0.001) AS res, toTypeName(res).
(ILLEGAL_DIVISION)
        
```
","1.1","Arithmetic"
"25.5.4.38","dateTimeToSnowflake",0,0,"","","System","","","","","","",""
"25.5.4.38","domain",0,0,"","","System","
Extracts the hostname from a URL.

The URL can be specified with or without a scheme.
If the argument can't be parsed as URL, the function returns an empty string.
        ","","","","domain:

```sql
SELECT domain('svn+ssh://some.svn-hosting.com:80/repo/trunk')
```

Result:

```text

```
","","URL"
"25.5.4.38","cutToFirstSignificantSubdomain",0,0,"","","System","Returns the part of the domain that includes top-level subdomains up to the ""first significant subdomain"" (see documentation of the `firstSignificantSubdomain`).","","","","cutToFirstSignificantSubdomain1:

```sql
SELECT cutToFirstSignificantSubdomain('https://news.clickhouse.com.tr/')
```

Result:

```text

```
cutToFirstSignificantSubdomain2:

```sql
SELECT cutToFirstSignificantSubdomain('www.tr')
```

Result:

```text

```
cutToFirstSignificantSubdomain3:

```sql
SELECT cutToFirstSignificantSubdomain('tr')
```

Result:

```text

```
","","URL"
"25.5.4.38","getMacro",0,0,"","","System","","","","","","",""
"25.5.4.38","toYear",0,0,"","","System","","","","","","",""
"25.5.4.38","log",0,1,"","","System","","","","","","",""
"25.5.4.38","errorCodeToName",0,0,"","","System","","","","","","",""
"25.5.4.38","h3GetDestinationIndexFromUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.5.4.38","toDate32OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","addMinutes",0,0,"","","System","","","","","","",""
"25.5.4.38","roundDuration",0,0,"","","System","","","","","","",""
"25.5.4.38","URLPathHierarchy",0,0,"","","System","","","","","","",""
"25.5.4.38","h3HexRing",0,0,"","","System","","","","","","",""
"25.5.4.38","h3GetUnidirectionalEdgesFromHexagon",0,0,"","","System","","","","","","",""
"25.5.4.38","simpleJSONExtractUInt",0,0,"","","System","Parses UInt64 from the value of the field named field_name. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.","simpleJSONExtractUInt(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the number parsed from the field if the field exists and contains a number, 0 otherwise.","simple:

```sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""4e3""}');
INSERT INTO jsons VALUES ('{""foo"":3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractUInt(json, 'foo') FROM jsons ORDER BY json;
```

Result:

```text
0
4
0
3
5
```
","","JSON"
"25.5.4.38","dictGetUInt16OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt16 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","h3IsPentagon",0,0,"","","System","","","","","","",""
"25.5.4.38","getSettingOrDefault",0,0,"","","System","
Returns the current value of a custom setting or returns the default value specified in the 2nd argument if the custom setting is not set in the current profile.
","getSettingOrDefault('custom_setting', default_value)","- `custom_setting` — The setting name. Type: String.
- `default_value` — Value to return if custom_setting is not set. Value may be of any data type or Null.
","The setting's current value or the default_value if setting is not set.","getSettingOrDefault:

```sql
SELECT getSettingOrDefault('custom_undef1', 'my_value');
```

Result:

```text
my_value
```
getSettingOrDefault:

```sql
SELECT getSettingOrDefault('custom_undef1', 100);
```

Result:

```text
100
```
getSettingOrDefault:

```sql
SELECT getSettingOrDefault('custom_undef1', NULL);
```

Result:

```text
NULL
```
","","Other"
"25.5.4.38","ngramMinHashArgCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramMinHashUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","compareSubstrings",0,0,"","","System","
                This function compares parts of two strings directly, without the need to copy the parts of the string into new columns.
                ","
        compareSubstrings(str1, str2, str1_off, str2_off, num_bytes)
        ","- `string1` — Required. The string to compare.
- `string2` — Required. The string to compare.
- `string1_offset` — Positive number. The starting position (zero-based index) in `str1` from which the comparison begins.
- `string2_offset` — Positive number. The starting position (zero-based index) in `str2` from which the comparison begins.
- `num_bytes` — The number of bytes to compare in both strings, starting from their respective offsets.
","-1 if the substring from str1 is lexicographically smaller than the substring from str2, 0 if the substrings are equal, 1 if the substring from str1 is lexicographically greater than the substring from str2.","typical:

```sql
SELECT compareSubstrings('123', '123', 0, 0, 3)
```

Result:

```text

                ┌─compareSubtr⋯', 0, 0, 3)─┐
             1. │                        0 │
                └──────────────────────────┘
                
```
","","String"
"25.5.4.38","plus",0,0,"","","System","
Calculates the sum of two values `x` and `y`. Alias: `x + y` (operator).
It is possible to add an integer and a date or date with time. The former
operation increments the number of days in the date, the latter operation
increments the number of seconds in the date with time.
    ","plus(x, y)","- `x` — Left hand operand.
- `y` — Right hand operand.
","The sum of x and y","Adding two numbers:

```sql
SELECT plus(5,5)
```

Result:

```text
10
```
Adding an integer and a date:

```sql
SELECT plus(toDate('2025-01-01'),5)
```

Result:

```text
2025-01-06
```
","1.1","Arithmetic"
"25.5.4.38","readWKTMultiPolygon",0,0,"","","System","","","","","","",""
"25.5.4.38","subtractYears",0,0,"","","System","","","","","","",""
"25.5.4.38","detectLanguageMixed",0,0,"","","System","","","","","","",""
"25.5.4.38","acosh",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayPushBack",0,0,"","","System","Adds one item to the end of the array.","arrayPushBack(arr, x)","- `arr` — The array for which to add value `x` to the end of. [`Array(T)`](/sql-reference/data-types/array).
- `x` — 
- Single value to add to the end of the array. [`Array(T)`](/sql-reference/data-types/array).

:::note
- Only numbers can be added to an array with numbers, and only strings can be added to an array of strings.
- When adding numbers, ClickHouse automatically sets the type of `x` for the data type of the array.
- Can be `NULL`. The function adds a `NULL` element to an array, and the type of array elements converts to `Nullable`.

For more information about the types of data in ClickHouse, see [Data types](/sql-reference/data-types).
:::
    
","Returns an array identical to `arr` but with an additional value `x` at the end of the array. [`Array(T)`](/sql-reference/data-types/array).","Usage example:

```sql
SELECT arrayPushBack(['a'], 'b') AS res;
```

Result:

```text
['a','b']
```
","1.1","Arrays"
"25.5.4.38","domainWithoutWWW",0,0,"","","System","
Extracts the hostname from a URL, removing the leading ""www."" if present.

The URL can be specified with or without a scheme.
If the argument can't be parsed as URL, the function returns an empty string.
        ","","","","domainWithoutWWW:

```sql
SELECT domainWithoutWWW('https://www.clickhouse.com')
```

Result:

```text

```
","","URL"
"25.5.4.38","hasSubsequenceCaseInsensitive",0,1,"","","System","","","","","","",""
"25.5.4.38","ngramSearchUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONExtractBool",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleHammingDistance",0,0,"","","System","","","","","","",""
"25.5.4.38","h3ExactEdgeLengthRads",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetDateTime",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the DateTime if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","h3ToGeoBoundary",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayShiftRight",0,0,"","","System","
Returns an array of the same size as the original array with elements shifted
to the right by the specified number of positions. New elements are filled with
provided default values or default values of the corresponding type.
[example:simple_int]
[example:overflow_int]
[example:simple_string]
[example:simple_array]
[example:simple_nested_array]

Negative shift values are treated as shifting to the left by the absolute
value of the shift.
[example:negative_shift_int]

The default value must be of the same type as the array elements.
[example:simple_int_with_default]
[example:simple_string_with_default]
[example:simple_array_with_default]
[example:cast_array_with_default]
","","","","simple_int:

```sql
SELECT arrayShiftRight([1, 2, 3, 4, 5], 3)
```

Result:

```text
[0, 0, 0, 1, 2]
```
negative_shift_int:

```sql
SELECT arrayShiftRight([1, 2, 3, 4, 5], -3)
```

Result:

```text
[4, 5, 0, 0, 0]
```
overflow_int:

```sql
SELECT arrayShiftRight([1, 2, 3, 4, 5], 8)
```

Result:

```text
[0, 0, 0, 0, 0]
```
simple_string:

```sql
SELECT arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3)
```

Result:

```text
['', '', '', 'a', 'b']
```
simple_array:

```sql
SELECT arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2)
```

Result:

```text
[[], [], [1, 2]]
```
simple_nested_array:

```sql
SELECT arrayShiftRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)
```

Result:

```text
[[], [[1, 2], [3, 4]]]
```
simple_int_with_default:

```sql
SELECT arrayShiftRight([1, 2, 3, 4, 5], 3, 7)
```

Result:

```text
[7, 7, 7, 1, 2]
```
simple_string_with_default:

```sql
SELECT arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3, 'foo')
```

Result:

```text
['foo', 'foo', 'foo', 'a', 'b']
```
simple_array_with_default:

```sql
SELECT arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2, [7, 8])
```

Result:

```text
[[7, 8], [7, 8], [1, 2]]
```
cast_array_with_default:

```sql
SELECT arrayShiftRight(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000)
```

Result:

```text
[1000, 1, 2, 3, 4, 5]
```
","","Arrays"
"25.5.4.38","h3ToString",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayRotateRight",0,0,"","","System","
Returns an array of the same size as the original array with elements rotated
to the right by the specified number of positions.
[example:simple_int]
[example:overflow_int]
[example:simple_string]
[example:simple_array]
[example:simple_nested_array]

Negative rotate values are treated as rotating to the left by the absolute
value of the rotation.
[example:negative_rotation_int]
","","","","simple_int:

```sql
SELECT arrayRotateRight([1, 2, 3, 4, 5], 3)
```

Result:

```text
[3, 4, 5, 1, 2]
```
simple_string:

```sql
SELECT arrayRotateRight(['a', 'b', 'c', 'd', 'e'], 3)
```

Result:

```text
['c', 'd', 'e', 'a', 'b']
```
simple_array:

```sql
SELECT arrayRotateRight([[1, 2], [3, 4], [5, 6]], 2)
```

Result:

```text
[[3, 4], [5, 6], [1, 2]]
```
simple_nested_array:

```sql
SELECT arrayRotateRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)
```

Result:

```text
[[[7, 8], [1, 2]], [[3, 4], [5, 6]]]
```
negative_rotation_int:

```sql
SELECT arrayRotateRight([1, 2, 3, 4, 5], -3)
```

Result:

```text
[4, 5, 1, 2, 3]
```
overflow_int:

```sql
SELECT arrayRotateRight([1, 2, 3, 4, 5], 8)
```

Result:

```text
[4, 5, 1, 2, 3]
```
","","Arrays"
"25.5.4.38","hasSubsequence",0,1,"","","System","","","","","","",""
"25.5.4.38","JSON_VALUE",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONExtract",0,0,"","","System","","","","","","",""
"25.5.4.38","tumbleStart",0,0,"","","System","","","","","","",""
"25.5.4.38","bitShiftRight",0,0,"","","System","","","","","","",""
"25.5.4.38","today",0,0,"","","System","","","","","","",""
"25.5.4.38","tryBase58Decode",0,0,"","","System","","","","","","",""
"25.5.4.38","flattenTuple",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonsWithinSpherical",0,0,"","","System","","","","","","",""
"25.5.4.38","tryPunycodeDecode",0,0,"","","System","
Computes a Punycode representation of a string. Returns an empty string if the input is not valid Punycode.","punycodeDecode(str)","- `str` — A Punycode-encoded string
","The plaintext representation [String](/sql-reference/data-types/string.md).","simple:

```sql
SELECT tryPunycodeDecode('Mnchen-3ya') AS plain;
```

Result:

```text

┌─plain───┐
│ München │
└─────────┘
            
```
","","Encoding"
"25.5.4.38","L2Normalize",0,0,"","","System","","","","","","",""
"25.5.4.38","YYYYMMDDhhmmssToDateTime64",0,0,"","","System","
Like function `YYYYMMDDhhmmssToDate()` but produces a DateTime64.
Accepts an additional, optional `precision` parameter after the `timezone` parameter.
","","","","","","Dates and Times"
"25.5.4.38","pow",0,1,"","","System","","","","","","",""
"25.5.4.38","rightPadUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","rightPad",0,0,"","","System","","","","","","",""
"25.5.4.38","aes_encrypt_mysql",0,0,"","","System","","","","","","",""
"25.5.4.38","hasTokenOrNull",0,0,"","","System","Performs lookup of needle in haystack using tokenbf_v1 index. Returns null if needle is ill-formed.","","","","","","String Search"
"25.5.4.38","dictGetUUIDOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UUID if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","hasToken",0,0,"","","System","Performs lookup of needle in haystack using tokenbf_v1 index.","","","","","","String Search"
"25.5.4.38","tan",0,1,"","","System","","","","","","",""
"25.5.4.38","idnaEncode",0,0,"","","System","
Computes an ASCII representation of an Internationalized Domain Name. Throws an exception in case of error.","idnaEncode(str)","- `str` — Input string
","An ASCII-encoded domain name [String](/sql-reference/data-types/string.md).","simple:

```sql
SELECT idnaEncode('straße.münchen.de') AS ascii;
```

Result:

```text

┌─ascii───────────────────────────┐
│ xn--strae-oqa.xn--mnchen-3ya.de │
└─────────────────────────────────┘
            
```
","","Encoding"
"25.5.4.38","substring",0,1,"","","System","","","","","","",""
"25.5.4.38","regionHierarchy",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateTime64OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonsWithinCartesian",0,0,"","","System","","","","","","",""
"25.5.4.38","materialize",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimalString",0,1,"","","System","
Returns string representation of a number. First argument is the number of any numeric type,
second argument is the desired number of digits in fractional part. Returns String.

        ","","","","toDecimalString:

```sql
SELECT toDecimalString(2.1456,2)
```

Result:

```text

```
","","Type Conversion"
"25.5.4.38","idnaDecode",0,0,"","","System","
Computes the Unicode representation of ASCII-encoded Internationalized Domain Name.","idnaDecode(str)","- `str` — Input string
","An Unicode-encoded domain name [String](/sql-reference/data-types/string.md).","simple:

```sql
SELECT idnaDecode('xn--strae-oqa.xn--mnchen-3ya.de') AS unicode;
```

Result:

```text

┌─unicode───────────┐
│ straße.münchen.de │
└───────────────────┘
            
```
","","Encoding"
"25.5.4.38","readWKTMultiLineString",0,0,"","","System","
Parses a Well-Known Text (WKT) representation of a MultiLineString geometry and returns it in the internal ClickHouse format.
","readWKTMultiLineString(wkt_string)","- `wkt_string` — The input WKT string representing a MultiLineString geometry.
","The function returns a ClickHouse internal representation of the multilinestring geometry.","first call:

```sql
SELECT readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))');
```

Result:

```text

┌─readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))')─┐
│ [[(1,1),(2,2),(3,3)],[(4,4),(5,5),(6,6)]]                                    │
└──────────────────────────────────────────────────────────────────────────────┘

            
```
second call:

```sql
SELECT toTypeName(readWKTLineString('MULTILINESTRING ((1 1, 2 2, 3 3, 1 1))'));
```

Result:

```text

┌─toTypeName(readWKTLineString('MULTILINESTRING ((1 1, 2 2, 3 3, 1 1))'))─┐
│ MultiLineString                                                         │
└─────────────────────────────────────────────────────────────────────────┘
            
```
","","Geo"
"25.5.4.38","ignore",0,0,"","","System","","","","","","",""
"25.5.4.38","h3GetUnidirectionalEdgeBoundary",0,0,"","","System","","","","","","",""
"25.5.4.38","globalNullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.5.4.38","fromDaysSinceYearZero32",0,0,"","","System","
Given the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601 return a corresponding date.
The calculation is the same as in MySQL's FROM_DAYS() function.
","","","","typical:

```sql
SELECT fromDaysSinceYearZero32(713569)
```

Result:

```text
2023-09-08
```
","","Dates and Times"
"25.5.4.38","globalNotInIgnoreSet",0,0,"","","System","","","","","","",""
"25.5.4.38","splitByChar",0,0,"","","System","","","","","","",""
"25.5.4.38","toRelativeDayNum",0,0,"","","System","","","","","","",""
"25.5.4.38","notInIgnoreSet",0,0,"","","System","","","","","","",""
"25.5.4.38","globalInIgnoreSet",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayConcat",0,0,"","","System","","","","","","",""
"25.5.4.38","globalNotNullIn",0,0,"","","System","","","","","","",""
"25.5.4.38","sqrt",0,1,"","","System","","","","","","",""
"25.5.4.38","notNullIn",0,0,"","","System","","","","","","",""
"25.5.4.38","globalNullIn",0,0,"","","System","","","","","","",""
"25.5.4.38","nullIn",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetHierarchy",0,0,"","","System","
Creates an array, containing all the parents of a key in the hierarchical dictionary.
Accepts 2 parameters: name of the dictionary, key value - expression returning a UInt64-type value.
Returned value: parents for the key, type of Array(UInt64)
","","","","","","Dictionary"
"25.5.4.38","globalIn",0,0,"","","System","","","","","","",""
"25.5.4.38","indexHint",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateTime32",0,0,"","","System","","","","","","",""
"25.5.4.38","arraySplit",0,0,"","","System","","","","","","",""
"25.5.4.38","initcapUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramDistanceCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","connectionId",0,1,"","","System","","","","","","",""
"25.5.4.38","startsWith",0,0,"","","System","","","","","","",""
"25.5.4.38","initialQueryID",0,0,"","","System","","","","","","",""
"25.5.4.38","murmurHash2_64",0,0,"","","System","","","","","","",""
"25.5.4.38","parseReadableSizeOrNull",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns `NULL`","parseReadableSizeOrNull(x)","- `x` — Readable size with ISO/IEC 80000-13  or decimal byte unit ([String](../../sql-reference/data-types/string.md))
","Number of bytes, rounded up to the nearest integer, or NULL if unable to parse the input (Nullable([UInt64](../../sql-reference/data-types/int-uint.md)))","basic:

```sql
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes, parseReadableSizeOrNull(readable_sizes) AS sizes;
```

Result:

```text

┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
│ invalid        │    ᴺᵁᴸᴸ │
└────────────────┴─────────┘
```
","","Other"
"25.5.4.38","h3GetBaseCell",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapHasAll",0,0,"","","System","","","","","","",""
"25.5.4.38","base58Decode",0,0,"","","System","","","","","","",""
"25.5.4.38","intDivOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","isIPAddressInRange",0,0,"","","System","","","","","","",""
"25.5.4.38","JSON_EXISTS",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetDescendants",0,0,"","","System","
Returns all descendants as if dictGetChildren function was applied level times recursively.
Accepts 3 parameters: name of the dictionary, key value - expression returning a UInt64-type value, level — hierarchy level - If level = 0 returns all descendants to the end - UInt8
Returned value: descendants for the key, type of Array(UInt64)
","","","","","","Dictionary"
"25.5.4.38","dictGetChildren",0,0,"","","System","
Returns first-level children as an array of indexes. It is the inverse transformation for dictGetHierarchy.
Accepts 2 parameters: name of the dictionary, key value - expression returning a UInt64-type value.
Returned value: first-level descendants for the key, type of Array(UInt64)
","","","","","","Dictionary"
"25.5.4.38","dictIsIn",0,0,"","","System","
Checks the ancestor of a key through the whole hierarchical chain in the dictionary.
Accepts 3 parameters: name of the dictionary, key to be checked - expression returning a UInt64-type value, alleged ancestor of the key - expression returning a UInt64-type.
Returned value: 0 if key is not a child of the ancestor, 1 if key is a child of the ancestor or if key is the ancestor, type of UInt8
","","","","","","Dictionary"
"25.5.4.38","dictGetStringOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the String if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","evalMLMethod",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetIPv6OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the IPv6 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","_CAST",0,1,"","","System","","","","","","",""
"25.5.4.38","dictGetIPv4OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the IPv4 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","UTCTimestamp",0,1,"","","System","
Returns the current date and time at the moment of query analysis. The function is a constant expression.
Same as `now('UTC')`. Was added only for MySQL support. `now` is preferred.

Example:
[example:typical]
","","","","typical:

```sql
SELECT UTCTimestamp();
```

Result:

```text

```
","","Dates and Times"
"25.5.4.38","dictGetFloat64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Float64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","s2RectAdd",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetFloat32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Float32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","keccak256",0,0,"","","System","Calculates the Keccak-256 cryptographic hash of the given string.
        This hash function is widely used in blockchain applications, particularly Ethereum.","SELECT keccak256(message)","- `message` — The input [String](../../sql-reference/data-types/string.md).
","A [FixedString(32)](../../sql-reference/data-types/fixedstring.md) containing the 32-byte Keccak-256 hash of the input string.",":

```sql
SELECT hex(keccak256('hello'))
```

Result:

```text

┌─hex(keccak256('hello'))──────────────────────────────────────────┐
│ 1C8AFF950685C2ED4BC3174F3472287B56D9517B9C948127319A09A7A36DEAC8 │
└──────────────────────────────────────────────────────────────────┘
        
```
","","Hash"
"25.5.4.38","dictGetInt64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","bitTestAll",0,0,"","","System","","","","","","",""
"25.5.4.38","normalizedQueryHash",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetInt32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","addressToLine",0,0,"","","System","","","","","","",""
"25.5.4.38","globalNotIn",0,0,"","","System","","","","","","",""
"25.5.4.38","dateTime64ToSnowflake",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetInt8OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int8 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","wordShingleMinHashCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetDateOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Date if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","dictGetUInt64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","dictGetUInt32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","h3ExactEdgeLengthM",0,0,"","","System","","","","","","",""
"25.5.4.38","countSubstringsCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetString",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the String if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","dictGetIPv6",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the IPv6 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","dictGetIPv4",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the IPv4 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","multiSearchFirstPosition",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetDate",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Date if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","reinterpretAsInt32",0,0,"","","System","","","","","","",""
"25.5.4.38","YYYYMMDDToDate32",0,0,"","","System","
Like function `YYYYMMDDToDate()` but produces a Date32.
","","","","","","Dates and Times"
"25.5.4.38","dictGetFloat64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Float64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","greatCircleAngle",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv6StringToNum",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetInt64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","min2",0,1,"","","System","
    Returns the smaller of two numeric values `x` and `y`. The returned value is of type Float64.
    ","min2(x, y)","- `x` — First value
- `y` — Second value
","Returns the smaller value of `x` and `y`",":

```sql
SELECT min2(-1, 2)
```

Result:

```text
-1
```
","21.11","Arithmetic"
"25.5.4.38","dictGetInt16",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int16 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","isValidUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","h3PointDistKm",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetInt8",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int8 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","dictGetUInt64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","dictGetUInt32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","dictGetAll",0,0,"","","System","
Retrieves all values from a dictionary corresponding to the given key values.

Accepts 3 or 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- [optional] maximum number of values to return for each attribute;

Returned value: array of dictionary attribute values parsed in the attribute's data type if key is found, otherwise empty array.

Throws an exception if cannot parse the value of the attribute, the value does not match the attribute data type, or the dictionary doesn't support this function.
","","","","","","Dictionary"
"25.5.4.38","h3GetPentagonIndexes",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayInt16",0,0,"","","System","","","","","","",""
"25.5.4.38","replaceOne",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the attribute's data type if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","toFixedString",0,0,"","","System","","","","","","",""
"25.5.4.38","isNotDistinctFrom",0,0,"","","System","
Performs a null-safe comparison between two values. This function will consider
two `NULL` values as identical and will return `true`, which is distinct from the usual
equals behavior where comparing two `NULL` values would return `NULL`.

Currently, this function can only be used in the `JOIN ON` section of a query.
[example:join_on_is_not_distinct_from]
","","","","join_on_is_not_distinct_from:

```sql
SELECT * FROM (SELECT NULL AS a) AS t1 JOIN (SELECT NULL AS b) AS t2 ON isNotDistinctFrom(t1.a, t2.b)
```

Result:

```text
NULL	NULL
```
","","Nullable"
"25.5.4.38","addWeeks",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateTime64",0,0,"","","System","","","","","","",""
"25.5.4.38","yesterday",0,0,"","","System","","","","","","",""
"25.5.4.38","initializeAggregation",0,0,"","","System","","","","","","",""
"25.5.4.38","lgamma",0,0,"","","System","","","","","","",""
"25.5.4.38","h3PointDistM",0,0,"","","System","","","","","","",""
"25.5.4.38","runningDifferenceStartingWithFirstValue",0,0,"","","System","","","","","","",""
"25.5.4.38","h3CellAreaM2",0,0,"","","System","","","","","","",""
"25.5.4.38","normalizeUTF8NFC",0,0,"","","System","","","","","","",""
"25.5.4.38","like",0,0,"","","System","","","","","","",""
"25.5.4.38","cosineDistance",0,0,"","","System","","","","","","",""
"25.5.4.38","extractURLParameterNames",0,0,"","","System","","","","","","",""
"25.5.4.38","LinfNormalize",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalNanosecond",0,0,"","","System","","","","","","",""
"25.5.4.38","addDate",0,1,"","","System","","","","","","",""
"25.5.4.38","tupleIntDivOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","LpDistance",0,0,"","","System","","","","","","",""
"25.5.4.38","LinfDistance",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONSharedDataPathsWithTypes",0,0,"","","System","
Returns the list of paths that are stored in shared data structure and their types in each row in JSON column.
","JSONDynamicPathsWithTypes(json)","- `json` — JSON column
","","Example:

```sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPathsWithTypes(json) FROM test;

```

Result:

```text

┌─json─────────────────────────────────┬─JSONDynamicPathsWithTypes(json)─┐
│ {""a"":""42""}                           │ {'a':'Int64'}                   │
│ {""b"":""Hello""}                        │ {}                              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))'}  │
└──────────────────────────────────────┴─────────────────────────────────┘

```
","","JSON"
"25.5.4.38","dictHas",0,0,"","","System","
Checks whether a key is present in a dictionary.
Accepts 2 parameters: name of the dictionary, key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration.
Returned value: 0 if there is no key, 1 if there is a key, type of UInt8
","","","","","","Dictionary"
"25.5.4.38","toDecimal256OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayInt64",0,0,"","","System","","","","","","",""
"25.5.4.38","arraySum",0,0,"","","System","","","","","","",""
"25.5.4.38","L2SquaredDistance",0,0,"","","System","","","","","","",""
"25.5.4.38","L1Distance",0,0,"","","System","","","","","","",""
"25.5.4.38","h3GetResolution",0,0,"","","System","","","","","","",""
"25.5.4.38","encodeURLComponent",0,0,"","","System","","","","","","",""
"25.5.4.38","wordShingleMinHashArgCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","getSetting",0,0,"","","System","
Returns the current value of a custom setting.
","getSetting('custom_setting')","- `custom_setting` — The setting name. Type: String.
","The setting's current value.","getSetting:

```sql
SET custom_a = 123; SELECT getSetting('custom_a');
```

Result:

```text
123
```
","","Other"
"25.5.4.38","LpNorm",0,0,"","","System","","","","","","",""
"25.5.4.38","toYYYYMM",0,0,"","","System","","","","","","",""
"25.5.4.38","L2Norm",0,0,"","","System","","","","","","",""
"25.5.4.38","extractTextFromHTML",0,0,"","","System","","","","","","",""
"25.5.4.38","L1Norm",0,0,"","","System","","","","","","",""
"25.5.4.38","fromUnixTimestamp64Milli",0,0,"","","System","","","","","","",""
"25.5.4.38","addSeconds",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleIntDivOrZeroByNumber",0,0,"","","System","","","","","","",""
"25.5.4.38","toUnixTimestamp",0,0,"","","System","","","","","","",""
"25.5.4.38","clamp",0,0,"","","System","","","","","","",""
"25.5.4.38","h3GetRes0Indexes",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleIntDivByNumber",0,0,"","","System","","","","","","",""
"25.5.4.38","h3ToCenterChild",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetFloat32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Float32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","tupleModuloByNumber",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramSimHashUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayUInt8",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetUInt8",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt8 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","subtractTupleOfIntervals",0,0,"","","System","
Consecutively subtracts a tuple of intervals from a Date or a DateTime.
[example:tuple]
","","","","tuple:

```sql
WITH toDate('2018-01-01') AS date SELECT subtractTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 YEAR))
```

Result:

```text

```
","","Dates and Times"
"25.5.4.38","addTupleOfIntervals",0,0,"","","System","
Consecutively adds a tuple of intervals to a Date or a DateTime.
[example:tuple]
","","","","tuple:

```sql
WITH toDate('2018-01-01') AS date SELECT addTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 YEAR))
```

Result:

```text

```
","","Dates and Times"
"25.5.4.38","__scalarSubqueryResult",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleDivide",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleMultiply",0,0,"","","System","","","","","","",""
"25.5.4.38","least",0,1,"","","System","","","","","","",""
"25.5.4.38","tupleMinus",0,0,"","","System","","","","","","",""
"25.5.4.38","log10",0,1,"","","System","","","","","","",""
"25.5.4.38","lower",0,1,"","","System","","","","","","",""
"25.5.4.38","lowerUTF8",0,0,"","","System","Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.","lowerUTF8(input)","- `input` — Input with String type
","A String data type value","first:

```sql
SELECT lowerUTF8('München') as Lowerutf8;
```

Result:

```text
münchen
```
","1.1","String"
"25.5.4.38","arrayPopFront",0,0,"","","System","Removes the first item from the array.","arrayPopFront(arr)","- `arr` — The array for which to remove the first element from. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array identical to `arr` but without the first element of `arr`. [`Array(T)`](/sql-reference/data-types/array).","Usage example:

```sql
SELECT arrayPopFront([1, 2, 3]) AS res;
```

Result:

```text
[2,3]
```
","1.1","Arrays"
"25.5.4.38","subtractMilliseconds",0,0,"","","System","","","","","","",""
"25.5.4.38","toSecond",0,0,"","","System","","","","","","",""
"25.5.4.38","filesystemCapacity",0,0,"","","System","","","","","","",""
"25.5.4.38","isZeroOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt8OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","leftPadUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","notILike",0,0,"","","System","","","","","","",""
"25.5.4.38","concatWithSeparator",0,0,"","","System","
Returns the concatenation strings separated by string separator. Syntax: concatWithSeparator(sep, expr1, expr2, expr3...)
        ","","","","concatWithSeparator:

```sql
SELECT concatWithSeparator('a', '1', '2', '3')
```

Result:

```text

```
","","String"
"25.5.4.38","toMonthNumSinceEpoch",0,0,"","","System","Returns amount of months passed from year 1970","toMonthNumSinceEpoch(date)","- `date` — Date, DateTime or DateTime64
","Positive integer","Example:

```sql
SELECT toMonthNumSinceEpoch(toDate('2024-10-01'))
```

Result:

```text
657
```
","25.3","Dates and Times"
"25.5.4.38","minSampleSizeContinuous",0,0,"","","System","","","","","","",""
"25.5.4.38","hopEnd",0,0,"","","System","","","","","","",""
"25.5.4.38","map",0,0,"","","System","","","","","","",""
"25.5.4.38","rand",0,1,"","","System","","","","","","",""
"25.5.4.38","toUUIDOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","h3GetUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.5.4.38","log1p",0,0,"","","System","","","","","","",""
"25.5.4.38","tgamma",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmaskToList",0,0,"","","System","","","","","","",""
"25.5.4.38","geohashDecode",0,0,"","","System","","","","","","",""
"25.5.4.38","tryIdnaEncode",0,0,"","","System","
Computes a ASCII representation of an Internationalized Domain Name. Returns an empty string in case of error","punycodeEncode(str)","- `str` — Input string
","An ASCII-encoded domain name [String](/sql-reference/data-types/string.md).","simple:

```sql
SELECT idnaEncodeOrNull('München') AS ascii;
```

Result:

```text

┌─ascii───────────────────────────┐
│ xn--strae-oqa.xn--mnchen-3ya.de │
└─────────────────────────────────┘
            
```
","","Encoding"
"25.5.4.38","SHA512",0,0,"","","System","Calculates the SHA512 hash of the given string.","SELECT SHA512(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA512 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

```sql
SELECT HEX(SHA512('abc'));
```

Result:

```text

┌─hex(SHA512('abc'))───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ DDAF35A193617ABACC417349AE20413112E6FA4E89A97EA20A9EEEE64B55D39A2192992A274FC1A836BA3C23A3FEEBBD454D4423643CE80E2A9AC94FA54CA49F │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
            
```
","","Hash"
"25.5.4.38","notLike",0,0,"","","System","","","","","","",""
"25.5.4.38","shardCount",0,0,"","","System","","","","","","",""
"25.5.4.38","h3GetFaces",0,0,"","","System","","","","","","",""
"25.5.4.38","__getScalar",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetInt32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","mortonEncode",0,0,"","","System","
Calculates Morton encoding (ZCurve) for a list of unsigned integers

The function has two modes of operation:
- Simple
- Expanded

Simple: accepts up to 8 unsigned integers as arguments and produces a UInt64 code.
[example:simple]

Expanded: accepts a range mask (tuple) as a first argument and up to 8 unsigned integers as other arguments.
Each number in mask configures the amount of range expansion
1 - no expansion
2 - 2x expansion
3 - 3x expansion
....
Up to 8x expansion.
[example:range_expanded]
Note: tuple size must be equal to the number of the other arguments

Range expansion can be beneficial when you need a similar distribution for arguments with wildly different ranges (or cardinality)
For example: 'IP Address' (0...FFFFFFFF) and 'Country code' (0...FF)

Morton encoding for one argument is always the argument itself.
[example:identity]
Produces: `1`

You can expand one argument too:
[example:identity_expanded]
Produces: `32768`

The function also accepts columns as arguments:
[example:from_table]

But the range tuple must still be a constant:
[example:from_table_range]

Please note that you can fit only so much bits of information into Morton code as UInt64 has.
Two arguments will have a range of maximum 2^32 (64/2) each
Three arguments: range of max 2^21 (64/3) each
And so on, all overflow will be clamped to zero
","","","","simple:

```sql
SELECT mortonEncode(1, 2, 3)
```

Result:

```text

```
range_expanded:

```sql
SELECT mortonEncode((1,2), 1024, 16)
```

Result:

```text

```
identity:

```sql
SELECT mortonEncode(1)
```

Result:

```text

```
identity_expanded:

```sql
SELECT mortonEncode(tuple(2), 128)
```

Result:

```text

```
from_table:

```sql
SELECT mortonEncode(n1, n2) FROM table
```

Result:

```text

```
from_table_range:

```sql
SELECT mortonEncode((1,2), n1, n2) FROM table
```

Result:

```text

```
","","Encoding"
"25.5.4.38","toTypeName",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonsUnionCartesian",0,0,"","","System","","","","","","",""
"25.5.4.38","toDaysSinceYearZero",0,0,"","","System","
Returns for a given date or date with time, the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601.
The calculation is the same as in MySQL's TO_DAYS() function.
","","","","typical:

```sql
SELECT toDaysSinceYearZero(toDate('2023-09-08'))
```

Result:

```text
713569
```
","","Dates and Times"
"25.5.4.38","reinterpretAsUInt16",0,0,"","","System","","","","","","",""
"25.5.4.38","arraySymmetricDifference",0,0,"","","System","Takes multiple arrays and returns an array with elements that are not present in all source arrays. The result contains only unique values.

:::note
The symmetric difference of _more than two sets_ is [mathematically defined](https://en.wikipedia.org/wiki/Symmetric_difference#n-ary_symmetric_difference)
as the set of all input elements which occur in an odd number of input sets.
In contrast, function `arraySymmetricDifference` simply returns the set of input elements which do not occur in all input sets.
:::
","arraySymmetricDifference(arr1, arr2, ... , arrN)","- `arrN` — N arrays from which to make the new array. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array of distinct elements not present in all source arrays. [`Array(T)`](/sql-reference/data-types/array).","Usage example:

```sql
SELECT
arraySymmetricDifference([1, 2], [1, 2], [1, 2]) AS empty_symmetric_difference,
arraySymmetricDifference([1, 2], [1, 2], [1, 3]) AS non_empty_symmetric_difference;

```

Result:

```text

┌─empty_symmetric_difference─┬─non_empty_symmetric_difference─┐
│ []                         │ [3]                            │
└────────────────────────────┴────────────────────────────────┘

```
","25.4","Arrays"
"25.5.4.38","addMilliseconds",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchFirstPositionUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","encrypt",0,0,"","","System","","","","","","",""
"25.5.4.38","addYears",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfSecond",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayUnion",0,0,"","","System","Takes multiple arrays and returns an array which contains all elements that are present in one of the source arrays.The result contains only unique values.","arrayUnion(arr1, arr2, ..., arrN)","- `arrN` — N arrays from which to make the new array. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array with distinct elements from the source arrays. [`Array(T)`](/sql-reference/data-types/array).","Usage example:

```sql
SELECT
arrayUnion([-2, 1], [10, 1], [-2], []) as num_example,
arrayUnion(['hi'], [], ['hello', 'hi']) as str_example,
arrayUnion([1, 3, NULL], [2, 3, NULL]) as null_example

```

Result:

```text

┌─num_example─┬─str_example────┬─null_example─┐
│ [10,-2,1]   │ ['hello','hi'] │ [3,2,1,NULL] │
└─────────────┴────────────────┴──────────────┘

```
","24.10","Arrays"
"25.5.4.38","multiSearchAllPositions",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt16",0,0,"","","System","","","","","","",""
"25.5.4.38","upper",0,1,"","","System","","","","","","",""
"25.5.4.38","arrayFlatten",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleIntDiv",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt256OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","pointInPolygon",0,0,"","","System","","","","","","",""
"25.5.4.38","splitByWhitespace",0,0,"","","System","","","","","","",""
"25.5.4.38","tryDecrypt",0,0,"","","System","Similar to `decrypt`, but returns NULL if decryption fails because of using the wrong key.","","","","","","Encryption"
"25.5.4.38","countSubstrings",0,1,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsFloat64",0,0,"","","System","","","","","","",""
"25.5.4.38","s2GetNeighbors",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchAnyCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","ascii",0,1,"","","System","
Returns the ASCII code point of the first character of str.  The result type is Int32.

If s is empty, the result is 0. If the first character is not an ASCII character or not part of the Latin-1 Supplement range of UTF-16, the result is undefined)
        ","","","","ascii:

```sql
SELECT ascii('234')
```

Result:

```text

```
","","String"
"25.5.4.38","ngramDistanceCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmapMax",0,0,"","","System","","","","","","",""
"25.5.4.38","h3GetOriginIndexFromUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime32BestEffortOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","blockNumber",0,0,"","","System","","","","","","",""
"25.5.4.38","rightUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","cutURLParameter",0,0,"","","System","","","","","","",""
"25.5.4.38","positionCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchFirstPositionCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","subtractHours",0,0,"","","System","","","","","","",""
"25.5.4.38","geoToS2",0,0,"","","System","","","","","","",""
"25.5.4.38","indexOf",0,0,"","","System","
Returns the index of the first element with value 'x' (starting from 1) if it is in the array.
If the array does not contain the searched-for value, the function returns `0`.

Elements set to `NULL` are handled as normal values.
    ","indexOf(arr, x)","- `arr` — An array to search in for `x`. [`Array`](/sql-reference/data-types/array).
- `x` — Value of the first matching element in `arr` for which to return an index. UInt64.
","Returns the index (numbered from one) of the first `x` in `arr` if it exists. Otherwise, returns `0`.","Basic example:

```sql
SELECT indexOf([5, 4, 1, 3], 3)
```

Result:

```text
4
```
Array with nulls:

```sql
SELECT indexOf([1, 3, NULL, NULL], NULL)
```

Result:

```text
3
```
","1.1","Arrays"
"25.5.4.38","emptyArrayString",0,0,"","","System","","","","","","",""
"25.5.4.38","tryBase64URLDecode",0,0,"","","System","Decodes an URL from base64, like base64URLDecode but returns an empty string in case of an error.","tryBase64URLDecode(encodedUrl)","- `encodedURL` — String column or constant. If the string is not a valid Base64-encoded value with URL-specific modifications, returns an empty string.
","A string containing the decoded value of the argument.","valid:

```sql
SELECT tryBase64URLDecode('aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ')
```

Result:

```text
https://clickhouse.com
```
invalid:

```sql
SELECT tryBase64UrlDecode('aHR0cHM6Ly9jbGlja')
```

Result:

```text

```
","24.6","Encoding"
"25.5.4.38","h3IsValid",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayUInt32",0,0,"","","System","","","","","","",""
"25.5.4.38","concatAssumeInjective",0,0,"","","System","","","","","","",""
"25.5.4.38","sinh",0,0,"","","System","","","","","","",""
"25.5.4.38","toModifiedJulianDayOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","multiplyDecimal",0,0,"","","System","
Performs multiplication on two decimals. Result value will be of type [Decimal256](/sql-reference/data-types/decimal).
Result scale can be explicitly specified by `result_scale` argument (const Integer in range `[0, 76]`). If not specified, the result scale is the max scale of given arguments.

:::note
These functions work significantly slower than usual `multiply`.
In case you don't really need controlled precision and/or need fast computation, consider using [multiply](#multiply)
:::
    ","multiplyDecimal(a, b[, result_scale])","- `a` — First value. Type [Decimal](/sql-reference/data-types/decimal).
- `b` — Second value. Type [Decimal](/sql-reference/data-types/decimal).
- `result_scale` — Scale of result. Type [Int/UInt](/sql-reference/data-types/int-uint).
","The result of multiplication with the given scale. Type: [Decimal256](/sql-reference/data-types/decimal).",":

```sql
SELECT multiplyDecimal(toDecimal256(-12, 0), toDecimal32(-2.1, 1), 1)
```

Result:

```text
25.2
```
Difference with regular multiplication:

```sql
SELECT multiplyDecimal(toDecimal256(-12, 0), toDecimal32(-2.1, 1), 1)
```

Result:

```text

┌─multiply(toDecimal64(-12.647, 3), toDecimal32(2.1239, 4))─┐
│                                               -26.8609633 │
└───────────────────────────────────────────────────────────┘
┌─multiplyDecimal(toDecimal64(-12.647, 3), toDecimal32(2.1239, 4))─┐
│                                                         -26.8609 │
└──────────────────────────────────────────────────────────────────┘
    
```
:

```sql

SELECT
    toDecimal64(-12.647987876, 9) AS a,
    toDecimal64(123.967645643, 9) AS b,
    multiplyDecimal(a, b);
SELECT
    toDecimal64(-12.647987876, 9) AS a,
    toDecimal64(123.967645643, 9) AS b,
    a * b;
    
```

Result:

```text

┌─────────────a─┬─────────────b─┬─multiplyDecimal(toDecimal64(-12.647987876, 9), toDecimal64(123.967645643, 9))─┐
│ -12.647987876 │ 123.967645643 │                                                               -1567.941279108 │
└───────────────┴───────────────┴───────────────────────────────────────────────────────────────────────────────┘
Received exception from server (version 22.11.1):
Code: 407. DB::Exception: Received from localhost:9000. DB::Exception: Decimal math overflow:
While processing toDecimal64(-12.647987876, 9) AS a, toDecimal64(123.967645643, 9) AS b, a * b. (DECIMAL_OVERFLOW)
    
```
","22.12","Arithmetic"
"25.5.4.38","tumble",0,0,"","","System","","","","","","",""
"25.5.4.38","ngrams",0,0,"","","System","Splits a UTF-8 string into n-grams symbols.","","","","","","String Splitting"
"25.5.4.38","normalizeQuery",0,0,"","","System","","","","","","",""
"25.5.4.38","randExponential",0,0,"","","System","
Returns a random number from the exponential distribution.
Accepts one parameter - lambda value.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randExponential(0, 5) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","randomString",0,0,"","","System","","","","","","",""
"25.5.4.38","normalizeUTF8NFKD",0,0,"","","System","","","","","","",""
"25.5.4.38","toUnixTimestamp64Milli",0,0,"","","System","","","","","","",""
"25.5.4.38","firstSignificantSubdomainCustom",0,0,"","","System","","","","","","",""
"25.5.4.38","simpleJSONExtractBool",0,0,"","","System","Parses a true/false value from the value of the field named field_name. The result is UInt8.","simpleJSONExtractBool(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns 1 if the value of the field is true, 0 otherwise. This means this function will return 0 including (and not only) in the following cases:
 - If the field doesn't exists.
 - If the field contains true as a string, e.g.: {""field"":""true""}.
 - If the field contains 1 as a numerical value.","simple:

```sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":false,""bar"":true}');
INSERT INTO jsons VALUES ('{""foo"":""true"",""qux"":1}');

SELECT simpleJSONExtractBool(json, 'bar') FROM jsons ORDER BY json;
SELECT simpleJSONExtractBool(json, 'foo') FROM jsons ORDER BY json;
```

Result:

```text
0
1
0
0
```
","","JSON"
"25.5.4.38","normalizeUTF8NFKC",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchFirstIndexCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","normalizeUTF8NFD",0,0,"","","System","","","","","","",""
"25.5.4.38","toDateTime64OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","tid",0,0,"","","System","","","","","","",""
"25.5.4.38","port",0,0,"","","System","Returns the port or `default_port` if there is no port in the URL (or in case of validation error).","","","","","","URL"
"25.5.4.38","subtractSeconds",0,0,"","","System","","","","","","",""
"25.5.4.38","BLAKE3",0,0,"","","System","
    Calculates BLAKE3 hash string and returns the resulting set of bytes as FixedString.
    This cryptographic hash-function is integrated into ClickHouse with BLAKE3 Rust library.
    The function is rather fast and shows approximately two times faster performance compared to SHA-2, while generating hashes of the same length as SHA-256.
    It returns a BLAKE3 hash as a byte array with type FixedString(32).
    ","","","","hash:

```sql
SELECT hex(BLAKE3('ABC'))
```

Result:

```text

```
","","Hash"
"25.5.4.38","toMinute",0,0,"","","System","","","","","","",""
"25.5.4.38","atan",0,1,"","","System","","","","","","",""
"25.5.4.38","arrayLevenshteinDistance",0,0,"","","System","
Calculates Levenshtein distance for two arrays.
","arrayLevenshteinDistance(from, to)","- `from` — first array
- `to` — second array
","Levenshtein distance between the first and the second arrays","Query:

```sql
SELECT arrayLevenshteinDistance([1, 2, 4], [1, 2, 3])
```

Result:

```text

┌─arrayLevenshteinDistance([1, 2, 4], [1, 2, 3])─┐
│                                              1 │
└────────────────────────────────────────────────┘

```
","","Arrays"
"25.5.4.38","ifNotFinite",0,0,"","","System","
Checks whether a floating point value is finite.

You can get a similar result by using the [ternary operator](/sql-reference/functions/conditional-functions#if): `isFinite(x) ? x : y`.
    ","ifNotFinite(x,y)","- `x` — Value to check if infinite. Float32/Float64
- `y` — Fallback value. Float32/Float64
","
- `x` if `x` is finite.
- `y` if `x` is not finite.
    ",":

```sql
SELECT 1/0 AS infimum, ifNotFinite(infimum,42)
```

Result:

```text
inf  42
```
","20.3","Arithmetic"
"25.5.4.38","bitmapSubsetInRange",0,0,"","","System","","","","","","",""
"25.5.4.38","nullIf",0,1,"","","System","","","","","","",""
"25.5.4.38","toDecimal256OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","multiMatchAny",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime64OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","extractKeyValuePairsWithEscaping",0,0,"","","System","Same as `extractKeyValuePairs` but with escaping support.

            Escape sequences supported: `\x`, `\N`, `\a`, `\b`, `\e`, `\f`, `\n`, `\r`, `\t`, `\v` and `\0`.
            Non standard escape sequences are returned as it is (including the backslash) unless they are one of the following:
            `\\`, `'`, `""`, `backtick`, `/`, `=` or ASCII control characters (c <= 31).

            This function will satisfy the use case where pre-escaping and post-escaping are not suitable. For instance, consider the following
            input string: `a: ""aaaa\""bbb""`. The expected output is: `a: aaaa\""bbbb`.
            - Pre-escaping: Pre-escaping it will output: `a: ""aaaa""bbb""` and `extractKeyValuePairs` will then output: `a: aaaa`
            - Post-escaping: `extractKeyValuePairs` will output `a: aaaa\` and post-escaping will keep it as it is.

            Leading escape sequences will be skipped in keys and will be considered invalid for values.

            **Escape sequences with escape sequence support turned on**
            ```sql
            arthur :) select extractKeyValuePairsWithEscaping('age:a\\x0A\\n\\0') as kv

            SELECT extractKeyValuePairsWithEscaping('age:a\\x0A\\n\\0') AS kv

            Query id: 44c114f0-5658-4c75-ab87-4574de3a1645

            ┌─kv───────────────┐
            │ {'age':'a\n\n\0'} │
            └──────────────────┘
            ```","","","","","","Map"
"25.5.4.38","parseDateTime64OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","snowflakeToDateTime64",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleMultiplyByNumber",0,0,"","","System","","","","","","",""
"25.5.4.38","randomStringUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","max2",0,1,"","","System","
    Returns the bigger of two numeric values `x` and `y`. The returned value is of type Float64.
    ","max2(x, y)","- `x` — First value
- `y` — Second value
","Returns the bigger value of `x` and `y`",":

```sql
SELECT max2(-1, 2)
```

Result:

```text
2
```
","21.11","Arithmetic"
"25.5.4.38","mapFromArrays",0,0,"","","System","","","","","","",""
"25.5.4.38","cutToFirstSignificantSubdomainCustomWithWWWRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainCustomWithWWW` but follows stricter rules according to RFC 3986.","","","","","","URL"
"25.5.4.38","initialQueryStartTime",0,0,"","","System","Returns the start time of the initial current query.","initialQueryStartTime()","","Start time of the initial query.","simple:

```sql
SELECT initialQueryStartTime()
```

Result:

```text
2025-01-28 11:38:04
```
","","Other"
"25.5.4.38","parseDateTime",0,0,"","","System","","","","","","",""
"25.5.4.38","empty",0,0,"","","System","","","","","","",""
"25.5.4.38","dotProduct",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayUInt16",0,0,"","","System","","","","","","",""
"25.5.4.38","parseReadableSizeOrZero",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns `0`","parseReadableSizeOrZero(x)","- `x` — Readable size with ISO/IEC 80000-13 or decimal byte unit ([String](../../sql-reference/data-types/string.md))
","Number of bytes, rounded up to the nearest integer, or 0 if unable to parse the input ([UInt64](../../sql-reference/data-types/int-uint.md))","basic:

```sql
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes, parseReadableSizeOrZero(readable_sizes) AS sizes;
```

Result:

```text

┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
│ invalid        │       0 │
└────────────────┴─────────┘
```
","","Other"
"25.5.4.38","parseReadableSize",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it throws an exception.","parseReadableSize(x)","- `x` — Readable size with ISO/IEC 80000-13 or decimal byte unit ([String](../../sql-reference/data-types/string.md))
","Number of bytes, rounded up to the nearest integer ([UInt64](../../sql-reference/data-types/int-uint.md))","basic:

```sql
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB']) AS readable_sizes, parseReadableSize(readable_sizes) AS sizes;
```

Result:

```text

┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
└────────────────┴─────────┘
```
","","Other"
"25.5.4.38","parseTimeDelta",0,0,"","","System","","","","","","",""
"25.5.4.38","stem",0,0,"","","System","","","","","","",""
"25.5.4.38","subtractMinutes",0,0,"","","System","","","","","","",""
"25.5.4.38","e",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayProduct",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonsIntersectionSpherical",0,0,"","","System","","","","","","",""
"25.5.4.38","wkt",0,0,"","","System","","","","","","",""
"25.5.4.38","soundex",0,1,"","","System","Returns Soundex code of a string.","","","","","","String"
"25.5.4.38","polygonPerimeterSpherical",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonsIntersectionCartesian",0,0,"","","System","","","","","","",""
"25.5.4.38","h3PointDistRads",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonsUnionSpherical",0,0,"","","System","","","","","","",""
"25.5.4.38","byteSize",0,0,"","","System","","","","","","",""
"25.5.4.38","IPv4StringToNum",0,0,"","","System","","","","","","",""
"25.5.4.38","positionUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","hasSubsequenceCaseInsensitiveUTF8",0,1,"","","System","","","","","","",""
"25.5.4.38","pi",0,1,"","","System","","","","","","",""
"25.5.4.38","randCanonical",0,0,"","","System","
The function generates pseudo random results with independent and identically distributed uniformly distributed values in [0, 1).
Non-deterministic. Return type is Float64.
        ","","","","randCanonical:

```sql
SELECT randCanonical()
```

Result:

```text

```
","","Random Number"
"25.5.4.38","multiSearchAllPositionsCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","timezoneOffset",0,0,"","","System","","","","","","",""
"25.5.4.38","transform",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayLevenshteinDistanceWeighted",0,0,"","","System","
Calculates Levenshtein distance for two arrays with custom weights for each element. Number of elements for array and its weights should match
","arrayLevenshteinDistanceWeighted(from, to, from_weights, to_weights)","- `from` — first array
- `to` — second array
- `from_weights` — weights for the first array
- `to_weights` — weights for the second array
","Levenshtein distance between the first and the second arrays with custom weights for each element","Query:

```sql
SELECT arrayLevenshteinDistanceWeighted(['A', 'B', 'C'], ['A', 'K', 'L'], [1.0, 2, 3], [3.0, 4, 5])
```

Result:

```text

┌─arrayLevenshteinDistanceWeighted(['A', 'B', 'C'], ['A', 'K', 'L'], [1.0, 2, 3], [3.0, 4, 5])─┐
│                                                                                           14 │
└──────────────────────────────────────────────────────────────────────────────────────────────┘

```
","","Arrays"
"25.5.4.38","base32Encode",0,0,"","","System","
Encode a string with [Base32](https://datatracker.ietf.org/doc/html/rfc4648) encoding.","","- `arg` — A string to be encoded
","","simple_encoding1:

```sql
SELECT base32Encode('a')
```

Result:

```text
ME======
```
simple_encoding2:

```sql
SELECT base32Encode('Hello')
```

Result:

```text
JBSWY3DP
```
","","String"
"25.5.4.38","randConstant",0,0,"","","System","","","","","","",""
"25.5.4.38","randPoisson",0,0,"","","System","
Returns a random number from the poisson distribution.
Accepts one parameter - the mean number of occurrences.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randPoisson(3) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","nowInBlock",0,0,"","","System","","","","","","",""
"25.5.4.38","randNegativeBinomial",0,0,"","","System","
Returns a random number from the negative binomial distribution.
Accepts two parameters - number of experiments and probability of success in each experiment.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randNegativeBinomial(10, 0.1) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","toUnixTimestamp64Micro",0,0,"","","System","","","","","","",""
"25.5.4.38","randBinomial",0,0,"","","System","
Returns a random number from the binomial distribution.
Accepts two parameters - number of experiments and probability of success in each experiment.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randBinomial(10, 0.1) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","mapContains",0,0,"","","System","Checks whether the map has the specified key.","","","","mapContains:

```sql
SELECT mapContains(map('k1', 'v1', 'k2', 'v2'), 'k1')
```

Result:

```text

```
","","Map"
"25.5.4.38","randBernoulli",0,0,"","","System","
Returns a random number from the Bernoulli distribution.
Accepts one parameter - probability of success.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randBernoulli(0.1) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","toInt32OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","randStudentT",0,0,"","","System","
Returns a random number from the t-distribution.
Accepts one parameter - degree of freedom.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randStudentT(5) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","sipHash64",0,0,"","","System","","","","","","",""
"25.5.4.38","catboostEvaluate",0,0,"","","System","","","","","","",""
"25.5.4.38","randNormal",0,0,"","","System","
Returns a random number from the normal distribution.
Accepts two parameters - mean and standard deviation.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randNormal(0, 5) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","in",0,0,"","","System","","","","","","",""
"25.5.4.38","xxh3",0,0,"","","System","Calculates value of XXH3 64-bit hash function. Refer to https://github.com/Cyan4973/xxHash for detailed documentation.","","","","hash:

```sql
SELECT xxh3('ClickHouse')
```

Result:

```text

```
","","Hash"
"25.5.4.38","trimBoth",0,0,"","","System","","","","","","",""
"25.5.4.38","normalizeQueryKeepNames",0,0,"","","System","","","","","","",""
"25.5.4.38","wordShingleMinHashArgUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","variantElement",0,0,"","","System","
Extracts a column with specified type from a `Variant` column.
","variantElement(variant, type_name, [, default_value])","- `variant` — Variant column
- `type_name` — The name of the variant type to extract
- `default_value` — The default value that will be used if variant doesn't have variant with specified type. Can be any type. Optional
","","Example:

```sql

CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT v, variantElement(v, 'String'), variantElement(v, 'UInt64'), variantElement(v, 'Array(UInt64)') FROM test;
```

Result:

```text

┌─v─────────────┬─variantElement(v, 'String')─┬─variantElement(v, 'UInt64')─┬─variantElement(v, 'Array(UInt64)')─┐
│ ᴺᵁᴸᴸ          │ ᴺᵁᴸᴸ                        │                        ᴺᵁᴸᴸ │ []                                 │
│ 42            │ ᴺᵁᴸᴸ                        │                          42 │ []                                 │
│ Hello, World! │ Hello, World!               │                        ᴺᵁᴸᴸ │ []                                 │
│ [1,2,3]       │ ᴺᵁᴸᴸ                        │                        ᴺᵁᴸᴸ │ [1,2,3]                            │
└───────────────┴─────────────────────────────┴─────────────────────────────┴────────────────────────────────────┘

```
","","JSON"
"25.5.4.38","asinh",0,0,"","","System","","","","","","",""
"25.5.4.38","randUniform",0,0,"","","System","
Returns a random number from the uniform distribution in the specified range.
Accepts two parameters - minimum bound and maximum bound.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randUniform(0, 1) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","randomFixedString",0,0,"","","System","","","","","","",""
"25.5.4.38","globalNotNullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt64OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetUInt16",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt16 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","parseDateTime64InJodaSyntaxOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","YYYYMMDDhhmmssToDateTime",0,0,"","","System","
Converts a number containing the year, month, day, hour, minute and second number to a DateTime.
The output is undefined if the input does not encode a valid DateTime value.
This functions is the opposite of function `toYYYYMMDD()`.
","","","","","","Dates and Times"
"25.5.4.38","readWKTPolygon",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayShiftLeft",0,0,"","","System","
Returns an array of the same size as the original array with elements shifted
to the left by the specified number of positions. New elements are filled with
provided default values or default values of the corresponding type.
[example:simple_int]
[example:overflow_int]
[example:simple_string]
[example:simple_array]
[example:simple_nested_array]

Negative shift values are treated as shifting to the right by the absolute
value of the shift.
[example:negative_shift_int]

The default value must be of the same type as the array elements.
[example:simple_int_with_default]
[example:simple_string_with_default]
[example:simple_array_with_default]
[example:cast_array_with_default]
","","","","simple_int:

```sql
SELECT arrayShiftLeft([1, 2, 3, 4, 5], 3)
```

Result:

```text
[4, 5, 0, 0, 0]
```
negative_shift_int:

```sql
SELECT arrayShiftLeft([1, 2, 3, 4, 5], -3)
```

Result:

```text
[0, 0, 0, 1, 2]
```
overflow_int:

```sql
SELECT arrayShiftLeft([1, 2, 3, 4, 5], 8)
```

Result:

```text
[0, 0, 0, 0, 0]
```
simple_string:

```sql
SELECT arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3)
```

Result:

```text
['d', 'e', '', '', '']
```
simple_array:

```sql
SELECT arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2)
```

Result:

```text
[[5, 6], [], []]
```
simple_nested_array:

```sql
SELECT arrayShiftLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)
```

Result:

```text
[[[5, 6], [7, 8]], []]
```
simple_int_with_default:

```sql
SELECT arrayShiftLeft([1, 2, 3, 4, 5], 3, 7)
```

Result:

```text
[4, 5, 7, 7, 7]
```
simple_string_with_default:

```sql
SELECT arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3, 'foo')
```

Result:

```text
['d', 'e', 'foo', 'foo', 'foo']
```
simple_array_with_default:

```sql
SELECT arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2, [7, 8])
```

Result:

```text
[[5, 6], [7, 8], [7, 8]]
```
cast_array_with_default:

```sql
SELECT arrayShiftLeft(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000)
```

Result:

```text
[2, 3, 4, 5, 6, 1000]
```
","","Arrays"
"25.5.4.38","netloc",0,0,"","","System","","","","","","",""
"25.5.4.38","regionToDistrict",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpret",0,0,"","","System","","","","","","",""
"25.5.4.38","appendTrailingCharIfAbsent",0,0,"","","System","","","","","","",""
"25.5.4.38","negate",0,0,"","","System","Negates the argument `x`. The result is always signed.","negate(x)","- `x` — The value to negate.
","Returns -x from x",":

```sql
SELECT negate(10)
```

Result:

```text
-10
```
","1.1","Arithmetic"
"25.5.4.38","queryID",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsFixedString",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsString",0,0,"","","System","","","","","","",""
"25.5.4.38","snowflakeToDateTime",0,0,"","","System","","","","","","",""
"25.5.4.38","notEquals",0,0,"","","System","","","","","","",""
"25.5.4.38","left",0,1,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsDateTime",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalDay",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsFloat32",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime64",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsInt256",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayToSingle",0,0,"","","System","","","","","","",""
"25.5.4.38","h3ToChildren",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsInt128",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfMillisecond",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsInt64",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsInt16",0,0,"","","System","","","","","","",""
"25.5.4.38","normalizedQueryHashKeepNames",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt256OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleModulo",0,0,"","","System","","","","","","",""
"25.5.4.38","toStringCutToZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt8OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","not",0,1,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsInt8",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt256OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt32",0,0,"","","System","","","","","","",""
"25.5.4.38","decodeHTMLComponent",0,0,"","","System","","","","","","",""
"25.5.4.38","fromUnixTimestamp",0,0,"","","System","","","","","","",""
"25.5.4.38","LinfNorm",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsUInt8",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt8",0,0,"","","System","","","","","","",""
"25.5.4.38","range",0,0,"","","System","","","","","","",""
"25.5.4.38","kafkaMurmurHash",0,0,"","","System","","","","","","",""
"25.5.4.38","notIn",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetUInt8OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt8 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","arrayIntersect",0,0,"","","System","Takes multiple arrays and returns an array with elements which are present in all source arrays. The result contains only unique values.","arrayIntersect(arr, arr1, ..., arrN)","- `arrN` — N arrays from which to make the new array. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array with distinct elements that are present in all N arrays. [`Array(T)`](/sql-reference/data-types/array).","Usage example:

```sql
SELECT
arrayIntersect([1, 2], [1, 3], [2, 3]) AS empty_intersection,
arrayIntersect([1, 2], [1, 3], [1, 4]) AS non_empty_intersection

```

Result:

```text

┌─non_empty_intersection─┬─empty_intersection─┐
│ []                     │ [1]                │
└────────────────────────┴────────────────────┘

```
","1.1","Arrays"
"25.5.4.38","subtractDays",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramSimHashCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","repeat",0,1,"","","System","","","","","","",""
"25.5.4.38","JSONExtractKeysAndValues",0,0,"","","System","","","","","","",""
"25.5.4.38","extractKeyValuePairs",0,0,"","","System","Extracts key-value pairs from any string. The string does not need to be 100% structured in a key value pair format;

            It can contain noise (e.g. log files). The key-value pair format to be interpreted should be specified via function arguments.

            A key-value pair consists of a key followed by a `key_value_delimiter` and a value. Quoted keys and values are also supported. Key value pairs must be separated by pair delimiters.

            **Syntax**
            ```sql
            extractKeyValuePairs(data, [key_value_delimiter], [pair_delimiter], [quoting_character])
            ```

            **Arguments**
            - `data` - String to extract key-value pairs from. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `key_value_delimiter` - Character to be used as delimiter between the key and the value. Defaults to `:`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `pair_delimiters` - Set of character to be used as delimiters between pairs. Defaults to `\space`, `,` and `;`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `quoting_character` - Character to be used as quoting character. Defaults to `""`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).

            **Returned values**
            - The extracted key-value pairs in a Map(String, String).

            **Examples**

            Query:

            **Simple case**
            ```sql
            arthur :) select extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv

            SELECT extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv

            Query id: f9e0ca6f-3178-4ee2-aa2c-a5517abb9cee

            ┌─kv──────────────────────────────────────────────────────────────────────┐
            │ {'name':'neymar','age':'31','team':'psg','nationality':'brazil'}        │
            └─────────────────────────────────────────────────────────────────────────┘
            ```

            **Single quote as quoting character**
            ```sql
            arthur :) select extractKeyValuePairs('name:\'neymar\';\'age\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\'') as kv

            SELECT extractKeyValuePairs('name:\'neymar\';\'age\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\'') as kv

            Query id: 0e22bf6b-9844-414a-99dc-32bf647abd5e

            ┌─kv───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
            │ {'name':'neymar','age':'31','team':'psg','nationality':'brazil','last_key':'last_value'}                                 │
            └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
            ```

            **Escape sequences without escape sequences support**
            ```sql
            arthur :) select extractKeyValuePairs('age:a\\x0A\\n\\0') as kv

            SELECT extractKeyValuePairs('age:a\\x0A\\n\\0') AS kv

            Query id: e9fd26ee-b41f-4a11-b17f-25af6fd5d356

            ┌─kv────────────────────┐
            │ {'age':'a\\x0A\\n\\0'} │
            └───────────────────────┘
            ```","","","","","","Map"
"25.5.4.38","replicate",0,0,"","","System","","","","","","",""
"25.5.4.38","formatRow",0,0,"","","System","","","","","","",""
"25.5.4.38","detectLanguage",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleElement",0,0,"","","System","","","","","","",""
"25.5.4.38","roundAge",0,0,"","","System","","","","","","",""
"25.5.4.38","SHA224",0,0,"","","System","Calculates the SHA224 hash of the given string.","SELECT SHA224(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA224 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

```sql
SELECT HEX(SHA224('abc'));
```

Result:

```text

┌─hex(SHA224('abc'))───────────────────────────────────────┐
│ 23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7 │
└──────────────────────────────────────────────────────────┘
            
```
","","Hash"
"25.5.4.38","toDecimal32OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","partitionId",0,0,"","","System","","","","","","",""
"25.5.4.38","mapSubtract",0,0,"","","System","","","","","","",""
"25.5.4.38","roundToExp2",0,0,"","","System","","","","","","",""
"25.5.4.38","wordShingleMinHashCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","s2CapUnion",0,0,"","","System","","","","","","",""
"25.5.4.38","firstLine",0,0,"","","System","Returns first line of a multi-line string.","firstLine(string)","- `string` — The string to process.
","The first line of the string or the whole string if there is no line separators.","Return first line:

```sql
firstLine('Hello\nWorld')
```

Result:

```text
'Hello'
```
Return whole string:

```sql
firstLine('Hello World')
```

Result:

```text
'Hello World'
```
","","String"
"25.5.4.38","currentProfiles",0,0,"","","System","","","","","","",""
"25.5.4.38","CAST",0,1,"","","System","","","","","","",""
"25.5.4.38","mapUpdate",0,0,"","","System","","","","","","",""
"25.5.4.38","currentSchemas",0,1,"","","System","
Returns a single-element array with the name of the current database

Requires a boolean parameter, but it is ignored actually. It is required just for compatibility with the implementation of this function in other DB engines.

[example:common]
","","","","common:

```sql
SELECT current_schemas(true);
```

Result:

```text
['default']
```
","","Other"
"25.5.4.38","reinterpretAsUInt256",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramDistanceUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","s2RectUnion",0,0,"","","System","","","","","","",""
"25.5.4.38","filesystemAvailable",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsDate",0,0,"","","System","","","","","","",""
"25.5.4.38","s2ToGeo",0,0,"","","System","","","","","","",""
"25.5.4.38","toMonday",0,0,"","","System","","","","","","",""
"25.5.4.38","toColumnTypeName",0,0,"","","System","","","","","","",""
"25.5.4.38","overlayUTF8",0,0,"","","System","
Replace a part of a string `input` with another string `replace`, starting at 1-based index `offset`. By default, the number of characters removed from `input` equals the length of `replace`. If `length` (the optional fourth argument) is specified, a different number of characters is removed.

Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.
","","","","","","String Replacement"
"25.5.4.38","positiveModuloOrNull",0,1,"","","System","
Calculates the remainder when dividing `a` by `b`. Similar to function `positiveModulo` except that `positiveModuloOrNull` will return NULL
if the right argument is 0.
        ","","","","positiveModuloOrNull:

```sql
SELECT positiveModuloOrNull(1, 0);
```

Result:

```text

```
","","Arithmetic"
"25.5.4.38","sipHash128Reference",0,0,"","","System","Like [sipHash128](#hash_functions-siphash128) but implements the 128-bit algorithm from the original authors of SipHash.","","","","hash:

```sql
SELECT hex(sipHash128Reference('foo', '\x01', 3))
```

Result:

```text

```
","","Hash"
"25.5.4.38","seriesOutliersDetectTukey",0,0,"","","System","
Detects outliers in series data using [Tukey Fences](https://en.wikipedia.org/wiki/Outlier#Tukey%27s_fences).

**Syntax**

```sql
seriesOutliersDetectTukey(series);
seriesOutliersDetectTukey(series, min_percentile, max_percentile, k);
```

**Arguments**

- `series` - An array of numeric values.
- `min_quantile` - The minimum quantile to be used to calculate inter-quantile range [(IQR)](https://en.wikipedia.org/wiki/Interquartile_range). The value must be in range [0.02,0.98]. The default is 0.25.
- `max_quantile` - The maximum quantile to be used to calculate inter-quantile range (IQR). The value must be in range [0.02, 0.98]. The default is 0.75.
- `k` - Non-negative constant value to detect mild or stronger outliers. The default value is 1.5

At least four data points are required in `series` to detect outliers.

**Returned value**

- Returns an array of the same length as the input array where each value represents score of possible anomaly of corresponding element in the series. A non-zero score indicates a possible anomaly.

Type: [Array](../../sql-reference/data-types/array.md).

**Examples**

Query:

```sql
SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4, 5, 12, 45, 12, 3, 3, 4, 5, 6]) AS print_0;
```

Result:

```text
┌───────────print_0─────────────────┐
│[0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0] │
└───────────────────────────────────┘
```

Query:

```sql
SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4.50, 5, 12, 45, 12, 3.40, 3, 4, 5, 6], 0.2, 0.8, 1.5) AS print_0;
```

Result:

```text
┌─print_0──────────────────────────────┐
│ [0,0,0,0,0,0,0,0,0,19.5,0,0,0,0,0,0] │
└──────────────────────────────────────┘
```","","","","","","Time Series"
"25.5.4.38","positiveModulo",0,1,"","","System","
Calculates the remainder when dividing `x` by `y`. Similar to function
`modulo` except that `positiveModulo` always return non-negative number.
    ","positiveModulo(x, y)","- `x` — The dividend
- `y` — The divisor (modulus)
","
Returns the difference between `x` and the nearest integer not greater than
`x` divisible by `y`.
    ","positiveModulo:

```sql
SELECT positiveModulo(-1, 10)
```

Result:

```text
9
```
","22.11","Arithmetic"
"25.5.4.38","intExp2",0,0,"","","System","","","","","","",""
"25.5.4.38","toYearNumSinceEpoch",0,0,"","","System","Returns amount of years passed from year 1970","toYearNumSinceEpoch(date)","- `date` — Date, DateTime or DateTime64
","Positive integer","Example:

```sql
SELECT toYearNumSinceEpoch(toDate('2024-10-01'))
```

Result:

```text
54
```
","25.3","Dates and Times"
"25.5.4.38","getServerPort",0,0,"","","System","","","","","","",""
"25.5.4.38","runningDifference",0,0,"","","System","","","","","","",""
"25.5.4.38","getMaxTableNameLengthForDatabase",0,0,"","","System","Returns the maximum table name length in a specified database.","getMaxTableNameLengthForDatabase(database_name)","- `database_name` — The name of the specified database. String.
","Returns the length of the maximum table name, an Integer","typical:

```sql
SELECT getMaxTableNameLengthForDatabase('default');
```

Result:

```text

            ┌─getMaxTableNameLengthForDatabase('default')─┐
            │                                         206 │
            └─────────────────────────────────────────────┘
            
```
","","Other"
"25.5.4.38","parseDateTime64InJodaSyntaxOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","concatWithSeparatorAssumeInjective",0,0,"","","System","
Same as concatWithSeparator, the difference is that you need to ensure that concatWithSeparator(sep, expr1, expr2, expr3...) → result is injective, it will be used for optimization of GROUP BY.

The function is named ""injective"" if it always returns different result for different values of arguments. In other words: different arguments never yield identical result.
        ","","","","concatWithSeparatorAssumeInjective:

```sql
SELECT concatWithSeparatorAssumeInjective('a', '1', '2', '3')
```

Result:

```text

```
","","String"
"25.5.4.38","cutWWW",0,0,"","","System","","","","","","",""
"25.5.4.38","buildId",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramMinHashCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","randFisherF",0,0,"","","System","
Returns a random number from the f-distribution.
The F-distribution is the distribution of X = (S1 / d1) / (S2 / d2) where d1 and d2 are degrees of freedom.
Accepts two parameters - degrees of freedom.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randFisherF(5) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","firstSignificantSubdomainCustomRFC",0,0,"","","System","","","","","","",""
"25.5.4.38","serverUUID",0,0,"","","System","","","","","","",""
"25.5.4.38","hostName",0,0,"","","System","","","","","","",""
"25.5.4.38","L2SquaredNorm",0,0,"","","System","","","","","","",""
"25.5.4.38","mapPartialReverseSort",0,0,"","","System","The same as arrayPartialReverseSort.","","","","mapPartialReverseSort:

```sql
SELECT mapPartialReverseSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))
```

Result:

```text

```
","","Map"
"25.5.4.38","extractURLParameter",0,0,"","","System","","","","","","",""
"25.5.4.38","zookeeperSessionUptime",0,0,"","","System","","","","","","",""
"25.5.4.38","jumpConsistentHash",0,0,"","","System","","","","","","",""
"25.5.4.38","minSampleSizeConversion",0,0,"","","System","","","","","","",""
"25.5.4.38","displayName",0,0,"","","System","
Returns the value of `display_name` from config or server FQDN if not set.

[example:displayName]
","","","","displayName:

```sql
SELECT displayName();
```

Result:

```text

```
","","Other"
"25.5.4.38","sigmoid",0,0,"","","System","","","","","","",""
"25.5.4.38","sign",0,1,"","","System","","","","","","",""
"25.5.4.38","sin",0,1,"","","System","Returns the sine of the argument.","sin(x)","- `x` — The number whose sine will be returned. (U)Int*, Float* or Decimal*.
","The sine of x.","simple:

```sql
SELECT sin(1.23)
```

Result:

```text
0.9424888019316975
```
","","Mathematical"
"25.5.4.38","sleepEachRow",0,0,"","","System","","","","","","",""
"25.5.4.38","YYYYMMDDToDate",0,0,"","","System","
Converts a number containing the year, month and day number to a Date.
This functions is the opposite of function `toYYYYMMDD()`.
The output is undefined if the input does not encode a valid Date value.
","","","","","","Dates and Times"
"25.5.4.38","sleep",0,0,"","","System","","","","","","",""
"25.5.4.38","farmHash64",0,0,"","","System","","","","","","",""
"25.5.4.38","snowflakeIDToDateTime64",0,0,"","","System","Returns the timestamp component of a [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as a value of type [DateTime64](../data-types/datetime64.md).","snowflakeIDToDateTime64(value[, epoch[, time_zone]])","- `value` — Snowflake ID. [UInt64](../data-types/int-uint.md)
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
- `time_zone` — [Timezone](/operations/server-configuration-parameters/settings.md/#server_configuration_parameters-timezone). The function parses `time_string` according to the timezone. Optional. [String](../data-types/string.md)
","The timestamp component of `value` as a [DateTime64](../data-types/datetime64.md) with scale = 3, i.e. millisecond precision.","simple:

```sql
SELECT snowflakeIDToDateTime64(7204436857747984384)
```

Result:

```text
2024-06-06 10:59:58
```
","24.6","UUID"
"25.5.4.38","polygonConvexHullCartesian",0,0,"","","System","","","","","","",""
"25.5.4.38","murmurHash3_32",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayElementOrNull",0,0,"","","System","
Get the element with the index `n`from the array `arr`. `n` must be any integer type. Indexes in an array begin from one.

Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, `arr[-1]` is the last item in the array.

If the index falls outside of the bounds of an array, it returns `NULL` instead of a default value.
        ","","","","","","Arrays"
"25.5.4.38","mortonDecode",0,0,"","","System","
Decodes a Morton encoding (ZCurve) into the corresponding unsigned integer tuple

The function has two modes of operation:
- Simple
- Expanded

Simple: accepts a resulting tuple size as a first argument and the code as a second argument.
[example:simple]
Will decode into: `(1,2,3,4)`
The resulting tuple size cannot be more than 8

Expanded: accepts a range mask (tuple) as a first argument and the code as a second argument.
Each number in mask configures the amount of range shrink
1 - no shrink
2 - 2x shrink
3 - 3x shrink
....
Up to 8x shrink.
[example:range_shrank]
Note: see mortonEncode() docs on why range change might be beneficial.
Still limited to 8 numbers at most.

Morton code for one argument is always the argument itself (as a tuple).
[example:identity]
Produces: `(1)`

You can shrink one argument too:
[example:identity_shrank]
Produces: `(128)`

The function accepts a column of codes as a second argument:
[example:from_table]

The range tuple must be a constant:
[example:from_table_range]
","","","","simple:

```sql
SELECT mortonDecode(4, 2149)
```

Result:

```text

```
range_shrank:

```sql
SELECT mortonDecode((1,2), 1572864)
```

Result:

```text

```
identity:

```sql
SELECT mortonDecode(1, 1)
```

Result:

```text

```
identity_shrank:

```sql
SELECT mortonDecode(tuple(2), 32768)
```

Result:

```text

```
from_table:

```sql
SELECT mortonDecode(2, code) FROM table
```

Result:

```text

```
from_table_range:

```sql
SELECT mortonDecode((1,2), code) FROM table
```

Result:

```text

```
","","Encoding"
"25.5.4.38","subBitmap",0,0,"","","System","","","","","","",""
"25.5.4.38","defaultValueOfArgumentType",0,0,"","","System","","","","","","",""
"25.5.4.38","base64Decode",0,0,"","","System","Accepts a String and decodes it from base64, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-4). Throws an exception in case of an error. Alias: FROM_BASE64.","base64Decode(encoded)","- `encoded` — String column or constant. If the string is not a valid Base64-encoded value, an exception is thrown.
","A string containing the decoded value of the argument.","Example:

```sql
SELECT base64Decode('Y2xpY2tob3VzZQ==')
```

Result:

```text
clickhouse
```
","18.16","Encoding"
"25.5.4.38","decrypt",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt16OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toWeek",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsUInt32",0,0,"","","System","","","","","","",""
"25.5.4.38","base64URLDecode",0,0,"","","System","Accepts a base64-encoded URL and decodes it from base64 with URL-specific modifications, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-5).","base64URLDecode(encodedURL)","- `encodedURL` — String column or constant. If the string is not a valid Base64-encoded value, an exception is thrown.
","A string containing the decoded value of the argument.","Example:

```sql
SELECT base64URLDecode('aHR0cDovL2NsaWNraG91c2UuY29t')
```

Result:

```text
https://clickhouse.com
```
","24.6","Encoding"
"25.5.4.38","arrayDotProduct",0,0,"","","System","","","","","","",""
"25.5.4.38","punycodeEncode",0,0,"","","System","
Computes a Punycode representation of a string.","punycodeEncode(str)","- `str` — Input string
","The punycode representation [String](/sql-reference/data-types/string.md).","simple:

```sql
SELECT punycodeEncode('München') AS puny;
```

Result:

```text

┌─puny───────┐
│ Mnchen-3ya │
└────────────┘
            
```
","","Encoding"
"25.5.4.38","arrayElement",0,0,"","","System","
Get the element with the index `n` from the array `arr`. `n` must be any integer type. Indexes in an array begin from one.

Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, `arr[-1]` is the last item in the array.

If the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.), except for the case with a non-constant array and a constant index 0 (in this case there will be an error `Array indices are 1-based`).
        ","","","","","","Arrays"
"25.5.4.38","RIPEMD160",0,0,"","","System","Calculates the RIPEMD-160 hash of the given string.","SELECT RIPEMD160(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The RIPEMD160 hash of the given input string returned as a [FixedString(20)](../../sql-reference/data-types/fixedstring.md).",":

```sql
SELECT HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'));
```

Result:

```text

┌─HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'))─┐
│ 37F332F68DB77BD9D7EDD4969571AD671CF9DD3B                      │
└───────────────────────────────────────────────────────────────┘
         
```
","","Hash"
"25.5.4.38","sqidDecode",0,0,"","","System","
Transforms a [Sqid](https://sqids.org/) back into an array of numbers.","sqidDecode(number1, ...)","- `sqid` — A sqid
","An array of [UInt64](/sql-reference/data-types/int-uint.md).","simple:

```sql
SELECT sqidDecode('gXHfJ1C6dN');
```

Result:

```text

┌─sqidDecode('gXHfJ1C6dN')─┐
│ [1,2,3,4,5]              │
└──────────────────────────┘
            
```
","","Encoding"
"25.5.4.38","arrayReverseSplit",0,0,"","","System","","","","","","",""
"25.5.4.38","transactionOldestSnapshot",0,0,"","","System","","","","","","",""
"25.5.4.38","dumpColumnStructure",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchFirstIndex",0,0,"","","System","","","","","","",""
"25.5.4.38","ngramMinHashArg",0,0,"","","System","","","","","","",""
"25.5.4.38","snowflakeIDToDateTime",0,0,"","","System","Returns the timestamp component of a [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as a value of type [DateTime](../data-types/datetime.md).","snowflakeIDToDateTime(value[, epoch[, time_zone]])","- `value` — Snowflake ID. [UInt64](../data-types/int-uint.md)
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
- `time_zone` — [Timezone](/operations/server-configuration-parameters/settings.md/#server_configuration_parameters-timezone). The function parses `time_string` according to the timezone. Optional. [String](../data-types/string.md)
","The timestamp component of `value` as a [DateTime](../data-types/datetime.md) value.","simple:

```sql
SELECT snowflakeIDToDateTime(7204436857747984384)
```

Result:

```text
2024-06-06 10:59:58
```
","24.6","UUID"
"25.5.4.38","protocol",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchAllPositionsUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","divideOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","toYearWeek",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt8",0,0,"","","System","","","","","","",""
"25.5.4.38","s2RectContains",0,0,"","","System","","","","","","",""
"25.5.4.38","synonyms",0,1,"","","System","","","","","","",""
"25.5.4.38","ULIDStringToDateTime",0,0,"","","System","
This function extracts the timestamp from a ULID and returns it as a DateTime64(3) typed value.
The function expects the ULID to be provided as the first argument, which can be either a String or a FixedString(26) data type.
An optional second argument can be passed to specify a timezone for the timestamp.
","","","","ulid:

```sql
SELECT ULIDStringToDateTime(generateULID())
```

Result:

```text

```
timezone:

```sql
SELECT ULIDStringToDateTime(generateULID(), 'Asia/Istanbul')
```

Result:

```text

```
","","ULID"
"25.5.4.38","addNanoseconds",0,0,"","","System","","","","","","",""
"25.5.4.38","timestamp",0,1,"","","System","
Converts the first argument 'expr' to type DateTime64(6).
If the second argument 'expr_time' is provided, it adds the specified time to the converted value.
:::","timestamp(expr[, expr_time])","- `expr` — Date or date with time. Type: String.
- `expr_time` — Time to add. Type: String.
","The result of conversion and, optionally, addition. Type: DateTime64(6).","timestamp:

```sql
SELECT timestamp('2013-12-31')
```

Result:

```text
2013-12-31 00:00:00.000000
```
timestamp:

```sql
SELECT timestamp('2013-12-31 12:00:00')
```

Result:

```text
2013-12-31 12:00:00.000000
```
timestamp:

```sql
SELECT timestamp('2013-12-31 12:00:00', '12:00:00.11')
```

Result:

```text
2014-01-01 00:00:00.110000
```
","","Dates and Times"
"25.5.4.38","toDayOfWeek",0,0,"","","System","","","","","","",""
"25.5.4.38","randChiSquared",0,0,"","","System","
Returns a random number from the chi-squared distribution (a distribution of a sum of the squares of k independent standard normal random variables).
Accepts one parameter - degree of freedom.

Typical usage:
[example:typical]
","","","","typical:

```sql
SELECT randChiSquared(5) FROM numbers(100000);
```

Result:

```text

```
","","Random Number"
"25.5.4.38","toStartOfYear",0,0,"","","System","","","","","","",""
"25.5.4.38","demangle",0,0,"","","System","","","","","","",""
"25.5.4.38","abs",0,1,"","","System","Calculates the absolute value of `x`. Has no effect if `x` is of an unsigned type. If `x` is of a signed type, it returns an unsigned number.","abs(x)","- `x` — Value to get the absolute value of
","The absolute value of `x`",":

```sql
SELECT abs(-0.5)
```

Result:

```text
0.5
```
","1.1","Arithmetic"
"25.5.4.38","toValidUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","bin",0,1,"","","System","","","","","","",""
"25.5.4.38","toDayOfYear",0,0,"","","System","","","","","","",""
"25.5.4.38","currentRoles",0,0,"","","System","","","","","","",""
"25.5.4.38","mapSort",0,0,"","","System","The same as arraySort.","","","","mapSort:

```sql
SELECT mapSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))
```

Result:

```text

```
","","Map"
"25.5.4.38","h3CellAreaRads2",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayAUCPR",0,0,"","","System","","","","","","",""
"25.5.4.38","SHA1",0,0,"","","System","Calculates the SHA1 hash of the given string.","SELECT SHA1(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The SHA1 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

```sql
SELECT HEX(SHA1('abc'));
```

Result:

```text

┌─hex(SHA1('abc'))─────────────────────────┐
│ A9993E364706816ABA3E25717850C26C9CD0D89D │
└──────────────────────────────────────────┘
            
```
","","Hash"
"25.5.4.38","toModifiedJulianDay",0,0,"","","System","","","","","","",""
"25.5.4.38","toMonth",0,0,"","","System","","","","","","",""
"25.5.4.38","greatest",0,1,"","","System","","","","","","",""
"25.5.4.38","toRelativeMinuteNum",0,0,"","","System","","","","","","",""
"25.5.4.38","hypot",0,1,"","","System","","","","","","",""
"25.5.4.38","initcap",0,1,"","","System","","","","","","",""
"25.5.4.38","dictGetDateTimeOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the DateTime if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","file",0,0,"","","System","","","","","","",""
"25.5.4.38","toRelativeMonthNum",0,0,"","","System","","","","","","",""
"25.5.4.38","multiFuzzyMatchAny",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfWeek",0,0,"","","System","","","","","","",""
"25.5.4.38","toDecimal256",0,0,"","","System","","","","","","",""
"25.5.4.38","asin",0,1,"","","System","
Calculates the arcsine of the argument.

Takes arbitrary numeric type, which includes floating point and integer numbers, as well as big integers and decimals and returns Float64.

For arguments in range [-1, 1] it returns the value in range of [-pi() / 2, pi() / 2].

It represents an inverse function to function 'sin' on this range:
[example:inverse]

It always returns Float64, even if the argument has Float32 type:
[example:float32]

For arguments outside of this range, it returns nan:
[example:nan]

Every self-respectful data scientist knows how to apply arcsine to improve ads click-through rate with ClickHouse.
For more details, see [https://en.wikipedia.org/wiki/Inverse_trigonometric_functions].
","","","","inverse:

```sql
SELECT asin(1.0) = pi() / 2, sin(asin(1)), asin(sin(1))
```

Result:

```text

```
float32:

```sql
SELECT toTypeName(asin(1.0::Float32))
```

Result:

```text

```
nan:

```sql
SELECT asin(1.1), asin(-2), asin(inf), asin(nan)
```

Result:

```text

```
","","Mathematical"
"25.5.4.38","cutFragment",0,0,"","","System","","","","","","",""
"25.5.4.38","h3Line",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchFirstPositionCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","tokens",0,0,"","","System","Splits the text into tokens by a given tokenizer.","","","","","","String Splitting"
"25.5.4.38","emptyArrayFloat64",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchAnyUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","age",0,1,"","","System","","","","","","",""
"25.5.4.38","mapConcat",0,0,"","","System","The same as arrayConcat.","","","","mapConcat:

```sql
SELECT mapConcat(map('k1', 'v1'), map('k2', 'v2'))
```

Result:

```text

```
","","Map"
"25.5.4.38","subtractNanoseconds",0,0,"","","System","","","","","","",""
"25.5.4.38","queryStringAndFragment",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt32OrDefault",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayFloat32",0,0,"","","System","","","","","","",""
"25.5.4.38","multiFuzzyMatchAllIndices",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayInt32",0,0,"","","System","","","","","","",""
"25.5.4.38","array",0,0,"","","System","","","","","","",""
"25.5.4.38","simpleJSONExtractString",0,0,"","","System","Parses String in double quotes from the value of the field named field_name.

        There is currently no support for code points in the format \uXXXX\uYYYY that are not from the basic multilingual plane (they are converted to CESU-8 instead of UTF-8).","simpleJSONExtractString(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the value of a field as a String, including separators. The value is unescaped. It returns an empty String: if the field doesn't contain a double quoted string, if unescaping fails or if the field doesn't exist.","simple:

```sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""\\n\\u0000""}');
INSERT INTO jsons VALUES ('{""foo"":""\\u263""}');
INSERT INTO jsons VALUES ('{""foo"":""\\u263a""}');
INSERT INTO jsons VALUES ('{""foo"":""hello}');

SELECT simpleJSONExtractString(json, 'foo') FROM jsons ORDER BY json;
```

Result:

```text
\n\0

☺

```
","","JSON"
"25.5.4.38","toUInt128",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayUInt64",0,0,"","","System","","","","","","",""
"25.5.4.38","mapKeys",0,0,"","","System","Returns an array with the keys of map.","","","","mapKeys:

```sql
SELECT mapKeys(map('k1', 'v1', 'k2', 'v2'))
```

Result:

```text

```
","","Map"
"25.5.4.38","arrayEnumerate",0,0,"","","System","
Returns the array `[1, 2, 3, ..., length (arr)]`

This function is normally used with the [`ARRAY JOIN`](/sql-reference/statements/select/array-join) clause. It allows counting something just
once for each array after applying `ARRAY JOIN`.
This function can also be used in higher-order functions. For example, you can use it to get array indexes for elements that match a condition.
","arrayEnumerate(arr)","- `arr` — The array to enumerate. [`Array`](/sql-reference/data-types/array).
","Returns the array `[1, 2, 3, ..., length (arr)]`. Array(UInt32)","Basic example with ARRAY JOIN:

```sql

CREATE TABLE test
(
    `id` UInt8,
    `tag` Array(String),
    `version` Array(String)
)
ENGINE = MergeTree
ORDER BY id;

INSERT INTO test VALUES (1, ['release-stable', 'dev', 'security'], ['2.4.0', '2.6.0-alpha', '2.4.0-sec1']);

SELECT
    id,
    tag,
    version,
    seq
FROM test
ARRAY JOIN
    tag,
    version,
    arrayEnumerate(tag) AS seq
    
```

Result:

```text

┌─id─┬─tag────────────┬─version─────┬─seq─┐
│  1 │ release-stable │ 2.4.0       │   1 │
│  1 │ dev            │ 2.6.0-alpha │   2 │
│  1 │ security       │ 2.4.0-sec1  │   3 │
└────┴────────────────┴─────────────┴─────┘
    
```
","1.1","Arrays"
"25.5.4.38","tupleNegate",0,0,"","","System","","","","","","",""
"25.5.4.38","toRelativeQuarterNum",0,0,"","","System","","","","","","",""
"25.5.4.38","widthBucket",0,0,"","","System","
Returns the number of the bucket in which `operand` falls in a histogram having `count` equal-width buckets spanning the range `low` to `high`. Returns `0` if `operand < low`, and returns `count+1` if `operand >= high`.

`operand`, `low`, `high` can be any native number type. `count` can only be unsigned native integer and its value cannot be zero.

**Syntax**

```sql
widthBucket(operand, low, high, count)
```

There is also a case insensitive alias called `WIDTH_BUCKET` to provide compatibility with other databases.

**Example**

Query:
[example:simple]

Result:

```text
┌─widthBucket(10.15, -8.6, 23, 18)─┐
│                               11 │
└──────────────────────────────────┘
```
","","","","simple:

```sql
SELECT widthBucket(10.15, -8.6, 23, 18)
```

Result:

```text

```
","","Mathematical"
"25.5.4.38","toNullable",0,0,"","","System","","","","","","",""
"25.5.4.38","formatReadableSize",0,0,"","","System","","","","","","",""
"25.5.4.38","logTrace",0,0,"","","System","","","","","","",""
"25.5.4.38","minus",0,0,"","","System","
Calculates the difference of two values `a` and `b`. The result is always signed.
Similar to plus, it is possible to subtract an integer from a date or date with time.
Additionally, subtraction between date with time is supported, resulting in the time difference between them.
    ","minus(x, y)","- `x` — Minuend
- `y` — Subtrahend
","x minus y","Subtracting two numbers:

```sql
SELECT minus(10,5)
```

Result:

```text
5
```
Subtracting an integer and a date:

```sql
SELECT minus(toDate('2025-01-01'),5)
```

Result:

```text
2024-12-27
```
","1.1","Arithmetic"
"25.5.4.38","bitmapToArray",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayMax",0,0,"","","System","","","","","","",""
"25.5.4.38","toRelativeYearNum",0,0,"","","System","","","","","","",""
"25.5.4.38","LpNormalize",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfDay",0,0,"","","System","","","","","","",""
"25.5.4.38","toYYYYMMDD",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfFifteenMinutes",0,0,"","","System","","","","","","",""
"25.5.4.38","toRelativeWeekNum",0,0,"","","System","","","","","","",""
"25.5.4.38","wordShingleMinHashArg",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayROCAUC",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfFiveMinutes",0,0,"","","System","","","","","","",""
"25.5.4.38","sparseGrams",0,0,"","","System","Finds all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.","","- `s` — An input string
- `min_ngram_length` — The minimum length of extracted ngram. The default and minimal value is 3
- `max_ngram_length` — The maximum length of extracted ngram. The default value is 100. Should be not less than 'min_ngram_length'
","An array of selected substrings","","","String"
"25.5.4.38","IPv4ToIPv6",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfMicrosecond",0,0,"","","System","","","","","","",""
"25.5.4.38","reinterpretAsUInt128",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayDistinct",0,0,"","","System","Returns an array containing only the distinct elements of an array.","arrayDistinct(arr)","- `arr` — Array for which to extract distinct elements. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array containing the distinct elements. [`Array(T)`](/sql-reference/data-types/array).","Usage example:

```sql
SELECT arrayDistinct([1, 2, 2, 3, 1]);
```

Result:

```text
[1,2,3]
```
","1.1","Arrays"
"25.5.4.38","byteSwap",0,1,"","","System","
Reverses the bytes of an integer, i.e. changes its [endianness](https://en.wikipedia.org/wiki/Endianness).

The below example can be worked out in the following manner:

1. Convert the base-10 integer to its equivalent hexadecimal format in big-endian format, i.e. 3351772109 -> C7 C7 FB CD (4 bytes)
2. Reverse the bytes, i.e. C7 C7 FB CD -> CD FB C7 C7
3. Convert the result back to an integer assuming big-endian, i.e. CD FB C7 C7 -> 3455829959
One use case of this function is reversing IPv4s:

```result
┌─toIPv4(byteSwap(toUInt32(toIPv4('205.251.199.199'))))─┐
│ 199.199.251.205                                       │
└───────────────────────────────────────────────────────┘
```
    ","byteSwap(x)","- `x` — An integer value.
","x with bytes reversed",":

```sql
SELECT byteSwap(3351772109)
```

Result:

```text
3455829959
```
8-bit:

```sql
SELECT byteSwap(54)
```

Result:

```text
54
```
16-bit:

```sql
SELECT byteSwap(4135)
```

Result:

```text
10000
```
32-bit:

```sql
SELECT byteSwap(3351772109)
```

Result:

```text
3455829959
```
64-bit:

```sql
SELECT byteSwap(123294967295)
```

Result:

```text
18439412204227788800
```
","23.10","Arithmetic"
"25.5.4.38","arrayCount",0,0,"","","System","","","","","","",""
"25.5.4.38","hasColumnInTable",0,0,"","","System","","","","","","",""
"25.5.4.38","toRelativeHourNum",0,0,"","","System","","","","","","",""
"25.5.4.38","bitmaskToArray",0,0,"","","System","","","","","","",""
"25.5.4.38","CRC64",0,1,"","","System","","","","","","",""
"25.5.4.38","bitNot",0,0,"","","System","","","","","","",""
"25.5.4.38","joinGet",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchAnyCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","upperUTF8",0,0,"","","System","Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.","upperUTF8(input)","- `input` — Input with String type
","A String data type value","first:

```sql
SELECT upperUTF8('München') as Upperutf8;
```

Result:

```text
MÜNCHEN
```
","1.1","String"
"25.5.4.38","validateNestedArraySizes",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfInterval",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfMonth",0,0,"","","System","","","","","","",""
"25.5.4.38","toStartOfQuarter",0,0,"","","System","","","","","","",""
"25.5.4.38","mapFilter",0,0,"","","System","The same as arrayFilter.","","","","mapFilter:

```sql
SELECT mapFilter((k, v) -> v > 1, map('k1', 1, 'k2', 2))
```

Result:

```text

```
","","Map"
"25.5.4.38","assumeNotNull",0,0,"","","System","","","","","","",""
"25.5.4.38","changeSecond",0,0,"","","System","Changes the second component of a date or date time.","changeSecond(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.","","","Dates and Times"
"25.5.4.38","dateTime64ToSnowflakeID",0,0,"","","System","Converts a [DateTime64](../data-types/datetime64.md) value to the first [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) at the giving time.","dateTime64ToSnowflakeID(value[, epoch])","- `value` — Date with time. [DateTime64](../data-types/datetime.md).
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
","Input value converted to [UInt64](../data-types/int-uint.md) as the first Snowflake ID at that time.","simple:

```sql
SELECT dateTime64ToSnowflakeID(toDateTime64('2021-08-15 18:57:56', 3, 'Asia/Shanghai'))
```

Result:

```text
6832626394434895872
```
","24.6","UUID"
"25.5.4.38","toTime",0,0,"","","System","","","","","","",""
"25.5.4.38","structureToCapnProtoSchema",0,0,"","","System","
Function that converts ClickHouse table structure to CapnProto format schema
","","","","random:

```sql
SELECT structureToCapnProtoSchema('s String, x UInt32', 'MessageName') format TSVRaw
```

Result:

```text
struct MessageName
{
    s @0 : Data;
    x @1 : UInt32;
}
```
","","Other"
"25.5.4.38","variantType",0,0,"","","System","
Returns the variant type name for each row of `Variant` column. If row contains NULL, it returns 'None' for it.
","variantType(variant)","- `variant` — Variant column
","","Example:

```sql

CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT variantType(v) FROM test;
```

Result:

```text

┌─variantType(v)─┐
│ None           │
│ UInt64         │
│ String         │
│ Array(UInt64)  │
└────────────────┘

```
","","JSON"
"25.5.4.38","mapExtractKeyLike",0,0,"","","System","Returns a map with elements which key matches the specified pattern.","","","","mapExtractKeyLike:

```sql
SELECT mapExtractKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')
```

Result:

```text

```
","","Map"
"25.5.4.38","tanh",0,1,"","","System","","","","","","",""
"25.5.4.38","murmurHash3_128",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonPerimeterCartesian",0,0,"","","System","","","","","","",""
"25.5.4.38","runningAccumulate",0,0,"","","System","","","","","","",""
"25.5.4.38","exp2",0,0,"","","System","","","","","","",""
"25.5.4.38","L2Distance",0,0,"","","System","","","","","","",""
"25.5.4.38","decodeURLFormComponent",0,0,"","","System","","","","","","",""
"25.5.4.38","toLastDayOfMonth",0,0,"","","System","","","","","","",""
"25.5.4.38","randomPrintableASCII",0,0,"","","System","","","","","","",""
"25.5.4.38","sipHash128ReferenceKeyed",0,0,"","","System","Same as [sipHash128Reference](#hash_functions-siphash128reference) but additionally takes an explicit key argument instead of using a fixed key.","","","","hash:

```sql
SELECT hex(sipHash128ReferenceKeyed((506097522914230528, 1084818905618843912),'foo', '\x01', 3));
```

Result:

```text

```
","","Hash"
"25.5.4.38","mapPartialSort",0,0,"","","System","The same as arrayReverseSort.","","","","mapPartialSort:

```sql
SELECT mapPartialSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))
```

Result:

```text

```
","","Map"
"25.5.4.38","mapReverseSort",0,0,"","","System","The same as arrayReverseSort.","","","","mapReverseSort:

```sql
SELECT mapReverseSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))
```

Result:

```text

```
","","Map"
"25.5.4.38","h3EdgeLengthKm",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetOrNull",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the attribute's data type if key is found, otherwise NULL.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","arrayShingles",0,0,"","","System","Generates an array of shingles (similar to ngrams for strings), i.e. consecutive sub-arrays with a specified length of the input array.","arrayShingles(arr, l)","- `arr` — Array for which to generate an array of shingles. [`Array(T)`](/sql-reference/data-types/array).
- `l` — The length of each shingle. [`(U)Int*`](/sql-reference/data-types/int-uint)
","An array of generated shingles. [`Array(T)`](/sql-reference/data-types/array)","Usage example:

```sql
SELECT arrayShingles([1,2,3,4], 3) as res;
```

Result:

```text
[[1,2,3],[2,3,4]]
```
","24.1","Arrays"
"25.5.4.38","inIgnoreSet",0,0,"","","System","","","","","","",""
"25.5.4.38","dictGetUUID",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UUID if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","notNullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.5.4.38","mapValues",0,0,"","","System","Returns an array with the values of map.","","","","mapValues:

```sql
SELECT mapValues(map('k1', 'v1', 'k2', 'v2'))
```

Result:

```text

```
","","Map"
"25.5.4.38","match",0,0,"","","System","","","","","","",""
"25.5.4.38","subDate",0,1,"","","System","","","","","","",""
"25.5.4.38","ngramMinHashCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","makeDateTime64",0,0,"","","System","","","","","","",""
"25.5.4.38","isDynamicElementInSharedData",0,0,"","","System","
Returns true for rows in Dynamic column that are not separated into subcolumns and stored inside shared variant in binary form.
","isDynamicElementInSharedData(dynamic)","- `dynamic` — Dynamic column
","","Example:

```sql

CREATE TABLE test (d Dynamic(max_types=2)) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, isDynamicElementInSharedData(d) FROM test;

```

Result:

```text

┌─d─────────────┬─isDynamicElementInSharedData(d)─┐
│ ᴺᵁᴸᴸ          │ false              │
│ 42            │ false              │
│ Hello, World! │ true               │
│ [1,2,3]       │ true               │
└───────────────┴────────────────────┘

```
","","JSON"
"25.5.4.38","tcpPort",0,0,"","","System","","","","","","",""
"25.5.4.38","encodeXMLComponent",0,0,"","","System","","","","","","",""
"25.5.4.38","changeHour",0,0,"","","System","Changes the hour component of a date or date time.","changeHour(date_or_datetime, value);","- `date_or_datetime` — The value to change. Type: Date, Date32, DateTime, or DateTime64
- `value` — The new value. Type: [U]Int*
","The same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.","","","Dates and Times"
"25.5.4.38","wordShingleMinHashArgCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","subtractWeeks",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleConcat",0,0,"","","System","","","","","","",""
"25.5.4.38","toUUID",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayLast",0,0,"","","System","","","","","","",""
"25.5.4.38","sipHash64Keyed",0,0,"","","System","","","","","","",""
"25.5.4.38","extractAll",0,0,"","","System","","","","","","",""
"25.5.4.38","MD4",0,0,"","","System","Calculates the MD4 hash of the given string.","SELECT MD4(s);","- `s` — The input [String](../../sql-reference/data-types/string.md).
","The MD4 hash of the given input string returned as a [FixedString(16)](../../sql-reference/data-types/fixedstring.md).",":

```sql
SELECT HEX(MD4('abc'));
```

Result:

```text

┌─hex(MD4('abc'))──────────────────┐
│ A448017AAF21D8525FC10AE87AA6729D │
└──────────────────────────────────┘
            
```
","","Hash"
"25.5.4.38","moduloOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","s2CapContains",0,0,"","","System","","","","","","",""
"25.5.4.38","filesystemUnreserved",0,0,"","","System","","","","","","",""
"25.5.4.38","defaultValueOfTypeName",0,0,"","","System","","","","","","",""
"25.5.4.38","tuplePlus",0,0,"","","System","","","","","","",""
"25.5.4.38","readWKTPoint",0,0,"","","System","","","","","","",""
"25.5.4.38","firstSignificantSubdomain",0,0,"","","System","
Returns the ""first significant subdomain"".

The first significant subdomain is a second-level domain if it is 'com', 'net', 'org', or 'co'.
Otherwise, it is a third-level domain.

For example, firstSignificantSubdomain('https://news.clickhouse.com/') = 'clickhouse', firstSignificantSubdomain ('https://news.clickhouse.com.tr/') = 'clickhouse'.

The list of ""insignificant"" second-level domains and other implementation details may change in the future.
        ","","","","firstSignificantSubdomain:

```sql
SELECT firstSignificantSubdomain('https://news.clickhouse.com/')
```

Result:

```text

```
","","URL"
"25.5.4.38","h3HexAreaKm2",0,0,"","","System","","","","","","",""
"25.5.4.38","hasThreadFuzzer",0,0,"","","System","","","","","","",""
"25.5.4.38","multiMatchAllIndices",0,0,"","","System","","","","","","",""
"25.5.4.38","toUnixTimestamp64Nano",0,0,"","","System","","","","","","",""
"25.5.4.38","path",0,0,"","","System","","","","","","",""
"25.5.4.38","now",0,1,"","","System","","","","","","",""
"25.5.4.38","arrayCumSumNonNegative",0,0,"","","System","","","","","","",""
"25.5.4.38","detectCharset",0,0,"","","System","","","","","","",""
"25.5.4.38","dynamicType",0,0,"","","System","
Returns the variant type name for each row of `Dynamic` column. If row contains NULL, it returns 'None' for it.
","dynamicType(dynamic)","- `dynamic` — Dynamic column
","","Example:

```sql

CREATE TABLE test (d Dynamic) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, dynamicType(d) FROM test;

```

Result:

```text

┌─d─────────────┬─dynamicType(d)─┐
│ ᴺᵁᴸᴸ          │ None           │
│ 42            │ Int64          │
│ Hello, World! │ String         │
│ [1,2,3]       │ Array(Int64)   │
└───────────────┴────────────────┘

```
","","JSON"
"25.5.4.38","translateUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayInt8",0,0,"","","System","","","","","","",""
"25.5.4.38","has",0,0,"","","System","","","","","","",""
"25.5.4.38","leftPad",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeInJodaSyntax",0,0,"","","System","","","","","","",""
"25.5.4.38","formatQuery",0,0,"","","System","Returns a formatted, possibly multi-line, version of the given SQL query. Throws in case of a parsing error.
[example:multiline]","formatQuery(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","multiline:

```sql
SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

Result:

```text
SELECT
    a,
    b
FROM tab
WHERE (a > 3) AND (b < 3)
```
","","Other"
"25.5.4.38","tupleToNameValuePairs",0,0,"","","System","","","","","","",""
"25.5.4.38","h3ToParent",0,0,"","","System","","","","","","",""
"25.5.4.38","getSizeOfEnumType",0,0,"","","System","","","","","","",""
"25.5.4.38","encodeURLFormComponent",0,0,"","","System","","","","","","",""
"25.5.4.38","makeDateTime",0,0,"","","System","","","","","","",""
"25.5.4.38","simpleJSONExtractRaw",0,0,"","","System","Returns the value of the field named field_name as a String, including separators.","simpleJSONExtractRaw(json, field_name)","- `json` — The JSON in which the field is searched for. String.
- `field_name` — The name of the field to search for. String literal.
","It returns the value of the field as a String including separators if the field exists, or an empty String otherwise.","simple:

```sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":{""def"":[1,2,3]}}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractRaw(json, 'foo') FROM jsons ORDER BY json;
```

Result:

```text

""-4e3""
-3.4
5
{""def"":[1,2,3]}
```
","","JSON"
"25.5.4.38","regionToContinent",0,0,"","","System","","","","","","",""
"25.5.4.38","makeDate32",0,0,"","","System","","","","","","",""
"25.5.4.38","accurateCastOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","length",0,1,"","","System","
Calculates the length of the string or array.

For String or FixedString argument: calculates the number of bytes in string.
[example:string1]

For Array argument: calculates the number of elements in the array.
[example:arr1]

If applied for FixedString argument, the function is a constant expression:
[example:constexpr]

Please note that the number of bytes in a string is not the same as the number of Unicode ""code points""
and it is not the same as the number of Unicode ""grapheme clusters"" (what we usually call ""characters"")
and it is not the same as the visible string width.
[example:unicode]

It is ok to have ASCII NUL bytes in strings, and they will be counted as well.
[example:nul]
","","","","string1:

```sql
SELECT length('Hello, world!')
```

Result:

```text

```
arr1:

```sql
SELECT length(['Hello'], ['world'])
```

Result:

```text

```
constexpr:

```sql
WITH 'hello' || toString(number) AS str
SELECT str, 
       isConstant(length(str)) AS str_length_is_constant, 
       isConstant(length(str::FixedString(6))) AS fixed_str_length_is_constant
FROM numbers(3)
```

Result:

```text

```
unicode:

```sql
SELECT 'ёлка' AS str1, length(str1), lengthUTF8(str1), normalizeUTF8NFKD(str1) AS str2, length(str2), lengthUTF8(str2)
```

Result:

```text

```
nul:

```sql
SELECT 'abc\0\0\0' AS str, length(str)
```

Result:

```text

```
","","Arrays"
"25.5.4.38","h3ToGeo",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayEnumerateDense",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTime64BestEffortOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","domainRFC",0,0,"","","System","Similar to `domain` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.5.4.38","bitmapSubsetLimit",0,0,"","","System","","","","","","",""
"25.5.4.38","mapExists",0,0,"","","System","The same as arrayExists.","","","","mapExists:

```sql
SELECT mapExists((k, v) -> v = 1, map('k1', 1, 'k2', 2))
```

Result:

```text

```
","","Map"
"25.5.4.38","endsWith",0,0,"","","System","","","","","","",""
"25.5.4.38","rand64",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayNormalizedGini",0,0,"","","System","Calculates the normalized Gini coefficient.","arrayNormalizedGini(predicted, label)","- `predicted` — Predicted value (Array(T)).
- `label` — Actual value (Array(T)).
","A tuple containing the Gini coefficients of the predicted values, the Gini coefficient of the normalized values, and the normalized Gini coefficient (= the ratio of the former two Gini coefficients).","Example:

```sql
SELECT arrayNormalizedGini([0.9, 0.3, 0.8, 0.7],[6, 1, 0, 2]);
```

Result:

```text
(0.18055555555555558,0.2638888888888889,0.6842105263157896)
```
","25.1","Arrays"
"25.5.4.38","rowNumberInAllBlocks",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchFirstIndexCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONExtractFloat",0,0,"","","System","","","","","","",""
"25.5.4.38","tuple",0,0,"","","System","
Returns a tuple by grouping input arguments.

For columns C1, C2, ... with the types T1, T2, ..., it returns a named Tuple(C1 T1, C2 T2, ...) type tuple containing these columns if their names are unique and can be treated as unquoted identifiers, otherwise a Tuple(T1, T2, ...) is returned. There is no cost to execute the function.
Tuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can't be written to a table.

The function implements the operator `(x, y, ...)`.
","","","","typical:

```sql
SELECT tuple(1, 2)
```

Result:

```text
(1,2)
```
","","Tuple"
"25.5.4.38","atanh",0,0,"","","System","","","","","","",""
"25.5.4.38","kql_array_sort_desc",0,0,"","","System","","","","","","",""
"25.5.4.38","generateRandomStructure",0,0,"","","System","
Generates a random table structure.
This function takes 2 optional constant arguments:
the number of columns in the result structure (random by default) and random seed (random by default)
The maximum number of columns is 128.
The function returns a value of type String.
","","","","random:

```sql
SELECT generateRandomStructure()
```

Result:

```text
c1 UInt32, c2 FixedString(25)
```
with specified number of columns:

```sql
SELECT generateRandomStructure(3)
```

Result:

```text
c1 String, c2 Array(Int32), c3 LowCardinality(String)
```
with specified seed:

```sql
SELECT generateRandomStructure(1, 42)
```

Result:

```text
c1 UInt128
```
","","Random Number"
"25.5.4.38","isNullable",0,0,"","","System","","","","","","",""
"25.5.4.38","regexpExtract",0,0,"","","System","Extracts the first string in haystack that matches the regexp pattern and corresponds to the regex group index.","","","","","","String Search"
"25.5.4.38","sqidEncode",0,0,"","","System","
Transforms numbers into a [Sqid](https://sqids.org/) which is a Youtube-like ID string.","sqidEncode(number1, ...)","- `number1, ...` — Arbitrarily many UInt8, UInt16, UInt32 or UInt64 arguments
","A hash id [String](/sql-reference/data-types/string.md).","simple:

```sql
SELECT sqidEncode(1, 2, 3, 4, 5);
```

Result:

```text

┌─sqidEncode(1, 2, 3, 4, 5)─┐
│ gXHfJ1C6dN                │
└───────────────────────────┘
            
```
","","Encoding"
"25.5.4.38","fromUnixTimestampInJodaSyntax",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayFold",0,0,"","","System","
        Function arrayFold(acc,a1,...,aN->expr, arr1, ..., arrN, acc_initial) applies a lambda function to each element
        in each (equally-sized) array and collects the result in an accumulator.
        ","","","","sum:

```sql
SELECT arrayFold(acc,x->acc+x, [1,2,3,4], toInt64(1));
```

Result:

```text
11
```
","","Arrays"
"25.5.4.38","arrayMin",0,0,"","","System","","","","","","",""
"25.5.4.38","basename",0,0,"","","System","","","","","","",""
"25.5.4.38","toISOWeek",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt32OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","accurateCast",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayCompact",0,0,"","","System","","","","","","",""
"25.5.4.38","kql_array_sort_asc",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalMicrosecond",0,0,"","","System","","","","","","",""
"25.5.4.38","L1Normalize",0,0,"","","System","","","","","","",""
"25.5.4.38","toInterval",0,0,"","","System","Creates an interval from a value and a unit.","","","","","","Type Conversion"
"25.5.4.38","arrayAvg",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayPopBack",0,0,"","","System","Removes the last element from the array.","arrayPopBack(arr)","- `arr` — The array for which to remove the last element from. [`Array(T)`](/sql-reference/data-types/array).
","Returns an array identical to `arr` but without the last element of `arr`. [`Array(T)`](/sql-reference/data-types/array).","Usage example:

```sql
SELECT arrayPopBack([1, 2, 3]) AS res;
```

Result:

```text
[1,2]
```
","1.1","Arrays"
"25.5.4.38","arrayReverse",0,0,"","","System","","","","","","",""
"25.5.4.38","icebergTruncate",0,0,"","","System","Implements logic of iceberg truncate transform: https://iceberg.apache.org/spec/#truncate-transform-details.","icebergTruncate(N, value)","- `value` — String, integer or Decimal value.
","The same type as argument","Example:

```sql
SELECT icebergTruncate(3, 'iceberg')
```

Result:

```text
ice
```
","25.3","Other"
"25.5.4.38","toDecimal64",0,0,"","","System","","","","","","",""
"25.5.4.38","now64",0,1,"","","System","","","","","","",""
"25.5.4.38","tupleNames",0,0,"","","System","
Converts a tuple into an array of column names. For a tuple in the form `Tuple(a T, b T, ...)`, it returns an array of strings representing the named columns of the tuple. If the tuple elements do not have explicit names, their indices will be used as the column names instead.
","","","","typical:

```sql
SELECT tupleNames(tuple(1 as a, 2 as b))
```

Result:

```text
['a','b']
```
","","Tuple"
"25.5.4.38","URLHash",0,0,"","","System","","","","","","",""
"25.5.4.38","topLevelDomainRFC",0,0,"","","System","Similar to topLevelDomain, but conforms to RFC 3986.","","","","","","URL"
"25.5.4.38","arrayLastIndex",0,0,"","","System","","","","","","",""
"25.5.4.38","bitSlice",0,0,"","","System","","","","","","",""
"25.5.4.38","firstSignificantSubdomainRFC",0,0,"","","System","Returns the ""first significant subdomain"" according to RFC 1034.","","","","","","URL"
"25.5.4.38","shardNum",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeInJodaSyntaxOrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","startsWithUTF8",0,0,"","","System","
Returns whether string `str` starts with `prefix`, the difference between `startsWithUTF8` and `startsWith` is that `startsWithUTF8` match `str` and `suffix` by UTF-8 characters.
        ","","","","startsWithUTF8:

```sql
select startsWithUTF8('富强民主文明和谐', '富强');
```

Result:

```text

```
","","String"
"25.5.4.38","portRFC",0,0,"","","System","Similar to `port`, but conforms to RFC 3986.","","","","","","URL"
"25.5.4.38","topLevelDomain",0,0,"","","System","
Extracts the the top-level domain from a URL.

Returns an empty string if the argument cannot be parsed as a URL or does not contain a top-level domain.
        ","","","","topLevelDomain:

```sql
SELECT topLevelDomain('svn+ssh://www.some.svn-hosting.com:80/repo/trunk')
```

Result:

```text

```
","","URL"
"25.5.4.38","decodeURLComponent",0,0,"","","System","","","","","","",""
"25.5.4.38","fragment",0,0,"","","System","","","","","","",""
"25.5.4.38","polygonsSymDifferenceSpherical",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayLastOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","base32Decode",0,0,"","","System","
Decode a [Base32](https://datatracker.ietf.org/doc/html/rfc4648) encoded string. The input string must be a valid Base32 encoded string, otherwise an exception will be thrown.","","- `arg` — A Base32 (rfc4648) encoded string
","","simple_decoding1:

```sql
SELECT base32Decode('ME======')
```

Result:

```text
a
```
simple_decoding2:

```sql
SELECT base32Decode('JBSWY3DP')
```

Result:

```text
Hello
```
empty_string:

```sql
SELECT base32Decode('')
```

Result:

```text

```
non_ascii:

```sql
SELECT hex(base32Decode('4W2HIXV4'))
```

Result:

```text
E5B4745EBC
```
","","String"
"25.5.4.38","timezoneOf",0,0,"","","System","","","","","","",""
"25.5.4.38","tupleDivideByNumber",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt16OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","toString",0,0,"","","System","","","","","","",""
"25.5.4.38","emptyArrayDateTime",0,0,"","","System","","","","","","",""
"25.5.4.38","bitPositionsToArray",0,0,"","","System","","","","","","",""
"25.5.4.38","indexOfAssumeSorted",0,0,"","","System","
Returns the index of the first element with value 'x' (starting from `1`) if it is in the array.
If the array does not contain the searched-for value, the function returns `0`.

:::note
Unlike the `indexOf` function, this function assumes that the array is sorted in
ascending order. If the array is not sorted, results are undefined.
:::
    ","indexOfAssumeSorted(arr, x)","- `arr` — A sorted array to search. [`Array(T)`](/sql-reference/data-types/array).
- `x` — Value of the first matching element in sorted `arr` for which to return an index.UInt64
","Returns the index (numbered from one) of the first `x` in `arr` if it exists. Otherwise, returns `0`.","Basic example:

```sql
SELECT indexOfAssumeSorted([1, 3, 3, 3, 4, 4, 5], 4)
```

Result:

```text
5
```
","24.12","Arrays"
"25.5.4.38","xor",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONExtractInt",0,0,"","","System","","","","","","",""
"25.5.4.38","subtractMonths",0,0,"","","System","","","","","","",""
"25.5.4.38","toUInt256",0,0,"","","System","","","","","","",""
"25.5.4.38","arraySimilarity",0,0,"","","System","
Calculates arrays' similarity from 0 to 1 based on weighed Levenshtein distance. Accepts the same arguments as `arrayLevenshteinDistanceWeighted` function.
","arraySimilarity(from, to, from_weights, to_weights)","- `from` — first array
- `to` — second array
- `from_weights` — weights for the first array
- `to_weights` — weights for the second array
","Similarity of two arrays based on the weighted Levenshtein distance","Query:

```sql
SELECT arraySimilarity(['A', 'B', 'C'], ['A', 'K', 'L'], [1.0, 2, 3], [3.0, 4, 5])
```

Result:

```text

┌─arraySimilarity(['A', 'B', 'C'], ['A', 'K', 'L'], [1.0, 2, 3], [3.0, 4, 5])─┐
│                                                          0.2222222222222222 │
└─────────────────────────────────────────────────────────────────────────────┘

```
","","Arrays"
"25.5.4.38","arrayEnumerateUniqRanked",0,0,"","","System","
Returns an array (or multi-dimensional array) with the same dimensions as the source array,
indicating for each element what it's position is among elements with the same value.
It allows for enumeration of a multi-dimensional array with the ability to specify how deep to look inside the array.
","arrayEnumerateUniqRanked(clear_depth, arr, max_array_depth)","- `clear_depth` — Enumerate elements at the specified level separately. Positive [Integer](../data-types/int-uint.md) less than or equal to `max_arr_depth`.
- `arr` — N-dimensional array to enumerate. [Array](/sql-reference/data-types/array).
- `max_array_depth` — The maximum effective depth. Positive [Integer](../data-types/int-uint.md) less than or equal to the depth of `arr`.
","Returns an N-dimensional array the same size as `arr` with each element showing the position of that element in relation to other elements of the same value.","Example 1:

```sql

With `clear_depth=1` and `max_array_depth=1`, the result of `arrayEnumerateUniqRanked` is identical to that which [`arrayEnumerateUniq`](#arrayenumerateuniq) would give for the same array.

```sql
SELECT arrayEnumerateUniqRanked(1, [1,2,1], 1);
```
        
```

Result:

```text
[1,1,2]
```
Example 2:

```sql


With `clear_depth=1` and `max_array_depth=1`, the result of `arrayEnumerateUniqRanked` is identical to that which [`arrayEnumerateUniq`](#arrayenumerateuniq) would give for the same array.

```sql
SELECT arrayEnumerateUniqRanked(1, [[1,2,3],[2,2,1],[3]], 2);"", ""[[1,1,1],[2,3,2],[2]]
```

```

Result:

```text
[1,1,2]
```
Example 3:

```sql


In this example, `arrayEnumerateUniqRanked` is used to obtain an array indicating, for each element of the multidimensional array, what its position is among elements of the same value. For the first row of the passed array,`[1,2,3]`, the corresponding result is `[1,1,1]`, indicating that this is the first time `1`,`2` and `3` are encountered. For the second row of the provided array,`[2,2,1]`, the corresponding result is `[2,3,3]`, indicating that `2` is encountered for a second and third time, and `1` is encountered for the second time. Likewise, for the third row of the provided array `[3]` the corresponding result is `[2]` indicating that `3` is encountered for the second time.

```sql
SELECT arrayEnumerateUniqRanked(1, [[1,2,3],[2,2,1],[3]], 2);
```
        
```

Result:

```text
[[1,1,1],[2,3,2],[2]]
```
Example 4:

```sql


Changing `clear_depth=2`, results in elements being enumerated separately for each row.

```sql
SELECT arrayEnumerateUniqRanked(2, [[1,2,3],[2,2,1],[3]], 2);
```
        
```

Result:

```text
[[1,1,1],[1,2,1],[1]]
```
","20.1","Arrays"
"25.5.4.38","or",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONSharedDataPaths",0,0,"","","System","
Returns the list of paths that are stored in shared data structure in JSON column.
","JSONDynamicPaths(json)","- `json` — JSON column
","","Example:

```sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONSharedDataPaths(json) FROM test;

```

Result:

```text

┌─json─────────────────────────────────┬─JSONSharedDataPaths(json)─┐
│ {""a"":""42""}                           │ []                        │
│ {""b"":""Hello""}                        │ ['b']                     │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['c']                     │
└──────────────────────────────────────┴───────────────────────────┘

```
","","JSON"
"25.5.4.38","arrayExists",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeInJodaSyntaxOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","stringBytesEntropy",0,0,"","","System","Calculates Shannon's entropy of byte distribution in a string.","stringBytesEntropy(s);","- `s` — The string to analyze. [String](../../sql-reference/data-types/string.md))
","The Shannon entropy of the byte distribution. [Float64](../../sql-reference/data-types/float.md).","Example:

```sql
SELECT stringBytesEntropy('Hello, world!');
```

Result:

```text
3.180832987205441
```
","25.5","String"
"25.5.4.38","arrayPushFront",0,0,"","","System","Adds one element to the beginning of the array.","arrayPushFront(arr, x)","- `arr` — The array for which to add value `x` to the end of. [`Array(T)`](/sql-reference/data-types/array).
- `x` — 
- Single value to add to the start of the array. [`Array(T)`](/sql-reference/data-types/array).

:::note
- Only numbers can be added to an array with numbers, and only strings can be added to an array of strings.
- When adding numbers, ClickHouse automatically sets the type of `x` for the data type of the array.
- Can be `NULL`. The function adds a `NULL` element to an array, and the type of array elements converts to `Nullable`.

For more information about the types of data in ClickHouse, see [Data types](/sql-reference/data-types).
:::
    
","Returns an array identical to `arr` but with an additional value `x` at the beginning of the array. [`Array(T)`](/sql-reference/data-types/array).","Usage example:

```sql
SELECT arrayPushFront(['b'], 'a') AS res;
```

Result:

```text
['a','b']
```
","1.1","Arrays"
"25.5.4.38","arrayMap",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayPartialShuffle",0,1,"","","System","
Returns an array of the same size as the original array where elements in range `[1..limit]` are a random
subset of the original array. Remaining `(limit..n]` shall contain the elements not in `[1..limit]` range in undefined order.
Value of limit shall be in range `[1..n]`. Values outside of that range are equivalent to performing full `arrayShuffle`:

:::note
This function will not materialize constants.

The value of `limit` should be in the range `[1..N]`. Values outside of that range are equivalent to performing full [`arrayShuffle`](#arrayshuffle).
:::
    ","arrayPartialShuffle(arr [, limit[, seed]])","- `arr` — The array to shuffle. [`Array(T)`](/sql-reference/data-types/array).
- `seed` — Optional. The seed to be used with random number generation. If not provided, a random one is used. [`(U)Int*`](../data-types/int-uint.md).
- `limit` — Optional. The number to limit element swaps to, in the range `[1..N]`. [`(U)Int*`](../data-types/int-uint.md).
","Array with elements partially shuffled. [`Array(T)`](/sql-reference/data-types/array)).","no_limit1:

```sql
SELECT arrayPartialShuffle([1, 2, 3, 4], 0)
```

Result:

```text
[2,4,3,1]
```
no_limit2:

```sql
SELECT arrayPartialShuffle([1, 2, 3, 4])
```

Result:

```text
[4,1,3,2]
```
random_seed:

```sql
SELECT arrayPartialShuffle([1, 2, 3, 4], 2)
```

Result:

```text
[3,4,1,2]
```
explicit_seed:

```sql
SELECT arrayPartialShuffle([1, 2, 3, 4], 2, 41)
```

Result:

```text
[3,2,1,4]
```
materialize:

```sql
SELECT arrayPartialShuffle(materialize([1, 2, 3, 4]), 2, 42), arrayPartialShuffle([1, 2, 3], 2, 42) FROM numbers(10)
```

Result:

```text

┌─arrayPartial⋯4]), 2, 42)─┬─arrayPartial⋯ 3], 2, 42)─┐
│ [3,2,1,4]                │ [3,2,1]                  │
│ [3,2,1,4]                │ [3,2,1]                  │
│ [4,3,2,1]                │ [3,2,1]                  │
│ [1,4,3,2]                │ [3,2,1]                  │
│ [3,4,1,2]                │ [3,2,1]                  │
│ [1,2,3,4]                │ [3,2,1]                  │
│ [1,4,3,2]                │ [3,2,1]                  │
│ [1,4,3,2]                │ [3,2,1]                  │
│ [3,1,2,4]                │ [3,2,1]                  │
│ [1,3,2,4]                │ [3,2,1]                  │
└──────────────────────────┴──────────────────────────┘
    
```
","23.2","Arrays"
"25.5.4.38","arrayFirstIndex",0,0,"","","System","","","","","","",""
"25.5.4.38","multiSearchFirstIndexUTF8",0,0,"","","System","","","","","","",""
"25.5.4.38","moduloOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","parseDateTimeBestEffortUS",0,0,"","","System","","","","","","",""
"25.5.4.38","mapPopulateSeries",0,0,"","","System","","","","","","",""
"25.5.4.38","divideDecimal",0,0,"","","System","
Performs division on two decimals. Result value will be of type [Decimal256](/sql-reference/data-types/decimal).
Result scale can be explicitly specified by `result_scale` argument (const Integer in range `[0, 76]`). If not specified, the result scale is the max scale of given arguments.

:::note
These function work significantly slower than usual `divide`.
In case you don't really need controlled precision and/or need fast computation, consider using [divide](#divide).
:::
    ","divideDecimal(x, y[, result_scale])","- `x` — First value: [Decimal](/sql-reference/data-types/decimal).
- `y` — Second value: [Decimal](/sql-reference/data-types/decimal).
- `result_scale` — Scale of result. Type [Int/UInt](/sql-reference/data-types/int-uint).
","The result of division with given scale. Type: [Decimal256](/sql-reference/data-types/decimal.md).",":

```sql
divideDecimal(toDecimal256(-12, 0), toDecimal32(2.1, 1), 10)
```

Result:

```text

┌─divideDecimal(toDecimal256(-12, 0), toDecimal32(2.1, 1), 10)─┐
│                                                -5.7142857142 │
└──────────────────────────────────────────────────────────────┘
    
```
:

```sql

SELECT toDecimal64(-12, 1) / toDecimal32(2.1, 1);
SELECT toDecimal64(-12, 1) as a, toDecimal32(2.1, 1) as b, divideDecimal(a, b, 1), divideDecimal(a, b, 5);
    
```

Result:

```text

┌─divide(toDecimal64(-12, 1), toDecimal32(2.1, 1))─┐
│                                             -5.7 │
└──────────────────────────────────────────────────┘
┌───a─┬───b─┬─divideDecimal(toDecimal64(-12, 1), toDecimal32(2.1, 1), 1)─┬─divideDecimal(toDecimal64(-12, 1), toDecimal32(2.1, 1), 5)─┐
│ -12 │ 2.1 │                                                       -5.7 │                                                   -5.71428 │
└─────┴─────┴────────────────────────────────────────────────────────────┴────────────────────────────────────────────────────────────┘
    
```
","22.12","Arithmetic"
"25.5.4.38","globalVariable",0,0,"","","System","","","","","","",""
"25.5.4.38","tryBase64Decode",0,0,"","","System","Decodes a String or FixedString from base64, like base64Decode but returns an empty string in case of an error.","tryBase64Decode(encoded)","- `encoded` — String column or constant. If the string is not a valid Base64-encoded value, returns an empty string.
","A string containing the decoded value of the argument.","valid:

```sql
SELECT tryBase64Decode('Y2xpY2tob3VzZQ==')
```

Result:

```text
clickhouse
```
invalid:

```sql
SELECT tryBase64Decode('invalid')
```

Result:

```text

```
","18.16","Encoding"
"25.5.4.38","throwIf",0,0,"","","System","","","","","","",""
"25.5.4.38","detectLanguageUnknown",0,0,"","","System","","","","","","",""
"25.5.4.38","and",0,0,"","","System","","","","","","",""
"25.5.4.38","uniqThetaIntersect",0,0,"","","System","
Two uniqThetaSketch objects to do intersect calculation(set operation ∩), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","typical:

```sql
select finalizeAggregation(uniqThetaIntersect(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

Result:

```text

```
","","Other"
"25.5.4.38","ilike",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayJoin",0,0,"","","System","
The `arrayJoin` function takes a row that contains an array and unfolds it, generating multiple rows – one for each element in the array.
This is in contrast to Regular Functions in ClickHouse which map input values to output values within the same row,
and Aggregate Functions which take a group of rows and ""compress"" or ""reduce"" them into a single summary row
(or a single value within a summary row if used with `GROUP BY`).

All the values in the columns are simply copied, except the values in the column where this function is applied;
these are replaced with the corresponding array value.
","arrayJoin(arr)","- `arr` — An array to unfold. [`Array(T)`](/sql-reference/data-types/array).
","Returns a set of rows unfolded from `arr`.","Basic usage:

```sql
SELECT arrayJoin([1, 2, 3] AS src) AS dst, 'Hello', src
```

Result:

```text

┌─dst─┬─\'Hello\'─┬─src─────┐
│   1 │ Hello     │ [1,2,3] │
│   2 │ Hello     │ [1,2,3] │
│   3 │ Hello     │ [1,2,3] │
└─────┴───────────┴─────────┘
        
```
arrayJoin affects all sections of the query:

```sql

The `arrayJoin` function affects all sections of the query, including the `WHERE` section. Notice the result 2, even though the subquery returned 1 row.

```sql
SELECT sum(1) AS impressions
FROM
(
    SELECT ['Istanbul', 'Berlin', 'Bobruisk'] AS cities
)
WHERE arrayJoin(cities) IN ['Istanbul', 'Berlin'];
```
        
```

Result:

```text

┌─impressions─┐
│           2 │
└─────────────┘
        
```
Using multiple arrayJoin functions:

```sql

A query can use multiple `arrayJoin` functions. In this case, the transformation is performed multiple times and the rows are multiplied.

```sql
SELECT
    sum(1) AS impressions,
    arrayJoin(cities) AS city,
    arrayJoin(browsers) AS browser
FROM
(
    SELECT
        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,
        ['Firefox', 'Chrome', 'Chrome'] AS browsers
)
GROUP BY
    2,
    3
```
        
```

Result:

```text

┌─impressions─┬─city─────┬─browser─┐
│           2 │ Istanbul │ Chrome  │
│           1 │ Istanbul │ Firefox │
│           2 │ Berlin   │ Chrome  │
│           1 │ Berlin   │ Firefox │
│           2 │ Bobruisk │ Chrome  │
│           1 │ Bobruisk │ Firefox │
└─────────────┴──────────┴─────────┘
        
```
Unexpected results due to optimizations:

```sql

Using multiple `arrayJoin` with the same expression may not produce the expected result due to optimizations.
For these cases, consider modifying the repeated array expression with extra operations that do not affect join result.
e.g. `arrayJoin(arraySort(arr))`, `arrayJoin(arrayConcat(arr, []))`

```sql
SELECT
    arrayJoin(dice) as first_throw,
    /* arrayJoin(dice) as second_throw */ -- is technically correct, but will annihilate result set
    arrayJoin(arrayConcat(dice, [])) as second_throw -- intentionally changed expression to force re-evaluation
FROM (
    SELECT [1, 2, 3, 4, 5, 6] as dice
);
```
        
```

Result:

```text

┌─first_throw─┬─second_throw─┐
│           1 │            1 │
│           1 │            2 │
│           1 │            3 │
│           1 │            4 │
│           1 │            5 │
│           1 │            6 │
│           2 │            1 │
│           2 │            2 │
│           2 │            3 │
│           2 │            4 │
│           2 │            5 │
│           2 │            6 │
│           3 │            1 │
│           3 │            2 │
│           3 │            3 │
│           3 │            4 │
│           3 │            5 │
│           3 │            6 │
│           4 │            1 │
│           4 │            2 │
│           4 │            3 │
│           4 │            4 │
│           4 │            5 │
│           4 │            6 │
│           5 │            1 │
│           5 │            2 │
│           5 │            3 │
│           5 │            4 │
│           5 │            5 │
│           5 │            6 │
│           6 │            1 │
│           6 │            2 │
│           6 │            3 │
│           6 │            4 │
│           6 │            5 │
│           6 │            6 │
└─────────────┴──────────────┘
        
```
Using the ARRAY JOIN syntax:

```sql

Note the [`ARRAY JOIN`](../statements/select/array-join.md) syntax in the `SELECT` query below, which provides broader possibilities.
`ARRAY JOIN` allows you to convert multiple arrays with the same number of elements at a time.

```sql
SELECT
    sum(1) AS impressions,
    city,
    browser
FROM
(
    SELECT
        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,
        ['Firefox', 'Chrome', 'Chrome'] AS browsers
)
ARRAY JOIN
    cities AS city,
    browsers AS browser
GROUP BY
    2,
    3
```
        
```

Result:

```text

┌─impressions─┬─city─────┬─browser─┐
│           1 │ Istanbul │ Firefox │
│           1 │ Berlin   │ Chrome  │
│           1 │ Bobruisk │ Chrome  │
└─────────────┴──────────┴─────────┘
        
```
Using Tuple:

```sql

You can also use [Tuple](../data-types/tuple.md):

```sql
SELECT
    sum(1) AS impressions,
    (arrayJoin(arrayZip(cities, browsers)) AS t).1 AS city,
    t.2 AS browser
FROM
(
    SELECT
        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,
        ['Firefox', 'Chrome', 'Chrome'] AS browsers
)
GROUP BY
    2,
    3
```
        
```

Result:

```text

┌─impressions─┬─city─────┬─browser─┐
│           1 │ Istanbul │ Firefox │
│           1 │ Berlin   │ Chrome  │
│           1 │ Bobruisk │ Chrome  │
└─────────────┴──────────┴─────────┘
        
```
","1.1","Arrays"
"25.5.4.38","addQuarters",0,0,"","","System","","","","","","",""
"25.5.4.38","multiply",0,0,"","","System","Calculates the product of two values `x` and `y`.","multiply(x, y)","- `x` — factor
- `y` — factor
","The product of x and y","Multiplying two numbers:

```sql
SELECT multiply(5,5)
```

Result:

```text
25
```
","1.1","Arithmetic"
"25.5.4.38","toStartOfTenMinutes",0,0,"","","System","","","","","","",""
"25.5.4.38","bitTest",0,0,"","","System","","","","","","",""
"25.5.4.38","countSubstringsCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","nullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayZipUnaligned",0,0,"","","System","
Combines multiple arrays into a single array, allowing for unaligned arrays. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.

If the arrays have different sizes, the shorter arrays will be padded with `null` values.
","","","","","","Arrays"
"25.5.4.38","dictGet",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the attribute's data type if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.5.4.38","toLowCardinality",0,0,"","","System","","","","","","",""
"25.5.4.38","s2CellsIntersect",0,0,"","","System","","","","","","",""
"25.5.4.38","hilbertEncode",0,0,"","","System","
Calculates code for Hilbert Curve for a list of unsigned integers.

The function has two modes of operation:
- Simple
- Expanded

Simple: accepts up to 2 unsigned integers as arguments and produces a UInt64 code.
[example:simple]
Produces: `31`

Expanded: accepts a range mask (tuple) as a first argument and up to 2 unsigned integers as other arguments.
Each number in the mask configures the number of bits by which the corresponding argument will be shifted left, effectively scaling the argument within its range.
[example:range_expanded]
Produces: `4031541586602`
Note: tuple size must be equal to the number of the other arguments

Range expansion can be beneficial when you need a similar distribution for arguments with wildly different ranges (or cardinality)
For example: 'IP Address' (0...FFFFFFFF) and 'Country code' (0...FF)

For a single argument without a tuple, the function returns the argument itself as the Hilbert index, since no dimensional mapping is needed.
[example:identity]
Produces: `1`

If a single argument is provided with a tuple specifying bit shifts, the function shifts the argument left by the specified number of bits.
[example:identity_expanded]
Produces: `512`

The function also accepts columns as arguments:
[example:from_table]

But the range tuple must still be a constant:
[example:from_table_range]

Please note that you can fit only so much bits of information into Hilbert code as UInt64 has.
Two arguments will have a range of maximum 2^32 (64/2) each
All overflow will be clamped to zero
","","","","simple:

```sql
SELECT hilbertEncode(3, 4)
```

Result:

```text

```
range_expanded:

```sql
SELECT hilbertEncode((10,6), 1024, 16)
```

Result:

```text

```
identity:

```sql
SELECT hilbertEncode(1)
```

Result:

```text

```
identity_expanded:

```sql
SELECT hilbertEncode(tuple(2), 128)
```

Result:

```text

```
from_table:

```sql
SELECT hilbertEncode(n1, n2) FROM table
```

Result:

```text

```
from_table_range:

```sql
SELECT hilbertEncode((1,2), n1, n2) FROM table
```

Result:

```text

```
","","Encoding"
"25.5.4.38","stringBytesUniq",0,0,"","","System","Counts the number of distinct bytes in a string.","stringBytesUniq(s);","- `s` — The string to analyze. [String](../../sql-reference/data-types/string.md)
","The number of distinct bytes in the string. [UInt16](../../sql-reference/data-types/int-uint.md).","Example:

```sql
SELECT stringBytesUniq('Hello, world!');
```

Result:

```text
10
```
","25.5","String"
"25.5.4.38","uniqThetaUnion",0,0,"","","System","
Two uniqThetaSketch objects to do union calculation(set operation ∪), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","typical:

```sql
select finalizeAggregation(uniqThetaUnion(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

Result:

```text

```
","","Other"
"25.5.4.38","URLHierarchy",0,0,"","","System","","","","","","",""
"25.5.4.38","toFloat64OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayZip",0,0,"","","System","
Combines multiple arrays into a single array. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.
","","","","","","Arrays"
"25.5.4.38","subtractInterval",0,0,"","","System","
Adds an negated interval to another interval or tuple of intervals. The returned value is tuple of intervals.
[example:tuple]
[example:interval1]

If the types of the first interval (or the interval in the tuple) and the second interval are the same they will be merged into one interval.
[example:interval2]
","","","","tuple:

```sql
SELECT subtractInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH)
```

Result:

```text

```
interval1:

```sql
SELECT subtractInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH)
```

Result:

```text

```
interval2:

```sql
SELECT subtractInterval(INTERVAL 2 DAY, INTERVAL 1 DAY)
```

Result:

```text

```
","","Dates and Times"
"25.5.4.38","defaultRoles",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayFilter",0,0,"","","System","","","","","","",""
"25.5.4.38","multiIf",0,0,"","","System","","","","","","",""
"25.5.4.38","caseWithExpression",0,0,"","","System","","","","","","",""
"25.5.4.38","readWKTRing",0,0,"","","System","","","","","","",""
"25.5.4.38","JSONMergePatch",0,0,"","","System","Returns the merged JSON object string, which is formed by merging multiple JSON objects.","","","","","","JSON"
"25.5.4.38","arrayFirst",0,0,"","","System","","","","","","",""
"25.5.4.38","toIntervalYear",0,0,"","","System","","","","","","",""
"25.5.4.38","addInterval",0,0,"","","System","
Adds an interval to another interval or tuple of intervals. The returned value is tuple of intervals.
[example:tuple]
[example:interval1]

If the types of the first interval (or the interval in the tuple) and the second interval are the same they will be merged into one interval.
[example:interval2]
","","","","tuple:

```sql
SELECT addInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH)
```

Result:

```text

```
interval1:

```sql
SELECT addInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH)
```

Result:

```text

```
interval2:

```sql
SELECT addInterval(INTERVAL 1 DAY, INTERVAL 1 DAY)
```

Result:

```text

```
","","Dates and Times"
"25.5.4.38","rowNumberInBlock",0,0,"","","System","","","","","","",""
"25.5.4.38","splitByString",0,0,"","","System","","","","","","",""
"25.5.4.38","nested",0,0,"","","System","
This is a function used internally by the ClickHouse engine and not meant to be used directly.

Returns the array of tuples from multiple arrays.

The first argument must be a constant array of Strings determining the names of the resulting Tuple.
The other arguments must be arrays of the same size.
","","","","nested:

```sql
SELECT nested(['keys', 'values'], ['key_1', 'key_2'], ['value_1','value_2'])
```

Result:

```text

```
","","Other"
"25.5.4.38","toIPv4OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","readWKTLineString",0,0,"","","System","
Parses a Well-Known Text (WKT) representation of a LineString geometry and returns it in the internal ClickHouse format.
","readWKTLineString(wkt_string)","- `wkt_string` — The input WKT string representing a LineString geometry.
","The function returns a ClickHouse internal representation of the linestring geometry.","first call:

```sql
SELECT readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)');
```

Result:

```text

┌─readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)')─┐
│ [(1,1),(2,2),(3,3),(1,1)]                            │
└──────────────────────────────────────────────────────┘
            
```
second call:

```sql
SELECT toTypeName(readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)'));
```

Result:

```text

┌─toTypeName(readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)'))─┐
│ LineString                                                       │
└──────────────────────────────────────────────────────────────────┘
            
```
","","UUID"
"25.5.4.38","jaroSimilarity",0,0,"","","System","Calculates the Jaro similarity between two byte-string.","","","","","","String"
"25.5.4.38","h3IsResClassIII",0,0,"","","System","","","","","","",""
"25.5.4.38","cutQueryStringAndFragment",0,0,"","","System","","","","","","",""
"25.5.4.38","makeDate",0,1,"","","System","","","","","","",""
"25.5.4.38","toUInt256OrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayFirstOrNull",0,0,"","","System","","","","","","",""
"25.5.4.38","__bitWrapperFunc",0,0,"","","System","","","","","","",""
"25.5.4.38","positionCaseInsensitive",0,0,"","","System","","","","","","",""
"25.5.4.38","addMonths",0,0,"","","System","","","","","","",""
"25.5.4.38","toInt64OrZero",0,0,"","","System","","","","","","",""
"25.5.4.38","arrayAll",0,0,"","","System","","","","","","",""
"25.5.4.38","truncate",0,1,"trunc","","System","","","","","","",""
"25.5.4.38","ceiling",0,1,"ceil","","System","","","","","","",""
"25.5.4.38","HOUR",0,1,"toHour","","System","","","","","","",""
"25.5.4.38","FROM_UNIXTIME",0,1,"fromUnixTimestamp","","System","","","","","","",""
"25.5.4.38","connection_id",0,1,"connectionID","","System","","","","","","",""
"25.5.4.38","splitByAlpha",0,0,"alphaTokens","","System","","","","","","",""
"25.5.4.38","LAST_DAY",0,1,"toLastDayOfMonth","","System","","","","","","",""
"25.5.4.38","SVG",0,0,"svg","","System","","","","","","",""
"25.5.4.38","fullHostName",0,0,"FQDN","","System","","","","","","",""
"25.5.4.38","mapFromString",0,0,"extractKeyValuePairs","","System","","","","","","",""
"25.5.4.38","str_to_map",0,1,"extractKeyValuePairs","","System","","","","","","",""
"25.5.4.38","INET6_ATON",0,1,"IPv6StringToNum","","System","","","","","","",""
"25.5.4.38","INET_ATON",0,1,"IPv4StringToNum","","System","","","","","","",""
"25.5.4.38","levenshteinDistanceUTF8",0,0,"editDistanceUTF8","","System","","","","","","",""
"25.5.4.38","levenshteinDistance",0,0,"editDistance","","System","","","","","","",""
"25.5.4.38","mismatches",0,0,"byteHammingDistance","","System","","","","","","",""
"25.5.4.38","caseWithExpr",0,0,"caseWithExpression","","System","","","","","","",""
"25.5.4.38","SUBSTRING_INDEX",0,1,"substringIndex","","System","","","","","","",""
"25.5.4.38","initial_query_start_time",0,1,"initialQueryStartTime","","System","","","","","","",""
"25.5.4.38","INET_NTOA",0,1,"IPv4NumToString","","System","","","","","","",""
"25.5.4.38","current_database",0,1,"currentDatabase","","System","","","","","","",""
"25.5.4.38","SCHEMA",0,1,"currentDatabase","","System","","","","","","",""
"25.5.4.38","REGEXP_REPLACE",0,1,"replaceRegexpAll","","System","","","","","","",""
"25.5.4.38","DAY",0,1,"toDayOfMonth","","System","","","","","","",""
"25.5.4.38","pmod",0,1,"positiveModulo","","System","","","","","","",""
"25.5.4.38","replace",0,1,"replaceAll","","System","","","","","","",""
"25.5.4.38","visitParamExtractRaw",0,0,"simpleJSONExtractRaw","","System","","","","","","",""
"25.5.4.38","serverTimeZone",0,0,"serverTimezone","","System","","","","","","",""
"25.5.4.38","DATE_TRUNC",0,1,"dateTrunc","","System","","","","","","",""
"25.5.4.38","visitParamExtractFloat",0,0,"simpleJSONExtractFloat","","System","","","","","","",""
"25.5.4.38","TIMESTAMP_DIFF",0,0,"dateDiff","","System","","","","","","",""
"25.5.4.38","visitParamHas",0,0,"simpleJSONHas","","System","","","","","","",""
"25.5.4.38","timeZoneOffset",0,0,"timezoneOffset","","System","","","","","","",""
"25.5.4.38","timestamp_diff",0,0,"dateDiff","","System","","","","","","",""
"25.5.4.38","distanceL2",0,1,"L2Distance","","System","","","","","","",""
"25.5.4.38","positive_modulo_or_null",0,1,"positiveModuloOrNull","","System","","","","","","",""
"25.5.4.38","lcase",0,1,"lower","","System","","","","","","",""
"25.5.4.38","DATE_DIFF",0,0,"dateDiff","","System","","","","","","",""
"25.5.4.38","time_bucket",0,1,"toStartOfInterval","","System","","","","","","",""
"25.5.4.38","rand32",0,0,"rand","","System","","","","","","",""
"25.5.4.38","date_diff",0,0,"dateDiff","","System","","","","","","",""
"25.5.4.38","timestampDiff",0,0,"dateDiff","","System","","","","","","",""
"25.5.4.38","toTimeZone",0,0,"toTimezone","","System","","","","","","",""
"25.5.4.38","timeZone",0,0,"timezone","","System","","","","","","",""
"25.5.4.38","INET6_NTOA",0,1,"IPv6NumToString","","System","","","","","","",""
"25.5.4.38","JSON_ARRAY_LENGTH",0,1,"JSONArrayLength","","System","","","","","","",""
"25.5.4.38","CHAR_LENGTH",0,1,"lengthUTF8","","System","","","","","","",""
"25.5.4.38","byteSlice",0,1,"substring","","System","","","","","","",""
"25.5.4.38","mid",0,1,"substring","","System","","","","","","",""
"25.5.4.38","curdate",0,1,"today","","System","","","","","","",""
"25.5.4.38","current_date",0,1,"today","","System","","","","","","",""
"25.5.4.38","date_bin",0,1,"toStartOfInterval","","System","","","","","","",""
"25.5.4.38","MILLISECOND",0,1,"toMillisecond","","System","","","","","","",""
"25.5.4.38","minSampleSizeContinous",0,0,"minSampleSizeContinuous","","System","","","","","","",""
"25.5.4.38","power",0,1,"pow","","System","","","","","","",""
"25.5.4.38","modOrNull",0,1,"moduloOrNull","","System","","","","","","",""
"25.5.4.38","SECOND",0,1,"toSecond","","System","","","","","","",""
"25.5.4.38","normalizeLinf",0,1,"LinfNormalize","","System","","","","","","",""
"25.5.4.38","initial_query_id",0,1,"initialQueryID","","System","","","","","","",""
"25.5.4.38","normalizeL2",0,1,"L2Normalize","","System","","","","","","",""
"25.5.4.38","current_query_id",0,1,"currentQueryID","","System","","","","","","",""
"25.5.4.38","REGEXP_EXTRACT",0,1,"regexpExtract","","System","","","","","","",""
"25.5.4.38","normalizeL1",0,1,"L1Normalize","","System","","","","","","",""
"25.5.4.38","CHARACTER_LENGTH",0,1,"lengthUTF8","","System","","","","","","",""
"25.5.4.38","substr",0,1,"substring","","System","","","","","","",""
"25.5.4.38","distanceLinf",0,1,"LinfDistance","","System","","","","","","",""
"25.5.4.38","partitionID",0,0,"partitionId","","System","","","","","","",""
"25.5.4.38","distanceL2Squared",0,1,"L2SquaredDistance","","System","","","","","","",""
"25.5.4.38","distanceL1",0,1,"L1Distance","","System","","","","","","",""
"25.5.4.38","TO_BASE64",0,1,"base64Encode","","System","","","","","","",""
"25.5.4.38","normL1",0,1,"L1Norm","","System","","","","","","",""
"25.5.4.38","yandexConsistentHash",0,0,"kostikConsistentHash","","System","","","","","","",""
"25.5.4.38","scalarProduct",0,1,"dotProduct","","System","","","","","","",""
"25.5.4.38","DAYOFMONTH",0,1,"toDayOfMonth","","System","","","","","","",""
"25.5.4.38","vectorDifference",0,1,"tupleMinus","","System","","","","","","",""
"25.5.4.38","vectorSum",0,1,"tuplePlus","","System","","","","","","",""
"25.5.4.38","caseWithoutExpression",0,0,"multiIf","","System","","","","","","",""
"25.5.4.38","concat_ws",0,1,"concatWithSeparator","","System","","","","","","",""
"25.5.4.38","FROM_BASE64",0,1,"base64Decode","","System","","","","","","",""
"25.5.4.38","extractAllGroups",0,0,"extractAllGroupsVertical","","System","","","","","","",""
"25.5.4.38","UTC_timestamp",0,1,"UTCTimestamp","","System","","","","","","",""
"25.5.4.38","ln",0,1,"log","","System","","","","","","",""
"25.5.4.38","distanceLp",0,1,"LpDistance","","System","","","","","","",""
"25.5.4.38","QUARTER",0,1,"toQuarter","","System","","","","","","",""
"25.5.4.38","current_timestamp",0,1,"now","","System","","","","","","",""
"25.5.4.38","user",0,1,"currentUser","","System","","","","","","",""
"25.5.4.38","normL2Squared",0,1,"L2SquaredNorm","","System","","","","","","",""
"25.5.4.38","hostname",0,0,"hostName","","System","","","","","","",""
"25.5.4.38","instr",0,1,"positionCaseInsensitive","","System","","","","","","",""
"25.5.4.38","query_id",0,1,"queryID","","System","","","","","","",""
"25.5.4.38","positive_modulo",0,1,"positiveModulo","","System","","","","","","",""
"25.5.4.38","MAP_FROM_ARRAYS",0,0,"mapFromArrays","","System","","","","","","",""
"25.5.4.38","normLinf",0,1,"LinfNorm","","System","","","","","","",""
"25.5.4.38","visitParamExtractInt",0,0,"simpleJSONExtractInt","","System","","","","","","",""
"25.5.4.38","sqid",0,0,"sqidEncode","","System","","","","","","",""
"25.5.4.38","normLp",0,1,"LpNorm","","System","","","","","","",""
"25.5.4.38","current_schemas",0,1,"currentSchemas","","System","","","","","","",""
"25.5.4.38","current_user",0,1,"currentUser","","System","","","","","","",""
"25.5.4.38","TO_UNIXTIME",0,1,"parseDateTime","","System","","","","","","",""
"25.5.4.38","OCTET_LENGTH",0,1,"length","","System","","","","","","",""
"25.5.4.38","timeZoneOf",0,0,"timezoneOf","","System","","","","","","",""
"25.5.4.38","normalizeLp",0,1,"LpNormalize","","System","","","","","","",""
"25.5.4.38","yearweek",0,1,"toYearWeek","","System","","","","","","",""
"25.5.4.38","visitParamExtractUInt",0,0,"simpleJSONExtractUInt","","System","","","","","","",""
"25.5.4.38","week",0,1,"toWeek","","System","","","","","","",""
"25.5.4.38","trim",0,0,"trimBoth","","System","","","","","","",""
"25.5.4.38","pmodOrNull",0,1,"positiveModuloOrNull","","System","","","","","","",""
"25.5.4.38","FORMAT_BYTES",0,1,"formatReadableSize","","System","","","","","","",""
"25.5.4.38","rtrim",0,0,"trimRight","","System","","","","","","",""
"25.5.4.38","visitParamExtractBool",0,0,"simpleJSONExtractBool","","System","","","","","","",""
"25.5.4.38","flatten",0,1,"arrayFlatten","","System","","","","","","",""
"25.5.4.38","to_utc_timestamp",0,1,"toUTCTimestamp","","System","","","","","","",""
"25.5.4.38","DATABASE",0,1,"currentDatabase","","System","","","","","","",""
"25.5.4.38","width_bucket",0,1,"widthBucket","","System","","","","","","",""
"25.5.4.38","MINUTE",0,1,"toMinute","","System","","","","","","",""
"25.5.4.38","jsonMergePatch",0,0,"JSONMergePatch","","System","","","","","","",""
"25.5.4.38","ltrim",0,0,"trimLeft","","System","","","","","","",""
"25.5.4.38","DAYOFYEAR",0,1,"toDayOfYear","","System","","","","","","",""
"25.5.4.38","from_utc_timestamp",0,1,"fromUTCTimestamp","","System","","","","","","",""
"25.5.4.38","TO_DAYS",0,1,"toDaysSinceYearZero","","System","","","","","","",""
"25.5.4.38","str_to_date",0,1,"parseDateTimeOrNull","","System","","","","","","",""
"25.5.4.38","toStartOfFiveMinute",0,0,"toStartOfFiveMinutes","","System","","","","","","",""
"25.5.4.38","ucase",0,1,"upper","","System","","","","","","",""
"25.5.4.38","rpad",0,1,"rightPad","","System","","","","","","",""
"25.5.4.38","mod",0,1,"modulo","","System","","","","","","",""
"25.5.4.38","MONTH",0,1,"toMonth","","System","","","","","","",""
"25.5.4.38","YEAR",0,1,"toYear","","System","","","","","","",""
"25.5.4.38","arrayPRAUC",0,0,"arrayAUCPR","","System","","","","","","",""
"25.5.4.38","arrayAUC",0,0,"arrayROCAUC","","System","","","","","","",""
"25.5.4.38","REGEXP_MATCHES",0,1,"match","","System","","","","","","",""
"25.5.4.38","visitParamExtractString",0,0,"simpleJSONExtractString","","System","","","","","","",""
"25.5.4.38","FROM_DAYS",0,1,"fromDaysSinceYearZero","","System","","","","","","",""
"25.5.4.38","normL2",0,1,"L2Norm","","System","","","","","","",""
"25.5.4.38","DATE_FORMAT",0,1,"formatDateTime","","System","","","","","","",""
"25.5.4.38","caseWithoutExpr",0,0,"multiIf","","System","","","","","","",""
"25.5.4.38","lpad",0,1,"leftPad","","System","","","","","","",""
"25.5.4.38","DAYOFWEEK",0,1,"toDayOfWeek","","System","","","","","","",""
"25.5.4.38","exponentialTimeDecayedCount",1,0,"","","System","","","","","","",""
"25.5.4.38","exponentialTimeDecayedMax",1,0,"","","System","","","","","","",""
"25.5.4.38","lagInFrame",1,0,"","","System","","","","","","",""
"25.5.4.38","nth_value",1,1,"","","System","","","","","","",""
"25.5.4.38","ntile",1,1,"","","System","","","","","","",""
"25.5.4.38","row_number",1,1,"","","System","","","","","","",""
"25.5.4.38","percentRank",1,0,"","","System","","","","","","",""
"25.5.4.38","largestTriangleThreeBuckets",1,0,"","","System","","","","","","",""
"25.5.4.38","flameGraph",1,0,"","","System","","","","","","",""
"25.5.4.38","exponentialMovingAverage",1,0,"","","System","","","","","","",""
"25.5.4.38","nothingUInt64",1,0,"","","System","","","","","","",""
"25.5.4.38","nothingNull",1,0,"","","System","","","","","","",""
"25.5.4.38","nothing",1,0,"","","System","","","","","","",""
"25.5.4.38","singleValueOrNull",1,0,"","","System","","","","","","",""
"25.5.4.38","meanZTest",1,0,"","","System","","","","","","",""
"25.5.4.38","analysisOfVariance",1,1,"","","System","","","","","","",""
"25.5.4.38","studentTTest",1,0,"","","System","","","","","","",""
"25.5.4.38","rankCorr",1,0,"","","System","","","","","","",""
"25.5.4.38","aggThrow",1,0,"","","System","","","","","","",""
"25.5.4.38","categoricalInformationValue",1,0,"","","System","","","","","","",""
"25.5.4.38","groupArrayMovingSum",1,0,"","","System","","","","","","",""
"25.5.4.38","simpleLinearRegression",1,0,"","","System","","","","","","",""
"25.5.4.38","entropy",1,0,"","","System","","","","","","",""
"25.5.4.38","stochasticLogisticRegression",1,0,"","","System","","","","","","",""
"25.5.4.38","histogram",1,0,"","","System","","","","","","",""
"25.5.4.38","mannWhitneyUTest",1,0,"","","System","","","","","","",""
"25.5.4.38","maxIntersections",1,0,"","","System","","","","","","",""
"25.5.4.38","groupBitmapXor",1,0,"","","System","","","","","","",""
"25.5.4.38","cramersVBiasCorrected",1,0,"","","System","","","","","","",""
"25.5.4.38","contingency",1,0,"","","System","","","","","","",""
"25.5.4.38","theilsU",1,0,"","","System","","","","","","",""
"25.5.4.38","groupBitmapAnd",1,0,"","","System","","","","","","",""
"25.5.4.38","cramersV",1,0,"","","System","","","","","","",""
"25.5.4.38","groupBitXor",1,0,"","","System","","","","","","",""
"25.5.4.38","groupBitAnd",1,0,"","","System","","","","","","",""
"25.5.4.38","approx_top_sum",1,1,"","","System","","","","","","",""
"25.5.4.38","exponentialTimeDecayedSum",1,0,"","","System","","","","","","",""
"25.5.4.38","topKWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","topK",1,0,"","","System","","","","","","",""
"25.5.4.38","uniqUpTo",1,0,"","","System","","","","","","",""
"25.5.4.38","stochasticLinearRegression",1,0,"","","System","","","","","","",""
"25.5.4.38","uniqCombined64",1,0,"","","System","","","","","","",""
"25.5.4.38","intervalLengthSum",1,0,"","","System","","","","","","",""
"25.5.4.38","uniqCombined",1,0,"","","System","","","","","","",""
"25.5.4.38","uniqTheta",1,0,"","","System","","","","","","",""
"25.5.4.38","nonNegativeDerivative",1,0,"","","System","","","","","","",""
"25.5.4.38","uniqExact",1,0,"","","System","","","","","","",""
"25.5.4.38","uniq",1,0,"","","System","","","","","","",""
"25.5.4.38","kurtPop",1,0,"","","System","","","","","","",""
"25.5.4.38","sumMapFiltered",1,0,"","","System","","","","","","",""
"25.5.4.38","distinctJSONPathsAndTypes",1,0,"","","System","","","","","","",""
"25.5.4.38","distinctJSONPaths",1,0,"","","System","","","","","","",""
"25.5.4.38","minMappedArrays",1,0,"","","System","","","","","","",""
"25.5.4.38","quantiles",1,0,"","","System","","","","","","",""
"25.5.4.38","sum",1,1,"","","System","","","","","","",""
"25.5.4.38","corrMatrix",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileExactWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","sumMapFilteredWithOverflow",1,0,"","","System","","","","","","",""
"25.5.4.38","corr",1,1,"","","System","","","","","","",""
"25.5.4.38","skewPop",1,0,"","","System","","","","","","",""
"25.5.4.38","corrStable",1,0,"","","System","","","","","","",""
"25.5.4.38","covarPopMatrix",1,0,"","","System","","","","","","",""
"25.5.4.38","groupBitmapOr",1,0,"","","System","","","","","","",""
"25.5.4.38","covarSampMatrix",1,0,"","","System","","","","","","",""
"25.5.4.38","sumMappedArrays",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileExactWeightedInterpolated",1,0,"","","System","","","","","","",""
"25.5.4.38","skewSamp",1,0,"","","System","","","","","","",""
"25.5.4.38","distinctDynamicTypes",1,0,"","","System","","","","","","",""
"25.5.4.38","sumMapWithOverflow",1,0,"","","System","","","","","","",""
"25.5.4.38","stddevSamp",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileExactHigh",1,0,"","","System","","","","","","",""
"25.5.4.38","varPop",1,0,"","","System","","","","","","",""
"25.5.4.38","sumCount",1,0,"","","System","","","","","","",""
"25.5.4.38","covarPop",1,0,"","","System","","","","","","",""
"25.5.4.38","varSamp",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileTimingWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","covarPopStable",1,0,"","","System","","","","","","",""
"25.5.4.38","stddevPopStable",1,0,"","","System","","","","","","",""
"25.5.4.38","any_respect_nulls",1,0,"","","System","","","","","","",""
"25.5.4.38","argMin",1,0,"","","System","","","","","","",""
"25.5.4.38","windowFunnel",1,0,"","","System","","","","","","",""
"25.5.4.38","retention",1,0,"","","System","","","","","","",""
"25.5.4.38","sequenceMatch",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesExactHigh",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileGK",1,0,"","","System","","","","","","",""
"25.5.4.38","anyLast_respect_nulls",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesBFloat16Weighted",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileBFloat16Weighted",1,0,"","","System","","","","","","",""
"25.5.4.38","deltaSumTimestamp",1,0,"","","System","","","","","","",""
"25.5.4.38","varSampStable",1,0,"","","System","","","","","","",""
"25.5.4.38","any",1,0,"","","System","","","","","","",""
"25.5.4.38","sparkbar",1,0,"","","System","","","","","","",""
"25.5.4.38","sequenceMatchEvents",1,0,"","","System","","","","","","",""
"25.5.4.38","max",1,1,"","","System","","","","","","",""
"25.5.4.38","quantilesDD",1,0,"","","System","","","","","","",""
"25.5.4.38","denseRank",1,0,"","","System","","","","","","",""
"25.5.4.38","quantile",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesExact",1,0,"","","System","","","","","","",""
"25.5.4.38","uniqHLL12",1,0,"","","System","","","","","","",""
"25.5.4.38","min",1,1,"","","System","","","","","","",""
"25.5.4.38","quantileExactInclusive",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileDD",1,0,"","","System","","","","","","",""
"25.5.4.38","kurtSamp",1,0,"","","System","","","","","","",""
"25.5.4.38","estimateCompressionRatio",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileTDigest",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileTDigestWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileDeterministic",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesTDigest",1,0,"","","System","","","","","","",""
"25.5.4.38","avg",1,1,"","","System","","","","","","",""
"25.5.4.38","covarSampStable",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesTiming",1,0,"","","System","","","","","","",""
"25.5.4.38","leadInFrame",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesExactExclusive",1,0,"","","System","","","","","","",""
"25.5.4.38","groupArrayMovingAvg",1,0,"","","System","","","","","","",""
"25.5.4.38","anyHeavy",1,0,"","","System","","","","","","",""
"25.5.4.38","groupArrayIntersect",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileInterpolatedWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileExactLow",1,0,"","","System","","","","","","",""
"25.5.4.38","groupBitmap",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesInterpolatedWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesTDigestWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","stddevSampStable",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesExactWeightedInterpolated",1,0,"","","System","","","","","","",""
"25.5.4.38","groupUniqArray",1,0,"","","System","","","","","","",""
"25.5.4.38","sumKahan",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesExactWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesDeterministic",1,0,"","","System","","","","","","",""
"25.5.4.38","groupArrayInsertAt",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesGK",1,0,"","","System","","","","","","",""
"25.5.4.38","rank",1,1,"","","System","","","","","","",""
"25.5.4.38","maxIntersectionsPosition",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesBFloat16",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesExactInclusive",1,0,"","","System","","","","","","",""
"25.5.4.38","groupConcat",1,0,"","","System","","","","","","",""
"25.5.4.38","boundingRatio",1,0,"","","System","","","","","","",""
"25.5.4.38","sequenceNextNode",1,0,"","","System","","","","","","",""
"25.5.4.38","anyLast",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesTimingWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","groupArray",1,0,"","","System","","","","","","",""
"25.5.4.38","count",1,1,"","","System","","","","","","",""
"25.5.4.38","quantileExact",1,0,"","","System","","","","","","",""
"25.5.4.38","groupArraySorted",1,0,"","","System","","","","","","",""
"25.5.4.38","maxMappedArrays",1,0,"","","System","","","","","","",""
"25.5.4.38","stddevPop",1,0,"","","System","","","","","","",""
"25.5.4.38","groupArrayLast",1,0,"","","System","","","","","","",""
"25.5.4.38","kolmogorovSmirnovTest",1,1,"","","System","","","","","","",""
"25.5.4.38","sumWithOverflow",1,0,"","","System","","","","","","",""
"25.5.4.38","sequenceCount",1,0,"","","System","","","","","","",""
"25.5.4.38","exponentialTimeDecayedAvg",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileExactExclusive",1,0,"","","System","","","","","","",""
"25.5.4.38","avgWeighted",1,0,"","","System","","","","","","",""
"25.5.4.38","argMax",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileBFloat16",1,0,"","","System","","","","","","",""
"25.5.4.38","groupBitOr",1,0,"","","System","","","","","","",""
"25.5.4.38","approx_top_k",1,1,"","","System","","","","","","",""
"25.5.4.38","deltaSum",1,0,"","","System","","","","","","",""
"25.5.4.38","welchTTest",1,0,"","","System","","","","","","",""
"25.5.4.38","covarSamp",1,0,"","","System","","","","","","",""
"25.5.4.38","varPopStable",1,0,"","","System","","","","","","",""
"25.5.4.38","quantileTiming",1,0,"","","System","","","","","","",""
"25.5.4.38","quantilesExactLow",1,0,"","","System","","","","","","",""
"25.5.4.38","groupArraySample",1,0,"","","System","","","","","","",""
"25.5.4.38","BIT_AND",1,1,"groupBitAnd","","System","","","","","","",""
"25.5.4.38","approx_top_count",1,1,"approx_top_k","","System","","","","","","",""
"25.5.4.38","STD",1,1,"stddevPop","","System","","","","","","",""
"25.5.4.38","lttb",1,0,"largestTriangleThreeBuckets","","System","","","","","","",""
"25.5.4.38","STDDEV_POP",1,1,"stddevPop","","System","","","","","","",""
"25.5.4.38","anova",1,1,"analysisOfVariance","","System","","","","","","",""
"25.5.4.38","STDDEV_SAMP",1,1,"stddevSamp","","System","","","","","","",""
"25.5.4.38","VAR_SAMP",1,1,"varSamp","","System","","","","","","",""
"25.5.4.38","VAR_POP",1,1,"varPop","","System","","","","","","",""
"25.5.4.38","lastValueRespectNulls",1,0,"anyLast_respect_nulls","","System","","","","","","",""
"25.5.4.38","last_value_respect_nulls",1,1,"anyLast_respect_nulls","","System","","","","","","",""
"25.5.4.38","any_value_respect_nulls",1,1,"any_respect_nulls","","System","","","","","","",""
"25.5.4.38","BIT_OR",1,1,"groupBitOr","","System","","","","","","",""
"25.5.4.38","anyLastRespectNulls",1,0,"anyLast_respect_nulls","","System","","","","","","",""
"25.5.4.38","firstValueRespectNulls",1,0,"any_respect_nulls","","System","","","","","","",""
"25.5.4.38","first_value_respect_nulls",1,1,"any_respect_nulls","","System","","","","","","",""
"25.5.4.38","COVAR_SAMP",1,1,"covarSamp","","System","","","","","","",""
"25.5.4.38","any_value",1,1,"any","","System","","","","","","",""
"25.5.4.38","medianDD",1,0,"quantileDD","","System","","","","","","",""
"25.5.4.38","percent_rank",1,1,"percentRank","","System","","","","","","",""
"25.5.4.38","sparkBar",1,0,"sparkbar","","System","","","","","","",""
"25.5.4.38","medianInterpolatedWeighted",1,0,"quantileInterpolatedWeighted","","System","","","","","","",""
"25.5.4.38","medianTDigestWeighted",1,0,"quantileTDigestWeighted","","System","","","","","","",""
"25.5.4.38","medianBFloat16",1,0,"quantileBFloat16","","System","","","","","","",""
"25.5.4.38","first_value",1,1,"any","","System","","","","","","",""
"25.5.4.38","medianTDigest",1,0,"quantileTDigest","","System","","","","","","",""
"25.5.4.38","BIT_XOR",1,1,"groupBitXor","","System","","","","","","",""
"25.5.4.38","medianTimingWeighted",1,0,"quantileTimingWeighted","","System","","","","","","",""
"25.5.4.38","group_concat",1,1,"groupConcat","","System","","","","","","",""
"25.5.4.38","medianExactHigh",1,0,"quantileExactHigh","","System","","","","","","",""
"25.5.4.38","dense_rank",1,1,"denseRank","","System","","","","","","",""
"25.5.4.38","medianExactWeightedInterpolated",1,0,"quantileExactWeightedInterpolated","","System","","","","","","",""
"25.5.4.38","medianBFloat16Weighted",1,0,"quantileBFloat16Weighted","","System","","","","","","",""
"25.5.4.38","anyValueRespectNulls",1,0,"any_respect_nulls","","System","","","","","","",""
"25.5.4.38","medianExactWeighted",1,0,"quantileExactWeighted","","System","","","","","","",""
"25.5.4.38","median",1,0,"quantile","","System","","","","","","",""
"25.5.4.38","medianExact",1,0,"quantileExact","","System","","","","","","",""
"25.5.4.38","medianExactLow",1,0,"quantileExactLow","","System","","","","","","",""
"25.5.4.38","medianTiming",1,0,"quantileTiming","","System","","","","","","",""
"25.5.4.38","array_agg",1,1,"groupArray","","System","","","","","","",""
"25.5.4.38","medianGK",1,0,"quantileGK","","System","","","","","","",""
"25.5.4.38","medianDeterministic",1,0,"quantileDeterministic","","System","","","","","","",""
"25.5.4.38","last_value",1,1,"anyLast","","System","","","","","","",""
"25.5.4.38","COVAR_POP",1,1,"covarPop","","System","","","","","","",""
"25.5.4.38","anyRespectNulls",1,0,"any_respect_nulls","","System","","","","","","",""
"25.5.4.38","array_concat_agg",1,1,"groupArrayArray","","System","","","","","","",""

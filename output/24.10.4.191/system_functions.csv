"ch_version","name","is_aggregate","case_insensitive","alias_to","create_query","origin","description","syntax","arguments","returned_value","examples","categories"
"24.10.4.191","h3GetIndexesFromUnidirectionalEdge",0,0,"","","System","","","","","",""
"24.10.4.191","intHash64",0,0,"","","System","","","","","",""
"24.10.4.191","intHash32",0,0,"","","System","","","","","",""
"24.10.4.191","polygonsDistanceCartesian",0,0,"","","System","","","","","",""
"24.10.4.191","fuzzBits",0,0,"","","System","","","","","",""
"24.10.4.191","IPv4NumToStringClassC",0,0,"","","System","","","","","",""
"24.10.4.191","IPv4NumToString",0,0,"","","System","","","","","",""
"24.10.4.191","isIPv6String",0,0,"","","System","","","","","",""
"24.10.4.191","IPv4CIDRToRange",0,0,"","","System","","","","","",""
"24.10.4.191","IPv6CIDRToRange",0,0,"","","System","","","","","",""
"24.10.4.191","MACStringToNum",0,0,"","","System","","","","","",""
"24.10.4.191","cutIPv6",0,0,"","","System","","","","","",""
"24.10.4.191","trunc",0,1,"","","System","","","","","",""
"24.10.4.191","roundBankers",0,0,"","","System","","","","","",""
"24.10.4.191","round",0,1,"","","System","","","","","",""
"24.10.4.191","blockSize",0,0,"","","System","","","","","",""
"24.10.4.191","polygonsDistanceSpherical",0,0,"","","System","","","","","",""
"24.10.4.191","bitHammingDistance",0,0,"","","System","","","","","",""
"24.10.4.191","roundDown",0,0,"","","System","","","","","",""
"24.10.4.191","UUIDStringToNum",0,0,"","","System","","","","","",""
"24.10.4.191","IPv4StringToNumOrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","UUIDNumToString",0,0,"","","System","","","","","",""
"24.10.4.191","regionToName",0,0,"","","System","","","","","",""
"24.10.4.191","regionToArea",0,0,"","","System","","","","","",""
"24.10.4.191","regionToCity",0,0,"","","System","","","","","",""
"24.10.4.191","cutQueryString",0,0,"","","System","","","","","",""
"24.10.4.191","halfMD5",0,0,"","","System","
[Interprets](../..//sql-reference/functions/type-conversion-functions.md/#type_conversion_functions-reinterpretAsString) all the input
parameters as strings and calculates the MD5 hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the
resulting string, and interprets them as [UInt64](../../../sql-reference/data-types/int-uint.md) in big-endian byte order. The function is
relatively slow (5 million short strings per second per processor core).

Consider using the [sipHash64](../../sql-reference/functions/hash-functions.md/#hash_functions-siphash64) function instead.
                       ","SELECT halfMD5(par1,par2,...,parN);","- par1,par2,...,parN:
The function takes a variable number of input parameters. Arguments can be any of the supported data types. For some data types calculated
value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed
Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).
                       
","The computed half MD5 hash of the given input params returned as a [UInt64](../../../sql-reference/data-types/int-uint.md) in big-endian byte order.",":

``` sql
SELECT HEX(halfMD5('abc', 'cde', 'fgh'));
```

``` text

┌─hex(halfMD5('abc', 'cde', 'fgh'))─┐
│ 2C9506B7374CFAF4                  │
└───────────────────────────────────┘
            
```
",""
"24.10.4.191","wyHash64",0,0,"","","System","","","","","",""
"24.10.4.191","javaHashUTF16LE",0,0,"","","System","","","","","",""
"24.10.4.191","javaHash",0,0,"","","System","","","","","",""
"24.10.4.191","URLHash",0,0,"","","System","","","","","",""
"24.10.4.191","metroHash64",0,0,"","","System","","","","","",""
"24.10.4.191","farmFingerprint64",0,0,"","","System","","","","","",""
"24.10.4.191","regionToTopContinent",0,0,"","","System","","","","","",""
"24.10.4.191","intDiv",0,0,"","","System","","","","","",""
"24.10.4.191","cityHash64",0,0,"","","System","","","","","",""
"24.10.4.191","sipHash128",0,0,"","","System","","","","","",""
"24.10.4.191","mapExtractKeyLike",0,0,"","","System","Returns a map with elements which key matches the specified pattern.","","","","mapExtractKeyLike:

``` sql
SELECT mapExtractKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')
```

``` text

```
","Map"
"24.10.4.191","sipHash128ReferenceKeyed",0,0,"","","System","Same as [sipHash128Reference](#hash_functions-siphash128reference) but additionally takes an explicit key argument instead of using a fixed key.","","","","hash:

``` sql
SELECT hex(sipHash128ReferenceKeyed((506097522914230528, 1084818905618843912),'foo', '\x01', 3));
```

``` text

```
","Hash"
"24.10.4.191","mapPartialSort",0,0,"","","System","The same as arrayReverseSort.","","","","mapPartialSort:

``` sql
SELECT mapPartialSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))
```

``` text

```
","Map"
"24.10.4.191","mapSort",0,0,"","","System","The same as arraySort.","","","","mapSort:

``` sql
SELECT mapSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))
```

``` text

```
","Map"
"24.10.4.191","mapAll",0,0,"","","System","The same as arrayAll.","","","","mapAll:

``` sql
SELECT mapAll((k, v) -> v = 1, map('k1', 1, 'k2', 2))
```

``` text

```
","Map"
"24.10.4.191","mapFilter",0,0,"","","System","The same as arrayFilter.","","","","mapFilter:

``` sql
SELECT mapFilter((k, v) -> v > 1, map('k1', 1, 'k2', 2))
```

``` text

```
","Map"
"24.10.4.191","mapConcat",0,0,"","","System","The same as arrayConcat.","","","","mapConcat:

``` sql
SELECT mapConcat(map('k1', 'v1'), map('k2', 'v2'))
```

``` text

```
","Map"
"24.10.4.191","decrypt",0,0,"","","System","","","","","",""
"24.10.4.191","logTrace",0,0,"","","System","","","","","",""
"24.10.4.191","JSONExtractKeys",0,0,"","","System","","","","","",""
"24.10.4.191","JSONExtractKeysAndValuesRaw",0,0,"","","System","","","","","",""
"24.10.4.191","JSONExtractString",0,0,"","","System","","","","","",""
"24.10.4.191","JSONKey",0,0,"","","System","","","","","",""
"24.10.4.191","JSONLength",0,0,"","","System","","","","","",""
"24.10.4.191","isValidJSON",0,0,"","","System","","","","","",""
"24.10.4.191","mapContains",0,0,"","","System","Checks whether the map has the specified key.","","","","mapContains:

``` sql
SELECT mapContains(map('k1', 'v1', 'k2', 'v2'), 'k1')
```

``` text

```
","Map"
"24.10.4.191","char",0,1,"","","System","","","","","",""
"24.10.4.191","multiSearchFirstIndexUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","h3EdgeLengthKm",0,0,"","","System","","","","","",""
"24.10.4.191","detectTonality",0,0,"","","System","","","","","",""
"24.10.4.191","toRelativeWeekNum",0,0,"","","System","","","","","",""
"24.10.4.191","showCertificate",0,0,"","","System","","","","","",""
"24.10.4.191","nested",0,0,"","","System","
Returns the array of tuples from multiple arrays.
","","","","nested:

``` sql
SELECT nested(['keys', 'values'], ['key_1', 'key_2'], ['value_1','value_2'])
```

``` text

```
","OtherFunctions"
"24.10.4.191","__bitWrapperFunc",0,0,"","","System","","","","","",""
"24.10.4.191","sipHash64Keyed",0,0,"","","System","","","","","",""
"24.10.4.191","extractAll",0,0,"","","System","","","","","",""
"24.10.4.191","toUTCTimestamp",0,0,"","","System","","","","","",""
"24.10.4.191","dynamicElement",0,0,"","","System","
Extracts a column with specified type from a `Dynamic` column.
","dynamicElement(dynamic, type_name)","- dynamic:Dynamic column
- type_name:The name of the variant type to extract
","","Example:

``` sql

CREATE TABLE test (d Dynamic) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, dynamicType(d), dynamicElement(d, 'String'), dynamicElement(d, 'Int64'), dynamicElement(d, 'Array(Int64)'), dynamicElement(d, 'Date'), dynamicElement(d, 'Array(String)') FROM test;
```

``` text

┌─d─────────────┬─dynamicType(d)─┬─dynamicElement(d, 'String')─┬─dynamicElement(d, 'Int64')─┬─dynamicElement(d, 'Array(Int64)')─┬─dynamicElement(d, 'Date')─┬─dynamicElement(d, 'Array(String)')─┐
│ ᴺᵁᴸᴸ          │ None           │ ᴺᵁᴸᴸ                        │                       ᴺᵁᴸᴸ │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ 42            │ Int64          │ ᴺᵁᴸᴸ                        │                         42 │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ Hello, World! │ String         │ Hello, World!               │                       ᴺᵁᴸᴸ │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ [1,2,3]       │ Array(Int64)   │ ᴺᵁᴸᴸ                        │                       ᴺᵁᴸᴸ │ [1,2,3]                           │                      ᴺᵁᴸᴸ │ []                                 │
└───────────────┴────────────────┴─────────────────────────────┴────────────────────────────┴───────────────────────────────────┴───────────────────────────┴────────────────────────────────────┘

```
","Dynamic"
"24.10.4.191","simpleJSONHas",0,0,"","","System","Checks whether there is a field named field_name.  The result is UInt8.","simpleJSONHas(json, field_name)","- json:The JSON in which the field is searched for. String.
- field_name:The name of the field to search for. String literal.
","It returns 1 if the field exists, 0 otherwise.","simple:

``` sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""true"",""qux"":1}');

SELECT simpleJSONHas(json, 'foo') FROM jsons;
SELECT simpleJSONHas(json, 'bar') FROM jsons;
```

``` text
1
0
```
","JSON"
"24.10.4.191","arrayPartialReverseSort",0,0,"","","System","
Returns an array of the same size as the original array where elements in range `[1..limit]`
are sorted in descending order. Remaining elements `(limit..N]` shall contain elements in unspecified order.
[example:simple_int]
[example:simple_string]

To retain only the sorted elements use `arrayResize`:
[example:retain_sorted]

If the `func` function is specified, sorting order is determined by the result of the `func`
function applied to the elements of the array.
[example:lambda_simple]

If `func` accepts multiple arguments, the `arrayPartialSort` function is passed several arrays
that the arguments of `func` will correspond to.
[example:lambda_complex]

For more details see documentation of `arraySort`.
","","","","simple_int:

``` sql
SELECT arrayPartialReverseSort(2, [5, 9, 1, 3])
```

``` text

```
simple_string:

``` sql
SELECT arrayPartialReverseSort(2, ['expenses','lasso','embolism','gladly'])
```

``` text

```
retain_sorted:

``` sql
SELECT arrayResize(arrayPartialReverseSort(2, [5, 9, 1, 3]), 2)
```

``` text

```
lambda_simple:

``` sql
SELECT arrayPartialReverseSort((x) -> -x, 2, [5, 9, 1, 3])
```

``` text

```
lambda_complex:

``` sql
SELECT arrayPartialReverseSort((x, y) -> -y, 1, [0, 1, 2], [1, 2, 3]) as res
```

``` text

```
","Array"
"24.10.4.191","arrayPartialSort",0,0,"","","System","
Returns an array of the same size as the original array where elements in range `[1..limit]`
are sorted in ascending order. Remaining elements `(limit..N]` shall contain elements in unspecified order.
[example:simple_int]
[example:simple_string]

To retain only the sorted elements use `arrayResize`:
[example:retain_sorted]

If the `func` function is specified, sorting order is determined by the result of the `func`
function applied to the elements of the array.
[example:lambda_simple]

If `func` accepts multiple arguments, the `arrayPartialSort` function is passed several arrays
that the arguments of `func` will correspond to.
[example:lambda_complex]

For more details see documentation of `arraySort`.
","","","","simple_int:

``` sql
SELECT arrayPartialSort(2, [5, 9, 1, 3])
```

``` text

```
simple_string:

``` sql
SELECT arrayPartialSort(2, ['expenses','lasso','embolism','gladly'])
```

``` text

```
retain_sorted:

``` sql
SELECT arrayResize(arrayPartialSort(2, [5, 9, 1, 3]), 2)
```

``` text

```
lambda_simple:

``` sql
SELECT arrayPartialSort((x) -> -x, 2, [5, 9, 1, 3])
```

``` text

```
lambda_complex:

``` sql
SELECT arrayPartialSort((x, y) -> -y, 1, [0, 1, 2], [1, 2, 3]) as res
```

``` text

```
","Array"
"24.10.4.191","bitRotateRight",0,0,"","","System","","","","","",""
"24.10.4.191","arrayReverseSort",0,0,"","","System","","","","","",""
"24.10.4.191","arraySort",0,0,"","","System","","","","","",""
"24.10.4.191","isConstant",0,0,"","","System","","","","","",""
"24.10.4.191","ifNotFinite",0,0,"","","System","","","","","",""
"24.10.4.191","subDate",0,1,"","","System","","","","","",""
"24.10.4.191","convertCharset",0,0,"","","System","","","","","",""
"24.10.4.191","arrayRandomSample",0,0,"","","System","","","","","",""
"24.10.4.191","extractTextFromHTML",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapContains",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapXor",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapOr",0,0,"","","System","","","","","",""
"24.10.4.191","xxh3",0,0,"","","System","Calculates value of XXH3 64-bit hash function. Refer to https://github.com/Cyan4973/xxHash for detailed documentation.","","","","hash:

``` sql
SELECT xxh3('ClickHouse')
```

``` text

```
","Hash"
"24.10.4.191","bitmapAnd",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapAndnotCardinality",0,0,"","","System","","","","","",""
"24.10.4.191","IPv6StringToNumOrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapAndnot",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapXorCardinality",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapOrCardinality",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapAndCardinality",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapMin",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapCardinality",0,0,"","","System","","","","","",""
"24.10.4.191","mapExists",0,0,"","","System","The same as arrayExists.","","","","mapExists:

``` sql
SELECT mapExists((k, v) -> v = 1, map('k1', 1, 'k2', 2))
```

``` text

```
","Map"
"24.10.4.191","bitmapSubsetLimit",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapSubsetInRange",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapToArray",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapBuild",0,0,"","","System","","","","","",""
"24.10.4.191","addQuarters",0,0,"","","System","","","","","",""
"24.10.4.191","pointInEllipses",0,0,"","","System","","","","","",""
"24.10.4.191","clamp",0,0,"","","System","","","","","",""
"24.10.4.191","addressToLineWithInlines",0,0,"","","System","","","","","",""
"24.10.4.191","monthName",0,1,"","","System","","","","","",""
"24.10.4.191","splitByRegexp",0,0,"","","System","","","","","",""
"24.10.4.191","arrayReverseFill",0,0,"","","System","","","","","",""
"24.10.4.191","arrayFill",0,0,"","","System","","","","","",""
"24.10.4.191","floor",0,1,"","","System","","","","","",""
"24.10.4.191","bitTestAny",0,0,"","","System","","","","","",""
"24.10.4.191","addressToSymbol",0,0,"","","System","","","","","",""
"24.10.4.191","if",0,1,"","","System","","","","","",""
"24.10.4.191","pathFull",0,0,"","","System","","","","","",""
"24.10.4.191","arraySlice",0,0,"","","System","","","","","",""
"24.10.4.191","xxHash32",0,0,"","","System","","","","","",""
"24.10.4.191","hilbertEncode",0,0,"","","System","
Calculates code for Hilbert Curve for a list of unsigned integers.

The function has two modes of operation:
- Simple
- Expanded

Simple: accepts up to 2 unsigned integers as arguments and produces a UInt64 code.
[example:simple]
Produces: `31`

Expanded: accepts a range mask (tuple) as a first argument and up to 2 unsigned integers as other arguments.
Each number in the mask configures the number of bits by which the corresponding argument will be shifted left, effectively scaling the argument within its range.
[example:range_expanded]
Produces: `4031541586602`
Note: tuple size must be equal to the number of the other arguments

Range expansion can be beneficial when you need a similar distribution for arguments with wildly different ranges (or cardinality)
For example: 'IP Address' (0...FFFFFFFF) and 'Country code' (0...FF)

For a single argument without a tuple, the function returns the argument itself as the Hilbert index, since no dimensional mapping is needed.
[example:identity]
Produces: `1`

If a single argument is provided with a tuple specifying bit shifts, the function shifts the argument left by the specified number of bits.
[example:identity_expanded]
Produces: `512`

The function also accepts columns as arguments:
[example:from_table]

But the range tuple must still be a constant:
[example:from_table_range]

Please note that you can fit only so much bits of information into Hilbert code as UInt64 has.
Two arguments will have a range of maximum 2^32 (64/2) each
All overflow will be clamped to zero
","","","","simple:

``` sql
SELECT hilbertEncode(3, 4)
```

``` text

```
range_expanded:

``` sql
SELECT hilbertEncode((10,6), 1024, 16)
```

``` text

```
identity:

``` sql
SELECT hilbertEncode(1)
```

``` text

```
identity_expanded:

``` sql
SELECT hilbertEncode(tuple(2), 128)
```

``` text

```
from_table:

``` sql
SELECT hilbertEncode(n1, n2) FROM table
```

``` text

```
from_table_range:

``` sql
SELECT hilbertEncode((1,2), n1, n2) FROM table
```

``` text

```
","Hilbert Curve, Hilbert coding"
"24.10.4.191","hilbertDecode",0,0,"","","System","
Decodes a Hilbert curve index back into a tuple of unsigned integers, representing coordinates in multi-dimensional space.

The function has two modes of operation:
- Simple
- Expanded

Simple Mode: Accepts the desired tuple size as the first argument (up to 2) and the Hilbert index as the second argument. This mode decodes the index into a tuple of the specified size.
[example:simple]
Will decode into: `(8, 0)`
The resulting tuple size cannot be more than 2

Expanded Mode: Takes a range mask (tuple) as the first argument and the Hilbert index as the second argument.
Each number in the mask specifies the number of bits by which the corresponding decoded argument will be right-shifted, effectively scaling down the output values.
[example:range_shrank]
Note: see hilbertEncode() docs on why range change might be beneficial.
Still limited to 2 numbers at most.

Hilbert code for one argument is always the argument itself (as a tuple).
[example:identity]
Produces: `(1)`

A single argument with a tuple specifying bit shifts will be right-shifted accordingly.
[example:identity_shrank]
Produces: `(128)`

The function accepts a column of codes as a second argument:
[example:from_table]

The range tuple must be a constant:
[example:from_table_range]
","","","","simple:

``` sql
SELECT hilbertDecode(2, 64)
```

``` text

```
range_shrank:

``` sql
SELECT hilbertDecode((1,2), 1572864)
```

``` text

```
identity:

``` sql
SELECT hilbertDecode(1, 1)
```

``` text

```
identity_shrank:

``` sql
SELECT hilbertDecode(tuple(2), 512)
```

``` text

```
from_table:

``` sql
SELECT hilbertDecode(2, code) FROM table
```

``` text

```
from_table_range:

``` sql
SELECT hilbertDecode((1,2), code) FROM table
```

``` text

```
","Hilbert Curve, Hilbert coding"
"24.10.4.191","empty",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfQuarter",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetDescendants",0,0,"","","System","
Returns all descendants as if dictGetChildren function was applied level times recursively.
Accepts 3 parameters: name of the dictionary, key value - expression returning a UInt64-type value, level — hierarchy level - If level = 0 returns all descendants to the end - UInt8
Returned value: descendants for the key, type of Array(UInt64)
","","","","",""
"24.10.4.191","dictGetChildren",0,0,"","","System","
Returns first-level children as an array of indexes. It is the inverse transformation for dictGetHierarchy.
Accepts 2 parameters: name of the dictionary, key value - expression returning a UInt64-type value.
Returned value: first-level descendants for the key, type of Array(UInt64)
","","","","",""
"24.10.4.191","notEmpty",0,0,"","","System","","","","","",""
"24.10.4.191","format",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetHierarchy",0,0,"","","System","
Creates an array, containing all the parents of a key in the hierarchical dictionary.
Accepts 2 parameters: name of the dictionary, key value - expression returning a UInt64-type value.
Returned value: parents for the key, type of Array(UInt64)
","","","","",""
"24.10.4.191","dictGetStringOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the String if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetIPv4OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the IPv4 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetUUIDOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UUID if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetDateTimeOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the DateTime if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","UTCTimestamp",0,1,"","","System","
Returns the current date and time at the moment of query analysis. The function is a constant expression.
Same as `now('UTC')`. Was added only for MySQL support. `now` is preferred.

Example:
[example:typical]
","","","","typical:

``` sql
SELECT UTCTimestamp();
```

``` text

```
","Dates and Times"
"24.10.4.191","dictGetFloat64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Float64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetInt64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetUInt64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetString",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the String if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetIPv6",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the IPv6 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetIPv4",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the IPv4 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetUUID",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UUID if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","IPv6StringToNum",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetInt64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetInt32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetInt16",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int16 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetInt8",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int8 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetUInt32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dictGetAll",0,0,"","","System","
Retrieves all values from a dictionary corresponding to the given key values.

Accepts 3 or 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- [optional] maximum number of values to return for each attribute;

Returned value: array of dictionary attribute values parsed in the attribute's data type if key is found, otherwise empty array.

Throws an exception if cannot parse the value of the attribute, the value does not match the attribute data type, or the dictionary doesn't support this function.
","","","","",""
"24.10.4.191","dictGetOrNull",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the attribute’s data type if key is found, otherwise NULL.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","cutWWW",0,0,"","","System","","","","","",""
"24.10.4.191","substringIndex",0,0,"","","System","","","","","",""
"24.10.4.191","atan2",0,1,"","","System","","","","","",""
"24.10.4.191","kafkaMurmurHash",0,0,"","","System","","","","","",""
"24.10.4.191","gccMurmurHash",0,0,"","","System","","","","","",""
"24.10.4.191","reverseUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","murmurHash3_64",0,0,"","","System","","","","","",""
"24.10.4.191","murmurHash2_32",0,0,"","","System","","","","","",""
"24.10.4.191","dictIsIn",0,0,"","","System","
Checks the ancestor of a key through the whole hierarchical chain in the dictionary.
Accepts 3 parameters: name of the dictionary, key to be checked - expression returning a UInt64-type value, alleged ancestor of the key - expression returning a UInt64-type.
Returned value: 0 if key is not a child of the ancestor, 1 if key is a child of the ancestor or if key is the ancestor, type of UInt8
","","","","",""
"24.10.4.191","base64Encode",0,0,"","","System","Encodes a String as base64, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-4). Alias: TO_BASE64.","base64Encode(plaintext)","- plaintext:String column or constant.
","A string containing the encoded value of the argument.","Example:

``` sql
SELECT base64Encode('clickhouse')
```

``` text
Y2xpY2tob3VzZQ==
```
","String encoding"
"24.10.4.191","accurateCastOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","ignore",0,0,"","","System","","","","","",""
"24.10.4.191","structureToCapnProtoSchema",0,0,"","","System","
Function that converts ClickHouse table structure to CapnProto format schema
","","","","random:

``` sql
SELECT structureToCapnProtoSchema('s String, x UInt32', 'MessageName') format TSVRaw
```

``` text
struct MessageName
{
    s @0 : Data;
    x @1 : UInt32;
}
```
","Other"
"24.10.4.191","normalizeQuery",0,0,"","","System","","","","","",""
"24.10.4.191","mapContainsKeyLike",0,0,"","","System","Checks whether map contains key LIKE specified pattern.","","","","mapContainsKeyLike:

``` sql
SELECT mapContainsKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')
```

``` text

```
","Map"
"24.10.4.191","CAST",0,1,"","","System","","","","","",""
"24.10.4.191","s2RectIntersection",0,0,"","","System","","","","","",""
"24.10.4.191","ngramSearchCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","ngramDistance",0,0,"","","System","","","","","",""
"24.10.4.191","acos",0,1,"","","System","","","","","",""
"24.10.4.191","bitShiftLeft",0,0,"","","System","","","","","",""
"24.10.4.191","BLAKE3",0,0,"","","System","
    Calculates BLAKE3 hash string and returns the resulting set of bytes as FixedString.
    This cryptographic hash-function is integrated into ClickHouse with BLAKE3 Rust library.
    The function is rather fast and shows approximately two times faster performance compared to SHA-2, while generating hashes of the same length as SHA-256.
    It returns a BLAKE3 hash as a byte array with type FixedString(32).
    ","","","","hash:

``` sql
SELECT hex(BLAKE3('ABC'))
```

``` text

```
","Hash"
"24.10.4.191","SHA512_256",0,0,"","","System","Calculates the SHA512_256 hash of the given string.","SELECT SHA512_256(s);","- s:The input [String](../../sql-reference/data-types/string.md).
","The SHA512_256 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

``` sql
SELECT HEX(SHA512_256('abc'));
```

``` text

┌─hex(SHA512_256('abc'))───────────────────────────────────────────┐
│ 53048E2681941EF99B2E29B76B4C7DABE4C2D0C634FC6D46E0E2F13107E7AF23 │
└──────────────────────────────────────────────────────────────────┘
            
```
",""
"24.10.4.191","JSONExtractFloat",0,0,"","","System","","","","","",""
"24.10.4.191","SHA512",0,0,"","","System","Calculates the SHA512 hash of the given string.","SELECT SHA512(s);","- s:The input [String](../../sql-reference/data-types/string.md).
","The SHA512 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

``` sql
SELECT HEX(SHA512('abc'));
```

``` text

┌─hex(SHA512('abc'))───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ DDAF35A193617ABACC417349AE20413112E6FA4E89A97EA20A9EEEE64B55D39A2192992A274FC1A836BA3C23A3FEEBBD454D4423643CE80E2A9AC94FA54CA49F │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
            
```
",""
"24.10.4.191","murmurHash3_128",0,0,"","","System","","","","","",""
"24.10.4.191","SHA384",0,0,"","","System","Calculates the SHA384 hash of the given string.","SELECT SHA384(s);","- s:The input [String](../../sql-reference/data-types/string.md).
","The SHA384 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

``` sql
SELECT HEX(SHA384('abc'));
```

``` text

┌─hex(SHA384('abc'))───────────────────────────────────────────────────────────────────────────────┐
│ CB00753F45A35E8BB5A03D699AC65007272C32AB0EDED1631A8B605A43FF5BED8086072BA1E7CC2358BAECA134C825A7 │
└──────────────────────────────────────────────────────────────────────────────────────────────────┘
            
```
",""
"24.10.4.191","MD5",0,0,"","","System","Calculates the MD5 hash of the given string.","SELECT MD5(s);","- s:The input [String](../../sql-reference/data-types/string.md).
","The MD5 hash of the given input string returned as a [FixedString(16)](../../sql-reference/data-types/fixedstring.md).",":

``` sql
SELECT HEX(MD5('abc'));
```

``` text

┌─hex(MD5('abc'))──────────────────┐
│ 900150983CD24FB0D6963F7D28E17F72 │
└──────────────────────────────────┘
            
```
",""
"24.10.4.191","svg",0,0,"","","System","","","","","",""
"24.10.4.191","extractGroups",0,0,"","","System","","","","","",""
"24.10.4.191","transactionLatestSnapshot",0,0,"","","System","","","","","",""
"24.10.4.191","transactionID",0,0,"","","System","","","","","",""
"24.10.4.191","polygonsEqualsCartesian",0,0,"","","System","","","","","",""
"24.10.4.191","__bitSwapLastTwo",0,0,"","","System","","","","","",""
"24.10.4.191","exp10",0,0,"","","System","","","","","",""
"24.10.4.191","addHours",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetUInt16OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt16 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","h3IsPentagon",0,0,"","","System","","","","","",""
"24.10.4.191","byteSwap",0,1,"","","System","
Reverses the bytes of an integer, i.e. changes its [endianness](https://en.wikipedia.org/wiki/Endianness).

**Example**

```sql
byteSwap(3351772109)
```

Result:

```result
┌─byteSwap(3351772109)─┐
│           3455829959 │
└──────────────────────┘
```

The above example can be worked out in the following manner:
1. Convert the base-10 integer to its equivalent hexadecimal format in big-endian format, i.e. 3351772109 -> C7 C7 FB CD (4 bytes)
2. Reverse the bytes, i.e. C7 C7 FB CD -> CD FB C7 C7
3. Convert the result back to an integer assuming big-endian, i.e. CD FB C7 C7  -> 3455829959

One use-case of this function is reversing IPv4s:

```result
┌─toIPv4(byteSwap(toUInt32(toIPv4('205.251.199.199'))))─┐
│ 199.199.251.205                                       │
└───────────────────────────────────────────────────────┘
```
","","","","8-bit:

``` sql
SELECT byteSwap(54)
```

``` text
54
```
16-bit:

``` sql
SELECT byteSwap(4135)
```

``` text
10000
```
32-bit:

``` sql
SELECT byteSwap(3351772109)
```

``` text
3455829959
```
64-bit:

``` sql
SELECT byteSwap(123294967295)
```

``` text
18439412204227788800
```
","Arithmetic, Mathematical"
"24.10.4.191","asinh",0,0,"","","System","","","","","",""
"24.10.4.191","getClientHTTPHeader",0,0,"","","System","
Get the value of an HTTP header.

If there is no such header or the current request is not performed via the HTTP interface, the function returns an empty string.
Certain HTTP headers (e.g., `Authentication` and `X-ClickHouse-*`) are restricted.

The function requires the setting `allow_get_client_http_header` to be enabled.
The setting is not enabled by default for security reasons, because some headers, such as `Cookie`, could contain sensitive info.

HTTP headers are case sensitive for this function.

If the function is used in the context of a distributed query, it returns non-empty result only on the initiator node.
"",
            .syntax = ""getClientHTTPHeader(name","","- name:The HTTP header name (String)
","The value of the header (String).","","Miscellaneous"
"24.10.4.191","makeDateTime64",0,0,"","","System","","","","","",""
"24.10.4.191","makeDateTime",0,0,"","","System","","","","","",""
"24.10.4.191","makeDate",0,1,"","","System","","","","","",""
"24.10.4.191","changeMinute",0,0,"","","System","Changes the minute component of a date or date time.","changeMinute(date_or_datetime, value);","- date_or_datetime:The value to change. Type: Date, Date32, DateTime, or DateTime64
- value:The new value. Type: [U]Int*
","The same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.","","Dates and Times"
"24.10.4.191","changeDay",0,0,"","","System","Changes the day component of a date or date time.","changeDay(date_or_datetime, value);","- date_or_datetime:The value to change. Type: Date, Date32, DateTime, or DateTime64
- value:The new value. Type: [U]Int*
","The same type as date_or_datetime.","","Dates and Times"
"24.10.4.191","changeYear",0,0,"","","System","Changes the year component of a date or date time.","changeYear(date_or_datetime, value);","- date_or_datetime:The value to change. Type: Date, Date32, DateTime, or DateTime64
- value:The new value. Type: [U]Int*
","The same type as date_or_datetime.","","Dates and Times"
"24.10.4.191","JSON_VALUE",0,0,"","","System","","","","","",""
"24.10.4.191","isIPv4String",0,0,"","","System","","","","","",""
"24.10.4.191","JSON_QUERY",0,0,"","","System","","","","","",""
"24.10.4.191","atan",0,1,"","","System","","","","","",""
"24.10.4.191","jaroWinklerSimilarity",0,0,"","","System","Calculates the Jaro-Winkler similarity between two byte-string.","","","","",""
"24.10.4.191","stringJaccardIndexUTF8",0,0,"","","System","Calculates the Jaccard similarity index between two UTF8 strings.","","","","",""
"24.10.4.191","stringJaccardIndex",0,0,"","","System","Calculates the Jaccard similarity index between two byte strings.","","","","",""
"24.10.4.191","damerauLevenshteinDistance",0,0,"","","System","Calculates the Damerau-Levenshtein distance two between two byte-string.","","","","",""
"24.10.4.191","UUIDToNum",0,0,"","","System","
This function accepts a UUID and returns a FixedString(16) as its binary representation, with its format optionally specified by variant (Big-endian by default).
","","","","uuid:

``` sql
select toUUID(UUIDNumToString(toFixedString('a/<@];!~p{jTj={)', 16))) as uuid, UUIDToNum(uuid) as uuidNum, UUIDToNum(uuid, 2) as uuidMsNum
```

``` text

┌─uuid─────────────────────────────────┬─uuidNum──────────┬─uuidMsNum────────┐
│ 612f3c40-5d3b-217e-707b-6a546a3d7b29 │ a/<@];!~p{jTj={) │ @</a];!~p{jTj={) │
└──────────────────────────────────────┴──────────────────┴──────────────────┘

```
","UUID"
"24.10.4.191","editDistanceUTF8",0,0,"","","System","Calculates the edit distance between two UTF8 strings.","","","","",""
"24.10.4.191","editDistance",0,0,"","","System","Calculates the edit distance between two byte-strings.","","","","",""
"24.10.4.191","cbrt",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapHasAny",0,0,"","","System","","","","","",""
"24.10.4.191","generateSnowflakeID",0,0,"","","System","Generates a Snowflake ID. The generated Snowflake ID contains the current Unix timestamp in milliseconds (41 + 1 top zero bits), followed by a machine id (10 bits), and a counter (12 bits) to distinguish IDs within a millisecond. For any given timestamp (unix_ts_ms), the counter starts at 0 and is incremented by 1 for each new Snowflake ID until the timestamp changes. In case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to 0. Function generateSnowflakeID guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.","generateSnowflakeID([expression, [machine_id]])","- expression:The expression is used to bypass common subexpression elimination if the function is called multiple times in a query but otherwise ignored. Optional.
- machine_id:A machine ID, the lowest 10 bits are used. Optional.
","A value of type UInt64","no_arguments:

``` sql
SELECT generateSnowflakeID()
```

``` text
7201148511606784000
```
with_machine_id:

``` sql
SELECT generateSnowflakeID(1)
```

``` text
7201148511606784001
```
with_expression_and_machine_id:

``` sql
SELECT generateSnowflakeID('some_expression', 1)
```

``` text
7201148511606784002
```
","Snowflake ID"
"24.10.4.191","arrayEnumerateUniq",0,0,"","","System","","","","","",""
"24.10.4.191","fromModifiedJulianDayOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","fromModifiedJulianDay",0,0,"","","System","","","","","",""
"24.10.4.191","position",0,1,"","","System","","","","","",""
"24.10.4.191","__bitBoolMaskOr",0,0,"","","System","","","","","",""
"24.10.4.191","cosh",0,0,"","","System","","","","","",""
"24.10.4.191","countDigits",0,0,"","","System","","","","","",""
"24.10.4.191","geohashEncode",0,0,"","","System","","","","","",""
"24.10.4.191","formatReadableTimeDelta",0,0,"","","System","","","","","",""
"24.10.4.191","byteSize",0,0,"","","System","","","","","",""
"24.10.4.191","intExp2",0,0,"","","System","","","","","",""
"24.10.4.191","minus",0,0,"","","System","","","","","",""
"24.10.4.191","countSubstringsCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","changeHour",0,0,"","","System","Changes the hour component of a date or date time.","changeHour(date_or_datetime, value);","- date_or_datetime:The value to change. Type: Date, Date32, DateTime, or DateTime64
- value:The new value. Type: [U]Int*
","The same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.","","Dates and Times"
"24.10.4.191","wordShingleMinHashArgCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","wordShingleMinHashArg",0,0,"","","System","","","","","",""
"24.10.4.191","ngramMinHashArgCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","ngramMinHashArgUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","_CAST",0,1,"","","System","","","","","",""
"24.10.4.191","ngramMinHashArg",0,0,"","","System","","","","","",""
"24.10.4.191","wordShingleMinHashCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetDateOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Date if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","wordShingleMinHashCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","ngramMinHashCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","ngramMinHashUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","ngramMinHashCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","wordShingleSimHashUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","ngramSimHashUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","ngramSimHashCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","ngramSimHash",0,0,"","","System","","","","","",""
"24.10.4.191","MD4",0,0,"","","System","Calculates the MD4 hash of the given string.","SELECT MD4(s);","- s:The input [String](../../sql-reference/data-types/string.md).
","The MD4 hash of the given input string returned as a [FixedString(16)](../../sql-reference/data-types/fixedstring.md).",":

``` sql
SELECT HEX(MD4('abc'));
```

``` text

┌─hex(MD4('abc'))──────────────────┐
│ A448017AAF21D8525FC10AE87AA6729D │
└──────────────────────────────────┘
            
```
",""
"24.10.4.191","moduloOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","toTimezone",0,0,"","","System","","","","","",""
"24.10.4.191","currentDatabase",0,0,"","","System","","","","","",""
"24.10.4.191","polygonAreaSpherical",0,0,"","","System","","","","","",""
"24.10.4.191","base58Encode",0,0,"","","System","","","","","",""
"24.10.4.191","structureToProtobufSchema",0,0,"","","System","
Function that converts ClickHouse table structure to Protobuf format schema
","","","","random:

``` sql
SELECT structureToCapnProtoSchema('s String, x UInt32', 'MessageName') format TSVRaw
```

``` text
syntax = ""proto3"";

message MessageName
{
    bytes s = 1;
    uint32 x = 2;
}
```
","Other"
"24.10.4.191","endsWith",0,0,"","","System","","","","","",""
"24.10.4.191","dictHas",0,0,"","","System","
Checks whether a key is present in a dictionary.
Accepts 2 parameters: name of the dictionary, key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration.
Returned value: 0 if there is no key, 1 if there is a key, type of UInt8
","","","","",""
"24.10.4.191","enabledProfiles",0,0,"","","System","","","","","",""
"24.10.4.191","positiveModulo",0,1,"","","System","
Calculates the remainder when dividing `a` by `b`. Similar to function `modulo` except that `positiveModulo` always return non-negative number.
Returns the difference between `a` and the nearest integer not greater than `a` divisible by `b`.
In other words, the function returning the modulus (modulo) in the terms of Modular Arithmetic.
        ","","","","positiveModulo:

``` sql
SELECT positiveModulo(-1, 10);
```

``` text

```
","Arithmetic"
"24.10.4.191","bitmaskToList",0,0,"","","System","","","","","",""
"24.10.4.191","bitPositionsToArray",0,0,"","","System","","","","","",""
"24.10.4.191","currentSchemas",0,1,"","","System","
Returns a single-element array with the name of the current database

Requires a boolean parameter, but it is ignored actually. It is required just for compatibility with the implementation of this function in other DB engines.

[example:common]
","","","","common:

``` sql
SELECT current_schemas(true);
```

``` text
['default']
```
",""
"24.10.4.191","currentUser",0,0,"","","System","","","","","",""
"24.10.4.191","tanh",0,1,"","","System","","","","","",""
"24.10.4.191","dateDiff",0,1,"","","System","","","","","",""
"24.10.4.191","seriesPeriodDetectFFT",0,0,"","","System","
Finds the period of the given time series data using FFT
FFT - Fast Fourier transform (https://en.wikipedia.org/wiki/Fast_Fourier_transform)

**Syntax**

``` sql
seriesPeriodDetectFFT(series);
```

**Arguments**

- `series` - An array of numeric values

**Returned value**

- A real value equal to the period of time series
- Returns NAN when number of data points are less than four.

Type: [Float64](../../sql-reference/data-types/float.md).

**Examples**

Query:

``` sql
SELECT seriesPeriodDetectFFT([1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6]) AS print_0;
```

Result:

``` text
┌───────────print_0──────┐
│                      3 │
└────────────────────────┘
```

``` sql
SELECT seriesPeriodDetectFFT(arrayMap(x -> abs((x % 6) - 3), range(1000))) AS print_0;
```

Result:

``` text
┌─print_0─┐
│       6 │
└─────────┘
```
","","","","","Time series analysis"
"24.10.4.191","h3Distance",0,0,"","","System","","","","","",""
"24.10.4.191","extractAllGroupsHorizontal",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetUInt64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","timeDiff",0,1,"","","System","
Returns the difference between two dates or dates with time values. The difference is calculated in seconds units (see toRelativeSecondNum).
It is same as `dateDiff` and was added only for MySQL support. `dateDiff` is preferred.

Example:
[example:typical]
","","","","typical:

``` sql
SELECT timeDiff(UTCTimestamp(), now());
```

``` text

```
","Dates and Times"
"24.10.4.191","timezone",0,0,"","","System","
Returns the default timezone for current session.
Used as default timezone for parsing DateTime|DateTime64 without explicitly specified timezone.
Can be changed with SET timezone = 'New/Tz'

[example:timezone]
    ","","","","timezone:

``` sql
SELECT timezone();
```

``` text

```
","Constant, Miscellaneous"
"24.10.4.191","age",0,1,"","","System","","","","","",""
"24.10.4.191","cos",0,1,"","","System","","","","","",""
"24.10.4.191","lowCardinalityKeys",0,0,"","","System","","","","","",""
"24.10.4.191","unhex",0,1,"","","System","","","","","",""
"24.10.4.191","hex",0,1,"","","System","","","","","",""
"24.10.4.191","blockSerializedSize",0,0,"","","System","","","","","",""
"24.10.4.191","dateTrunc",0,0,"","","System","","","","","",""
"24.10.4.191","gcd",0,0,"","","System","","","","","",""
"24.10.4.191","getTypeSerializationStreams",0,0,"","","System","","","","","",""
"24.10.4.191","punycodeDecode",0,0,"","","System","
Computes a Punycode representation of a string. Throws an exception if the input is not valid Punycode.","punycodeDecode(str)","- str:A Punycode-encoded string
","The plaintext representation [String](/docs/en/sql-reference/data-types/string.md).","simple:

``` sql
SELECT punycodeDecode('Mnchen-3ya') AS plain;
```

``` text

┌─plain───┐
│ München │
└─────────┘
            
```
",""
"24.10.4.191","parseTimeDelta",0,0,"","","System","","","","","",""
"24.10.4.191","h3Line",0,0,"","","System","","","","","",""
"24.10.4.191","subtractMinutes",0,0,"","","System","","","","","",""
"24.10.4.191","normalizeQueryKeepNames",0,0,"","","System","","","","","",""
"24.10.4.191","ifNull",0,1,"","","System","","","","","",""
"24.10.4.191","protocol",0,0,"","","System","","","","","",""
"24.10.4.191","sinh",0,0,"","","System","","","","","",""
"24.10.4.191","alphaTokens",0,0,"","","System","","","","","",""
"24.10.4.191","erf",0,0,"","","System","","","","","",""
"24.10.4.191","divide",0,0,"","","System","","","","","",""
"24.10.4.191","arrayEnumerateUniqRanked",0,0,"","","System","","","","","",""
"24.10.4.191","CRC64",0,1,"","","System","","","","","",""
"24.10.4.191","emptyArrayDate",0,0,"","","System","","","","","",""
"24.10.4.191","CRC32IEEE",0,1,"","","System","","","","","",""
"24.10.4.191","trimBoth",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsUInt8",0,0,"","","System","","","","","",""
"24.10.4.191","atanh",0,0,"","","System","","","","","",""
"24.10.4.191","intDivOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","evalMLMethod",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayInt32",0,0,"","","System","","","","","",""
"24.10.4.191","extract",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfMonth",0,0,"","","System","","","","","",""
"24.10.4.191","cutToFirstSignificantSubdomainCustomRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainCustom` but follows stricter rules according to RFC 3986.","","","","","URL"
"24.10.4.191","dictGetInt16OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int16 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","cutToFirstSignificantSubdomainCustom",0,0,"","","System","
Returns the part of the domain that includes top-level subdomains up to the first significant subdomain. Accepts custom TLD list name.

Can be useful if you need fresh TLD list or you have custom.
        ","","","","cutToFirstSignificantSubdomainCustom:

``` sql
SELECT cutToFirstSignificantSubdomainCustom('bar.foo.there-is-no-such-domain', 'public_suffix_list');
```

``` text

```
","URL"
"24.10.4.191","aes_decrypt_mysql",0,0,"","","System","","","","","",""
"24.10.4.191","formatQuerySingleLine",0,0,"","","System","Like formatQuery() but the returned formatted string contains no line breaks. Throws in case of a parsing error.
[example:multiline]","formatQuerySingleLine(query)","- query:The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","multiline:

``` sql
SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

``` text
SELECT a, b FROM tab WHERE (a > 3) AND (b < 3)
```
","Other"
"24.10.4.191","bitXor",0,0,"","","System","","","","","",""
"24.10.4.191","lcm",0,0,"","","System","","","","","",""
"24.10.4.191","detectLanguage",0,0,"","","System","","","","","",""
"24.10.4.191","formatRow",0,0,"","","System","","","","","",""
"24.10.4.191","countMatchesCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","sqrt",0,1,"","","System","","","","","",""
"24.10.4.191","arrayShiftLeft",0,0,"","","System","
Returns an array of the same size as the original array with elements shifted
to the left by the specified number of positions. New elements are filled with
provided default values or default values of the corresponding type.
[example:simple_int]
[example:overflow_int]
[example:simple_string]
[example:simple_array]
[example:simple_nested_array]

Negative shift values are treated as shifting to the right by the absolute
value of the shift.
[example:negative_shift_int]

The default value must be of the same type as the array elements.
[example:simple_int_with_default]
[example:simple_string_with_default]
[example:simple_array_with_default]
[example:casted_array_with_default]
","","","","simple_int:

``` sql
SELECT arrayShiftLeft([1, 2, 3, 4, 5], 3)
```

``` text
[4, 5, 0, 0, 0]
```
negative_shift_int:

``` sql
SELECT arrayShiftLeft([1, 2, 3, 4, 5], -3)
```

``` text
[0, 0, 0, 1, 2]
```
overflow_int:

``` sql
SELECT arrayShiftLeft([1, 2, 3, 4, 5], 8)
```

``` text
[0, 0, 0, 0, 0]
```
simple_string:

``` sql
SELECT arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3)
```

``` text
['d', 'e', '', '', '']
```
simple_array:

``` sql
SELECT arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2)
```

``` text
[[5, 6], [], []]
```
simple_nested_array:

``` sql
SELECT arrayShiftLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)
```

``` text
[[[5, 6], [7, 8]], []]
```
simple_int_with_default:

``` sql
SELECT arrayShiftLeft([1, 2, 3, 4, 5], 3, 7)
```

``` text
[4, 5, 7, 7, 7]
```
simple_string_with_default:

``` sql
SELECT arrayShiftLeft(['a', 'b', 'c', 'd', 'e'], 3, 'foo')
```

``` text
['d', 'e', 'foo', 'foo', 'foo']
```
simple_array_with_default:

``` sql
SELECT arrayShiftLeft([[1, 2], [3, 4], [5, 6]], 2, [7, 8])
```

``` text
[[5, 6], [7, 8], [7, 8]]
```
casted_array_with_default:

``` sql
SELECT arrayShiftLeft(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000)
```

``` text
[2, 3, 4, 5, 6, 1000]
```
","Array"
"24.10.4.191","fromDaysSinceYearZero",0,0,"","","System","
Given the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601 return a corresponding date.
The calculation is the same as in MySQL's FROM_DAYS() function.
","","","","typical:

``` sql
SELECT fromDaysSinceYearZero(713569)
```

``` text
2023-09-08
```
","Dates and Times"
"24.10.4.191","ngramMinHash",0,0,"","","System","","","","","",""
"24.10.4.191","toMonth",0,0,"","","System","","","","","",""
"24.10.4.191","range",0,0,"","","System","","","","","",""
"24.10.4.191","fromUnixTimestamp64Micro",0,0,"","","System","","","","","",""
"24.10.4.191","degrees",0,1,"","","System","","","","","",""
"24.10.4.191","arrayAvg",0,0,"","","System","","","","","",""
"24.10.4.191","concatWithSeparator",0,0,"","","System","
Returns the concatenation strings separated by string separator. Syntax: concatWithSeparator(sep, expr1, expr2, expr3...)
        ","","","","concatWithSeparator:

``` sql
SELECT concatWithSeparator('a', '1', '2', '3')
```

``` text

```
","String"
"24.10.4.191","hopEnd",0,0,"","","System","","","","","",""
"24.10.4.191","hopStart",0,0,"","","System","","","","","",""
"24.10.4.191","hop",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfInterval",0,0,"","","System","","","","","",""
"24.10.4.191","tumble",0,0,"","","System","","","","","",""
"24.10.4.191","formatQuerySingleLineOrNull",0,0,"","","System","Like formatQuery() but the returned formatted string contains no line breaks. Returns NULL in case of a parsing error.
[example:multiline]","formatQuerySingleLineOrNull(query)","- query:The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","multiline:

``` sql
SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

``` text
SELECT a, b FROM tab WHERE (a > 3) AND (b < 3)
```
","Other"
"24.10.4.191","randLogNormal",0,0,"","","System","
Returns a random number from the lognormal distribution (a distribution of a random variable whose logarithm is normally distributed).
Accepts two parameters - mean and variance.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randLogNormal(0, 5) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","generateULID",0,0,"","","System","
Generates a Universally Unique Lexicographically Sortable Identifier (ULID).
This function takes an optional argument, the value of which is discarded to generate different values in case the function is called multiple times.
The function returns a value of type FixedString(26).
","","","","ulid:

``` sql
SELECT generateULID()
```

``` text

```
multiple:

``` sql
SELECT generateULID(1), generateULID(2)
```

``` text

```
","ULID"
"24.10.4.191","bar",0,0,"","","System","","","","","",""
"24.10.4.191","arrayZipUnaligned",0,0,"","","System","
Combines multiple arrays into a single array, allowing for unaligned arrays. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.

If the arrays have different sizes, the shorter arrays will be padded with `null` values.
","","","","","String"
"24.10.4.191","shardNum",0,0,"","","System","","","","","",""
"24.10.4.191","arrayExists",0,0,"","","System","","","","","",""
"24.10.4.191","JSONSharedDataPaths",0,0,"","","System","
Returns the list of paths that are stored in shared data structure in JSON column.
","JSONDynamicPaths(json)","- json:JSON column
","","Example:

``` sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONSharedDataPaths(json) FROM test;

```

``` text

┌─json─────────────────────────────────┬─JSONSharedDataPaths(json)─┐
│ {""a"":""42""}                           │ []                        │
│ {""b"":""Hello""}                        │ ['b']                     │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['c']                     │
└──────────────────────────────────────┴───────────────────────────┘

```
","JSON"
"24.10.4.191","JSONDynamicPathsWithTypes",0,0,"","","System","
Returns the list of dynamic paths that are stored as separate subcolumns and their types in each row in JSON column.
","JSONDynamicPathsWithTypes(json)","- json:JSON column
","","Example:

``` sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPathsWithTypes(json) FROM test;

```

``` text

┌─json─────────────────────────────────┬─JSONDynamicPathsWithTypes(json)─┐
│ {""a"":""42""}                           │ {'a':'Int64'}                   │
│ {""b"":""Hello""}                        │ {}                              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))'}  │
└──────────────────────────────────────┴─────────────────────────────────┘

```
","JSON"
"24.10.4.191","JSONAllPathsWithTypes",0,0,"","","System","
Returns the list of all paths and their data types stored in each row in JSON column.
","JSONAllPathsWithTypes(json)","- json:JSON column
","","Example:

``` sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONAllPathsWithTypes(json) FROM test;

```

``` text

┌─json─────────────────────────────────┬─JSONAllPathsWithTypes(json)───────────────┐
│ {""a"":""42""}                           │ {'a':'Int64'}                             │
│ {""b"":""Hello""}                        │ {'b':'String'}                            │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))','c':'Date'} │
└──────────────────────────────────────┴───────────────────────────────────────────┘

```
","JSON"
"24.10.4.191","rand",0,1,"","","System","","","","","",""
"24.10.4.191","readWKTRing",0,0,"","","System","","","","","",""
"24.10.4.191","caseWithExpression",0,0,"","","System","","","","","",""
"24.10.4.191","greatCircleDistance",0,0,"","","System","","","","","",""
"24.10.4.191","greatCircleAngle",0,0,"","","System","","","","","",""
"24.10.4.191","endsWithUTF8",0,0,"","","System","
Returns whether string `str` ends with `suffix`, the difference between `endsWithUTF8` and `endsWith` is that `endsWithUTF8` match `str` and `suffix` by UTF-8 characters.
        ","","","","endsWithUTF8:

``` sql
select endsWithUTF8('富强民主文明和谐', '富强');
```

``` text

```
","String"
"24.10.4.191","toFloat32OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","h3IndexesAreNeighbors",0,0,"","","System","","","","","",""
"24.10.4.191","arrayReverse",0,0,"","","System","","","","","",""
"24.10.4.191","now64",0,1,"","","System","","","","","",""
"24.10.4.191","arrayFilter",0,0,"","","System","","","","","",""
"24.10.4.191","defaultRoles",0,0,"","","System","","","","","",""
"24.10.4.191","currentRoles",0,0,"","","System","","","","","",""
"24.10.4.191","readWKTMultiPolygon",0,0,"","","System","","","","","",""
"24.10.4.191","subtractYears",0,0,"","","System","","","","","",""
"24.10.4.191","h3GetDestinationIndexFromUnidirectionalEdge",0,0,"","","System","","","","","",""
"24.10.4.191","h3GetPentagonIndexes",0,0,"","","System","","","","","",""
"24.10.4.191","h3GetResolution",0,0,"","","System","","","","","",""
"24.10.4.191","ngramSearch",0,0,"","","System","","","","","",""
"24.10.4.191","lessOrEquals",0,0,"","","System","","","","","",""
"24.10.4.191","subtractQuarters",0,0,"","","System","","","","","",""
"24.10.4.191","fromUnixTimestamp64Nano",0,0,"","","System","","","","","",""
"24.10.4.191","toUUIDOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","h3GetUnidirectionalEdge",0,0,"","","System","","","","","",""
"24.10.4.191","toDateOrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","runningConcurrency",0,0,"","","System","","","","","",""
"24.10.4.191","URLPathHierarchy",0,0,"","","System","","","","","",""
"24.10.4.191","h3HexRing",0,0,"","","System","","","","","",""
"24.10.4.191","h3GetUnidirectionalEdgesFromHexagon",0,0,"","","System","","","","","",""
"24.10.4.191","arrayPushBack",0,0,"","","System","","","","","",""
"24.10.4.191","hasSubsequenceCaseInsensitive",0,1,"","","System","","","","","",""
"24.10.4.191","ngramSearchCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","bitTest",0,0,"","","System","","","","","",""
"24.10.4.191","rowNumberInAllBlocks",0,0,"","","System","","","","","",""
"24.10.4.191","multiSearchFirstIndexCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","formatDateTimeInJodaSyntax",0,0,"","","System","","","","","",""
"24.10.4.191","arrayRotateRight",0,0,"","","System","
Returns an array of the same size as the original array with elements rotated
to the right by the specified number of positions.
[example:simple_int]
[example:overflow_int]
[example:simple_string]
[example:simple_array]
[example:simple_nested_array]

Negative rotate values are treated as rotating to the left by the absolute
value of the rotation.
[example:negative_rotation_int]
","","","","simple_int:

``` sql
SELECT arrayRotateRight([1, 2, 3, 4, 5], 3)
```

``` text
[3, 4, 5, 1, 2]
```
simple_string:

``` sql
SELECT arrayRotateRight(['a', 'b', 'c', 'd', 'e'], 3)
```

``` text
['c', 'd', 'e', 'a', 'b']
```
simple_array:

``` sql
SELECT arrayRotateRight([[1, 2], [3, 4], [5, 6]], 2)
```

``` text
[[3, 4], [5, 6], [1, 2]]
```
simple_nested_array:

``` sql
SELECT arrayRotateRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)
```

``` text
[[[7, 8], [1, 2]], [[3, 4], [5, 6]]]
```
negative_rotation_int:

``` sql
SELECT arrayRotateRight([1, 2, 3, 4, 5], -3)
```

``` text
[4, 5, 1, 2, 3]
```
overflow_int:

``` sql
SELECT arrayRotateRight([1, 2, 3, 4, 5], 8)
```

``` text
[4, 5, 1, 2, 3]
```
","Array"
"24.10.4.191","regionIn",0,0,"","","System","","","","","",""
"24.10.4.191","hasSubsequence",0,1,"","","System","","","","","",""
"24.10.4.191","JSONExtract",0,0,"","","System","","","","","",""
"24.10.4.191","tumbleStart",0,0,"","","System","","","","","",""
"24.10.4.191","bitShiftRight",0,0,"","","System","","","","","",""
"24.10.4.191","idnaEncode",0,0,"","","System","
Computes an ASCII representation of an Internationalized Domain Name. Throws an exception in case of error.","idnaEncode(str)","- str:Input string
","An ASCII-encoded domain name [String](/docs/en/sql-reference/data-types/string.md).","simple:

``` sql
SELECT idnaEncode('straße.münchen.de') AS ascii;
```

``` text

┌─ascii───────────────────────────┐
│ xn--strae-oqa.xn--mnchen-3ya.de │
└─────────────────────────────────┘
            
```
",""
"24.10.4.191","tan",0,1,"","","System","","","","","",""
"24.10.4.191","substring",0,1,"","","System","","","","","",""
"24.10.4.191","tryBase58Decode",0,0,"","","System","","","","","",""
"24.10.4.191","YYYYMMDDhhmmssToDateTime64",0,0,"","","System","
Like function `YYYYMMDDhhmmssToDate()` but produces a DateTime64.
Accepts an additional, optional `precision` parameter after the `timezone` parameter.
","","","","","Dates and Times"
"24.10.4.191","tryPunycodeDecode",0,0,"","","System","
Computes a Punycode representation of a string. Returns an empty string if the input is not valid Punycode.","punycodeDecode(str)","- str:A Punycode-encoded string
","The plaintext representation [String](/docs/en/sql-reference/data-types/string.md).","simple:

``` sql
SELECT tryPunycodeDecode('Mnchen-3ya') AS plain;
```

``` text

┌─plain───┐
│ München │
└─────────┘
            
```
",""
"24.10.4.191","L2Normalize",0,0,"","","System","","","","","",""
"24.10.4.191","pow",0,1,"","","System","","","","","",""
"24.10.4.191","geohashesInBox",0,0,"","","System","","","","","",""
"24.10.4.191","equals",0,0,"","","System","","","","","",""
"24.10.4.191","hasSubsequenceUTF8",0,1,"","","System","","","","","",""
"24.10.4.191","IPv4StringToNum",0,0,"","","System","","","","","",""
"24.10.4.191","positionUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","hasToken",0,0,"","","System","Performs lookup of needle in haystack using tokenbf_v1 index.","","","","",""
"24.10.4.191","YYYYMMDDhhmmssToDateTime",0,0,"","","System","
Converts a number containing the year, month, day, hour, minute and second number to a DateTime.
The output is undefined if the input does not encode a valid DateTime value.
This functions is the opposite of function `toYYYYMMDD()`.
","","","","","Dates and Times"
"24.10.4.191","readWKTPolygon",0,0,"","","System","","","","","",""
"24.10.4.191","readWKTMultiLineString",0,0,"","","System","
Parses a Well-Known Text (WKT) representation of a MultiLineString geometry and returns it in the internal ClickHouse format.
","readWKTMultiLineString(wkt_string)","- wkt_string:The input WKT string representing a MultiLineString geometry.
","The function returns a ClickHouse internal representation of the multilinestring geometry.","first call:

``` sql
SELECT readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))');
```

``` text

┌─readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))')─┐
│ [[(1,1),(2,2),(3,3)],[(4,4),(5,5),(6,6)]]                                    │
└──────────────────────────────────────────────────────────────────────────────┘

            
```
second call:

``` sql
SELECT toTypeName(readWKTLineString('MULTILINESTRING ((1 1, 2 2, 3 3, 1 1))'));
```

``` text

┌─toTypeName(readWKTLineString('MULTILINESTRING ((1 1, 2 2, 3 3, 1 1))'))─┐
│ MultiLineString                                                         │
└─────────────────────────────────────────────────────────────────────────┘
            
```
","Unique identifiers"
"24.10.4.191","readWKTPoint",0,0,"","","System","","","","","",""
"24.10.4.191","replaceRegexpAll",0,0,"","","System","","","","","",""
"24.10.4.191","toDayOfMonth",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimalString",0,1,"","","System","
Returns string representation of a number. First argument is the number of any numeric type,
second argument is the desired number of digits in fractional part. Returns String.

        ","","","","toDecimalString:

``` sql
SELECT toDecimalString(2.1456,2)
```

``` text

```
","String"
"24.10.4.191","__actionName",0,0,"","","System","","","","","",""
"24.10.4.191","globalVariable",0,0,"","","System","","","","","",""
"24.10.4.191","divideDecimal",0,0,"","","System","
Performs division on two decimals. Result value will be of type [Decimal256](../../sql-reference/data-types/decimal.md).
Result scale can be explicitly specified by `result_scale` argument (const Integer in range `[0, 76]`). If not specified, the result scale is the max scale of given arguments.

:::note
These function work significantly slower than usual `divide`.
In case you don't really need controlled precision and/or need fast computation, consider using [divide](#divide).
:::","divideDecimal(a, b[, result_scale])","- a:First value: [Decimal](../../sql-reference/data-types/decimal.md)
- b:Second value: [Decimal](../../sql-reference/data-types/decimal.md).
","The result of division with given scale. Type: [Decimal256](../../sql-reference/data-types/decimal.md).",":

``` sql
divideDecimal(toDecimal256(-12, 0), toDecimal32(2.1, 1), 10)
```

``` text

┌─divideDecimal(toDecimal256(-12, 0), toDecimal32(2.1, 1), 10)─┐
│                                                -5.7142857142 │
└──────────────────────────────────────────────────────────────┘

```
Difference to regular division:

``` sql

SELECT toDecimal64(-12, 1) / toDecimal32(2.1, 1);
SELECT toDecimal64(-12, 1) as a, toDecimal32(2.1, 1) as b, divideDecimal(a, b, 1), divideDecimal(a, b, 5);

```

``` text

┌─divide(toDecimal64(-12, 1), toDecimal32(2.1, 1))─┐
│                                             -5.7 │
└──────────────────────────────────────────────────┘
┌───a─┬───b─┬─divideDecimal(toDecimal64(-12, 1), toDecimal32(2.1, 1), 1)─┬─divideDecimal(toDecimal64(-12, 1), toDecimal32(2.1, 1), 5)─┐
│ -12 │ 2.1 │                                                       -5.7 │                                                   -5.71428 │
└─────┴─────┴────────────────────────────────────────────────────────────┴────────────────────────────────────────────────────────────┘

```
:

``` sql

SELECT toDecimal64(-12, 0) / toDecimal32(2.1, 1);
SELECT toDecimal64(-12, 0) as a, toDecimal32(2.1, 1) as b, divideDecimal(a, b, 1), divideDecimal(a, b, 5);

```

``` text

DB::Exception: Decimal result's scale is less than argument's one: While processing toDecimal64(-12, 0) / toDecimal32(2.1, 1). (ARGUMENT_OUT_OF_BOUND)
┌───a─┬───b─┬─divideDecimal(toDecimal64(-12, 0), toDecimal32(2.1, 1), 1)─┬─divideDecimal(toDecimal64(-12, 0), toDecimal32(2.1, 1), 5)─┐
│ -12 │ 2.1 │                                                       -5.7 │                                                   -5.71428 │
└─────┴─────┴────────────────────────────────────────────────────────────┴────────────────────────────────────────────────────────────┘

```
",""
"24.10.4.191","arrayReduceInRanges",0,0,"","","System","","","","","",""
"24.10.4.191","idnaDecode",0,0,"","","System","
Computes the Unicode representation of ASCII-encoded Internationalized Domain Name.","idnaDecode(str)","- str:Input string
","An Unicode-encoded domain name [String](/docs/en/sql-reference/data-types/string.md).","simple:

``` sql
SELECT idnaDecode('xn--strae-oqa.xn--mnchen-3ya.de') AS unicode;
```

``` text

┌─unicode───────────┐
│ straße.münchen.de │
└───────────────────┘
            
```
",""
"24.10.4.191","h3ToString",0,0,"","","System","","","","","",""
"24.10.4.191","arrayShiftRight",0,0,"","","System","
Returns an array of the same size as the original array with elements shifted
to the right by the specified number of positions. New elements are filled with
provided default values or default values of the corresponding type.
[example:simple_int]
[example:overflow_int]
[example:simple_string]
[example:simple_array]
[example:simple_nested_array]

Negative shift values are treated as shifting to the left by the absolute
value of the shift.
[example:negative_shift_int]

The default value must be of the same type as the array elements.
[example:simple_int_with_default]
[example:simple_string_with_default]
[example:simple_array_with_default]
[example:casted_array_with_default]
","","","","simple_int:

``` sql
SELECT arrayShiftRight([1, 2, 3, 4, 5], 3)
```

``` text
[0, 0, 0, 1, 2]
```
negative_shift_int:

``` sql
SELECT arrayShiftRight([1, 2, 3, 4, 5], -3)
```

``` text
[4, 5, 0, 0, 0]
```
overflow_int:

``` sql
SELECT arrayShiftRight([1, 2, 3, 4, 5], 8)
```

``` text
[0, 0, 0, 0, 0]
```
simple_string:

``` sql
SELECT arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3)
```

``` text
['', '', '', 'a', 'b']
```
simple_array:

``` sql
SELECT arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2)
```

``` text
[[], [], [1, 2]]
```
simple_nested_array:

``` sql
SELECT arrayShiftRight([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)
```

``` text
[[], [[1, 2], [3, 4]]]
```
simple_int_with_default:

``` sql
SELECT arrayShiftRight([1, 2, 3, 4, 5], 3, 7)
```

``` text
[7, 7, 7, 1, 2]
```
simple_string_with_default:

``` sql
SELECT arrayShiftRight(['a', 'b', 'c', 'd', 'e'], 3, 'foo')
```

``` text
['foo', 'foo', 'foo', 'a', 'b']
```
simple_array_with_default:

``` sql
SELECT arrayShiftRight([[1, 2], [3, 4], [5, 6]], 2, [7, 8])
```

``` text
[[7, 8], [7, 8], [1, 2]]
```
casted_array_with_default:

``` sql
SELECT arrayShiftRight(CAST('[1, 2, 3, 4, 5, 6]', 'Array(UInt16)'), 1, 1000)
```

``` text
[1000, 1, 2, 3, 4, 5]
```
","Array"
"24.10.4.191","ngramMinHashArgCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","getSettingOrDefault",0,0,"","","System","
Returns the current value of a custom setting or returns the default value specified in the 2nd argument if the custom setting is not set in the current profile.
","getSettingOrDefault('custom_setting', default_value)","- custom_setting:The setting name. Type: String.
- default_value:Value to return if custom_setting is not set. Value may be of any data type or Null.
","The setting's current value or the default_value if setting is not set.","getSettingOrDefault:

``` sql
SELECT getSettingOrDefault('custom_undef1', 'my_value');
```

``` text
my_value
```
getSettingOrDefault:

``` sql
SELECT getSettingOrDefault('custom_undef1', 100);
```

``` text
100
```
getSettingOrDefault:

``` sql
SELECT getSettingOrDefault('custom_undef1', NULL);
```

``` text
NULL
```
","Other"
"24.10.4.191","wordShingleMinHash",0,0,"","","System","","","","","",""
"24.10.4.191","arrayDifference",0,0,"","","System","","","","","",""
"24.10.4.191","arrayLastOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt256OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","arrayFirstOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","base64URLEncode",0,0,"","","System","Encodes an URL (String or FixedString) as base64 with URL-specific modifications, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-5).","base64URLEncode(url)","- url:String column or constant.
","A string containing the encoded value of the argument.","Example:

``` sql
SELECT base64URLEncode('https://clickhouse.com')
```

``` text
aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ
```
","String encoding"
"24.10.4.191","serverTimezone",0,0,"","","System","
Returns the timezone name in which server operates.

[example:serverTimezone]
    ","","","","serverTimezone:

``` sql
SELECT serverTimezone();
```

``` text

```
","Constant, Miscellaneous"
"24.10.4.191","h3UnidirectionalEdgeIsValid",0,0,"","","System","","","","","",""
"24.10.4.191","substringUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","JSONMergePatch",0,0,"","","System","Returns the merged JSON object string, which is formed by merging multiple JSON objects.","","","","",""
"24.10.4.191","arrayFirst",0,0,"","","System","","","","","",""
"24.10.4.191","regionToContinent",0,0,"","","System","","","","","",""
"24.10.4.191","makeDate32",0,0,"","","System","","","","","",""
"24.10.4.191","ilike",0,0,"","","System","","","","","",""
"24.10.4.191","regexpQuoteMeta",0,0,"","","System","","","","","",""
"24.10.4.191","notNullInIgnoreSet",0,0,"","","System","","","","","",""
"24.10.4.191","h3GetUnidirectionalEdgeBoundary",0,0,"","","System","","","","","",""
"24.10.4.191","globalNullInIgnoreSet",0,0,"","","System","","","","","",""
"24.10.4.191","splitByChar",0,0,"","","System","","","","","",""
"24.10.4.191","toRelativeDayNum",0,0,"","","System","","","","","",""
"24.10.4.191","notInIgnoreSet",0,0,"","","System","","","","","",""
"24.10.4.191","globalInIgnoreSet",0,0,"","","System","","","","","",""
"24.10.4.191","inIgnoreSet",0,0,"","","System","","","","","",""
"24.10.4.191","arrayConcat",0,0,"","","System","","","","","",""
"24.10.4.191","globalNotNullIn",0,0,"","","System","","","","","",""
"24.10.4.191","notNullIn",0,0,"","","System","","","","","",""
"24.10.4.191","globalNullIn",0,0,"","","System","","","","","",""
"24.10.4.191","addressToLine",0,0,"","","System","","","","","",""
"24.10.4.191","globalNotIn",0,0,"","","System","","","","","",""
"24.10.4.191","xxHash64",0,0,"","","System","","","","","",""
"24.10.4.191","addDate",0,1,"","","System","","","","","",""
"24.10.4.191","in",0,0,"","","System","","","","","",""
"24.10.4.191","defaultValueOfTypeName",0,0,"","","System","","","","","",""
"24.10.4.191","tuplePlus",0,0,"","","System","","","","","",""
"24.10.4.191","initcap",0,1,"","","System","","","","","",""
"24.10.4.191","polygonsWithinSpherical",0,0,"","","System","","","","","",""
"24.10.4.191","flattenTuple",0,0,"","","System","","","","","",""
"24.10.4.191","roundDuration",0,0,"","","System","","","","","",""
"24.10.4.191","toDate32OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","addMinutes",0,0,"","","System","","","","","",""
"24.10.4.191","toIPv6",0,0,"","","System","","","","","",""
"24.10.4.191","toDateTime32",0,0,"","","System","","","","","",""
"24.10.4.191","arraySplit",0,0,"","","System","","","","","",""
"24.10.4.191","initcapUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","connectionId",0,1,"","","System","","","","","",""
"24.10.4.191","ngramDistanceCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","startsWith",0,0,"","","System","","","","","",""
"24.10.4.191","initialQueryID",0,0,"","","System","","","","","",""
"24.10.4.191","murmurHash2_64",0,0,"","","System","","","","","",""
"24.10.4.191","parseReadableSizeOrNull",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns `NULL`","parseReadableSizeOrNull(x)","- x:Readable size with ISO/IEC 80000-13  or decimal byte unit ([String](../../sql-reference/data-types/string.md))
","Number of bytes, rounded up to the nearest integer, or NULL if unable to parse the input (Nullable([UInt64](../../sql-reference/data-types/int-uint.md)))","basic:

``` sql
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes, parseReadableSizeOrNull(readable_sizes) AS sizes;
```

``` text

┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
│ invalid        │    ᴺᵁᴸᴸ │
└────────────────┴─────────┘
```
","OtherFunctions"
"24.10.4.191","h3GetBaseCell",0,0,"","","System","","","","","",""
"24.10.4.191","bitmapHasAll",0,0,"","","System","","","","","",""
"24.10.4.191","base58Decode",0,0,"","","System","","","","","",""
"24.10.4.191","intExp10",0,0,"","","System","","","","","",""
"24.10.4.191","arrayFold",0,0,"","","System","
        Function arrayFold(acc,a1,...,aN->expr, arr1, ..., arrN, acc_initial) applies a lambda function to each element
        in each (equally-sized) array and collects the result in an accumulator.
        ","","","","sum:

``` sql
SELECT arrayFold(acc,x->acc+x, [1,2,3,4], toInt64(1));
```

``` text
11
```
","Array"
"24.10.4.191","fromUnixTimestampInJodaSyntax",0,0,"","","System","","","","","",""
"24.10.4.191","log",0,1,"","","System","","","","","",""
"24.10.4.191","errorCodeToName",0,0,"","","System","","","","","",""
"24.10.4.191","randomFixedString",0,0,"","","System","","","","","",""
"24.10.4.191","toWeek",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfHour",0,0,"","","System","","","","","",""
"24.10.4.191","isDecimalOverflow",0,0,"","","System","","","","","",""
"24.10.4.191","detectLanguageMixed",0,0,"","","System","","","","","",""
"24.10.4.191","toTypeName",0,0,"","","System","","","","","",""
"24.10.4.191","toDaysSinceYearZero",0,0,"","","System","
Returns for a given date or date with time, the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601.
The calculation is the same as in MySQL's TO_DAYS() function.
","","","","typical:

``` sql
SELECT toDaysSinceYearZero(toDate('2023-09-08'))
```

``` text
713569
```
","Dates and Times"
"24.10.4.191","polygonsUnionCartesian",0,0,"","","System","","","","","",""
"24.10.4.191","DATE",0,1,"","","System","","","","","",""
"24.10.4.191","h3CellAreaRads2",0,0,"","","System","","","","","",""
"24.10.4.191","toRelativeMonthNum",0,0,"","","System","","","","","",""
"24.10.4.191","greater",0,0,"","","System","","","","","",""
"24.10.4.191","JSON_EXISTS",0,0,"","","System","","","","","",""
"24.10.4.191","isIPAddressInRange",0,0,"","","System","","","","","",""
"24.10.4.191","hasTokenCaseInsensitiveOrNull",0,1,"","","System","Performs case insensitive lookup of needle in haystack using tokenbf_v1 index. Returns null if needle is ill-formed.","","","","",""
"24.10.4.191","multiFuzzyMatchAnyIndex",0,0,"","","System","","","","","",""
"24.10.4.191","isZeroOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","runningDifferenceStartingWithFirstValue",0,0,"","","System","","","","","",""
"24.10.4.191","h3CellAreaM2",0,0,"","","System","","","","","",""
"24.10.4.191","h3PointDistM",0,0,"","","System","","","","","",""
"24.10.4.191","tumbleEnd",0,0,"","","System","","","","","",""
"24.10.4.191","isInfinite",0,0,"","","System","","","","","",""
"24.10.4.191","lemmatize",0,0,"","","System","","","","","",""
"24.10.4.191","rightPad",0,0,"","","System","","","","","",""
"24.10.4.191","bitNot",0,0,"","","System","","","","","",""
"24.10.4.191","lengthUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfFiveMinutes",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsUInt128",0,0,"","","System","","","","","",""
"24.10.4.191","lgamma",0,0,"","","System","","","","","",""
"24.10.4.191","reverse",0,1,"","","System","","","","","",""
"24.10.4.191","toInt16",0,0,"","","System","","","","","",""
"24.10.4.191","filesystemUnreserved",0,0,"","","System","","","","","",""
"24.10.4.191","filesystemCapacity",0,0,"","","System","","","","","",""
"24.10.4.191","JSONDynamicPaths",0,0,"","","System","
Returns the list of dynamic paths that are stored as separate subcolumns in JSON column.
","JSONDynamicPaths(json)","- json:JSON column
","","Example:

``` sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPaths(json) FROM test;

```

``` text

┌─json─────────────────────────────────┬─JSONDynamicPaths(json)─┐
│ {""a"":""42""}                           │ ['a']                  │
│ {""b"":""Hello""}                        │ []                     │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['a']                  │
└──────────────────────────────────────┴────────────────────────┘

```
","JSON"
"24.10.4.191","reinterpretAsDate",0,0,"","","System","","","","","",""
"24.10.4.191","filesystemAvailable",0,0,"","","System","","","","","",""
"24.10.4.191","ceil",0,1,"","","System","","","","","",""
"24.10.4.191","YYYYMMDDToDate",0,0,"","","System","
Converts a number containing the year, month and day number to a Date.
This functions is the opposite of function `toYYYYMMDD()`.
The output is undefined if the input does not encode a valid Date value.
","","","","","Dates and Times"
"24.10.4.191","locate",0,1,"","","System","Like function `position` but with arguments `haystack` and `locate` switched. The behavior of this function depends on the ClickHouse version: In versions < v24.3, `locate` was an alias of function `position` and accepted arguments `(haystack, needle[, start_pos])`. In versions >= 24.3,, `locate` is an individual function (for better compatibility with MySQL) and accepts arguments `(needle, haystack[, start_pos])`. The previous behavior can be restored using setting `function_locate_has_mysql_compatible_argument_order = false`.","location(needle, haystack[, start_pos])","- needle:Substring to be searched (String)
- haystack:String in which the search is performed (String).
- start_pos:Position (1-based) in `haystack` at which the search starts (UInt*).
","Starting position in bytes and counting from 1, if the substring was found. 0, if the substring was not found.","Example:

``` sql
SELECT locate('abcabc', 'ca');
```

``` text
3
```
","String search"
"24.10.4.191","SHA224",0,0,"","","System","Calculates the SHA224 hash of the given string.","SELECT SHA224(s);","- s:The input [String](../../sql-reference/data-types/string.md).
","The SHA224 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

``` sql
SELECT HEX(SHA224('abc'));
```

``` text

┌─hex(SHA224('abc'))───────────────────────────────────────┐
│ 23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7 │
└──────────────────────────────────────────────────────────┘
            
```
",""
"24.10.4.191","h3kRing",0,0,"","","System","","","","","",""
"24.10.4.191","left",0,1,"","","System","","","","","",""
"24.10.4.191","asin",0,1,"","","System","
Calculates the arcsine of the argument.

Takes arbitrary numeric type, which includes floating point and integer numbers, as well as big integers and decimals and returns Float64.

For arguments in range [-1, 1] it returns the value in range of [-pi() / 2, pi() / 2].

It represents an inverse function to function 'sin' on this range:
[example:inverse]

It always returns Float64, even if the argument has Float32 type:
[example:float32]

For arguments outside of this range, it returns nan:
[example:nan]

Every self-respectful data scientist knows how to apply arcsine to improve ads click-through rate with ClickHouse.
For more details, see [https://en.wikipedia.org/wiki/Inverse_trigonometric_functions].
","","","","inverse:

``` sql
SELECT asin(1.0) = pi() / 2, sin(asin(1)), asin(sin(1))
```

``` text

```
float32:

``` sql
SELECT toTypeName(asin(1.0::Float32))
```

``` text

```
nan:

``` sql
SELECT asin(1.1), asin(-2), asin(inf), asin(nan)
```

``` text

```
","Mathematical, Trigonometric"
"24.10.4.191","log2",0,1,"","","System","","","","","",""
"24.10.4.191","toIPv4OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayInt64",0,0,"","","System","","","","","",""
"24.10.4.191","L2SquaredDistance",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal256OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","mapSubtract",0,0,"","","System","","","","","",""
"24.10.4.191","roundToExp2",0,0,"","","System","","","","","",""
"24.10.4.191","partitionId",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal32OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","concatWithSeparatorAssumeInjective",0,0,"","","System","
Same as concatWithSeparator, the difference is that you need to ensure that concatWithSeparator(sep, expr1, expr2, expr3...) → result is injective, it will be used for optimization of GROUP BY.

The function is named “injective” if it always returns different result for different values of arguments. In other words: different arguments never yield identical result.
        ","","","","concatWithSeparatorAssumeInjective:

``` sql
SELECT concatWithSeparatorAssumeInjective('a', '1', '2', '3')
```

``` text

```
","String"
"24.10.4.191","base64URLDecode",0,0,"","","System","Accepts a base64-encoded URL and decodes it from base64 with URL-specific modifications, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-5).","base64URLDecode(encodedURL)","- encodedURL:String column or constant. If the string is not a valid Base64-encoded value, an exception is thrown.
","A string containing the decoded value of the argument.","Example:

``` sql
SELECT base64URLDecode('aHR0cDovL2NsaWNraG91c2UuY29t')
```

``` text
https://clickhouse.com
```
","String encoding"
"24.10.4.191","arrayDotProduct",0,0,"","","System","","","","","",""
"24.10.4.191","leftPad",0,0,"","","System","","","","","",""
"24.10.4.191","toDateTime64OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","arrayRotateLeft",0,0,"","","System","
Returns an array of the same size as the original array with elements rotated
to the left by the specified number of positions.
[example:simple_int]
[example:overflow_int]
[example:simple_string]
[example:simple_array]
[example:simple_nested_array]

Negative rotate values are treated as rotating to the right by the absolute
value of the rotation.
[example:negative_rotation_int]
","","","","simple_int:

``` sql
SELECT arrayRotateLeft([1, 2, 3, 4, 5], 3)
```

``` text
[4, 5, 1, 2, 3]
```
simple_string:

``` sql
SELECT arrayRotateLeft(['a', 'b', 'c', 'd', 'e'], 3)
```

``` text
['d', 'e', 'a', 'b', 'c']
```
simple_array:

``` sql
SELECT arrayRotateLeft([[1, 2], [3, 4], [5, 6]], 2)
```

``` text
[[5, 6], [1, 2], [3, 4]]
```
simple_nested_array:

``` sql
SELECT arrayRotateLeft([[[1, 2], [3, 4]], [[5, 6], [7, 8]]], 1)
```

``` text
[[[5, 6], [7, 8]], [[1, 2], [3, 4]]]
```
negative_rotation_int:

``` sql
SELECT arrayRotateLeft([1, 2, 3, 4, 5], -3)
```

``` text
[3, 4, 5, 1, 2]
```
overflow_int:

``` sql
SELECT arrayRotateLeft([1, 2, 3, 4, 5], 8)
```

``` text
[4, 5, 1, 2, 3]
```
","Array"
"24.10.4.191","changeMonth",0,0,"","","System","Changes the month component of a date or date time.","changeMonth(date_or_datetime, value);","- date_or_datetime:The value to change. Type: Date, Date32, DateTime, or DateTime64
- value:The new value. Type: [U]Int*
","The same type as date_or_datetime.","","Dates and Times"
"24.10.4.191","cutToFirstSignificantSubdomainWithWWWRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainWithWWW` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","URL"
"24.10.4.191","toDateTimeOrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","translate",0,0,"","","System","","","","","",""
"24.10.4.191","formatQueryOrNull",0,0,"","","System","Returns a formatted, possibly multi-line, version of the given SQL query. Returns NULL in case of a parsing error.
[example:multiline]","formatQueryOrNull(query)","- query:The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","multiline:

``` sql
SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

``` text
SELECT
    a,
    b
FROM tab
WHERE (a > 3) AND (b < 3)
```
","Other"
"24.10.4.191","trimRight",0,0,"","","System","","","","","",""
"24.10.4.191","getSetting",0,0,"","","System","
Returns the current value of a custom setting.
","getSetting('custom_setting')","- custom_setting:The setting name. Type: String.
","The setting's current value.","getSetting:

``` sql
SET custom_a = 123; SELECT getSetting('custom_a');
```

``` text
123
```
","Other"
"24.10.4.191","arrayLast",0,0,"","","System","","","","","",""
"24.10.4.191","toFloat64OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","plus",0,0,"","","System","","","","","",""
"24.10.4.191","toInt256OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","arrayJaccardIndex",0,0,"","","System","","","","","",""
"24.10.4.191","nullIn",0,0,"","","System","","","","","",""
"24.10.4.191","extractURLParameters",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal128OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","toInt16OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","addMicroseconds",0,0,"","","System","","","","","",""
"24.10.4.191","sipHash128Keyed",0,0,"","","System","","","","","",""
"24.10.4.191","formatDateTime",0,0,"","","System","","","","","",""
"24.10.4.191","toInt8OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","__bitBoolMaskAnd",0,0,"","","System","","","","","",""
"24.10.4.191","hasSubstr",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt64OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt16OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","firstLine",0,0,"","","System","Returns first line of a multi-line string.","firstLine(string)","- string:The string to process.
","The first line of the string or the whole string if there is no line separators.","Return first line:

``` sql
firstLine('Hello\nWorld')
```

``` text
'Hello'
```
Return whole string:

``` sql
firstLine('Hello World')
```

``` text
'Hello World'
```
",""
"24.10.4.191","currentProfiles",0,0,"","","System","","","","","",""
"24.10.4.191","mapUpdate",0,0,"","","System","","","","","",""
"24.10.4.191","map",0,0,"","","System","","","","","",""
"24.10.4.191","regionHierarchy",0,0,"","","System","","","","","",""
"24.10.4.191","toDateTime64OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","polygonsWithinCartesian",0,0,"","","System","","","","","",""
"24.10.4.191","materialize",0,0,"","","System","","","","","",""
"24.10.4.191","minSampleSizeContinuous",0,0,"","","System","","","","","",""
"24.10.4.191","toJSONString",0,0,"","","System","","","","","",""
"24.10.4.191","h3EdgeLengthM",0,0,"","","System","","","","","",""
"24.10.4.191","subBitmap",0,0,"","","System","","","","","",""
"24.10.4.191","defaultValueOfArgumentType",0,0,"","","System","","","","","",""
"24.10.4.191","base64Decode",0,0,"","","System","Accepts a String and decodes it from base64, according to RFC 4648 (https://datatracker.ietf.org/doc/html/rfc4648#section-4). Throws an exception in case of an error. Alias: FROM_BASE64.","base64Decode(encoded)","- encoded:String column or constant. If the string is not a valid Base64-encoded value, an exception is thrown.
","A string containing the decoded value of the argument.","Example:

``` sql
SELECT base64Decode('Y2xpY2tob3VzZQ==')
```

``` text
clickhouse
```
","String encoding"
"24.10.4.191","mortonDecode",0,0,"","","System","
Decodes a Morton encoding (ZCurve) into the corresponding unsigned integer tuple

The function has two modes of operation:
- Simple
- Expanded

Simple: accepts a resulting tuple size as a first argument and the code as a second argument.
[example:simple]
Will decode into: `(1,2,3,4)`
The resulting tuple size cannot be more than 8

Expanded: accepts a range mask (tuple) as a first argument and the code as a second argument.
Each number in mask configures the amount of range shrink
1 - no shrink
2 - 2x shrink
3 - 3x shrink
....
Up to 8x shrink.
[example:range_shrank]
Note: see mortonEncode() docs on why range change might be beneficial.
Still limited to 8 numbers at most.

Morton code for one argument is always the argument itself (as a tuple).
[example:identity]
Produces: `(1)`

You can shrink one argument too:
[example:identity_shrank]
Produces: `(128)`

The function accepts a column of codes as a second argument:
[example:from_table]

The range tuple must be a constant:
[example:from_table_range]
","","","","simple:

``` sql
SELECT mortonDecode(4, 2149)
```

``` text

```
range_shrank:

``` sql
SELECT mortonDecode((1,2), 1572864)
```

``` text

```
identity:

``` sql
SELECT mortonDecode(1, 1)
```

``` text

```
identity_shrank:

``` sql
SELECT mortonDecode(tuple(2), 32768)
```

``` text

```
from_table:

``` sql
SELECT mortonDecode(2, code) FROM table
```

``` text

```
from_table_range:

``` sql
SELECT mortonDecode((1,2), code) FROM table
```

``` text

```
","Morton coding, ZCurve"
"24.10.4.191","dictGet",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the attribute’s data type if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","toStartOfSecond",0,0,"","","System","","","","","",""
"24.10.4.191","arrayUnion",0,0,"","","System","","","","","",""
"24.10.4.191","buildId",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetUInt8OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt8 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","arrayIntersect",0,0,"","","System","","","","","",""
"24.10.4.191","multiFuzzyMatchAllIndices",0,0,"","","System","","","","","",""
"24.10.4.191","factorial",0,1,"","","System","
Computes the factorial of an integer value. It works with any native integer type including UInt(8|16|32|64) and Int(8|16|32|64). The return type is UInt64.

The factorial of 0 is 1. Likewise, the factorial() function returns 1 for any negative value. The maximum positive value for the input argument is 20, a value of 21 or greater will cause exception throw.
","","","","factorial:

``` sql
SELECT factorial(10)
```

``` text

```
","Mathematical"
"24.10.4.191","replaceRegexpOne",0,0,"","","System","","","","","",""
"24.10.4.191","geoToH3",0,0,"","","System","","","","","",""
"24.10.4.191","toUnixTimestamp64Milli",0,0,"","","System","","","","","",""
"24.10.4.191","firstSignificantSubdomainCustom",0,0,"","","System","","","","","",""
"24.10.4.191","simpleJSONExtractBool",0,0,"","","System","Parses a true/false value from the value of the field named field_name. The result is UInt8.","simpleJSONExtractBool(json, field_name)","- json:The JSON in which the field is searched for. String.
- field_name:The name of the field to search for. String literal.
","It returns 1 if the value of the field is true, 0 otherwise. This means this function will return 0 including (and not only) in the following cases:
 - If the field doesn't exists.
 - If the field contains true as a string, e.g.: {""field"":""true""}.
 - If the field contains 1 as a numerical value.","simple:

``` sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":false,""bar"":true}');
INSERT INTO jsons VALUES ('{""foo"":""true"",""qux"":1}');

SELECT simpleJSONExtractBool(json, 'bar') FROM jsons ORDER BY json;
SELECT simpleJSONExtractBool(json, 'foo') FROM jsons ORDER BY json;
```

``` text
0
1
0
0
```
","JSON"
"24.10.4.191","normalizeUTF8NFKC",0,0,"","","System","","","","","",""
"24.10.4.191","sigmoid",0,0,"","","System","","","","","",""
"24.10.4.191","normalizeUTF8NFC",0,0,"","","System","","","","","",""
"24.10.4.191","tid",0,0,"","","System","","","","","",""
"24.10.4.191","toDateTime64OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","subtractSeconds",0,0,"","","System","","","","","",""
"24.10.4.191","multiSearchAllPositions",0,0,"","","System","","","","","",""
"24.10.4.191","bitmaskToArray",0,0,"","","System","","","","","",""
"24.10.4.191","min2",0,1,"","","System","","","","","",""
"24.10.4.191","length",0,1,"","","System","
Calculates the length of the string or array.

For String or FixedString argument: calculates the number of bytes in string.
[example:string1]

For Array argument: calculates the number of elements in the array.
[example:arr1]

If applied for FixedString argument, the function is a constant expression:
[example:constexpr]

Please note that the number of bytes in a string is not the same as the number of Unicode ""code points""
and it is not the same as the number of Unicode ""grapheme clusters"" (what we usually call ""characters"")
and it is not the same as the visible string width.
[example:unicode]

It is ok to have ASCII NUL bytes in strings, and they will be counted as well.
[example:nul]
","","","","string1:

``` sql
SELECT length('Hello, world!')
```

``` text

```
arr1:

``` sql
SELECT length(['Hello'], ['world'])
```

``` text

```
constexpr:

``` sql
WITH 'hello' || toString(number) AS str
SELECT str, 
       isConstant(length(str)) AS str_length_is_constant, 
       isConstant(length(str::FixedString(6))) AS fixed_str_length_is_constant
FROM numbers(3)
```

``` text

```
unicode:

``` sql
SELECT 'ёлка' AS str1, length(str1), lengthUTF8(str1), normalizeUTF8NFKD(str1) AS str2, length(str2), lengthUTF8(str2)
```

``` text

```
nul:

``` sql
SELECT 'abc\0\0\0' AS str, length(str)
```

``` text

```
","Array, String"
"24.10.4.191","bitmapMax",0,0,"","","System","","","","","",""
"24.10.4.191","ngramDistanceCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","h3GetOriginIndexFromUnidirectionalEdge",0,0,"","","System","","","","","",""
"24.10.4.191","mapApply",0,0,"","","System","The same as arrayMap.","","","","mapApply:

``` sql
SELECT mapApply((k, v) -> (k, v * 2), map('k1', 1, 'k2', 2))
```

``` text

```
","Map"
"24.10.4.191","multiSearchAnyUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","multiSearchFirstIndexCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetDate",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Date if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","multiSearchFirstPosition",0,0,"","","System","","","","","",""
"24.10.4.191","indexOf",0,0,"","","System","","","","","",""
"24.10.4.191","globalIn",0,0,"","","System","","","","","",""
"24.10.4.191","JSONExtractArrayRaw",0,0,"","","System","","","","","",""
"24.10.4.191","version",0,1,"","","System","","","","","",""
"24.10.4.191","joinGetOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","joinGet",0,0,"","","System","","","","","",""
"24.10.4.191","detectProgrammingLanguage",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTimeBestEffortUSOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","neighbor",0,0,"","","System","","","","","",""
"24.10.4.191","extractAllGroupsVertical",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetIPv6OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the IPv6 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","toYear",0,0,"","","System","","","","","",""
"24.10.4.191","bitTestAll",0,0,"","","System","","","","","",""
"24.10.4.191","normalizedQueryHash",0,0,"","","System","","","","","",""
"24.10.4.191","indexHint",0,0,"","","System","","","","","",""
"24.10.4.191","arrayShingles",0,0,"","","System","
Generates an array of ""shingles"", i.e. consecutive sub-arrays with specified length of the input array.
","","","","example 1:

``` sql
SELECT arrayShingles([1,2,3,4,5], 3)
```

``` text
[[1,2,3],[2,3,4],[3,4,5]]
```
","Array"
"24.10.4.191","notILike",0,0,"","","System","","","","","",""
"24.10.4.191","toModifiedJulianDay",0,0,"","","System","","","","","",""
"24.10.4.191","notLike",0,0,"","","System","","","","","",""
"24.10.4.191","toModifiedJulianDayOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","multiplyDecimal",0,0,"","","System","
Performs multiplication on two decimals. Result value will be of type [Decimal256](../../sql-reference/data-types/decimal.md).
Result scale can be explicitly specified by `result_scale` argument (const Integer in range `[0, 76]`). If not specified, the result scale is the max scale of given arguments.

:::note
These functions work significantly slower than usual `multiply`.
In case you don't really need controlled precision and/or need fast computation, consider using [multiply](#multiply)
:::

**Syntax**

```sql
multiplyDecimal(a, b[, result_scale])
```

**Arguments**

-   `a` — First value: [Decimal](../../sql-reference/data-types/decimal.md).
-   `b` — Second value: [Decimal](../../sql-reference/data-types/decimal.md).
-   `result_scale` — Scale of result: [Int/UInt](../../sql-reference/data-types/int-uint.md).

**Returned value**

-   The result of multiplication with given scale.

Type: [Decimal256](../../sql-reference/data-types/decimal.md).

**Example**

```text
┌─multiplyDecimal(toDecimal256(-12, 0), toDecimal32(-2.1, 1), 1)─┐
│                                                           25.2 │
└────────────────────────────────────────────────────────────────┘
```

**Difference from regular multiplication:**
```sql
SELECT toDecimal64(-12.647, 3) * toDecimal32(2.1239, 4);
SELECT toDecimal64(-12.647, 3) as a, toDecimal32(2.1239, 4) as b, multiplyDecimal(a, b);
```

```text
┌─multiply(toDecimal64(-12.647, 3), toDecimal32(2.1239, 4))─┐
│                                               -26.8609633 │
└───────────────────────────────────────────────────────────┘
┌─multiplyDecimal(toDecimal64(-12.647, 3), toDecimal32(2.1239, 4))─┐
│                                                         -26.8609 │
└──────────────────────────────────────────────────────────────────┘
```

```sql
SELECT
    toDecimal64(-12.647987876, 9) AS a,
    toDecimal64(123.967645643, 9) AS b,
    multiplyDecimal(a, b);
SELECT
    toDecimal64(-12.647987876, 9) AS a,
    toDecimal64(123.967645643, 9) AS b,
    a * b;
```

```text
┌─────────────a─┬─────────────b─┬─multiplyDecimal(toDecimal64(-12.647987876, 9), toDecimal64(123.967645643, 9))─┐
│ -12.647987876 │ 123.967645643 │                                                               -1567.941279108 │
└───────────────┴───────────────┴───────────────────────────────────────────────────────────────────────────────┘
Received exception from server (version 22.11.1):
Code: 407. DB::Exception: Received from localhost:9000. DB::Exception: Decimal math overflow: While processing toDecimal64(-12.647987876, 9) AS a, toDecimal64(123.967645643, 9) AS b, a * b. (DECIMAL_OVERFLOW)
```
","","","","",""
"24.10.4.191","uptime",0,0,"","","System","","","","","",""
"24.10.4.191","addMilliseconds",0,0,"","","System","","","","","",""
"24.10.4.191","CRC32",0,1,"","","System","","","","","",""
"24.10.4.191","multiSearchFirstPositionUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayString",0,0,"","","System","","","","","",""
"24.10.4.191","polygonPerimeterCartesian",0,0,"","","System","","","","","",""
"24.10.4.191","exp2",0,0,"","","System","","","","","",""
"24.10.4.191","h3EdgeAngle",0,0,"","","System","","","","","",""
"24.10.4.191","tryBase64URLDecode",0,0,"","","System","Decodes an URL from base64, like base64URLDecode but returns an empty string in case of an error.","tryBase64URLDecode(encodedUrl)","- encodedURL:String column or constant. If the string is not a valid Base64-encoded value with URL-specific modifications, returns an empty string.
","A string containing the decoded value of the argument.","valid:

``` sql
SELECT tryBase64URLDecode('aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ')
```

``` text
https://clickhouse.com
```
invalid:

``` sql
SELECT tryBase64UrlDecode('aHR0cHM6Ly9jbGlja')
```

``` text

```
","String encoding"
"24.10.4.191","h3IsValid",0,0,"","","System","","","","","",""
"24.10.4.191","concatAssumeInjective",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayUInt32",0,0,"","","System","","","","","",""
"24.10.4.191","toSecond",0,0,"","","System","","","","","",""
"24.10.4.191","lower",0,1,"","","System","","","","","",""
"24.10.4.191","overlay",0,1,"","","System","
Replace a part of a string `input` with another string `replace`, starting at 1-based index `offset`. By default, the number of bytes removed from `input` equals the length of `replace`. If `length` (the optional fourth argument) is specified, a different number of bytes is removed.
","","","","","String"
"24.10.4.191","JSONHas",0,0,"","","System","","","","","",""
"24.10.4.191","getServerPort",0,0,"","","System","","","","","",""
"24.10.4.191","runningDifference",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime64InJodaSyntaxOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","globalNotNullInIgnoreSet",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime64InJodaSyntaxOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","FQDN",0,1,"","","System","","","","","",""
"24.10.4.191","parseDateTimeInJodaSyntaxOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTimeInJodaSyntaxOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","formatQuery",0,0,"","","System","Returns a formatted, possibly multi-line, version of the given SQL query. Throws in case of a parsing error.
[example:multiline]","formatQuery(query)","- query:The SQL query to be formatted. [String](../../sql-reference/data-types/string.md)
","The formatted query. [String](../../sql-reference/data-types/string.md).","multiline:

``` sql
SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

``` text
SELECT
    a,
    b
FROM tab
WHERE (a > 3) AND (b < 3)
```
","Other"
"24.10.4.191","parseDateTimeInJodaSyntax",0,0,"","","System","","","","","",""
"24.10.4.191","countSubstrings",0,1,"","","System","","","","","",""
"24.10.4.191","reinterpretAsFloat64",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTimeOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","cutToFirstSignificantSubdomainCustomWithWWWRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainCustomWithWWW` but follows stricter rules according to RFC 3986.","","","","","URL"
"24.10.4.191","like",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime",0,0,"","","System","","","","","",""
"24.10.4.191","parseReadableSize",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it throws an exception.","parseReadableSize(x)","- x:Readable size with ISO/IEC 80000-13 or decimal byte unit ([String](../../sql-reference/data-types/string.md))
","Number of bytes, rounded up to the nearest integer ([UInt64](../../sql-reference/data-types/int-uint.md))","basic:

``` sql
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB']) AS readable_sizes, parseReadableSize(readable_sizes) AS sizes;
```

``` text

┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
└────────────────┴─────────┘
```
","OtherFunctions"
"24.10.4.191","wordShingleSimHashCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime32BestEffortOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","cutToFirstSignificantSubdomainWithWWW",0,0,"","","System","Returns the part of the domain that includes top-level subdomains up to the ""first significant subdomain"", without stripping ""www"".","","","","","URL"
"24.10.4.191","multiSearchAllPositionsCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","randConstant",0,0,"","","System","","","","","",""
"24.10.4.191","ngrams",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal64OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","polygonsIntersectionCartesian",0,0,"","","System","","","","","",""
"24.10.4.191","polygonPerimeterSpherical",0,0,"","","System","","","","","",""
"24.10.4.191","wordShingleSimHashCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","formatRowNoNewline",0,0,"","","System","","","","","",""
"24.10.4.191","e",0,0,"","","System","","","","","",""
"24.10.4.191","arrayProduct",0,0,"","","System","","","","","",""
"24.10.4.191","polygonsIntersectionSpherical",0,0,"","","System","","","","","",""
"24.10.4.191","subtractDays",0,0,"","","System","","","","","",""
"24.10.4.191","visibleWidth",0,0,"","","System","","","","","",""
"24.10.4.191","positionCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","getSubcolumn",0,0,"","","System","
Receives the expression or identifier and constant string with the name of subcolumn.

Returns requested subcolumn extracted from the expression.
","","","","getSubcolumn:

``` sql
SELECT getSubcolumn(array_col, 'size0'), getSubcolumn(tuple_col, 'elem_name')
```

``` text

```
","OtherFunctions"
"24.10.4.191","queryString",0,0,"","","System","","","","","",""
"24.10.4.191","wordShingleMinHashArgUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","variantElement",0,0,"","","System","
Extracts a column with specified type from a `Variant` column.
","variantElement(variant, type_name, [, default_value])","- variant:Variant column
- type_name:The name of the variant type to extract
- default_value:The default value that will be used if variant doesn't have variant with specified type. Can be any type. Optional
","","Example:

``` sql

CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT v, variantElement(v, 'String'), variantElement(v, 'UInt64'), variantElement(v, 'Array(UInt64)') FROM test;
```

``` text

┌─v─────────────┬─variantElement(v, 'String')─┬─variantElement(v, 'UInt64')─┬─variantElement(v, 'Array(UInt64)')─┐
│ ᴺᵁᴸᴸ          │ ᴺᵁᴸᴸ                        │                        ᴺᵁᴸᴸ │ []                                 │
│ 42            │ ᴺᵁᴸᴸ                        │                          42 │ []                                 │
│ Hello, World! │ Hello, World!               │                        ᴺᵁᴸᴸ │ []                                 │
│ [1,2,3]       │ ᴺᵁᴸᴸ                        │                        ᴺᵁᴸᴸ │ [1,2,3]                            │
└───────────────┴─────────────────────────────┴─────────────────────────────┴────────────────────────────────────┘

```
","Variant"
"24.10.4.191","randUniform",0,0,"","","System","
Returns a random number from the uniform distribution in the specified range.
Accepts two parameters - minimum bound and maximum bound.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randUniform(0, 1) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","initializeAggregation",0,0,"","","System","","","","","",""
"24.10.4.191","toDateTime64",0,0,"","","System","","","","","",""
"24.10.4.191","yesterday",0,0,"","","System","","","","","",""
"24.10.4.191","seriesDecomposeSTL",0,0,"","","System","
Decomposes a time series using STL [(Seasonal-Trend Decomposition Procedure Based on Loess)](https://www.wessa.net/download/stl.pdf) into a season, a trend and a residual component.

**Syntax**

``` sql
seriesDecomposeSTL(series, period);
```

**Arguments**

- `series` - An array of numeric values
- `period` - A positive number

The number of data points in `series` should be at least twice the value of `period`.

**Returned value**

- An array of four arrays where the first array include seasonal components, the second array - trend, the third array - residue component, and the fourth array - baseline(seasonal + trend) component.

Type: [Array](../../sql-reference/data-types/array.md).

**Examples**

Query:

``` sql
SELECT seriesDecomposeSTL([10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34], 3) AS print_0;
```

Result:

``` text
┌───────────print_0──────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ [[
        -13.529999, -3.1799996, 16.71,      -13.53,     -3.1799996, 16.71,      -13.53,     -3.1799996,
        16.71,      -13.530001, -3.18,      16.710001,  -13.530001, -3.1800003, 16.710001,  -13.530001,
        -3.1800003, 16.710001,  -13.530001, -3.1799994, 16.71,      -13.529999, -3.1799994, 16.709997
    ],
    [
        23.63,     23.63,     23.630003, 23.630001, 23.630001, 23.630001, 23.630001, 23.630001,
        23.630001, 23.630001, 23.630001, 23.63,     23.630001, 23.630001, 23.63,     23.630001,
        23.630001, 23.63,     23.630001, 23.630001, 23.630001, 23.630001, 23.630001, 23.630003
    ],
    [
        0, 0.0000019073486, -0.0000019073486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0000019073486, 0,
        0
    ],
    [
        10.1, 20.449999, 40.340004, 10.100001, 20.45, 40.34, 10.100001, 20.45, 40.34, 10.1, 20.45, 40.34,
        10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.100002, 20.45, 40.34
    ]]                                                                                                                   │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```","","","","","Time series analysis"
"24.10.4.191","stem",0,0,"","","System","","","","","",""
"24.10.4.191","hasSubsequenceCaseInsensitiveUTF8",0,1,"","","System","","","","","",""
"24.10.4.191","pi",0,1,"","","System","","","","","",""
"24.10.4.191","randCanonical",0,0,"","","System","
The function generates pseudo random results with independent and identically distributed uniformly distributed values in [0, 1).
Non-deterministic. Return type is Float64.
        ","","","","randCanonical:

``` sql
SELECT randCanonical()
```

``` text

```
","Mathematical"
"24.10.4.191","toBool",0,0,"","","System","","","","","",""
"24.10.4.191","randPoisson",0,0,"","","System","
Returns a random number from the poisson distribution.
Accepts one parameter - the mean number of occurrences.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randPoisson(3) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","simpleJSONExtractFloat",0,0,"","","System","Parses Float64 from the value of the field named field_name. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.","simpleJSONExtractFloat(json, field_name)","- json:The JSON in which the field is searched for. String.
- field_name:The name of the field to search for. String literal.
","It returns the number parsed from the field if the field exists and contains a number, 0 otherwise.","simple:

``` sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractFloat(json, 'foo') FROM jsons ORDER BY json;
```

``` text
0
-4000
0
-3.4
5
```
","JSON"
"24.10.4.191","reinterpretAsUUID",0,0,"","","System","","","","","",""
"24.10.4.191","nowInBlock",0,0,"","","System","","","","","",""
"24.10.4.191","randNegativeBinomial",0,0,"","","System","
Returns a random number from the negative binomial distribution.
Accepts two parameters - number of experiments and probability of success in each experiment.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randNegativeBinomial(10, 0.1) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","toUnixTimestamp64Micro",0,0,"","","System","","","","","",""
"24.10.4.191","randBinomial",0,0,"","","System","
Returns a random number from the binomial distribution.
Accepts two parameters - number of experiments and probability of success in each experiment.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randBinomial(10, 0.1) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","addWeeks",0,0,"","","System","","","","","",""
"24.10.4.191","IPv6StringToNumOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","arrayResize",0,0,"","","System","","","","","",""
"24.10.4.191","printf",0,0,"","","System","
The `printf` function formats the given string with the values (strings, integers, floating-points etc.) listed in the arguments, similar to printf function in C++.
The format string can contain format specifiers starting with `%` character.
Anything not contained in `%` and the following format specifier is considered literal text and copied verbatim into the output.
Literal `%` character can be escaped by `%%`.","","","","sum:

``` sql
select printf('%%%s %s %d', 'Hello', 'World', 2024);
```

``` text
%Hello World 2024
```
","String"
"24.10.4.191","randBernoulli",0,0,"","","System","
Returns a random number from the Bernoulli distribution.
Accepts one parameter - probability of success.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randBernoulli(0.1) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","toInt32OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","randStudentT",0,0,"","","System","
Returns a random number from the t-distribution.
Accepts one parameter - degree of freedom.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randStudentT(5) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","aes_encrypt_mysql",0,0,"","","System","","","","","",""
"24.10.4.191","hasTokenOrNull",0,0,"","","System","Performs lookup of needle in haystack using tokenbf_v1 index. Returns null if needle is ill-formed.","","","","",""
"24.10.4.191","tuple",0,0,"","","System","
Returns a tuple by grouping input arguments.

For columns C1, C2, ... with the types T1, T2, ..., it returns a named Tuple(C1 T1, C2 T2, ...) type tuple containing these columns if their names are unique and can be treated as unquoted identifiers, otherwise a Tuple(T1, T2, ...) is returned. There is no cost to execute the function.
Tuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can’t be written to a table.

The function implements the operator `(x, y, ...)`.
","","","","typical:

``` sql
SELECT tuple(1, 2)
```

``` text
(1,2)
```
","Miscellaneous"
"24.10.4.191","randFisherF",0,0,"","","System","
Returns a random number from the f-distribution.
The F-distribution is the distribution of X = (S1 / d1) / (S2 / d2) where d1 and d2 are degrees of freedom.
Accepts two parameters - degrees of freedom.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randFisherF(5) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","toFloat32OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","regionToDistrict",0,0,"","","System","","","","","",""
"24.10.4.191","modulo",0,0,"","","System","","","","","",""
"24.10.4.191","unbin",0,1,"","","System","","","","","",""
"24.10.4.191","reinterpret",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsFixedString",0,0,"","","System","","","","","",""
"24.10.4.191","dateTimeToSnowflakeID",0,0,"","","System","Converts a [DateTime](../data-types/datetime.md) value to the first [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) at the giving time.","dateTimeToSnowflakeID(value[, epoch])","- value:Date with time. [DateTime](../data-types/datetime.md).
- epoch:Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
","Input value converted to [UInt64](../data-types/int-uint.md) as the first Snowflake ID at that time.","simple:

``` sql
SELECT dateTimeToSnowflakeID(toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai'))
```

``` text
6832626392367104000
```
","Snowflake ID"
"24.10.4.191","multiSearchAnyCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetUInt16",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt16 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","toUInt64OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","s2GetNeighbors",0,0,"","","System","","","","","",""
"24.10.4.191","arrayAll",0,0,"","","System","","","","","",""
"24.10.4.191","toIntervalDay",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsFloat32",0,0,"","","System","","","","","",""
"24.10.4.191","JSONAllPaths",0,0,"","","System","
Returns the list of all paths stored in each row in JSON column.
","JSONAllPaths(json)","- json:JSON column
","","Example:

``` sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONAllPaths(json) FROM test;

```

``` text

┌─json─────────────────────────────────┬─JSONAllPaths(json)─┐
│ {""a"":""42""}                           │ ['a']              │
│ {""b"":""Hello""}                        │ ['b']              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['a','c']          │
└──────────────────────────────────────┴────────────────────┘

```
","JSON"
"24.10.4.191","toStartOfMillisecond",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsInt64",0,0,"","","System","","","","","",""
"24.10.4.191","regionToCountry",0,0,"","","System","","","","","",""
"24.10.4.191","generateUUIDv7",0,0,"","","System","Generates a UUID of version 7. The generated UUID contains the current Unix timestamp in milliseconds (48 bits), followed by version ""7"" (4 bits), a counter (42 bit, including a variant field ""2"", 2 bit) to distinguish UUIDs within a millisecond, and a random field (32 bits). For any given timestamp (unix_ts_ms), the counter starts at a random value and is incremented by 1 for each new UUID until the timestamp changes. In case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to a random new start value. Function generateUUIDv7 guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.","SELECT generateUUIDv7()","- expression:The expression is used to bypass common subexpression elimination if the function is called multiple times in a query but otherwise ignored. Optional.
","A value of type UUID version 7.","single:

``` sql
SELECT generateUUIDv7()
```

``` text

```
multiple:

``` sql
SELECT generateUUIDv7(1), generateUUIDv7(2)
```

``` text

```
","UUID"
"24.10.4.191","toUUID",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsInt16",0,0,"","","System","","","","","",""
"24.10.4.191","toStringCutToZero",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt256OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","tupleModulo",0,0,"","","System","","","","","",""
"24.10.4.191","identity",0,0,"","","System","","","","","",""
"24.10.4.191","ascii",0,1,"","","System","
Returns the ASCII code point of the first character of str.  The result type is Int32.

If s is empty, the result is 0. If the first character is not an ASCII character or not part of the Latin-1 Supplement range of UTF-16, the result is undefined)
        ","","","","ascii:

``` sql
SELECT ascii('234')
```

``` text

```
","String"
"24.10.4.191","ngramDistanceUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","s2RectUnion",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsUInt256",0,0,"","","System","","","","","",""
"24.10.4.191","fromUTCTimestamp",0,0,"","","System","","","","","",""
"24.10.4.191","defaultProfiles",0,0,"","","System","","","","","",""
"24.10.4.191","toIntervalMonth",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsUInt64",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsUInt16",0,0,"","","System","","","","","",""
"24.10.4.191","least",0,1,"","","System","","","","","",""
"24.10.4.191","negate",0,0,"","","System","","","","","",""
"24.10.4.191","arrayFirstIndex",0,0,"","","System","","","","","",""
"24.10.4.191","arrayPartialShuffle",0,1,"","","System","
Returns an array of the same size as the original array where elements in range [1..limit] are a random
subset of the original array. Remaining (limit..n] shall contain the elements not in [1..limit] range in undefined order.
Value of limit shall be in range [1..n]. Values outside of that range are equivalent to performing full arrayShuffle:
[example:no_limit1]
[example:no_limit2]

Note: this function will not materialize constants:
[example:materialize]

If no seed is provided a random one will be used:
[example:random_seed]

It is possible to override the seed to produce stable results:
[example:explicit_seed]
","","","","no_limit1:

``` sql
SELECT arrayPartialShuffle([1, 2, 3, 4], 0)
```

``` text

```
no_limit2:

``` sql
SELECT arrayPartialShuffle([1, 2, 3, 4])
```

``` text

```
random_seed:

``` sql
SELECT arrayPartialShuffle([1, 2, 3, 4], 2)
```

``` text

```
explicit_seed:

``` sql
SELECT arrayPartialShuffle([1, 2, 3, 4], 2, 41)
```

``` text

```
materialize:

``` sql
SELECT arrayPartialShuffle(materialize([1, 2, 3, 4]), 2, 42), arrayPartialShuffle([1, 2, 3], 2, 42) FROM numbers(10)
```

``` text

```
","Array"
"24.10.4.191","blockNumber",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime32BestEffortOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","cutURLParameter",0,0,"","","System","","","","","",""
"24.10.4.191","rightUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","cosineDistance",0,0,"","","System","","","","","",""
"24.10.4.191","right",0,1,"","","System","","","","","",""
"24.10.4.191","randomString",0,0,"","","System","","","","","",""
"24.10.4.191","randExponential",0,0,"","","System","
Returns a random number from the exponential distribution.
Accepts one parameter - lambda value.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randExponential(0, 5) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","simpleJSONExtractInt",0,0,"","","System","Parses Int64 from the value of the field named field_name. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.","simpleJSONExtractInt(json, field_name)","- json:The JSON in which the field is searched for. String.
- field_name:The name of the field to search for. String literal.
","It returns the number parsed from the field if the field exists and contains a number, 0 otherwise.","simple:

``` sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractInt(json, 'foo') FROM jsons ORDER BY json;
```

``` text
0
-4
0
-3
5
```
","JSON"
"24.10.4.191","toLastDayOfWeek",0,0,"","","System","","","","","",""
"24.10.4.191","toDate",0,0,"","","System","","","","","",""
"24.10.4.191","s2RectContains",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt256OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","serverUUID",0,0,"","","System","","","","","",""
"24.10.4.191","MACNumToString",0,0,"","","System","","","","","",""
"24.10.4.191","revision",0,1,"","","System","","","","","",""
"24.10.4.191","extractURLParameter",0,0,"","","System","","","","","",""
"24.10.4.191","zookeeperSessionUptime",0,0,"","","System","","","","","",""
"24.10.4.191","displayName",0,0,"","","System","
Returns the value of `display_name` from config or server FQDN if not set.

[example:displayName]
","","","","displayName:

``` sql
SELECT displayName();
```

``` text

```
","Constant, Miscellaneous"
"24.10.4.191","mapKeys",0,0,"","","System","Returns an array with the keys of map.","","","","mapKeys:

``` sql
SELECT mapKeys(map('k1', 'v1', 'k2', 'v2'))
```

``` text

```
","Map"
"24.10.4.191","toInt256",0,0,"","","System","","","","","",""
"24.10.4.191","sign",0,1,"","","System","","","","","",""
"24.10.4.191","sin",0,1,"","","System","Returns the sine of the argument.","sin(x)","- x:The number whose sine will be returned. (U)Int*, Float* or Decimal*.
","The sine of x.","simple:

``` sql
SELECT sin(1.23)
```

``` text
0.9424888019316975
```
","Mathematical, Trigonometric"
"24.10.4.191","polygonsSymDifferenceSpherical",0,0,"","","System","","","","","",""
"24.10.4.191","positionCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","max2",0,1,"","","System","","","","","",""
"24.10.4.191","multiSearchFirstPositionCaseInsensitive",0,0,"","","System","","","","","",""
"24.10.4.191","hostName",0,0,"","","System","","","","","",""
"24.10.4.191","cutToFirstSignificantSubdomain",0,0,"","","System","Returns the part of the domain that includes top-level subdomains up to the ""first significant subdomain"" (see documentation of the `firstSignificantSubdomain`).","","","","cutToFirstSignificantSubdomain1:

``` sql
SELECT cutToFirstSignificantSubdomain('https://news.clickhouse.com.tr/')
```

``` text

```
cutToFirstSignificantSubdomain2:

``` sql
SELECT cutToFirstSignificantSubdomain('www.tr')
```

``` text

```
cutToFirstSignificantSubdomain3:

``` sql
SELECT cutToFirstSignificantSubdomain('tr')
```

``` text

```
","URL"
"24.10.4.191","dateTimeToSnowflake",0,0,"","","System","","","","","",""
"24.10.4.191","timeSlot",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTimeOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","extractKeyValuePairsWithEscaping",0,0,"","","System","Same as `extractKeyValuePairs` but with escaping support.

            Escape sequences supported: `\x`, `\N`, `\a`, `\b`, `\e`, `\f`, `\n`, `\r`, `\t`, `\v` and `\0`.
            Non standard escape sequences are returned as it is (including the backslash) unless they are one of the following:
            `\\`, `'`, `""`, `backtick`, `/`, `=` or ASCII control characters (c <= 31).

            This function will satisfy the use case where pre-escaping and post-escaping are not suitable. For instance, consider the following
            input string: `a: ""aaaa\""bbb""`. The expected output is: `a: aaaa\""bbbb`.
            - Pre-escaping: Pre-escaping it will output: `a: ""aaaa""bbb""` and `extractKeyValuePairs` will then output: `a: aaaa`
            - Post-escaping: `extractKeyValuePairs` will output `a: aaaa\` and post-escaping will keep it as it is.

            Leading escape sequences will be skipped in keys and will be considered invalid for values.

            **Escape sequences with escape sequence support turned on**
            ``` sql
            arthur :) select extractKeyValuePairsWithEscaping('age:a\\x0A\\n\\0') as kv

            SELECT extractKeyValuePairsWithEscaping('age:a\\x0A\\n\\0') AS kv

            Query id: 44c114f0-5658-4c75-ab87-4574de3a1645

            ┌─kv───────────────┐
            │ {'age':'a\n\n\0'} │
            └──────────────────┘
            ```","","","","",""
"24.10.4.191","snowflakeToDateTime64",0,0,"","","System","","","","","",""
"24.10.4.191","multiSearchAllPositionsUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","kql_array_sort_asc",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt8",0,0,"","","System","","","","","",""
"24.10.4.191","snowflakeIDToDateTime",0,0,"","","System","Returns the timestamp component of a [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as a value of type [DateTime](../data-types/datetime.md).","snowflakeIDToDateTime(value[, epoch[, time_zone]])","- value:Snowflake ID. [UInt64](../data-types/int-uint.md)
- epoch:Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
- time_zone:[Timezone](/docs/en/operations/server-configuration-parameters/settings.md/#server_configuration_parameters-timezone). The function parses `time_string` according to the timezone. Optional. [String](../data-types/string.md)
","The timestamp component of `value` as a [DateTime](../data-types/datetime.md) value.","simple:

``` sql
SELECT snowflakeIDToDateTime(7204436857747984384)
```

``` text
2024-06-06 10:59:58
```
","Snowflake ID"
"24.10.4.191","not",0,1,"","","System","","","","","",""
"24.10.4.191","reinterpretAsInt8",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt8OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","rowNumberInBlock",0,0,"","","System","","","","","",""
"24.10.4.191","splitByString",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsUInt32",0,0,"","","System","","","","","",""
"24.10.4.191","bitOr",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt128OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt128OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","punycodeEncode",0,0,"","","System","
Computes a Punycode representation of a string.","punycodeEncode(str)","- str:Input string
","The punycode representation [String](/docs/en/sql-reference/data-types/string.md).","simple:

``` sql
SELECT punycodeEncode('München') AS puny;
```

``` text

┌─puny───────┐
│ Mnchen-3ya │
└────────────┘
            
```
",""
"24.10.4.191","sleep",0,0,"","","System","","","","","",""
"24.10.4.191","arrayElement",0,0,"","","System","
Get the element with the index `n` from the array `arr`. `n` must be any integer type. Indexes in an array begin from one.

Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, `arr[-1]` is the last item in the array.

If the index falls outside of the bounds of an array, it returns some default value (0 for numbers, an empty string for strings, etc.), except for the case with a non-constant array and a constant index 0 (in this case there will be an error `Array indices are 1-based`).
        ","","","","","Array"
"24.10.4.191","startsWithUTF8",0,0,"","","System","
Returns whether string `str` starts with `prefix`, the difference between `startsWithUTF8` and `startsWith` is that `startsWithUTF8` match `str` and `suffix` by UTF-8 characters.
        ","","","","startsWithUTF8:

``` sql
select startsWithUTF8('富强民主文明和谐', '富强');
```

``` text

```
","String"
"24.10.4.191","snowflakeToDateTime",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsDateTime",0,0,"","","System","","","","","",""
"24.10.4.191","notEquals",0,0,"","","System","","","","","",""
"24.10.4.191","farmHash64",0,0,"","","System","","","","","",""
"24.10.4.191","snowflakeIDToDateTime64",0,0,"","","System","Returns the timestamp component of a [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as a value of type [DateTime64](../data-types/datetime64.md).","snowflakeIDToDateTime64(value[, epoch[, time_zone]])","- value:Snowflake ID. [UInt64](../data-types/int-uint.md)
- epoch:Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
- time_zone:[Timezone](/docs/en/operations/server-configuration-parameters/settings.md/#server_configuration_parameters-timezone). The function parses `time_string` according to the timezone. Optional. [String](../data-types/string.md)
","The timestamp component of `value` as a [DateTime64](../data-types/datetime64.md) with scale = 3, i.e. millisecond precision.","simple:

``` sql
SELECT snowflakeIDToDateTime64(7204436857747984384)
```

``` text
2024-06-06 10:59:58
```
","Snowflake ID"
"24.10.4.191","normalizedQueryHashKeepNames",0,0,"","","System","","","","","",""
"24.10.4.191","coalesce",0,1,"","","System","","","","","",""
"24.10.4.191","domainRFC",0,0,"","","System","Similar to `domain` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","URL"
"24.10.4.191","parseDateTime64BestEffortOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","stringToH3",0,0,"","","System","","","","","",""
"24.10.4.191","tcpPort",0,0,"","","System","","","","","",""
"24.10.4.191","subtractHours",0,0,"","","System","","","","","",""
"24.10.4.191","arrayPopFront",0,0,"","","System","","","","","",""
"24.10.4.191","subtractMilliseconds",0,0,"","","System","","","","","",""
"24.10.4.191","sipHash128Reference",0,0,"","","System","Like [sipHash128](#hash_functions-siphash128) but implements the 128-bit algorithm from the original authors of SipHash.","","","","hash:

``` sql
SELECT hex(sipHash128Reference('foo', '\x01', 3))
```

``` text

```
","Hash"
"24.10.4.191","seriesOutliersDetectTukey",0,0,"","","System","
Detects outliers in series data using [Tukey Fences](https://en.wikipedia.org/wiki/Outlier#Tukey%27s_fences).

**Syntax**

``` sql
seriesOutliersDetectTukey(series);
seriesOutliersDetectTukey(series, min_percentile, max_percentile, k);
```

**Arguments**

- `series` - An array of numeric values.
- `min_quantile` - The minimum quantile to be used to calculate inter-quantile range [(IQR)](https://en.wikipedia.org/wiki/Interquartile_range). The value must be in range [0.02,0.98]. The default is 0.25.
- `max_quantile` - The maximum quantile to be used to calculate inter-quantile range (IQR). The value must be in range [0.02, 0.98]. The default is 0.75.
- `k` - Non-negative constant value to detect mild or stronger outliers. The default value is 1.5

At least four data points are required in `series` to detect outliers.

**Returned value**

- Returns an array of the same length as the input array where each value represents score of possible anomaly of corresponding element in the series. A non-zero score indicates a possible anomaly.

Type: [Array](../../sql-reference/data-types/array.md).

**Examples**

Query:

``` sql
SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4, 5, 12, 45, 12, 3, 3, 4, 5, 6]) AS print_0;
```

Result:

``` text
┌───────────print_0─────────────────┐
│[0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0] │
└───────────────────────────────────┘
```

Query:

``` sql
SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4.50, 5, 12, 45, 12, 3.40, 3, 4, 5, 6], 0.2, 0.8, 1.5) AS print_0;
```

Result:

``` text
┌─print_0──────────────────────────────┐
│ [0,0,0,0,0,0,0,0,0,19.5,0,0,0,0,0,0] │
└──────────────────────────────────────┘
```","","","","","Time series analysis"
"24.10.4.191","decodeXMLComponent",0,0,"","","System","","","","","",""
"24.10.4.191","subtractMicroseconds",0,0,"","","System","","","","","",""
"24.10.4.191","h3GetFaces",0,0,"","","System","","","","","",""
"24.10.4.191","__getScalar",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayToSingle",0,0,"","","System","","","","","",""
"24.10.4.191","h3ToChildren",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsInt128",0,0,"","","System","","","","","",""
"24.10.4.191","tgamma",0,0,"","","System","","","","","",""
"24.10.4.191","ULIDStringToDateTime",0,0,"","","System","
This function extracts the timestamp from a ULID and returns it as a DateTime64(3) typed value.
The function expects the ULID to be provided as the first argument, which can be either a String or a FixedString(26) data type.
An optional second argument can be passed to specify a timezone for the timestamp.
","","","","ulid:

``` sql
SELECT ULIDStringToDateTime(generateULID())
```

``` text

```
timezone:

``` sql
SELECT ULIDStringToDateTime(generateULID(), 'Asia/Istanbul')
```

``` text

```
","ULID"
"24.10.4.191","JSONType",0,0,"","","System","","","","","",""
"24.10.4.191","addNanoseconds",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayUInt16",0,0,"","","System","","","","","",""
"24.10.4.191","dotProduct",0,0,"","","System","","","","","",""
"24.10.4.191","bitAnd",0,0,"","","System","","","","","",""
"24.10.4.191","timestamp",0,1,"","","System","
Converts the first argument 'expr' to type DateTime64(6).
If the second argument 'expr_time' is provided, it adds the specified time to the converted value.
:::","timestamp(expr[, expr_time])","- expr:Date or date with time. Type: String.
- expr_time:Time to add. Type: String.
","The result of conversion and, optionally, addition. Type: DateTime64(6).","timestamp:

``` sql
SELECT timestamp('2013-12-31')
```

``` text
2013-12-31 00:00:00.000000
```
timestamp:

``` sql
SELECT timestamp('2013-12-31 12:00:00')
```

``` text
2013-12-31 12:00:00.000000
```
timestamp:

``` sql
SELECT timestamp('2013-12-31 12:00:00', '12:00:00.11')
```

``` text
2014-01-01 00:00:00.110000
```
","DateTime"
"24.10.4.191","toDayOfWeek",0,0,"","","System","","","","","",""
"24.10.4.191","isFinite",0,0,"","","System","","","","","",""
"24.10.4.191","multiMatchAllIndices",0,0,"","","System","","","","","",""
"24.10.4.191","arrayAUC",0,0,"","","System","","","","","",""
"24.10.4.191","hasThreadFuzzer",0,0,"","","System","","","","","",""
"24.10.4.191","transform",0,0,"","","System","","","","","",""
"24.10.4.191","timezoneOffset",0,0,"","","System","","","","","",""
"24.10.4.191","multiFuzzyMatchAny",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfWeek",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayFloat32",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt32OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","bitSlice",0,0,"","","System","","","","","",""
"24.10.4.191","bin",0,1,"","","System","","","","","",""
"24.10.4.191","toDayOfYear",0,0,"","","System","","","","","",""
"24.10.4.191","toMinute",0,0,"","","System","","","","","",""
"24.10.4.191","timeSlots",0,0,"","","System","","","","","",""
"24.10.4.191","toInt16OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal32OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetInt32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","toMonday",0,0,"","","System","","","","","",""
"24.10.4.191","formatReadableSize",0,0,"","","System","","","","","",""
"24.10.4.191","demangle",0,0,"","","System","","","","","",""
"24.10.4.191","concat",0,1,"","","System","","","","","",""
"24.10.4.191","toNullable",0,0,"","","System","","","","","",""
"24.10.4.191","countMatches",0,0,"","","System","","","","","",""
"24.10.4.191","toQuarter",0,0,"","","System","","","","","",""
"24.10.4.191","transactionOldestSnapshot",0,0,"","","System","","","","","",""
"24.10.4.191","dumpColumnStructure",0,0,"","","System","","","","","",""
"24.10.4.191","multiSearchFirstIndex",0,0,"","","System","","","","","",""
"24.10.4.191","arrayReverseSplit",0,0,"","","System","","","","","",""
"24.10.4.191","generateUUIDv4",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime64InJodaSyntax",0,0,"","","System","","","","","",""
"24.10.4.191","toMillisecond",0,0,"","","System","
Returns the millisecond component (0-999) of a date with time.
    ","toMillisecond(value)","- value:DateTime or DateTime64
","The millisecond in the minute (0 - 59) of the given date/time","toMillisecond:

``` sql
SELECT toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3)
```

``` text
456
```
","Dates and Times"
"24.10.4.191","exp",0,1,"","","System","","","","","",""
"24.10.4.191","arrayEnumerate",0,0,"","","System","","","","","",""
"24.10.4.191","tupleNegate",0,0,"","","System","","","","","",""
"24.10.4.191","toRelativeQuarterNum",0,0,"","","System","","","","","",""
"24.10.4.191","toRelativeYearNum",0,0,"","","System","","","","","",""
"24.10.4.191","tokens",0,0,"","","System","","","","","",""
"24.10.4.191","LpNormalize",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfDay",0,0,"","","System","","","","","",""
"24.10.4.191","IPv4ToIPv6",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfMicrosecond",0,0,"","","System","","","","","",""
"24.10.4.191","regionToPopulation",0,0,"","","System","","","","","",""
"24.10.4.191","toInt8OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfISOYear",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfMinute",0,0,"","","System","","","","","",""
"24.10.4.191","wordShingleSimHash",0,0,"","","System","","","","","",""
"24.10.4.191","arrayCumSum",0,0,"","","System","","","","","",""
"24.10.4.191","hasAny",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsInt256",0,0,"","","System","","","","","",""
"24.10.4.191","h3HexAreaM2",0,0,"","","System","","","","","",""
"24.10.4.191","toYYYYMMDDhhmmss",0,0,"","","System","","","","","",""
"24.10.4.191","h3NumHexagons",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime64BestEffortUSOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","moduloLegacy",0,0,"","","System","","","","","",""
"24.10.4.191","toYYYYMM",0,0,"","","System","","","","","",""
"24.10.4.191","domainWithoutWWWRFC",0,0,"","","System","Similar to `domainWithoutWWW` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","URL"
"24.10.4.191","arrayEnumerateDenseRanked",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfTenMinutes",0,0,"","","System","","","","","",""
"24.10.4.191","erfc",0,0,"","","System","","","","","",""
"24.10.4.191","cutToFirstSignificantSubdomainCustomWithWWW",0,0,"","","System","
Returns the part of the domain that includes top-level subdomains up to the first significant subdomain without stripping `www`.
Accepts custom TLD list name from config.

Can be useful if you need fresh TLD list or you have custom.
        ","","","","cutToFirstSignificantSubdomainCustomWithWWW:

``` sql
SELECT cutToFirstSignificantSubdomainCustomWithWWW('www.foo', 'public_suffix_list')
```

``` text

```
","URL"
"24.10.4.191","toIPv6OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal256",0,0,"","","System","","","","","",""
"24.10.4.191","multiSearchFirstPositionCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","cutFragment",0,0,"","","System","","","","","",""
"24.10.4.191","arrayCompact",0,0,"","","System","","","","","",""
"24.10.4.191","hasTokenCaseInsensitive",0,1,"","","System","Performs case insensitive lookup of needle in haystack using tokenbf_v1 index.","","","","",""
"24.10.4.191","toStartOfYear",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfFifteenMinutes",0,0,"","","System","","","","","",""
"24.10.4.191","toYYYYMMDD",0,0,"","","System","","","","","",""
"24.10.4.191","generateRandomStructure",0,0,"","","System","
Generates a random table structure.
This function takes 2 optional constant arguments:
the number of columns in the result structure (random by default) and random seed (random by default)
The maximum number of columns is 128.
The function returns a value of type String.
","","","","random:

``` sql
SELECT generateRandomStructure()
```

``` text
c1 UInt32, c2 FixedString(25)
```
with specified number of columns:

``` sql
SELECT generateRandomStructure(3)
```

``` text
c1 String, c2 Array(Int32), c3 LowCardinality(String)
```
with specified seed:

``` sql
SELECT generateRandomStructure(1, 42)
```

``` text
c1 UInt128
```
","Random"
"24.10.4.191","isNullable",0,0,"","","System","","","","","",""
"24.10.4.191","sqidEncode",0,0,"","","System","
Transforms numbers into a [Sqid](https://sqids.org/) which is a Youtube-like ID string.","sqidEncode(number1, ...)","- number1, ...:Arbitrarily many UInt8, UInt16, UInt32 or UInt64 arguments
","A hash id [String](/docs/en/sql-reference/data-types/string.md).","simple:

``` sql
SELECT sqidEncode(1, 2, 3, 4, 5);
```

``` text

┌─sqidEncode(1, 2, 3, 4, 5)─┐
│ gXHfJ1C6dN                │
└───────────────────────────┘
            
```
",""
"24.10.4.191","regexpExtract",0,0,"","","System","Extracts the first string in haystack that matches the regexp pattern and corresponds to the regex group index.","","","","",""
"24.10.4.191","jaroSimilarity",0,0,"","","System","Calculates the Jaro similarity between two byte-string.","","","","",""
"24.10.4.191","h3IsResClassIII",0,0,"","","System","","","","","",""
"24.10.4.191","cutQueryStringAndFragment",0,0,"","","System","","","","","",""
"24.10.4.191","splitByNonAlpha",0,0,"","","System","","","","","",""
"24.10.4.191","arrayStringConcat",0,0,"","","System","","","","","",""
"24.10.4.191","toLastDayOfMonth",0,0,"","","System","","","","","",""
"24.10.4.191","randomPrintableASCII",0,0,"","","System","","","","","",""
"24.10.4.191","toInt32OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","mapAdd",0,0,"","","System","","","","","",""
"24.10.4.191","detectCharset",0,0,"","","System","","","","","",""
"24.10.4.191","dynamicType",0,0,"","","System","
Returns the variant type name for each row of `Dynamic` column. If row contains NULL, it returns 'None' for it.
","dynamicType(dynamic)","- dynamic:Dynamic column
","","Example:

``` sql

CREATE TABLE test (d Dynamic) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, dynamicType(d) FROM test;

```

``` text

┌─d─────────────┬─dynamicType(d)─┐
│ ᴺᵁᴸᴸ          │ None           │
│ 42            │ Int64          │
│ Hello, World! │ String         │
│ [1,2,3]       │ Array(Int64)   │
└───────────────┴────────────────┘

```
","Variant"
"24.10.4.191","arrayCumSumNonNegative",0,0,"","","System","","","","","",""
"24.10.4.191","translateUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","tryBase64Decode",0,0,"","","System","Decodes a String or FixedString from base64, like base64Decode but returns an empty string in case of an error.","tryBase64Decode(encoded)","- encoded:String column or constant. If the string is not a valid Base64-encoded value, returns an empty string.
","A string containing the decoded value of the argument.","valid:

``` sql
SELECT tryBase64Decode('Y2xpY2tob3VzZQ==')
```

``` text
clickhouse
```
invalid:

``` sql
SELECT tryBase64Decode('invalid')
```

``` text

```
","String encoding"
"24.10.4.191","log10",0,1,"","","System","","","","","",""
"24.10.4.191","tryDecrypt",0,0,"","","System","Similar to `decrypt`, but returns NULL if decryption fails because of using the wrong key.","","","","",""
"24.10.4.191","MACStringToOUI",0,0,"","","System","","","","","",""
"24.10.4.191","roundAge",0,0,"","","System","","","","","",""
"24.10.4.191","file",0,0,"","","System","","","","","",""
"24.10.4.191","subtractWeeks",0,0,"","","System","","","","","",""
"24.10.4.191","tupleConcat",0,0,"","","System","","","","","",""
"24.10.4.191","s2CapContains",0,0,"","","System","","","","","",""
"24.10.4.191","tupleElement",0,0,"","","System","","","","","",""
"24.10.4.191","JSONExtractBool",0,0,"","","System","","","","","",""
"24.10.4.191","ngramSearchUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","h3ExactEdgeLengthRads",0,0,"","","System","","","","","",""
"24.10.4.191","tupleHammingDistance",0,0,"","","System","","","","","",""
"24.10.4.191","tupleNames",0,0,"","","System","
Converts a tuple into an array of column names. For a tuple in the form `Tuple(a T, b T, ...)`, it returns an array of strings representing the named columns of the tuple. If the tuple elements do not have explicit names, their indices will be used as the column names instead.
","","","","typical:

``` sql
SELECT tupleNames(tuple(1 as a, 2 as b))
```

``` text
['a','b']
```
","Miscellaneous"
"24.10.4.191","mapReverseSort",0,0,"","","System","The same as arrayReverseSort.","","","","mapReverseSort:

``` sql
SELECT mapReverseSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))
```

``` text

```
","Map"
"24.10.4.191","addYears",0,0,"","","System","","","","","",""
"24.10.4.191","validateNestedArraySizes",0,0,"","","System","","","","","",""
"24.10.4.191","SHA256",0,0,"","","System","Calculates the SHA256 hash of the given string.","SELECT SHA256(s);","- s:The input [String](../../sql-reference/data-types/string.md).
","The SHA256 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

``` sql
SELECT HEX(SHA256('abc'));
```

``` text

┌─hex(SHA256('abc'))───────────────────────────────────────────────┐
│ BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD │
└──────────────────────────────────────────────────────────────────┘
            
```
",""
"24.10.4.191","toIntervalNanosecond",0,0,"","","System","","","","","",""
"24.10.4.191","LpDistance",0,0,"","","System","","","","","",""
"24.10.4.191","tupleIntDivOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","variantType",0,0,"","","System","
Returns the variant type name for each row of `Variant` column. If row contains NULL, it returns 'None' for it.
","variantType(variant)","- variant:Variant column
","","Example:

``` sql

CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT variantType(v) FROM test;
```

``` text

┌─variantType(v)─┐
│ None           │
│ UInt64         │
│ String         │
│ Array(UInt64)  │
└────────────────┘

```
","Variant"
"24.10.4.191","toInt8",0,0,"","","System","","","","","",""
"24.10.4.191","L1Distance",0,0,"","","System","","","","","",""
"24.10.4.191","match",0,0,"","","System","","","","","",""
"24.10.4.191","fragment",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTimeBestEffortOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","repeat",0,1,"","","System","","","","","",""
"24.10.4.191","dictGetOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the attribute’s data type if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","emptyArrayInt16",0,0,"","","System","","","","","",""
"24.10.4.191","replaceOne",0,0,"","","System","","","","","",""
"24.10.4.191","LinfNorm",0,0,"","","System","","","","","",""
"24.10.4.191","arrayMin",0,0,"","","System","","","","","",""
"24.10.4.191","toColumnTypeName",0,0,"","","System","","","","","",""
"24.10.4.191","L2Norm",0,0,"","","System","","","","","",""
"24.10.4.191","L1Norm",0,0,"","","System","","","","","",""
"24.10.4.191","fromUnixTimestamp64Milli",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt64OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","addSeconds",0,0,"","","System","","","","","",""
"24.10.4.191","tupleIntDivOrZeroByNumber",0,0,"","","System","","","","","",""
"24.10.4.191","toUnixTimestamp",0,0,"","","System","","","","","",""
"24.10.4.191","h3GetRes0Indexes",0,0,"","","System","","","","","",""
"24.10.4.191","tupleIntDivByNumber",0,0,"","","System","","","","","",""
"24.10.4.191","bitRotateLeft",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt16OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayDateTime",0,0,"","","System","","","","","",""
"24.10.4.191","tupleDivideByNumber",0,0,"","","System","","","","","",""
"24.10.4.191","radians",0,1,"","","System","","","","","",""
"24.10.4.191","mapFromArrays",0,0,"","","System","","","","","",""
"24.10.4.191","tupleMultiplyByNumber",0,0,"","","System","","","","","",""
"24.10.4.191","reinterpretAsString",0,0,"","","System","","","","","",""
"24.10.4.191","ngramSimHashCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","finalizeAggregation",0,0,"","","System","","","","","",""
"24.10.4.191","toValidUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","abs",0,1,"","","System","","","","","",""
"24.10.4.191","arrayWithConstant",0,0,"","","System","","","","","",""
"24.10.4.191","toStartOfNanosecond",0,0,"","","System","","","","","",""
"24.10.4.191","trimLeft",0,0,"","","System","","","","","",""
"24.10.4.191","subtractInterval",0,0,"","","System","
Adds an negated interval to another interval or tuple of intervals. The returned value is tuple of intervals.
[example:tuple]
[example:interval1]

If the types of the first interval (or the interval in the tuple) and the second interval are the same they will be merged into one interval.
[example:interval2]
","","","","tuple:

``` sql
SELECT subtractInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH)
```

``` text

```
interval1:

``` sql
SELECT subtractInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH)
```

``` text

```
interval2:

``` sql
SELECT subtractInterval(INTERVAL 2 DAY, INTERVAL 1 DAY)
```

``` text

```
","Interval, Tuple"
"24.10.4.191","polygonAreaCartesian",0,0,"","","System","","","","","",""
"24.10.4.191","arrayUniq",0,0,"","","System","","","","","",""
"24.10.4.191","toIntervalYear",0,0,"","","System","","","","","",""
"24.10.4.191","addInterval",0,0,"","","System","
Adds an interval to another interval or tuple of intervals. The returned value is tuple of intervals.
[example:tuple]
[example:interval1]

If the types of the first interval (or the interval in the tuple) and the second interval are the same they will be merged into one interval.
[example:interval2]
","","","","tuple:

``` sql
SELECT addInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH)
```

``` text

```
interval1:

``` sql
SELECT addInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH)
```

``` text

```
interval2:

``` sql
SELECT addInterval(INTERVAL 1 DAY, INTERVAL 1 DAY)
```

``` text

```
","Interval, Tuple"
"24.10.4.191","pointInPolygon",0,0,"","","System","","","","","",""
"24.10.4.191","toInt256OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","subtractTupleOfIntervals",0,0,"","","System","
Consecutively subtracts a tuple of intervals from a Date or a DateTime.
[example:tuple]
","","","","tuple:

``` sql
WITH toDate('2018-01-01') AS date SELECT subtractTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 YEAR))
```

``` text

```
","Date, DateTime, Interval, Tuple"
"24.10.4.191","__scalarSubqueryResult",0,0,"","","System","","","","","",""
"24.10.4.191","tupleDivide",0,0,"","","System","","","","","",""
"24.10.4.191","toDateTime",0,0,"","","System","","","","","",""
"24.10.4.191","tupleMinus",0,0,"","","System","","","","","",""
"24.10.4.191","firstSignificantSubdomainRFC",0,0,"","","System","Returns the ""first significant subdomain"" according to RFC 1034.","","","","","URL"
"24.10.4.191","queryID",0,0,"","","System","","","","","",""
"24.10.4.191","path",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt128",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayUInt64",0,0,"","","System","","","","","",""
"24.10.4.191","simpleJSONExtractString",0,0,"","","System","Parses String in double quotes from the value of the field named field_name.

        There is currently no support for code points in the format \uXXXX\uYYYY that are not from the basic multilingual plane (they are converted to CESU-8 instead of UTF-8).","simpleJSONExtractString(json, field_name)","- json:The JSON in which the field is searched for. String.
- field_name:The name of the field to search for. String literal.
","It returns the value of a field as a String, including separators. The value is unescaped. It returns an empty String: if the field doesn't contain a double quoted string, if unescaping fails or if the field doesn't exist.","simple:

``` sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""\\n\\u0000""}');
INSERT INTO jsons VALUES ('{""foo"":""\\u263""}');
INSERT INTO jsons VALUES ('{""foo"":""\\u263a""}');
INSERT INTO jsons VALUES ('{""foo"":""hello}');

SELECT simpleJSONExtractString(json, 'foo') FROM jsons ORDER BY json;
```

``` text
\n\0

☺

```
","JSON"
"24.10.4.191","bitmapTransform",0,0,"","","System","","","","","",""
"24.10.4.191","arrayShuffle",0,1,"","","System","
Returns an array of the same size as the original array containing the elements in shuffled order.
Elements are being reordered in such a way that each possible permutation of those elements has equal probability of appearance.

Note: this function will not materialize constants:
[example:materialize]

If no seed is provided a random one will be used:
[example:random_seed]

It is possible to override the seed to produce stable results:
[example:explicit_seed]
","","","","random_seed:

``` sql
SELECT arrayShuffle([1, 2, 3, 4])
```

``` text

```
explicit_seed:

``` sql
SELECT arrayShuffle([1, 2, 3, 4], 41)
```

``` text

```
materialize:

``` sql
SELECT arrayShuffle(materialize([1, 2, 3]), 42), arrayShuffle([1, 2, 3], 42) FROM numbers(10)
```

``` text

```
","Array"
"24.10.4.191","kql_array_sort_desc",0,0,"","","System","","","","","",""
"24.10.4.191","multiply",0,0,"","","System","","","","","",""
"24.10.4.191","getMacro",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt128OrDefault",0,0,"","","System","
Converts a string in the first argument of the function to UInt128 by parsing it.
If it cannot parse the value, returns the default value, which can be provided as the second function argument, and if provided, must be of UInt128 type.
If the default value is not provided in the second argument, it is assumed to be zero.
","","","","Successful conversion:

``` sql
SELECT toUInt128OrDefault('1', 2::UInt128)
```

``` text
1
```
Default value:

``` sql
SELECT toUInt128OrDefault('upyachka', 123456789012345678901234567890::UInt128)
```

``` text
123456789012345678901234567890
```
Implicit default value:

``` sql
SELECT toUInt128OrDefault('upyachka')
```

``` text
0
```
","ConversionFunctions"
"24.10.4.191","multiIf",0,0,"","","System","","","","","",""
"24.10.4.191","runningAccumulate",0,0,"","","System","","","","","",""
"24.10.4.191","h3ToCenterChild",0,0,"","","System","","","","","",""
"24.10.4.191","notIn",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetFloat32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Float32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","tupleModuloByNumber",0,0,"","","System","","","","","",""
"24.10.4.191","L2Distance",0,0,"","","System","","","","","",""
"24.10.4.191","decodeURLFormComponent",0,0,"","","System","","","","","",""
"24.10.4.191","domainWithoutWWW",0,0,"","","System","
Extracts the hostname from a URL, removing the leading ""www."" if present.

The URL can be specified with or without a scheme.
If the argument can't be parsed as URL, the function returns an empty string.
        ","","","","domainWithoutWWW:

``` sql
SELECT domainWithoutWWW('https://www.clickhouse.com')
```

``` text

```
","URL"
"24.10.4.191","multiSearchAllPositionsCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","isNull",0,1,"","","System","","","","","",""
"24.10.4.191","isNaN",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTimeBestEffortOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","rand64",0,0,"","","System","","","","","",""
"24.10.4.191","h3HexAreaKm2",0,0,"","","System","","","","","",""
"24.10.4.191","firstSignificantSubdomain",0,0,"","","System","
Returns the ""first significant subdomain"".

The first significant subdomain is a second-level domain if it is 'com', 'net', 'org', or 'co'.
Otherwise, it is a third-level domain.

For example, firstSignificantSubdomain('https://news.clickhouse.com/') = 'clickhouse', firstSignificantSubdomain ('https://news.clickhouse.com.tr/') = 'clickhouse'.

The list of ""insignificant"" second-level domains and other implementation details may change in the future.
        ","","","","firstSignificantSubdomain:

``` sql
SELECT firstSignificantSubdomain('https://news.clickhouse.com/')
```

``` text

```
","URL"
"24.10.4.191","leftPadUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt8OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","normalizeUTF8NFD",0,0,"","","System","","","","","",""
"24.10.4.191","array",0,0,"","","System","","","","","",""
"24.10.4.191","toInt32OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTimeBestEffortUSOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","firstSignificantSubdomainCustomRFC",0,0,"","","System","","","","","",""
"24.10.4.191","netloc",0,0,"","","System","","","","","",""
"24.10.4.191","toUnixTimestamp64Nano",0,0,"","","System","","","","","",""
"24.10.4.191","arrayLastIndex",0,0,"","","System","","","","","",""
"24.10.4.191","addMonths",0,0,"","","System","","","","","",""
"24.10.4.191","has",0,0,"","","System","","","","","",""
"24.10.4.191","encrypt",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime32BestEffort",0,0,"","","System","","","","","",""
"24.10.4.191","leftUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","topLevelDomainRFC",0,0,"","","System","Similar to topLevelDomain, but conforms to RFC 3986.","","","","","URL"
"24.10.4.191","readWKTLineString",0,0,"","","System","
Parses a Well-Known Text (WKT) representation of a LineString geometry and returns it in the internal ClickHouse format.
","readWKTLineString(wkt_string)","- wkt_string:The input WKT string representing a LineString geometry.
","The function returns a ClickHouse internal representation of the linestring geometry.","first call:

``` sql
SELECT readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)');
```

``` text

┌─readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)')─┐
│ [(1,1),(2,2),(3,3),(1,1)]                            │
└──────────────────────────────────────────────────────┘
            
```
second call:

``` sql
SELECT toTypeName(readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)'));
```

``` text

┌─toTypeName(readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)'))─┐
│ LineString                                                       │
└──────────────────────────────────────────────────────────────────┘
            
```
","Unique identifiers"
"24.10.4.191","toIPv4OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","subtractNanoseconds",0,0,"","","System","","","","","",""
"24.10.4.191","queryStringAndFragment",0,0,"","","System","","","","","",""
"24.10.4.191","toFloat64OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toInt128OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","addTupleOfIntervals",0,0,"","","System","
Consecutively adds a tuple of intervals to a Date or a DateTime.
[example:tuple]
","","","","tuple:

``` sql
WITH toDate('2018-01-01') AS date SELECT addTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 YEAR))
```

``` text

```
","Date, DateTime, Interval, Tuple"
"24.10.4.191","dictGetFloat32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Float32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","s2RectAdd",0,0,"","","System","","","","","",""
"24.10.4.191","bitCount",0,0,"","","System","","","","","",""
"24.10.4.191","timezoneOf",0,0,"","","System","","","","","",""
"24.10.4.191","geoDistance",0,0,"","","System","","","","","",""
"24.10.4.191","mapValues",0,0,"","","System","Returns an array with the values of map.","","","","mapValues:

``` sql
SELECT mapValues(map('k1', 'v1', 'k2', 'v2'))
```

``` text

```
","Map"
"24.10.4.191","toIPv4",0,0,"","","System","","","","","",""
"24.10.4.191","toIntervalMinute",0,0,"","","System","","","","","",""
"24.10.4.191","h3PointDistRads",0,0,"","","System","","","","","",""
"24.10.4.191","polygonsUnionSpherical",0,0,"","","System","","","","","",""
"24.10.4.191","arraySum",0,0,"","","System","","","","","",""
"24.10.4.191","JSONExtractInt",0,0,"","","System","","","","","",""
"24.10.4.191","subtractMonths",0,0,"","","System","","","","","",""
"24.10.4.191","or",0,0,"","","System","","","","","",""
"24.10.4.191","arrayMap",0,0,"","","System","","","","","",""
"24.10.4.191","toFloat32",0,0,"","","System","","","","","",""
"24.10.4.191","arrayPushFront",0,0,"","","System","","","","","",""
"24.10.4.191","JSONArrayLength",0,0,"","","System","Returns the number of elements in the outermost JSON array. The function returns NULL if input JSON string is invalid.","","","","",""
"24.10.4.191","countEqual",0,0,"","","System","","","","","",""
"24.10.4.191","toIntervalMicrosecond",0,0,"","","System","","","","","",""
"24.10.4.191","L1Normalize",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal64OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal256OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","multiMatchAny",0,0,"","","System","","","","","",""
"24.10.4.191","arrayEnumerateDense",0,0,"","","System","","","","","",""
"24.10.4.191","hasAll",0,0,"","","System","","","","","",""
"24.10.4.191","toTime",0,0,"","","System","","","","","",""
"24.10.4.191","wordShingleMinHashUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","cutToFirstSignificantSubdomainRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomain` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","URL"
"24.10.4.191","geoToS2",0,0,"","","System","","","","","",""
"24.10.4.191","nullInIgnoreSet",0,0,"","","System","","","","","",""
"24.10.4.191","nullIf",0,1,"","","System","","","","","",""
"24.10.4.191","toDateTimeOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","h3ToParent",0,0,"","","System","","","","","",""
"24.10.4.191","getSizeOfEnumType",0,0,"","","System","","","","","",""
"24.10.4.191","encodeURLFormComponent",0,0,"","","System","","","","","",""
"24.10.4.191","uniqThetaNot",0,0,"","","System","
Two uniqThetaSketch objects to do a_not_b calculation(set operation ×), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","typical:

``` sql
select finalizeAggregation(uniqThetaNot(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

``` text

```
","uniqTheta"
"24.10.4.191","wordShingleMinHashArgCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","encodeURLComponent",0,0,"","","System","","","","","",""
"24.10.4.191","uniqThetaUnion",0,0,"","","System","
Two uniqThetaSketch objects to do union calculation(set operation ∪), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","typical:

``` sql
select finalizeAggregation(uniqThetaUnion(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

``` text

```
","uniqTheta"
"24.10.4.191","space",0,1,"","","System","","","","","",""
"24.10.4.191","getOSKernelVersion",0,0,"","","System","","","","","",""
"24.10.4.191","uniqThetaIntersect",0,0,"","","System","
Two uniqThetaSketch objects to do intersect calculation(set operation ∩), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","typical:

``` sql
select finalizeAggregation(uniqThetaIntersect(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

``` text

```
","uniqTheta"
"24.10.4.191","now",0,1,"","","System","","","","","",""
"24.10.4.191","parseDateTime64BestEffortOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","arrayJoin",0,0,"","","System","","","","","",""
"24.10.4.191","toDate32OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","xor",0,0,"","","System","","","","","",""
"24.10.4.191","log1p",0,0,"","","System","","","","","",""
"24.10.4.191","detectLanguageUnknown",0,0,"","","System","","","","","",""
"24.10.4.191","and",0,0,"","","System","","","","","",""
"24.10.4.191","fromUnixTimestamp",0,0,"","","System","","","","","",""
"24.10.4.191","byteHammingDistance",0,0,"","","System","Calculates Hamming distance between two byte-strings.","","","","",""
"24.10.4.191","toIPv4OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","toDateOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","hypot",0,1,"","","System","","","","","",""
"24.10.4.191","multiSearchAny",0,0,"","","System","","","","","",""
"24.10.4.191","toIntervalQuarter",0,0,"","","System","","","","","",""
"24.10.4.191","tupleMultiply",0,0,"","","System","","","","","",""
"24.10.4.191","JSONSharedDataPathsWithTypes",0,0,"","","System","
Returns the list of paths that are stored in shared data structure and their types in each row in JSON column.
","JSONDynamicPathsWithTypes(json)","- json:JSON column
","","Example:

``` sql

CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPathsWithTypes(json) FROM test;

```

``` text

┌─json─────────────────────────────────┬─JSONDynamicPathsWithTypes(json)─┐
│ {""a"":""42""}                           │ {'a':'Int64'}                   │
│ {""b"":""Hello""}                        │ {}                              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))'}  │
└──────────────────────────────────────┴─────────────────────────────────┘

```
","JSON"
"24.10.4.191","hiveHash",0,0,"","","System","","","","","",""
"24.10.4.191","randomStringUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","replaceAll",0,0,"","","System","","","","","",""
"24.10.4.191","toIntervalWeek",0,0,"","","System","","","","","",""
"24.10.4.191","toRelativeSecondNum",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal256OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","widthBucket",0,0,"","","System","
Returns the number of the bucket in which `operand` falls in a histogram having `count` equal-width buckets spanning the range `low` to `high`. Returns `0` if `operand < low`, and returns `count+1` if `operand >= high`.

`operand`, `low`, `high` can be any native number type. `count` can only be unsigned native integer and its value cannot be zero.

**Syntax**

```sql
widthBucket(operand, low, high, count)
```

There is also a case insensitive alias called `WIDTH_BUCKET` to provide compatibility with other databases.

**Example**

Query:
[example:simple]

Result:

``` text
┌─widthBucket(10.15, -8.6, 23, 18)─┐
│                               11 │
└──────────────────────────────────┘
```
","","","","simple:

``` sql
SELECT widthBucket(10.15, -8.6, 23, 18)
```

``` text

```
","Mathematical"
"24.10.4.191","countSubstringsCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","h3ExactEdgeLengthM",0,0,"","","System","","","","","",""
"24.10.4.191","arrayElementOrNull",0,0,"","","System","
Get the element with the index `n`from the array `arr`. `n` must be any integer type. Indexes in an array begin from one.

Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, `arr[-1]` is the last item in the array.

If the index falls outside of the bounds of an array, it returns `NULL` instead of a default value.
        ","","","","","Array"
"24.10.4.191","toIntervalHour",0,0,"","","System","","","","","",""
"24.10.4.191","kostikConsistentHash",0,0,"","","System","","","","","",""
"24.10.4.191","toIntervalSecond",0,0,"","","System","","","","","",""
"24.10.4.191","isValidUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","h3PointDistKm",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal32",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt32",0,0,"","","System","","","","","",""
"24.10.4.191","arrayMax",0,0,"","","System","","","","","",""
"24.10.4.191","toUUIDOrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","LinfNormalize",0,0,"","","System","","","","","",""
"24.10.4.191","extractURLParameterNames",0,0,"","","System","","","","","",""
"24.10.4.191","upperUTF8",0,0,"","","System","Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.","upperUTF8(input)","- input:Input with String type
","A String data type value","first:

``` sql
SELECT upperUTF8('München') as Upperutf8;
```

``` text
MÜNCHEN
```
","String"
"24.10.4.191","multiSearchAnyCaseInsensitiveUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","overlayUTF8",0,0,"","","System","
Replace a part of a string `input` with another string `replace`, starting at 1-based index `offset`. By default, the number of characters removed from `input` equals the length of `replace`. If `length` (the optional fourth argument) is specified, a different number of characters is removed.

Assumes that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.
","","","","","String"
"24.10.4.191","dateName",0,1,"","","System","","","","","",""
"24.10.4.191","tupleIntDiv",0,0,"","","System","","","","","",""
"24.10.4.191","arrayFlatten",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetFloat64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Float64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","YYYYMMDDToDate32",0,0,"","","System","
Like function `YYYYMMDDToDate()` but produces a Date32.
","","","","","Dates and Times"
"24.10.4.191","reinterpretAsInt32",0,0,"","","System","","","","","",""
"24.10.4.191","toIntervalMillisecond",0,0,"","","System","","","","","",""
"24.10.4.191","murmurHash3_32",0,0,"","","System","","","","","",""
"24.10.4.191","polygonConvexHullCartesian",0,0,"","","System","","","","","",""
"24.10.4.191","JSONExtractUInt",0,0,"","","System","","","","","",""
"24.10.4.191","arrayReduce",0,0,"","","System","","","","","",""
"24.10.4.191","addDays",0,0,"","","System","","","","","",""
"24.10.4.191","portRFC",0,0,"","","System","Similar to `port`, but conforms to RFC 3986.","","","","","URL"
"24.10.4.191","decodeURLComponent",0,0,"","","System","","","","","",""
"24.10.4.191","rightPadUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","SHA1",0,0,"","","System","Calculates the SHA1 hash of the given string.","SELECT SHA1(s);","- s:The input [String](../../sql-reference/data-types/string.md).
","The SHA1 hash of the given input string returned as a [FixedString](../../sql-reference/data-types/fixedstring.md).",":

``` sql
SELECT HEX(SHA1('abc'));
```

``` text

┌─hex(SHA1('abc'))─────────────────────────┐
│ A9993E364706816ABA3E25717850C26C9CD0D89D │
└──────────────────────────────────────────┘
            
```
",""
"24.10.4.191","toInt8OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","tupleToNameValuePairs",0,0,"","","System","","","","","",""
"24.10.4.191","toDateOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","IPv6NumToString",0,0,"","","System","","","","","",""
"24.10.4.191","throwIf",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime64BestEffort",0,0,"","","System","","","","","",""
"24.10.4.191","basename",0,0,"","","System","","","","","",""
"24.10.4.191","mortonEncode",0,0,"","","System","
Calculates Morton encoding (ZCurve) for a list of unsigned integers

The function has two modes of operation:
- Simple
- Expanded

Simple: accepts up to 8 unsigned integers as arguments and produces a UInt64 code.
[example:simple]

Expanded: accepts a range mask (tuple) as a first argument and up to 8 unsigned integers as other arguments.
Each number in mask configures the amount of range expansion
1 - no expansion
2 - 2x expansion
3 - 3x expansion
....
Up to 8x expansion.
[example:range_expanded]
Note: tuple size must be equal to the number of the other arguments

Range expansion can be beneficial when you need a similar distribution for arguments with wildly different ranges (or cardinality)
For example: 'IP Address' (0...FFFFFFFF) and 'Country code' (0...FF)

Morton encoding for one argument is always the argument itself.
[example:identity]
Produces: `1`

You can expand one argument too:
[example:identity_expanded]
Produces: `32768`

The function also accepts columns as arguments:
[example:from_table]

But the range tuple must still be a constant:
[example:from_table_range]

Please note that you can fit only so much bits of information into Morton code as UInt64 has.
Two arguments will have a range of maximum 2^32 (64/2) each
Three arguments: range of max 2^21 (64/3) each
And so on, all overflow will be clamped to zero
","","","","simple:

``` sql
SELECT mortonEncode(1, 2, 3)
```

``` text

```
range_expanded:

``` sql
SELECT mortonEncode((1,2), 1024, 16)
```

``` text

```
identity:

``` sql
SELECT mortonEncode(1)
```

``` text

```
identity_expanded:

``` sql
SELECT mortonEncode(tuple(2), 128)
```

``` text

```
from_table:

``` sql
SELECT mortonEncode(n1, n2) FROM table
```

``` text

```
from_table_range:

``` sql
SELECT mortonEncode((1,2), n1, n2) FROM table
```

``` text

```
","Morton coding, ZCurve"
"24.10.4.191","toFloat64OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","changeSecond",0,0,"","","System","Changes the second component of a date or date time.","changeSecond(date_or_datetime, value);","- date_or_datetime:The value to change. Type: Date, Date32, DateTime, or DateTime64
- value:The new value. Type: [U]Int*
","The same type as date_or_datetime. If the input is a Date, return DateTime. If the input is a Date32, return DateTime64.","","Dates and Times"
"24.10.4.191","assumeNotNull",0,0,"","","System","","","","","",""
"24.10.4.191","dateTime64ToSnowflakeID",0,0,"","","System","Converts a [DateTime64](../data-types/datetime64.md) value to the first [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) at the giving time.","dateTime64ToSnowflakeID(value[, epoch])","- value:Date with time. [DateTime64](../data-types/datetime.md).
- epoch:Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md)
","Input value converted to [UInt64](../data-types/int-uint.md) as the first Snowflake ID at that time.","simple:

``` sql
SELECT dateTime64ToSnowflakeID(toDateTime64('2021-08-15 18:57:56', 3, 'Asia/Shanghai'))
```

``` text
6832626394434895872
```
","Snowflake ID"
"24.10.4.191","emptyArrayFloat64",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTime64BestEffortUSOrZero",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTimeBestEffort",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal128OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","mapPopulateSeries",0,0,"","","System","","","","","",""
"24.10.4.191","parseDateTimeBestEffortUS",0,0,"","","System","","","","","",""
"24.10.4.191","domain",0,0,"","","System","
Extracts the hostname from a URL.

The URL can be specified with or without a scheme.
If the argument can't be parsed as URL, the function returns an empty string.
        ","","","","domain:

``` sql
SELECT domain('svn+ssh://some.svn-hosting.com:80/repo/trunk')
```

``` text

```
","URL"
"24.10.4.191","toUInt256",0,0,"","","System","","","","","",""
"24.10.4.191","greaterOrEquals",0,0,"","","System","","","","","",""
"24.10.4.191","upper",0,1,"","","System","","","","","",""
"24.10.4.191","toUUIDOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","fromDaysSinceYearZero32",0,0,"","","System","
Given the number of days passed since 1 January 0000 in the proleptic Gregorian calendar defined by ISO 8601 return a corresponding date.
The calculation is the same as in MySQL's FROM_DAYS() function.
","","","","typical:

``` sql
SELECT fromDaysSinceYearZero32(713569)
```

``` text
2023-09-08
```
","Dates and Times"
"24.10.4.191","globalNotInIgnoreSet",0,0,"","","System","","","","","",""
"24.10.4.191","toIPv6OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","toIPv6OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal64OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toDateTimeOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toDate32OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","simpleJSONExtractUInt",0,0,"","","System","Parses UInt64 from the value of the field named field_name. If this is a string field, it tries to parse a number from the beginning of the string. If the field does not exist, or it exists but does not contain a number, it returns 0.","simpleJSONExtractUInt(json, field_name)","- json:The JSON in which the field is searched for. String.
- field_name:The name of the field to search for. String literal.
","It returns the number parsed from the field if the field exists and contains a number, 0 otherwise.","simple:

``` sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""4e3""}');
INSERT INTO jsons VALUES ('{""foo"":3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractUInt(json, 'foo') FROM jsons ORDER BY json;
```

``` text
0
4
0
3
5
```
","JSON"
"24.10.4.191","enabledRoles",0,0,"","","System","","","","","",""
"24.10.4.191","arrayZip",0,0,"","","System","
Combines multiple arrays into a single array. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.
","","","","","String"
"24.10.4.191","proportionsZTest",0,0,"","","System","","","","","",""
"24.10.4.191","toHour",0,0,"","","System","","","","","",""
"24.10.4.191","decodeHTMLComponent",0,0,"","","System","","","","","",""
"24.10.4.191","toInt256OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","s2ToGeo",0,0,"","","System","","","","","",""
"24.10.4.191","toISOYear",0,0,"","","System","","","","","",""
"24.10.4.191","toInt64OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","s2CellsIntersect",0,0,"","","System","","","","","",""
"24.10.4.191","isNotDistinctFrom",0,0,"","","System","
Performs a null-safe comparison between two values. This function will consider
two `NULL` values as identical and will return `true`, which is distinct from the usual
equals behavior where comparing two `NULL` values would return `NULL`.

Currently, this function can only be used in the `JOIN ON` section of a query.
[example:join_on_is_not_distinct_from]
","","","","join_on_is_not_distinct_from:

``` sql
SELECT * FROM (SELECT NULL AS a) AS t1 JOIN (SELECT NULL AS b) AS t2 ON isNotDistinctFrom(t1.a, t2.b)
```

``` text
NULL	NULL
```
","Comparison, Join Operators"
"24.10.4.191","toInt32",0,0,"","","System","","","","","",""
"24.10.4.191","toYearWeek",0,0,"","","System","","","","","",""
"24.10.4.191","toFixedString",0,0,"","","System","","","","","",""
"24.10.4.191","JSONExtractRaw",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt16OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","formatReadableDecimalSize",0,0,"","","System","
Accepts the size (number of bytes). Returns a rounded size with a suffix (KB, MB, etc.) as a string.
","","","","formatReadableDecimalSize:

``` sql
SELECT formatReadableDecimalSize(1000)
```

``` text

```
","OtherFunctions"
"24.10.4.191","lowerUTF8",0,0,"","","System","Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.","lowerUTF8(input)","- input:Input with String type
","A String data type value","first:

``` sql
SELECT lowerUTF8('München') as Lowerutf8;
```

``` text
münchen
```
","String"
"24.10.4.191","toDecimal128",0,0,"","","System","","","","","",""
"24.10.4.191","acosh",0,0,"","","System","","","","","",""
"24.10.4.191","toRelativeMinuteNum",0,0,"","","System","","","","","",""
"24.10.4.191","h3ExactEdgeLengthKm",0,0,"","","System","","","","","",""
"24.10.4.191","multiMatchAnyIndex",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal32OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","toISOWeek",0,0,"","","System","","","","","",""
"24.10.4.191","RIPEMD160",0,0,"","","System","Calculates the RIPEMD-160 hash of the given string.","SELECT RIPEMD160(s);","- s:The input [String](../../sql-reference/data-types/string.md).
","The RIPEMD160 hash of the given input string returned as a [FixedString(20)](../../sql-reference/data-types/fixedstring.md).",":

``` sql
SELECT HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'));
```

``` text

┌─HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'))─┐
│ 37F332F68DB77BD9D7EDD4969571AD671CF9DD3B                      │
└───────────────────────────────────────────────────────────────┘
         
```
",""
"24.10.4.191","sqidDecode",0,0,"","","System","
Transforms a [Sqid](https://sqids.org/) back into an array of numbers.","sqidDecode(number1, ...)","- sqid:A sqid
","An array of [UInt64](/docs/en/sql-reference/data-types/int-uint.md).","simple:

``` sql
SELECT sqidDecode('gXHfJ1C6dN');
```

``` text

┌─sqidDecode('gXHfJ1C6dN')─┐
│ [1,2,3,4,5]              │
└──────────────────────────┘
            
```
",""
"24.10.4.191","greatest",0,1,"","","System","","","","","",""
"24.10.4.191","topLevelDomain",0,0,"","","System","
Extracts the the top-level domain from a URL.

Returns an empty string if the argument cannot be parsed as a URL or does not contain a top-level domain.
        ","","","","topLevelDomain:

``` sql
SELECT topLevelDomain('svn+ssh://www.some.svn-hosting.com:80/repo/trunk')
```

``` text

```
","URL"
"24.10.4.191","randChiSquared",0,0,"","","System","
Returns a random number from the chi-squared distribution (a distribution of a sum of the squares of k independent standard normal random variables).
Accepts one parameter - degree of freedom.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randChiSquared(5) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","LinfDistance",0,0,"","","System","","","","","",""
"24.10.4.191","toInt16OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","JSONExtractKeysAndValues",0,0,"","","System","","","","","",""
"24.10.4.191","extractKeyValuePairs",0,0,"","","System","Extracts key-value pairs from any string. The string does not need to be 100% structured in a key value pair format;

            It can contain noise (e.g. log files). The key-value pair format to be interpreted should be specified via function arguments.

            A key-value pair consists of a key followed by a `key_value_delimiter` and a value. Quoted keys and values are also supported. Key value pairs must be separated by pair delimiters.

            **Syntax**
            ``` sql
            extractKeyValuePairs(data, [key_value_delimiter], [pair_delimiter], [quoting_character])
            ```

            **Arguments**
            - `data` - String to extract key-value pairs from. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `key_value_delimiter` - Character to be used as delimiter between the key and the value. Defaults to `:`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `pair_delimiters` - Set of character to be used as delimiters between pairs. Defaults to `\space`, `,` and `;`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `quoting_character` - Character to be used as quoting character. Defaults to `""`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).

            **Returned values**
            - The extracted key-value pairs in a Map(String, String).

            **Examples**

            Query:

            **Simple case**
            ``` sql
            arthur :) select extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv

            SELECT extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv

            Query id: f9e0ca6f-3178-4ee2-aa2c-a5517abb9cee

            ┌─kv──────────────────────────────────────────────────────────────────────┐
            │ {'name':'neymar','age':'31','team':'psg','nationality':'brazil'}        │
            └─────────────────────────────────────────────────────────────────────────┘
            ```

            **Single quote as quoting character**
            ``` sql
            arthur :) select extractKeyValuePairs('name:\'neymar\';\'age\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\'') as kv

            SELECT extractKeyValuePairs('name:\'neymar\';\'age\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\'') as kv

            Query id: 0e22bf6b-9844-414a-99dc-32bf647abd5e

            ┌─kv───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
            │ {'name':'neymar','age':'31','team':'psg','nationality':'brazil','last_key':'last_value'}                                 │
            └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
            ```

            **Escape sequences without escape sequences support**
            ``` sql
            arthur :) select extractKeyValuePairs('age:a\\x0A\\n\\0') as kv

            SELECT extractKeyValuePairs('age:a\\x0A\\n\\0') AS kv

            Query id: e9fd26ee-b41f-4a11-b17f-25af6fd5d356

            ┌─kv────────────────────┐
            │ {'age':'a\\x0A\\n\\0'} │
            └───────────────────────┘
            ```","","","","",""
"24.10.4.191","replicate",0,0,"","","System","","","","","",""
"24.10.4.191","lowCardinalityIndices",0,0,"","","System","","","","","",""
"24.10.4.191","toDate32",0,0,"","","System","","","","","",""
"24.10.4.191","splitByWhitespace",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetInt8OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int8 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","dateTime64ToSnowflake",0,0,"","","System","","","","","",""
"24.10.4.191","sipHash64",0,0,"","","System","","","","","",""
"24.10.4.191","catboostEvaluate",0,0,"","","System","","","","","",""
"24.10.4.191","randNormal",0,0,"","","System","
Returns a random number from the normal distribution.
Accepts two parameters - mean and variance.

Typical usage:
[example:typical]
","","","","typical:

``` sql
SELECT randNormal(0, 5) FROM numbers(100000);
```

``` text

```
","Distribution"
"24.10.4.191","isDynamicElementInSharedData",0,0,"","","System","
Returns true for rows in Dynamic column that are not separated into subcolumns and stored inside shared variant in binary form.
","isDynamicElementInSharedData(dynamic)","- dynamic:Dynamic column
","","Example:

``` sql

CREATE TABLE test (d Dynamic(max_types=2)) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, isDynamicElementInSharedData(d) FROM test;

```

``` text

┌─d─────────────┬─isDynamicElementInSharedData(d)─┐
│ ᴺᵁᴸᴸ          │ false              │
│ 42            │ false              │
│ Hello, World! │ true               │
│ [1,2,3]       │ true               │
└───────────────┴────────────────────┘

```
","Variant"
"24.10.4.191","encodeXMLComponent",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt8OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","sleepEachRow",0,0,"","","System","","","","","",""
"24.10.4.191","LpNorm",0,0,"","","System","","","","","",""
"24.10.4.191","port",0,0,"","","System","Returns the port or `default_port` if there is no port in the URL (or in case of validation error).","","","","","URL"
"24.10.4.191","less",0,0,"","","System","","","","","",""
"24.10.4.191","emptyArrayInt8",0,0,"","","System","","","","","",""
"24.10.4.191","mapPartialReverseSort",0,0,"","","System","The same as arrayPartialReverseSort.","","","","mapPartialReverseSort:

``` sql
SELECT mapPartialReverseSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))
```

``` text

```
","Map"
"24.10.4.191","L2SquaredNorm",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal64",0,0,"","","System","","","","","",""
"24.10.4.191","toString",0,0,"","","System","","","","","",""
"24.10.4.191","windowID",0,0,"","","System","","","","","",""
"24.10.4.191","toDecimal128OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","hasColumnInTable",0,0,"","","System","","","","","",""
"24.10.4.191","toRelativeHourNum",0,0,"","","System","","","","","",""
"24.10.4.191","arrayCount",0,0,"","","System","","","","","",""
"24.10.4.191","appendTrailingCharIfAbsent",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt64",0,0,"","","System","","","","","",""
"24.10.4.191","simpleJSONExtractRaw",0,0,"","","System","Returns the value of the field named field_name as a String, including separators.","simpleJSONExtractRaw(json, field_name)","- json:The JSON in which the field is searched for. String.
- field_name:The name of the field to search for. String literal.
","It returns the value of the field as a String including separators if the field exists, or an empty String otherwise.","simple:

``` sql
CREATE TABLE jsons
(
    json String
)
ENGINE = Memory;

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":{""def"":[1,2,3]}}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractRaw(json, 'foo') FROM jsons ORDER BY json;
```

``` text

""-4e3""
-3.4
5
{""def"":[1,2,3]}
```
","JSON"
"24.10.4.191","UUIDv7ToDateTime",0,0,"","","System","
This function extracts the timestamp from a UUID and returns it as a DateTime64(3) typed value.
The function expects the UUID having version 7 to be provided as the first argument.
An optional second argument can be passed to specify a timezone for the timestamp.
","","","","uuid:

``` sql
select UUIDv7ToDateTime(generateUUIDv7())
```

``` text

```
uuid:

``` sql
select generateUUIDv7() as uuid, UUIDv7ToDateTime(uuid), UUIDv7ToDateTime(uuid, 'America/New_York')
```

``` text

```
","UUID"
"24.10.4.191","toInt64OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","shardCount",0,0,"","","System","","","","","",""
"24.10.4.191","geohashDecode",0,0,"","","System","","","","","",""
"24.10.4.191","tryIdnaEncode",0,0,"","","System","
Computes a ASCII representation of an Internationalized Domain Name. Returns an empty string in case of error","punycodeEncode(str)","- str:Input string
","An ASCII-encoded domain name [String](/docs/en/sql-reference/data-types/string.md).","simple:

``` sql
SELECT idnaEncodeOrNull('München') AS ascii;
```

``` text

┌─ascii───────────────────────────┐
│ xn--strae-oqa.xn--mnchen-3ya.de │
└─────────────────────────────────┘
            
```
",""
"24.10.4.191","toInt128OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","arrayPopBack",0,0,"","","System","","","","","",""
"24.10.4.191","IPv4StringToNumOrNull",0,0,"","","System","","","","","",""
"24.10.4.191","formatReadableQuantity",0,0,"","","System","","","","","",""
"24.10.4.191","substringIndexUTF8",0,0,"","","System","","","","","",""
"24.10.4.191","polygonsSymDifferenceCartesian",0,0,"","","System","","","","","",""
"24.10.4.191","accurateCastOrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","URLHierarchy",0,0,"","","System","","","","","",""
"24.10.4.191","synonyms",0,1,"","","System","","","","","",""
"24.10.4.191","parseDateTime64BestEffortUS",0,0,"","","System","","","","","",""
"24.10.4.191","s2CapUnion",0,0,"","","System","","","","","",""
"24.10.4.191","parseReadableSizeOrZero",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns `0`","parseReadableSizeOrZero(x)","- x:Readable size with ISO/IEC 80000-13 or decimal byte unit ([String](../../sql-reference/data-types/string.md))
","Number of bytes, rounded up to the nearest integer, or 0 if unable to parse the input ([UInt64](../../sql-reference/data-types/int-uint.md))","basic:

``` sql
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes, parseReadableSizeOrZero(readable_sizes) AS sizes;
```

``` text

┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
│ invalid        │       0 │
└────────────────┴─────────┘
```
","OtherFunctions"
"24.10.4.191","toUInt32OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","toInt64",0,0,"","","System","","","","","",""
"24.10.4.191","wkt",0,0,"","","System","","","","","",""
"24.10.4.191","soundex",0,1,"","","System","Returns Soundex code of a string.","","","","",""
"24.10.4.191","h3ToGeo",0,0,"","","System","","","","","",""
"24.10.4.191","toLowCardinality",0,0,"","","System","","","","","",""
"24.10.4.191","jumpConsistentHash",0,0,"","","System","","","","","",""
"24.10.4.191","minSampleSizeConversion",0,0,"","","System","","","","","",""
"24.10.4.191","toFloat64",0,0,"","","System","","","","","",""
"24.10.4.191","isNotNull",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt16",0,0,"","","System","","","","","",""
"24.10.4.191","normalizeUTF8NFKD",0,0,"","","System","","","","","",""
"24.10.4.191","accurateCast",0,0,"","","System","","","","","",""
"24.10.4.191","toUInt32OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toInt64OrZero",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetDateTime",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the DateTime if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","h3ToGeoBoundary",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetUInt32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","today",0,0,"","","System","","","","","",""
"24.10.4.191","toFloat32OrDefault",0,0,"","","System","","","","","",""
"24.10.4.191","dictGetUInt8",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt8 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","",""
"24.10.4.191","emptyArrayUInt8",0,0,"","","System","","","","","",""
"24.10.4.191","arrayDistinct",0,0,"","","System","","","","","",""
"24.10.4.191","toInt128OrNull",0,0,"","","System","","","","","",""
"24.10.4.191","toInt128",0,0,"","","System","","","","","",""
"24.10.4.191","connection_id",0,1,"connectionID","","System","","","","","",""
"24.10.4.191","rand32",0,0,"rand","","System","","","","","",""
"24.10.4.191","INET6_ATON",0,1,"IPv6StringToNum","","System","","","","","",""
"24.10.4.191","INET_ATON",0,1,"IPv4StringToNum","","System","","","","","",""
"24.10.4.191","truncate",0,1,"trunc","","System","","","","","",""
"24.10.4.191","ceiling",0,1,"ceil","","System","","","","","",""
"24.10.4.191","replace",0,1,"replaceAll","","System","","","","","",""
"24.10.4.191","from_utc_timestamp",0,1,"fromUTCTimestamp","","System","","","","","",""
"24.10.4.191","mapFromString",0,0,"extractKeyValuePairs","","System","","","","","",""
"24.10.4.191","str_to_map",0,1,"extractKeyValuePairs","","System","","","","","",""
"24.10.4.191","SUBSTRING_INDEX",0,1,"substringIndex","","System","","","","","",""
"24.10.4.191","TO_BASE64",0,1,"base64Encode","","System","","","","","",""
"24.10.4.191","SVG",0,0,"svg","","System","","","","","",""
"24.10.4.191","INET6_NTOA",0,1,"IPv6NumToString","","System","","","","","",""
"24.10.4.191","JSON_ARRAY_LENGTH",0,1,"JSONArrayLength","","System","","","","","",""
"24.10.4.191","levenshteinDistanceUTF8",0,0,"editDistanceUTF8","","System","","","","","",""
"24.10.4.191","mismatches",0,0,"byteHammingDistance","","System","","","","","",""
"24.10.4.191","INET_NTOA",0,1,"IPv4NumToString","","System","","","","","",""
"24.10.4.191","current_database",0,1,"currentDatabase","","System","","","","","",""
"24.10.4.191","levenshteinDistance",0,0,"editDistance","","System","","","","","",""
"24.10.4.191","pmod",0,1,"positiveModulo","","System","","","","","",""
"24.10.4.191","user",0,1,"currentUser","","System","","","","","",""
"24.10.4.191","visitParamHas",0,0,"simpleJSONHas","","System","","","","","",""
"24.10.4.191","timeZoneOffset",0,0,"timezoneOffset","","System","","","","","",""
"24.10.4.191","timestamp_diff",0,0,"dateDiff","","System","","","","","",""
"24.10.4.191","timestampDiff",0,0,"dateDiff","","System","","","","","",""
"24.10.4.191","time_bucket",0,1,"toStartOfInterval","","System","","","","","",""
"24.10.4.191","date_diff",0,0,"dateDiff","","System","","","","","",""
"24.10.4.191","REGEXP_REPLACE",0,1,"replaceRegexpAll","","System","","","","","",""
"24.10.4.191","timeZone",0,0,"timezone","","System","","","","","",""
"24.10.4.191","DATE_TRUNC",0,1,"dateTrunc","","System","","","","","",""
"24.10.4.191","distanceL2Squared",0,1,"L2SquaredDistance","","System","","","","","",""
"24.10.4.191","partitionID",0,0,"partitionId","","System","","","","","",""
"24.10.4.191","MONTH",0,1,"toMonth","","System","","","","","",""
"24.10.4.191","caseWithExpr",0,0,"caseWithExpression","","System","","","","","",""
"24.10.4.191","sqid",0,0,"sqidEncode","","System","","","","","",""
"24.10.4.191","toStartOfFiveMinute",0,0,"toStartOfFiveMinutes","","System","","","","","",""
"24.10.4.191","FROM_DAYS",0,1,"fromDaysSinceYearZero","","System","","","","","",""
"24.10.4.191","DATE_FORMAT",0,1,"formatDateTime","","System","","","","","",""
"24.10.4.191","caseWithoutExpr",0,0,"multiIf","","System","","","","","",""
"24.10.4.191","query_id",0,1,"queryID","","System","","","","","",""
"24.10.4.191","rtrim",0,0,"trimRight","","System","","","","","",""
"24.10.4.191","visitParamExtractUInt",0,0,"simpleJSONExtractUInt","","System","","","","","",""
"24.10.4.191","substr",0,1,"substring","","System","","","","","",""
"24.10.4.191","caseWithoutExpression",0,0,"multiIf","","System","","","","","",""
"24.10.4.191","hostname",0,0,"hostName","","System","","","","","",""
"24.10.4.191","concat_ws",0,1,"concatWithSeparator","","System","","","","","",""
"24.10.4.191","power",0,1,"pow","","System","","","","","",""
"24.10.4.191","FROM_UNIXTIME",0,1,"fromUnixTimestamp","","System","","","","","",""
"24.10.4.191","curdate",0,1,"today","","System","","","","","",""
"24.10.4.191","YEAR",0,1,"toYear","","System","","","","","",""
"24.10.4.191","byteSlice",0,1,"substring","","System","","","","","",""
"24.10.4.191","mid",0,1,"substring","","System","","","","","",""
"24.10.4.191","distanceL2",0,1,"L2Distance","","System","","","","","",""
"24.10.4.191","DATE_DIFF",0,0,"dateDiff","","System","","","","","",""
"24.10.4.191","DATABASE",0,1,"currentDatabase","","System","","","","","",""
"24.10.4.191","rpad",0,1,"rightPad","","System","","","","","",""
"24.10.4.191","vectorDifference",0,1,"tupleMinus","","System","","","","","",""
"24.10.4.191","DAYOFMONTH",0,1,"toDayOfMonth","","System","","","","","",""
"24.10.4.191","jsonMergePatch",0,0,"JSONMergePatch","","System","","","","","",""
"24.10.4.191","visitParamExtractBool",0,0,"simpleJSONExtractBool","","System","","","","","",""
"24.10.4.191","CHAR_LENGTH",0,1,"lengthUTF8","","System","","","","","",""
"24.10.4.191","positive_modulo",0,1,"positiveModulo","","System","","","","","",""
"24.10.4.191","MAP_FROM_ARRAYS",0,0,"mapFromArrays","","System","","","","","",""
"24.10.4.191","fullHostName",0,0,"FQDN","","System","","","","","",""
"24.10.4.191","trim",0,0,"trimBoth","","System","","","","","",""
"24.10.4.191","MILLISECOND",0,1,"toMillisecond","","System","","","","","",""
"24.10.4.191","minSampleSizeContinous",0,0,"minSampleSizeContinuous","","System","","","","","",""
"24.10.4.191","FROM_BASE64",0,1,"base64Decode","","System","","","","","",""
"24.10.4.191","LAST_DAY",0,1,"toLastDayOfMonth","","System","","","","","",""
"24.10.4.191","timeZoneOf",0,0,"timezoneOf","","System","","","","","",""
"24.10.4.191","OCTET_LENGTH",0,1,"length","","System","","","","","",""
"24.10.4.191","distanceLp",0,1,"LpDistance","","System","","","","","",""
"24.10.4.191","lcase",0,1,"lower","","System","","","","","",""
"24.10.4.191","REGEXP_MATCHES",0,1,"match","","System","","","","","",""
"24.10.4.191","toTimeZone",0,0,"toTimezone","","System","","","","","",""
"24.10.4.191","SECOND",0,1,"toSecond","","System","","","","","",""
"24.10.4.191","date_bin",0,1,"toStartOfInterval","","System","","","","","",""
"24.10.4.191","str_to_date",0,1,"parseDateTimeOrNull","","System","","","","","",""
"24.10.4.191","FORMAT_BYTES",0,1,"formatReadableSize","","System","","","","","",""
"24.10.4.191","normL2Squared",0,1,"L2SquaredNorm","","System","","","","","",""
"24.10.4.191","visitParamExtractRaw",0,0,"simpleJSONExtractRaw","","System","","","","","",""
"24.10.4.191","serverTimeZone",0,0,"serverTimezone","","System","","","","","",""
"24.10.4.191","current_schemas",0,1,"currentSchemas","","System","","","","","",""
"24.10.4.191","current_user",0,1,"currentUser","","System","","","","","",""
"24.10.4.191","TO_UNIXTIME",0,1,"parseDateTime","","System","","","","","",""
"24.10.4.191","normalizeLp",0,1,"LpNormalize","","System","","","","","",""
"24.10.4.191","week",0,1,"toWeek","","System","","","","","",""
"24.10.4.191","DAYOFYEAR",0,1,"toDayOfYear","","System","","","","","",""
"24.10.4.191","TO_DAYS",0,1,"toDaysSinceYearZero","","System","","","","","",""
"24.10.4.191","HOUR",0,1,"toHour","","System","","","","","",""
"24.10.4.191","QUARTER",0,1,"toQuarter","","System","","","","","",""
"24.10.4.191","UTC_timestamp",0,1,"UTCTimestamp","","System","","","","","",""
"24.10.4.191","ln",0,1,"log","","System","","","","","",""
"24.10.4.191","extractAllGroups",0,0,"extractAllGroupsVertical","","System","","","","","",""
"24.10.4.191","SCHEMA",0,1,"currentDatabase","","System","","","","","",""
"24.10.4.191","normLinf",0,1,"LinfNorm","","System","","","","","",""
"24.10.4.191","instr",0,1,"positionCaseInsensitive","","System","","","","","",""
"24.10.4.191","DAYOFWEEK",0,1,"toDayOfWeek","","System","","","","","",""
"24.10.4.191","flatten",0,1,"arrayFlatten","","System","","","","","",""
"24.10.4.191","normalizeLinf",0,1,"LinfNormalize","","System","","","","","",""
"24.10.4.191","MINUTE",0,1,"toMinute","","System","","","","","",""
"24.10.4.191","ltrim",0,0,"trimLeft","","System","","","","","",""
"24.10.4.191","normalizeL2",0,1,"L2Normalize","","System","","","","","",""
"24.10.4.191","initial_query_id",0,1,"initialQueryID","","System","","","","","",""
"24.10.4.191","to_utc_timestamp",0,1,"toUTCTimestamp","","System","","","","","",""
"24.10.4.191","width_bucket",0,1,"widthBucket","","System","","","","","",""
"24.10.4.191","lpad",0,1,"leftPad","","System","","","","","",""
"24.10.4.191","ucase",0,1,"upper","","System","","","","","",""
"24.10.4.191","REGEXP_EXTRACT",0,1,"regexpExtract","","System","","","","","",""
"24.10.4.191","normalizeL1",0,1,"L1Normalize","","System","","","","","",""
"24.10.4.191","CHARACTER_LENGTH",0,1,"lengthUTF8","","System","","","","","",""
"24.10.4.191","TIMESTAMP_DIFF",0,0,"dateDiff","","System","","","","","",""
"24.10.4.191","visitParamExtractFloat",0,0,"simpleJSONExtractFloat","","System","","","","","",""
"24.10.4.191","distanceLinf",0,1,"LinfDistance","","System","","","","","",""
"24.10.4.191","yearweek",0,1,"toYearWeek","","System","","","","","",""
"24.10.4.191","visitParamExtractInt",0,0,"simpleJSONExtractInt","","System","","","","","",""
"24.10.4.191","splitByAlpha",0,0,"alphaTokens","","System","","","","","",""
"24.10.4.191","current_timestamp",0,1,"now","","System","","","","","",""
"24.10.4.191","normLp",0,1,"LpNorm","","System","","","","","",""
"24.10.4.191","distanceL1",0,1,"L1Distance","","System","","","","","",""
"24.10.4.191","current_date",0,1,"today","","System","","","","","",""
"24.10.4.191","normL1",0,1,"L1Norm","","System","","","","","",""
"24.10.4.191","vectorSum",0,1,"tuplePlus","","System","","","","","",""
"24.10.4.191","mod",0,1,"modulo","","System","","","","","",""
"24.10.4.191","yandexConsistentHash",0,0,"kostikConsistentHash","","System","","","","","",""
"24.10.4.191","scalarProduct",0,1,"dotProduct","","System","","","","","",""
"24.10.4.191","normL2",0,1,"L2Norm","","System","","","","","",""
"24.10.4.191","DAY",0,1,"toDayOfMonth","","System","","","","","",""
"24.10.4.191","visitParamExtractString",0,0,"simpleJSONExtractString","","System","","","","","",""
"24.10.4.191","exponentialTimeDecayedCount",1,0,"","","System","","","","","",""
"24.10.4.191","exponentialTimeDecayedMax",1,0,"","","System","","","","","",""
"24.10.4.191","lagInFrame",1,0,"","","System","","","","","",""
"24.10.4.191","largestTriangleThreeBuckets",1,0,"","","System","","","","","",""
"24.10.4.191","flameGraph",1,0,"","","System","","","","","",""
"24.10.4.191","rank",1,1,"","","System","","","","","",""
"24.10.4.191","exponentialMovingAverage",1,0,"","","System","","","","","",""
"24.10.4.191","nothingUInt64",1,0,"","","System","","","","","",""
"24.10.4.191","nothingNull",1,0,"","","System","","","","","",""
"24.10.4.191","sparkbar",1,0,"","","System","","","","","",""
"24.10.4.191","singleValueOrNull",1,0,"","","System","","","","","",""
"24.10.4.191","meanZTest",1,0,"","","System","","","","","",""
"24.10.4.191","analysisOfVariance",1,1,"","","System","","","","","",""
"24.10.4.191","studentTTest",1,0,"","","System","","","","","",""
"24.10.4.191","aggThrow",1,0,"","","System","","","","","",""
"24.10.4.191","categoricalInformationValue",1,0,"","","System","","","","","",""
"24.10.4.191","groupArrayMovingSum",1,0,"","","System","","","","","",""
"24.10.4.191","simpleLinearRegression",1,0,"","","System","","","","","",""
"24.10.4.191","entropy",1,0,"","","System","","","","","",""
"24.10.4.191","histogram",1,0,"","","System","","","","","",""
"24.10.4.191","mannWhitneyUTest",1,0,"","","System","","","","","",""
"24.10.4.191","maxIntersections",1,0,"","","System","","","","","",""
"24.10.4.191","groupBitmapXor",1,0,"","","System","","","","","",""
"24.10.4.191","groupBitmapAnd",1,0,"","","System","","","","","",""
"24.10.4.191","cramersVBiasCorrected",1,0,"","","System","","","","","",""
"24.10.4.191","contingency",1,0,"","","System","","","","","",""
"24.10.4.191","cramersV",1,0,"","","System","","","","","",""
"24.10.4.191","groupBitAnd",1,0,"","","System","","","","","",""
"24.10.4.191","approx_top_sum",1,1,"","","System","","","","","",""
"24.10.4.191","groupBitOr",1,0,"","","System","","","","","",""
"24.10.4.191","approx_top_k",1,1,"","","System","","","","","",""
"24.10.4.191","exponentialTimeDecayedSum",1,0,"","","System","","","","","",""
"24.10.4.191","topKWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","topK",1,0,"","","System","","","","","",""
"24.10.4.191","intervalLengthSum",1,0,"","","System","","","","","",""
"24.10.4.191","nothing",1,0,"","","System","","","","","",""
"24.10.4.191","uniqCombined",1,0,"","","System","","","","","",""
"24.10.4.191","sumMapFiltered",1,0,"","","System","","","","","",""
"24.10.4.191","distinctJSONPathsAndTypes",1,0,"","","System","","","","","",""
"24.10.4.191","distinctJSONPaths",1,0,"","","System","","","","","",""
"24.10.4.191","minMappedArrays",1,0,"","","System","","","","","",""
"24.10.4.191","sumMappedArrays",1,0,"","","System","","","","","",""
"24.10.4.191","quantiles",1,0,"","","System","","","","","",""
"24.10.4.191","sum",1,1,"","","System","","","","","",""
"24.10.4.191","sumKahan",1,0,"","","System","","","","","",""
"24.10.4.191","corrMatrix",1,0,"","","System","","","","","",""
"24.10.4.191","quantileExactWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","sumMapFilteredWithOverflow",1,0,"","","System","","","","","",""
"24.10.4.191","corrStable",1,0,"","","System","","","","","",""
"24.10.4.191","covarPopMatrix",1,0,"","","System","","","","","",""
"24.10.4.191","groupBitmapOr",1,0,"","","System","","","","","",""
"24.10.4.191","covarSampMatrix",1,0,"","","System","","","","","",""
"24.10.4.191","covarPop",1,0,"","","System","","","","","",""
"24.10.4.191","row_number",1,1,"","","System","","","","","",""
"24.10.4.191","kurtPop",1,0,"","","System","","","","","",""
"24.10.4.191","kurtSamp",1,0,"","","System","","","","","",""
"24.10.4.191","groupBitXor",1,0,"","","System","","","","","",""
"24.10.4.191","skewPop",1,0,"","","System","","","","","",""
"24.10.4.191","skewSamp",1,0,"","","System","","","","","",""
"24.10.4.191","nonNegativeDerivative",1,0,"","","System","","","","","",""
"24.10.4.191","uniqExact",1,0,"","","System","","","","","",""
"24.10.4.191","distinctDynamicTypes",1,0,"","","System","","","","","",""
"24.10.4.191","sumMapWithOverflow",1,0,"","","System","","","","","",""
"24.10.4.191","stddevSamp",1,0,"","","System","","","","","",""
"24.10.4.191","varPop",1,0,"","","System","","","","","",""
"24.10.4.191","quantileTimingWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","covarPopStable",1,0,"","","System","","","","","",""
"24.10.4.191","stddevPopStable",1,0,"","","System","","","","","",""
"24.10.4.191","any_respect_nulls",1,0,"","","System","","","","","",""
"24.10.4.191","any",1,0,"","","System","","","","","",""
"24.10.4.191","anyLast",1,0,"","","System","","","","","",""
"24.10.4.191","nth_value",1,1,"","","System","","","","","",""
"24.10.4.191","argMax",1,0,"","","System","","","","","",""
"24.10.4.191","stochasticLogisticRegression",1,0,"","","System","","","","","",""
"24.10.4.191","argMin",1,0,"","","System","","","","","",""
"24.10.4.191","percentRank",1,0,"","","System","","","","","",""
"24.10.4.191","varSamp",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesExactHigh",1,0,"","","System","","","","","",""
"24.10.4.191","quantileGK",1,0,"","","System","","","","","",""
"24.10.4.191","rankCorr",1,0,"","","System","","","","","",""
"24.10.4.191","anyLast_respect_nulls",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesBFloat16Weighted",1,0,"","","System","","","","","",""
"24.10.4.191","quantileBFloat16Weighted",1,0,"","","System","","","","","",""
"24.10.4.191","deltaSumTimestamp",1,0,"","","System","","","","","",""
"24.10.4.191","varSampStable",1,0,"","","System","","","","","",""
"24.10.4.191","max",1,1,"","","System","","","","","",""
"24.10.4.191","quantilesDD",1,0,"","","System","","","","","",""
"24.10.4.191","denseRank",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesExact",1,0,"","","System","","","","","",""
"24.10.4.191","uniqHLL12",1,0,"","","System","","","","","",""
"24.10.4.191","quantileBFloat16",1,0,"","","System","","","","","",""
"24.10.4.191","uniq",1,0,"","","System","","","","","",""
"24.10.4.191","min",1,1,"","","System","","","","","",""
"24.10.4.191","quantileExactInclusive",1,0,"","","System","","","","","",""
"24.10.4.191","quantileDD",1,0,"","","System","","","","","",""
"24.10.4.191","quantileTDigest",1,0,"","","System","","","","","",""
"24.10.4.191","quantileTDigestWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","stochasticLinearRegression",1,0,"","","System","","","","","",""
"24.10.4.191","uniqCombined64",1,0,"","","System","","","","","",""
"24.10.4.191","corr",1,1,"","","System","","","","","",""
"24.10.4.191","quantileDeterministic",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesTDigest",1,0,"","","System","","","","","",""
"24.10.4.191","avg",1,1,"","","System","","","","","",""
"24.10.4.191","covarSampStable",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesTiming",1,0,"","","System","","","","","",""
"24.10.4.191","welchTTest",1,0,"","","System","","","","","",""
"24.10.4.191","covarSamp",1,0,"","","System","","","","","",""
"24.10.4.191","varPopStable",1,0,"","","System","","","","","",""
"24.10.4.191","quantileTiming",1,0,"","","System","","","","","",""
"24.10.4.191","leadInFrame",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesExactExclusive",1,0,"","","System","","","","","",""
"24.10.4.191","groupArrayMovingAvg",1,0,"","","System","","","","","",""
"24.10.4.191","groupArrayIntersect",1,0,"","","System","","","","","",""
"24.10.4.191","quantileInterpolatedWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","quantileExactHigh",1,0,"","","System","","","","","",""
"24.10.4.191","quantileExactLow",1,0,"","","System","","","","","",""
"24.10.4.191","groupBitmap",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesInterpolatedWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","groupUniqArray",1,0,"","","System","","","","","",""
"24.10.4.191","uniqTheta",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesExactWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","groupArrayInsertAt",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesGK",1,0,"","","System","","","","","",""
"24.10.4.191","quantileExactWeightedInterpolated",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesDeterministic",1,0,"","","System","","","","","",""
"24.10.4.191","quantile",1,0,"","","System","","","","","",""
"24.10.4.191","anyHeavy",1,0,"","","System","","","","","",""
"24.10.4.191","theilsU",1,0,"","","System","","","","","",""
"24.10.4.191","maxMappedArrays",1,0,"","","System","","","","","",""
"24.10.4.191","stddevPop",1,0,"","","System","","","","","",""
"24.10.4.191","groupArraySorted",1,0,"","","System","","","","","",""
"24.10.4.191","sumCount",1,0,"","","System","","","","","",""
"24.10.4.191","quantileExact",1,0,"","","System","","","","","",""
"24.10.4.191","groupArrayLast",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesExactLow",1,0,"","","System","","","","","",""
"24.10.4.191","groupArraySample",1,0,"","","System","","","","","",""
"24.10.4.191","maxIntersectionsPosition",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesBFloat16",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesExactInclusive",1,0,"","","System","","","","","",""
"24.10.4.191","groupConcat",1,0,"","","System","","","","","",""
"24.10.4.191","ntile",1,1,"","","System","","","","","",""
"24.10.4.191","boundingRatio",1,0,"","","System","","","","","",""
"24.10.4.191","sequenceNextNode",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesTimingWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","groupArray",1,0,"","","System","","","","","",""
"24.10.4.191","kolmogorovSmirnovTest",1,1,"","","System","","","","","",""
"24.10.4.191","sumWithOverflow",1,0,"","","System","","","","","",""
"24.10.4.191","sequenceCount",1,0,"","","System","","","","","",""
"24.10.4.191","exponentialTimeDecayedAvg",1,0,"","","System","","","","","",""
"24.10.4.191","quantileExactExclusive",1,0,"","","System","","","","","",""
"24.10.4.191","uniqUpTo",1,0,"","","System","","","","","",""
"24.10.4.191","windowFunnel",1,0,"","","System","","","","","",""
"24.10.4.191","retention",1,0,"","","System","","","","","",""
"24.10.4.191","sequenceMatch",1,0,"","","System","","","","","",""
"24.10.4.191","deltaSum",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesTDigestWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","stddevSampStable",1,0,"","","System","","","","","",""
"24.10.4.191","quantilesExactWeightedInterpolated",1,0,"","","System","","","","","",""
"24.10.4.191","count",1,1,"","","System","","","","","",""
"24.10.4.191","avgWeighted",1,0,"","","System","","","","","",""
"24.10.4.191","anova",1,1,"analysisOfVariance","","System","","","","","",""
"24.10.4.191","BIT_XOR",1,1,"groupBitXor","","System","","","","","",""
"24.10.4.191","BIT_OR",1,1,"groupBitOr","","System","","","","","",""
"24.10.4.191","approx_top_count",1,1,"approx_top_k","","System","","","","","",""
"24.10.4.191","lttb",1,0,"largestTriangleThreeBuckets","","System","","","","","",""
"24.10.4.191","COVAR_POP",1,1,"covarPop","","System","","","","","",""
"24.10.4.191","STD",1,1,"stddevPop","","System","","","","","",""
"24.10.4.191","STDDEV_POP",1,1,"stddevPop","","System","","","","","",""
"24.10.4.191","VAR_POP",1,1,"varPop","","System","","","","","",""
"24.10.4.191","STDDEV_SAMP",1,1,"stddevSamp","","System","","","","","",""
"24.10.4.191","VAR_SAMP",1,1,"varSamp","","System","","","","","",""
"24.10.4.191","last_value_respect_nulls",1,1,"anyLast_respect_nulls","","System","","","","","",""
"24.10.4.191","first_value_respect_nulls",1,1,"any_respect_nulls","","System","","","","","",""
"24.10.4.191","COVAR_SAMP",1,1,"covarSamp","","System","","","","","",""
"24.10.4.191","any_value",1,1,"any","","System","","","","","",""
"24.10.4.191","medianDeterministic",1,0,"quantileDeterministic","","System","","","","","",""
"24.10.4.191","last_value",1,1,"anyLast","","System","","","","","",""
"24.10.4.191","medianExact",1,0,"quantileExact","","System","","","","","",""
"24.10.4.191","medianDD",1,0,"quantileDD","","System","","","","","",""
"24.10.4.191","percent_rank",1,1,"percentRank","","System","","","","","",""
"24.10.4.191","medianInterpolatedWeighted",1,0,"quantileInterpolatedWeighted","","System","","","","","",""
"24.10.4.191","medianTDigestWeighted",1,0,"quantileTDigestWeighted","","System","","","","","",""
"24.10.4.191","medianBFloat16",1,0,"quantileBFloat16","","System","","","","","",""
"24.10.4.191","first_value",1,1,"any","","System","","","","","",""
"24.10.4.191","medianTDigest",1,0,"quantileTDigest","","System","","","","","",""
"24.10.4.191","sparkBar",1,0,"sparkbar","","System","","","","","",""
"24.10.4.191","medianTimingWeighted",1,0,"quantileTimingWeighted","","System","","","","","",""
"24.10.4.191","any_value_respect_nulls",1,1,"any_respect_nulls","","System","","","","","",""
"24.10.4.191","BIT_AND",1,1,"groupBitAnd","","System","","","","","",""
"24.10.4.191","group_concat",1,1,"groupConcat","","System","","","","","",""
"24.10.4.191","medianExactHigh",1,0,"quantileExactHigh","","System","","","","","",""
"24.10.4.191","dense_rank",1,1,"denseRank","","System","","","","","",""
"24.10.4.191","medianExactWeightedInterpolated",1,0,"quantileExactWeightedInterpolated","","System","","","","","",""
"24.10.4.191","medianGK",1,0,"quantileGK","","System","","","","","",""
"24.10.4.191","medianExactLow",1,0,"quantileExactLow","","System","","","","","",""
"24.10.4.191","median",1,0,"quantile","","System","","","","","",""
"24.10.4.191","medianTiming",1,0,"quantileTiming","","System","","","","","",""
"24.10.4.191","array_agg",1,1,"groupArray","","System","","","","","",""
"24.10.4.191","medianBFloat16Weighted",1,0,"quantileBFloat16Weighted","","System","","","","","",""
"24.10.4.191","medianExactWeighted",1,0,"quantileExactWeighted","","System","","","","","",""
"24.10.4.191","array_concat_agg",1,1,"groupArrayArray","","System","","","","","",""

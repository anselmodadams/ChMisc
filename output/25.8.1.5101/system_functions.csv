"ch_version","name","is_aggregate","case_insensitive","alias_to","create_query","origin","description","syntax","arguments","returned_value","examples","introduced_in","categories"
"25.8.1.5101","h3PointDistKm",0,0,"","","System","","","","","","",""
"25.8.1.5101","roundBankers",0,0,"","","System","
Rounds a number to a specified decimal position `N`.
If the rounding number is halfway between two numbers, the function uses a method of rounding called banker's rounding, which is the default rounding method for floating point numbers defined in IEEE 754.

- If `N > 0`, the function rounds to the right of the decimal point
- If `N < 0`, the function rounds to the left of the decimal point
- If `N = 0`, the function rounds to the next integer

:::info Notes
- When the rounding number is halfway between two numbers, it's rounded to the nearest even digit at the specified decimal position.
For example: `3.5` rounds up to `4`, `2.5` rounds down to `2`.
- The `round` function performs the same rounding for floating point numbers.
- The `roundBankers` function also rounds integers the same way, for example, `roundBankers(45, -1) = 40`.
- In other cases, the function rounds numbers to the nearest integer.
:::

:::tip Use banker's rounding for summation or subtraction of numbers
Using banker's rounding, you can reduce the effect that rounding numbers has on the results of summing or subtracting these numbers.

For example, sum numbers `1.5, 2.5, 3.5, 4.5` with different rounding:
- No rounding: `1.5 + 2.5 + 3.5 + 4.5 = 12`.
- Banker's rounding: `2 + 2 + 4 + 4 = 12`.
- Rounding to the nearest integer: `2 + 3 + 4 + 5 = 14`.
:::
","roundBankers(x[, N])","- `x` — A number to round. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Decimal*`](/sql-reference/data-types/decimal) or [`Float*`](/sql-reference/data-types/float)
- `[, N]` — Optional. The number of decimal places to round to. Defaults to `0`. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a value rounded by the banker's rounding method. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Decimal*`](/sql-reference/data-types/decimal) or [`Float*`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT number / 2 AS x, roundBankers(x, 0) AS b FROM system.numbers LIMIT 10
```

```response title=Response
┌───x─┬─b─┐
│   0 │ 0 │
│ 0.5 │ 0 │
│   1 │ 1 │
│ 1.5 │ 2 │
│   2 │ 2 │
│ 2.5 │ 2 │
│   3 │ 3 │
│ 3.5 │ 4 │
│   4 │ 4 │
│ 4.5 │ 4 │
└─────┴───┘
```

","20.1","Rounding"
"25.8.1.5101","trunc",0,1,"","","System","
Like [`floor`](#floor) but returns the rounded number with the largest absolute value less than or equal to that of `x`.
","truncate(x[, N])","- `x` — The value to round. [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal) or [`(U)Int*`](/sql-reference/data-types/int-uint)
- `N` — Optional. The number of decimal places to round to. Defaults to zero, which means rounding to an integer. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a rounded number of the same type as `x`. [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal) or [`(U)Int*`](/sql-reference/data-types/int-uint)","**Basic usage**

```sql title=Query
SELECT truncate(123.499, 1) AS res;
```

```response title=Response
┌───res─┐
│ 123.4 │
└───────┘
```

","1.1","Rounding"
"25.8.1.5101","ceil",0,1,"","","System","
Like [`floor`](#floor) but returns the smallest rounded number greater than or equal to `x`.
","ceiling(x[, N])","- `x` — The value to round. [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal) or [`(U)Int*`](/sql-reference/data-types/int-uint)
- `N` — Optional. The number of decimal places to round to. Defaults to zero, which means rounding to an integer. Can be negative. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a rounded number of the same type as `x`. [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal) or [`(U)Int*`](/sql-reference/data-types/int-uint)","**Basic usage**

```sql title=Query
SELECT ceiling(123.45, 1) AS rounded
```

```response title=Response
┌─rounded─┐
│   123.5 │
└─────────┘
```

**Negative precision**

```sql title=Query
SELECT ceiling(123.45, -1)
```

```response title=Response
┌─ceiling(123.45, -1)─┐
│                 130 │
└─────────────────────┘
```

","1.1","Rounding"
"25.8.1.5101","floor",0,1,"","","System","
Returns the largest rounded number less than or equal to `x`, where the rounded number is a multiple of `1 / 10 * N`, or the nearest number of the appropriate data type if `1 / 10 * N` isn't exact.

Integer arguments may be rounded with a negative `N` argument.
With non-negative `N` the function returns `x`.

If rounding causes an overflow (for example, `floor(-128, -1)`), the result is undefined.
","floor(x[, N])","- `x` — The value to round. [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal) or [`(U)Int*`](/sql-reference/data-types/int-uint)
- `N` — Optional. The number of decimal places to round to. Defaults to zero, which means rounding to an integer. Can be negative. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a rounded number of the same type as `x`. [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal) or [`(U)Int*`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT floor(123.45, 1) AS rounded
```

```response title=Response
┌─rounded─┐
│   123.4 │
└─────────┘
```

**Negative precision**

```sql title=Query
SELECT floor(123.45, -1)
```

```response title=Response
┌─floor(123.45, -1)─┐
│               120 │
└───────────────────┘
```

","1.1","Rounding"
"25.8.1.5101","roundDown",0,0,"","","System","
Rounds a number down to an element in the specified array.
If the value is less than the lower bound, the lower bound is returned.
","roundDown(num, arr)","- `num` — A number to round down. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Decimal*`](/sql-reference/data-types/decimal) or [`Float*`](/sql-reference/data-types/float)
- `arr` — Array of elements to round `num` down to. [`Array((U)Int*)`](/sql-reference/data-types/array) or [`Array(Float*)`](/sql-reference/data-types/array)
","Returns a number rounded down to an element in `arr`. If the value is less than the lowest bound, the lowest bound is returned. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT *, roundDown(*, [3, 4, 5]) FROM system.numbers WHERE number IN (0, 1, 2, 3, 4, 5)
```

```response title=Response
┌─number─┬─roundDown(number, [3, 4, 5])─┐
│      0 │                            3 │
│      1 │                            3 │
│      2 │                            3 │
│      3 │                            3 │
│      4 │                            4 │
│      5 │                            5 │
└────────┴──────────────────────────────┘
```

","20.1","Rounding"
"25.8.1.5101","UUIDStringToNum",0,0,"","","System","","","","","","",""
"25.8.1.5101","toIntervalHour",0,0,"","","System","","","","","","",""
"25.8.1.5101","toIntervalMinute",0,0,"","","System","","","","","","",""
"25.8.1.5101","toIntervalMillisecond",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTime64BestEffortUSOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTime64BestEffortUS",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTime64BestEffortOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTime64BestEffort",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTime32BestEffort",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTimeBestEffortOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTimeBestEffortOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toIPv6OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUUIDOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal64OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal32OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateTimeOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toBFloat16OrNull",0,0,"","","System","
Converts String to Nullable(BFloat16).

If the string does not represent a floating point value, the function returns NULL.

The function allows a silent loss of precision while converting from the string representation. In that case, it will return the truncated result.

Example of successful conversion:
[example:typical]

Examples of not successful conversion:
[example:invalid1]
[example:invalid2]

Example of a loss of precision:
[example:precision]
","","","","**typical**

```sql title=Query
SELECT toBFloat16OrNull('12.3');
```

```response title=Response
12.3125
```

**invalid1**

```sql title=Query
SELECT toBFloat16OrNull('abc');
```

```response title=Response
NULL
```

**invalid2**

```sql title=Query
SELECT toBFloat16OrNull(' 1');
```

```response title=Response
NULL
```

**precision**

```sql title=Query
SELECT toBFloat16OrNull('12.3456789');
```

```response title=Response
12.375
```

","","Type Conversion"
"25.8.1.5101","toInt128OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","UUIDv7ToDateTime",0,0,"","","System","
This function extracts the timestamp from a UUID and returns it as a DateTime64(3) typed value.
The function expects the UUID having version 7 to be provided as the first argument.
An optional second argument can be passed to specify a timezone for the timestamp.
","","","","**uuid**

```sql title=Query
select UUIDv7ToDateTime(generateUUIDv7())
```

```response title=Response

```

**uuid**

```sql title=Query
select generateUUIDv7() as uuid, UUIDv7ToDateTime(uuid), UUIDv7ToDateTime(uuid, 'America/New_York')
```

```response title=Response

```

","","UUID"
"25.8.1.5101","toInt64OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTimeBestEffortUSOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt32OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt128OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt64OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal256OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal64OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal32OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateTimeOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toTime64OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDate32OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toFloat64OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toBFloat16OrZero",0,0,"","","System","
Converts String to BFloat16.

If the string does not represent a floating point value, the function returns zero.

The function allows a silent loss of precision while converting from the string representation. In that case, it will return the truncated result.

Example of successful conversion:
[example:typical]

Examples of not successful conversion:
[example:invalid1]
[example:invalid2]

Example of a loss of precision:
[example:precision]
","","","","**typical**

```sql title=Query
SELECT toBFloat16OrZero('12.3');
```

```response title=Response
12.3125
```

**invalid1**

```sql title=Query
SELECT toBFloat16OrZero('abc');
```

```response title=Response
0
```

**invalid2**

```sql title=Query
SELECT toBFloat16OrZero(' 1');
```

```response title=Response
0
```

**precision**

```sql title=Query
SELECT toBFloat16OrZero('12.3456789');
```

```response title=Response
12.375
```

","","Type Conversion"
"25.8.1.5101","toInt128OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt8OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt128OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt32OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toIPv6",0,0,"","","System","","","","","","",""
"25.8.1.5101","toIPv4",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateTime",0,0,"","","System","","","","","","",""
"25.8.1.5101","toTime",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDate32",0,0,"","","System","","","","","","",""
"25.8.1.5101","DATE",0,1,"","","System","","","","","","",""
"25.8.1.5101","toDate",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal128",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal32",0,0,"","","System","","","","","","",""
"25.8.1.5101","toFloat64",0,0,"","","System","","","","","","",""
"25.8.1.5101","toFloat32",0,0,"","","System","","","","","","",""
"25.8.1.5101","toBFloat16",0,0,"","","System","
Converts Float32 to BFloat16 with losing the precision.

Example:
[example:typical]
","","","","**typical**

```sql title=Query
SELECT toBFloat16(12.3::Float32);
```

```response title=Response
12.3125
```

","","Type Conversion"
"25.8.1.5101","toInt128",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt64",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt32",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt16",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt64",0,0,"","","System","","","","","","",""
"25.8.1.5101","financialNetPresentValueExtended",0,0,"","","System","
Calculates the Extended Net Present Value (XNPV) for a series of cash flows occurring at irregular intervals. XNPV considers the specific timing of each cash flow when calculating present value.

XNPV equation for `ACT_365F`:

$$
XNPV=\sum_{i=1}^n \frac{cashflow_i}{(1 + rate)^{(date_i - date_0)/365}}
$$

Arrays should be sorted by date in ascending order. Dates need to be unique.
    ","financialNetPresentValueExtended(rate, cashflows, dates[, daycount])","- `rate` — The discount rate to apply. [`Float*`](/sql-reference/data-types/float)
- `cashflows` — Array of cash flows. Each value represents a payment (negative value) or income (positive value). Must contain at least one positive and one negative value. [`Array(Int8/16/32/64)`](/sql-reference/data-types/array) or [`Array(Float*)`](/sql-reference/data-types/array)
- `dates` — Array of dates corresponding to each cash flow. Must have the same size as cashflows array. [`Array(Date)`](/sql-reference/data-types/array) or [`Array(Date32)`](/sql-reference/data-types/array)
- `[, daycount]` — Optional day count convention. Supported values: `'ACT_365F'` (default) — Actual/365 Fixed, `'ACT_365_25'` — Actual/365.25. [`String`](/sql-reference/data-types/string)
","Returns the net present value as a Float64 value. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT financialNetPresentValueExtended(0.1, [-10000., 5750., 4250., 3250.], [toDate('2020-01-01'), toDate('2020-03-01'), toDate('2020-10-30'), toDate('2021-02-15')])
```

```response title=Response
2506.579458169746
```

**Using different day count convention**

```sql title=Query
SELECT financialNetPresentValueExtended(0.1, [-10000., 5750., 4250., 3250.], [toDate('2020-01-01'), toDate('2020-03-01'), toDate('2020-10-30'), toDate('2021-02-15')], 'ACT_365_25')
```

```response title=Response
2507.067268742502
```

","25.7","Financial"
"25.8.1.5101","toTimeOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","sin",0,1,"","","System","Returns the sine of the argument.","sin(x)","- `x` — The number whose sine will be returned. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the sine of x.","**simple**

```sql title=Query
SELECT sin(1.23)
```

```response title=Response
0.9424888019316975
```

","","Mathematical"
"25.8.1.5101","idnaDecode",0,0,"","","System","
Returns the Unicode (UTF-8) representation (ToUnicode algorithm) of a domain name according to the [Internationalized Domain Names in Applications](https://en.wikipedia.org/wiki/Internationalized_domain_name#Internationalizing_Domain_Names_in_Applications) (IDNA) mechanism.
In case of an error (e.g. because the input is invalid), the input string is returned.
Note that repeated application of [`idnaEncode()`](#idnaEncode) and [`idnaDecode()`](#idnaDecode) does not necessarily return the original string due to case normalization.
","idnaDecode(s)","- `s` — Input string. [`String`](/sql-reference/data-types/string)
","Returns a Unicode (UTF-8) representation of the input string according to the IDNA mechanism of the input value. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT idnaDecode('xn--strae-oqa.xn--mnchen-3ya.de')
```

```response title=Response
┌─idnaDecode('xn--strae-oqa.xn--mnchen-3ya.de')─┐
│ straße.münchen.de                             │
└───────────────────────────────────────────────┘
```

","24.1","String"
"25.8.1.5101","formatDateTimeInJodaSyntax",0,0,"","","System","
Similar to `formatDateTime`, except that it formats datetime in Joda style instead of MySQL style. Refer to [Joda Time documentation](https://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html).

The opposite operation of this function is [`parseDateTimeInJodaSyntax`](/sql-reference/functions/type-conversion-functions#parsedatetimeinjodasyntax).

Using replacement fields, you can define a pattern for the resulting string.

**Replacement fields:**

| Placeholder | Description | Presentation | Examples |
|-------------|-------------|-------------|----------|
| G | era | text | AD |
| C | century of era (>=0) | number | 20 |
| Y | year of era (>=0) | year | 1996 |
| x | weekyear (not supported yet) | year | 1996 |
| w | week of weekyear (not supported yet) | number | 27 |
| e | day of week | number | 2 |
| E | day of week | text | Tuesday; Tue |
| y | year | year | 1996 |
| D | day of year | number | 189 |
| M | month of year | month | July; Jul; 07 |
| d | day of month | number | 10 |
| a | halfday of day | text | PM |
| K | hour of halfday (0~11) | number | 0 |
| h | clockhour of halfday (1~12) | number | 12 |
| H | hour of day (0~23) | number | 0 |
| k | clockhour of day (1~24) | number | 24 |
| m | minute of hour | number | 30 |
| s | second of minute | number | 55 |
| S | fraction of second | number | 978 |
| z | time zone | text | Eastern Standard Time; EST |
| Z | time zone offset | zone | -0800; -0812 |
| ' | escape for text | delimiter | |
| '' | single quote | literal | ' |
    ","formatDateTimeInJodaSyntax(datetime, format[, timezone])","- `datetime` — A date or date time to format. [`DateTime`](/sql-reference/data-types/datetime) or [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `format` — Format string with Joda-style replacement fields. [`String`](/sql-reference/data-types/string)
- `timezone` — Optional. Timezone name for the formatted time. [`String`](/sql-reference/data-types/string)
","Returns time and date values according to the determined format. [`String`](/sql-reference/data-types/string)","**Format datetime using Joda syntax**

```sql title=Query
SELECT formatDateTimeInJodaSyntax(toDateTime('2010-01-04 12:34:56'), 'yyyy-MM-dd HH:mm:ss')
```

```response title=Response
┌─formatDateTimeInJodaSyntax(toDateTime('2010-01-04 12:34:56'), 'yyyy-MM-dd HH:mm:ss')─┐
│ 2010-01-04 12:34:56                                                                     │
└─────────────────────────────────────────────────────────────────────────────────────────┘
```

","20.1","Dates and Times"
"25.8.1.5101","halfMD5",0,0,"","","System","
[Interprets](../..//sql-reference/functions/type-conversion-functions.md/#type_conversion_functions-reinterpretAsString) all the input
parameters as strings and calculates the MD5 hash value for each of them. Then combines hashes, takes the first 8 bytes of the hash of the
resulting string, and interprets them as [UInt64](../../../sql-reference/data-types/int-uint.md) in big-endian byte order. The function is
relatively slow (5 million short strings per second per processor core).

Consider using the [`sipHash64`](#sipHash64) function instead.

The function takes a variable number of input parameters.
Arguments can be any of the supported data types.
For some data types calculated value of hash function may be the same for the same values even if types of arguments differ (integers of different size, named and unnamed Tuple with the same data, Map and the corresponding Array(Tuple(key, value)) type with the same data).
    ","SELECT halfMD5(arg1[, arg2, ..., argN])","- `arg1[, arg2, ..., argN]` — Variable number of arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed half MD5 hash of the given input params returned as a `UInt64` in big-endian byte order. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT HEX(halfMD5('abc', 'cde', 'fgh'));
```

```response title=Response
┌─hex(halfMD5('abc', 'cde', 'fgh'))─┐
│ 2C9506B7374CFAF4                  │
└───────────────────────────────────┘
```

","1.1","Hash"
"25.8.1.5101","wyHash64",0,0,"","","System","Computes a 64-bit [wyHash64](https://github.com/wangyi-fudan/wyhash) hash value.","wyHash64(arg)","- `arg` — String argument for which to compute the hash. [`String`](/sql-reference/data-types/string)
","Returns the computed 64-bit hash value [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT wyHash64('ClickHouse') AS Hash;
```

```response title=Response
12336419557878201794
```

","22.7","Hash"
"25.8.1.5101","xxHash64",0,0,"","","System","
Calculates a [xxHash](http://cyan4973.github.io/xxHash/) from a string.

For the 32-bit version see [`xxHash32`](#xxHash32)
","xxHash64(arg)","- `arg` — Input string to hash. [`String`](/sql-reference/data-types/string)
","Returns the computed 64-bit hash of the input string. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT xxHash64('Hello, world!');
```

```response title=Response
┌─xxHash64('Hello, world!')─┐
│      17691043854468224118 │
└───────────────────────────┘
```

","20.1","Hash"
"25.8.1.5101","toUInt8OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","hiveHash",0,0,"","","System","
Calculates a ""HiveHash"" from a string.
This is just [`JavaHash`](#javahash) with zeroed out sign bits.
This function is used in [Apache Hive](https://en.wikipedia.org/wiki/Apache_Hive) for versions before 3.0.

::caution
This hash function is unperformant.
Use it only when this algorithm is already used in another system and you need to calculate the same result.
:::
","hiveHash(arg)","- `arg` — Input string to hash. [`String`](/sql-reference/data-types/string)
","Returns the computed ""hive hash"" of the input string. [`Int32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT hiveHash('Hello, world!');
```

```response title=Response
┌─hiveHash('Hello, world!')─┐
│                 267439093 │
└───────────────────────────┘
```

","20.1","Hash"
"25.8.1.5101","javaHash",0,0,"","","System","
Calculates JavaHash from:
- [string](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/String.java#l1452),
- [Byte](https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/Byte.java#l405),
- [Short](https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/Short.java#l410),
- [Integer](https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/Integer.java#l959),
- [Long](https://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/Long.java#l1060).

:::caution
This hash function is unperformant.
Use it only when this algorithm is already in use in another system and you need to calculate the same result.
:::

:::note
Java only supports calculating the hash of signed integers,
so if you want to calculate a hash of unsigned integers you must cast them to the proper signed ClickHouse types.
:::
","javaHash(arg)","- `arg` — Input value to hash. [`Any`](/sql-reference/data-types)
","Returns the computed hash of `arg` [`Int32`](/sql-reference/data-types/int-uint)","**Usage example 1**

```sql title=Query
SELECT javaHash(toInt32(123));
```

```response title=Response
┌─javaHash(toInt32(123))─┐
│               123      │
└────────────────────────┘
```

**Usage example 2**

```sql title=Query
SELECT javaHash('Hello, world!');
```

```response title=Response
┌─javaHash('Hello, world!')─┐
│               -1880044555 │
└───────────────────────────┘
```

","20.1","Hash"
"25.8.1.5101","metroHash64",0,0,"","","System","
Produces a 64-bit [MetroHash](http://www.jandrewrogers.com/2015/05/27/metrohash/) hash value.

:::note
The calculated hash values may be equal for the same input values of different argument types.
This affects for example integer types of different size, named and unnamed `Tuple` with the same data, `Map` and the corresponding `Array(Tuple(key, value))` type with the same data.
:::
","metroHash64(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed hash of the input arguments. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT metroHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MetroHash, toTypeName(MetroHash) AS type;
```

```response title=Response
┌────────────MetroHash─┬─type───┐
│ 14235658766382344533 │ UInt64 │
└──────────────────────┴────────┘
```

","1.1","Hash"
"25.8.1.5101","farmFingerprint64",0,0,"","","System","
Produces a 64-bit [FarmHash](https://github.com/google/farmhash) value using the `Fingerprint64` method.

:::tip
`farmFingerprint64` is preferred for a stable and portable value over [`farmHash64`](#farmhash64).
:::

:::note
The calculated hash values may be equal for the same input values of different argument types.
This affects for example integer types of different size, named and unnamed `Tuple` with the same data, `Map` and the corresponding `Array(Tuple(key, value))` type with the same data.
:::
","farmFingerprint64(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed hash value of the input arguments. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT farmFingerprint64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS FarmFingerprint, toTypeName(FarmFingerprint) AS type;
```

```response title=Response
┌─────FarmFingerprint─┬─type───┐
│ 5752020380710916328 │ UInt64 │
└─────────────────────┴────────┘
```

","20.12","Hash"
"25.8.1.5101","sipHash128",0,0,"","","System","
Like [`sipHash64`](#siphash64) but produces a 128-bit hash value, i.e. the final xor-folding state is done up to 128 bits.

:::tip use sipHash128Reference for new projects
This 128-bit variant differs from the reference implementation and is weaker.
This version exists because, when it was written, there was no official 128-bit extension for SipHash.
New projects are advised to use [`sipHash128Reference`](#siphash128reference).
:::
","sipHash128(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns a 128-bit `SipHash` hash value. [`FixedString(16)`](/sql-reference/data-types/fixedstring)","**Usage example**

```sql title=Query
SELECT hex(sipHash128('foo', '\x01', 3));
```

```response title=Response
┌─hex(sipHash128('foo', '', 3))────┐
│ 9DE516A64A414D4B1B609415E4523F24 │
└──────────────────────────────────┘
```

","1.1","Hash"
"25.8.1.5101","log2",0,1,"","","System","
Returns the binary logarithm of the argument.
","log2(x)","- `x` — The number for which to compute the binary logarithm of. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the binary logarithm of `x`. [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT log2(8);
```

```response title=Response
3
```

","1.1","Mathematical"
"25.8.1.5101","regionToName",0,0,"","","System","","","","","","",""
"25.8.1.5101","regionIn",0,0,"","","System","","","","","","",""
"25.8.1.5101","cityHash64",0,0,"","","System","
Produces a 64-bit [CityHash](https://github.com/google/cityhash) hash value.

This is a fast non-cryptographic hash function.
It uses the CityHash algorithm for string parameters and implementation-specific fast non-cryptographic hash function for parameters with other data types.
The function uses the CityHash combinator to get the final results.

:::info
Google changed the algorithm of CityHash after it was added to ClickHouse.
In other words, ClickHouse's cityHash64 and Google's upstream CityHash now produce different results.
ClickHouse cityHash64 corresponds to CityHash v1.0.2.
:::

:::note
The calculated hash values may be equal for the same input values of different argument types.
This affects for example integer types of different size, named and unnamed `Tuple` with the same data, `Map` and the corresponding `Array(Tuple(key, value))` type with the same data.
:::
","cityHash64(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed hash of the input arguments. [`UInt64`](/sql-reference/data-types/int-uint)","**Call example**

```sql title=Query
SELECT cityHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS CityHash, toTypeName(CityHash) AS type;
```

```response title=Response
┌─────────────CityHash─┬─type───┐
│ 12072650598913549138 │ UInt64 │
└──────────────────────┴────────┘
```

**Computing the checksum of the entire table with accuracy up to the row order**

```sql title=Query
CREATE TABLE users (
    id UInt32,
    name String,
    age UInt8,
    city String
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO users VALUES
(1, 'Alice', 25, 'New York'),
(2, 'Bob', 30, 'London'),
(3, 'Charlie', 35, 'Tokyo');

SELECT groupBitXor(cityHash64(*)) FROM users;
```

```response title=Response
┌─groupBitXor(⋯age, city))─┐
│     11639977218258521182 │
└──────────────────────────┘
```

","1.1","Hash"
"25.8.1.5101","regionToTopContinent",0,0,"","","System","","","","","","",""
"25.8.1.5101","regionToArea",0,0,"","","System","","","","","","",""
"25.8.1.5101","regionToCity",0,0,"","","System","","","","","","",""
"25.8.1.5101","cutQueryString",0,0,"","","System","","","","","","",""
"25.8.1.5101","exp",0,1,"","","System","
Returns e raised to the power of `x`, where `x` is the given argument to the function.
","exp(x)","- `x` — The exponent. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns `e^x` [`Float*`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT round(exp(-1), 4)
```

```response title=Response
┌─round(exp(-1), 4)─┐
│            0.3679 │
└───────────────────┘
```

","1.1","Mathematical"
"25.8.1.5101","replaceRegexpAll",0,0,"","","System","
Like `replaceRegexpOne` but replaces all occurrences of the pattern.
As an exception, if a regular expression worked on an empty substring, the replacement is not made more than once.
","replaceRegexpAll(haystack, pattern, replacement)","- `haystack` — The input string to search in. [`String`](/sql-reference/data-types/string)
- `pattern` — The regular expression pattern to find. [`const String`](/sql-reference/data-types/string)
- `replacement` — The string to replace the pattern with, may contain substitutions. [`const String`](/sql-reference/data-types/string)
","Returns a string with all regex matches replaced. [`String`](/sql-reference/data-types/string)","**Replace all characters with doubled version**

```sql title=Query
SELECT replaceRegexpAll('Hello123', '.', '\\\\0\\\\0') AS res
```

```response title=Response
┌─res──────────────────┐
│ HHeelllloo112233     │
└──────────────────────┘
```

**Empty substring replacement example**

```sql title=Query
SELECT replaceRegexpAll('Hello, World!', '^', 'here: ') AS res
```

```response title=Response
┌─res─────────────────┐
│ here: Hello, World! │
└─────────────────────┘
```

","1.1","String Replacement"
"25.8.1.5101","toDayOfMonth",0,0,"","","System","
Returns the day of the month (1-31) of a `Date` or `DateTime`.
        ","toDayOfMonth(datetime)","- `datetime` — Date or date with time to get the day of month from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the day of the month of the given date/time [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toDayOfMonth(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toDayOfMonth(toDateTime('2023-04-21 10:20:30'))─┐
│                                              21 │
└─────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","icebergBucket",0,0,"","","System","Implements logic of iceberg bucket transform: https://iceberg.apache.org/spec/#bucket-transform-details.","icebergBucket(N, value)","- `N` — modulo, positive integer, always constant. - `value` — Integer, bool, decimal, float, string, fixed_string, uuid, date, time or datetime value. ","Int32","**Example**

```sql title=Query
SELECT icebergBucket(5, 1.0 :: Float32)
```

```response title=Response
4
```

","25.5","Other"
"25.8.1.5101","toInt256",0,0,"","","System","","","","","","",""
"25.8.1.5101","formatReadableDecimalSize",0,0,"","","System","
Accepts the size (number of bytes). Returns a rounded size with a suffix (KB, MB, etc.) as a string.
","","","","**formatReadableDecimalSize**

```sql title=Query
SELECT formatReadableDecimalSize(1000)
```

```response title=Response

```

","","Other"
"25.8.1.5101","base64URLEncode",0,0,"","","System","
Encodes a string using [Base64](https://datatracker.ietf.org/doc/html/rfc4648#section-4) (RFC 4648) representation using URL-safe alphabet.
","base64URLEncode(plaintext)","- `plaintext` — Plaintext column or constant to encode. [`String`](/sql-reference/data-types/string)
","Returns a string containing the encoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT base64URLEncode('https://clickhouse.com')
```

```response title=Response
┌─base64URLEncode('https://clickhouse.com')─┐
│ aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ            │
└───────────────────────────────────────────┘
```

","18.16","String"
"25.8.1.5101","parseDateTimeBestEffortUSOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","detectProgrammingLanguage",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONDynamicPathsWithTypes",0,0,"","","System","
Returns the list of dynamic paths that are stored as separate subcolumns and their types in each row in JSON column.
","JSONDynamicPathsWithTypes(json)","- `json` — JSON column ","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPathsWithTypes(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONDynamicPathsWithTypes(json)─┐
│ {""a"":""42""}                           │ {'a':'Int64'}                   │
│ {""b"":""Hello""}                        │ {}                              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))'}  │
└──────────────────────────────────────┴─────────────────────────────────┘
```

","","JSON"
"25.8.1.5101","JSONDynamicPaths",0,0,"","","System","
Returns the list of dynamic paths that are stored as separate subcolumns in JSON column.
","JSONDynamicPaths(json)","- `json` — JSON column ","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPaths(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONDynamicPaths(json)─┐
│ {""a"":""42""}                           │ ['a']                  │
│ {""b"":""Hello""}                        │ []                     │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['a']                  │
└──────────────────────────────────────┴────────────────────────┘
```

","","JSON"
"25.8.1.5101","JSONAllPathsWithTypes",0,0,"","","System","
Returns the list of all paths and their data types stored in each row in JSON column.
","JSONAllPathsWithTypes(json)","- `json` — JSON column ","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONAllPathsWithTypes(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONAllPathsWithTypes(json)───────────────┐
│ {""a"":""42""}                           │ {'a':'Int64'}                             │
│ {""b"":""Hello""}                        │ {'b':'String'}                            │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))','c':'Date'} │
└──────────────────────────────────────┴───────────────────────────────────────────┘
```

","","JSON"
"25.8.1.5101","JSONAllPaths",0,0,"","","System","
Returns the list of all paths stored in each row in JSON column.
","JSONAllPaths(json)","- `json` — JSON column ","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONAllPaths(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONAllPaths(json)─┐
│ {""a"":""42""}                           │ ['a']              │
│ {""b"":""Hello""}                        │ ['b']              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['a','c']          │
└──────────────────────────────────────┴────────────────────┘
```

","","JSON"
"25.8.1.5101","blockSerializedSize",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiFuzzyMatchAnyIndex",0,0,"","","System","","","","","","",""
"25.8.1.5101","ngramSearchCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","ngramSearchCaseInsensitive",0,0,"","","System","","","","","","",""
"25.8.1.5101","ngramDistance",0,0,"","","System","","","","","","",""
"25.8.1.5101","__bitBoolMaskOr",0,0,"","","System","","","","","","",""
"25.8.1.5101","extractAllGroupsVertical",0,0,"","","System","
Matches all groups of a string using a regular expression and returns an array of arrays, where each array includes matching fragments from every group, grouped in order of appearance in the input string.
","extractAllGroupsVertical(s, regexp)","- `s` — Input string to extract from. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `regexp` — Regular expression to match by. [`const String`](/sql-reference/data-types/string) or [`const FixedString`](/sql-reference/data-types/fixedstring)
","Returns an array of arrays, where each inner array contains the captured groups from one match. Each match produces an array with elements corresponding to the capturing groups in the regular expression (group 1, group 2, etc.). If no matches are found, returns an empty array. [`Array(Array(String))`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
WITH '< Server: nginx
< Date: Tue, 22 Jan 2019 00:26:14 GMT
< Content-Type: text/html; charset=UTF-8
< Connection: keep-alive
' AS s
SELECT extractAllGroupsVertical(s, '< ([\\w\\-]+): ([^\\r\\n]+)');
```

```response title=Response
[['Server','nginx'],['Date','Tue, 22 Jan 2019 00:26:14 GMT'],['Content-Type','text/html; charset=UTF-8'],['Connection','keep-alive']]
```

","20.5","String Splitting"
"25.8.1.5101","bitmapContains",0,0,"","","System","Checks if the bitmap contains a specific element.","bitmapContains(bitmap, value)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `value` — Element to check for. [(U)Int8/16/32/64](/sql-reference/data-types/int-uint/) ","Returns `1` if the bitmap contains the specified value, otherwise `0` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapContains(bitmapBuild([1, 2, 3]), 2) AS res;
```

```response title=Response
┌─res─┐
│  1  │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","bitmapXor",0,0,"","","System","Computes the symmetric difference (XOR) of two bitmaps.","bitmapXor(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns a bitmap containing set bits present in either input bitmap, but not in both [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapXor(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5]))) AS res;
```

```response title=Response
┌─res──────────┐
│ [1, 2, 4, 5] │
└──────────────┘
```

","20.1","Bitmap"
"25.8.1.5101","bitmapOr",0,0,"","","System","Computes the logical disjunction (OR) of two bitmaps.","bitmapOr(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns a bitmap containing set bits present in either input bitmap [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapOr(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5]))) AS res;
```

```response title=Response
┌─res─────────────┐
│ [1, 2, 3, 4, 5] │
└─────────────────┘
```

","20.1","Bitmap"
"25.8.1.5101","bitmapAnd",0,0,"","","System","Computes the logical conjunction (AND) of two bitmaps.","bitmapAnd(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns a bitmap containing bits present in both input bitmaps [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapAnd(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5]))) AS res;
```

```response title=Response
┌─res─┐
│ [3] │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","bitmapAndnotCardinality",0,0,"","","System","Returns the cardinality of the AND-NOT operation of two bitmaps.","bitmapAndnotCardinality(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns the number of set bits in the result of `bitmap1 AND-NOT bitmap2` [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapAndnotCardinality(bitmapBuild([1,2,3]), bitmapBuild([3,4,5])) AS res;
```

```response title=Response
┌─res─┐
│   2 │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","bitmapOrCardinality",0,0,"","","System","Returns the cardinality of the logical disjunction (OR) of two bitmaps.","bitmapOrCardinality(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns the number of set bits in the union of the two bitmaps [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapOrCardinality(bitmapBuild([1,2,3]), bitmapBuild([3,4,5])) AS res;
```

```response title=Response
┌─res─┐
│   5 │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","bitmapCardinality",0,0,"","","System","Returns the number of bits set (the cardinality) in the bitmap.","bitmapCardinality(bitmap)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns the number of bits set in the bitmap [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapCardinality(bitmapBuild([1, 3, 3, 5, 7, 7])) AS res
```

```response title=Response
┌─res─┐
│   4 │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","bitmapBuild",0,0,"","","System","Builds a bitmap from an unsigned integer array. It is the opposite of function [`bitmapToArray`](/sql-reference/functions/bitmap-functions#bitmapToArray).","bitmapBuild(array)","- `array` — Unsigned integer array. [`Array(UInt*)`](/sql-reference/data-types/array)
","Returns a bitmap from the provided array [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapBuild([1, 2, 3, 4, 5]) AS res, toTypeName(res);
```

```response title=Response
┌─res─┬─toTypeName(bitmapBuild([1, 2, 3, 4, 5]))─────┐
│     │ AggregateFunction(groupBitmap, UInt8)        │
└─────┴──────────────────────────────────────────────┘
```

","20.1","Bitmap"
"25.8.1.5101","alphaTokens",0,0,"","","System","
Selects substrings of consecutive bytes from the ranges `a-z` and `A-Z` and returns an array of the selected substrings.
","alphaTokens(s[, max_substrings])","- `s` — The string to split. [`String`](/sql-reference/data-types/string)
- `max_substrings` — Optional. When `max_substrings > 0`, the number of returned substrings will be no more than `max_substrings`, otherwise the function will return as many substrings as possible. [`Int64`](/sql-reference/data-types/int-uint)
","Returns an array of selected substrings of `s`. [`Array(String)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT alphaTokens('abca1abc');
```

```response title=Response
┌─alphaTokens('abca1abc')─┐
│ ['abca','abc']          │
└─────────────────────────┘
```

","1.1","String Splitting"
"25.8.1.5101","toIPv6OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","sparseGramsHashesUTF8",0,0,"","","System","
Finds hashes of all substrings of a given UTF-8 string that have a length of at least `n`, where the hashes of the (n-1)-grams at the borders of the substring are strictly greater than those of any (n-1)-gram inside the substring.
Expects UTF-8 string, throws an exception in case of invalid UTF-8 sequence.
Uses `CRC32` as a hash function.
","sparseGramsHashesUTF8(s[, min_ngram_length, max_ngram_length])","- `s` — An input string. [`String`](/sql-reference/data-types/string)
- `min_ngram_length` — Optional. The minimum length of extracted ngram. The default and minimal value is 3. [`UInt*`](/sql-reference/data-types/int-uint)
- `max_ngram_length` — Optional. The maximum length of extracted ngram. The default value is 100. Should be not less than `min_ngram_length`. [`UInt*`](/sql-reference/data-types/int-uint)
","Returns an array of selected UTF-8 substrings CRC32 hashes. [`Array(UInt32)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT sparseGramsHashesUTF8('алиса', 3)
```

```response title=Response
┌─sparseGramsHashesUTF8('алиса', 3)─┐
│ [4178533925,3855635300,561830861] │
└───────────────────────────────────┘
```

","25.5","String"
"25.8.1.5101","sparseGramsHashes",0,0,"","","System","
Finds hashes of all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.
Uses `CRC32` as a hash function.
","sparseGramsHashes(s[, min_ngram_length, max_ngram_length])","- `s` — An input string. [`String`](/sql-reference/data-types/string)
- `min_ngram_length` — Optional. The minimum length of extracted ngram. The default and minimal value is 3. [`UInt*`](/sql-reference/data-types/int-uint)
- `max_ngram_length` — Optional. The maximum length of extracted ngram. The default value is 100. Should be not less than `min_ngram_length`. [`UInt*`](/sql-reference/data-types/int-uint)
","Returns an array of selected substrings CRC32 hashes. [`Array(UInt32)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT sparseGramsHashes('alice', 3)
```

```response title=Response
┌─sparseGramsHashes('alice', 3)──────────────────────┐
│ [1481062250,2450405249,4012725991,1918774096]      │
└────────────────────────────────────────────────────┘
```

","25.5","String"
"25.8.1.5101","sparseGramsUTF8",0,0,"","","System","
Finds all substrings of a given UTF-8 string that have a length of at least `n`, where the hashes of the (n-1)-grams at the borders of the substring are strictly greater than those of any (n-1)-gram inside the substring.
Expects a UTF-8 string, throws an exception in case of an invalid UTF-8 sequence.
Uses `CRC32` as a hash function.
","sparseGramsUTF8(s[, min_ngram_length, max_ngram_length])","- `s` — An input string. [`String`](/sql-reference/data-types/string)
- `min_ngram_length` — Optional. The minimum length of extracted ngram. The default and minimal value is 3. [`UInt*`](/sql-reference/data-types/int-uint)
- `max_ngram_length` — Optional. The maximum length of extracted ngram. The default value is 100. Should be not less than `min_ngram_length`. [`UInt*`](/sql-reference/data-types/int-uint)
","Returns an array of selected UTF-8 substrings. [`Array(String)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT sparseGramsUTF8('алиса', 3)
```

```response title=Response
┌─sparseGramsUTF8('алиса', 3)─┐
│ ['али','лис','иса']         │
└─────────────────────────────┘
```

","25.5","String"
"25.8.1.5101","JSONExtractKeys",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONExtractKeysAndValuesRaw",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt16OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONExtractRaw",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONExtractString",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONType",0,0,"","","System","
Return the type of a JSON value. If the value does not exist, `Null=0` will be returned.
        ","JSONType(json[, indices_or_keys, ...])","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `json[, indices_or_keys, ...]` — A list of zero or more arguments, each of which can be either string or integer. [`String`](/sql-reference/data-types/string) or [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns the type of a JSON value as a string, otherwise if the value doesn't exist it returns `Null=0` [`Enum`](/sql-reference/data-types/enum)","**Usage example**

```sql title=Query
SELECT JSONType('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}') = 'Object';
SELECT JSONType('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', 'a') = 'String';
SELECT JSONType('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', 'b') = 'Array';
```

```response title=Response
1
1
1
```

","20.1","JSON"
"25.8.1.5101","bitmapMin",0,0,"","","System","Returns the position of the smallest bit set in a bitmap. If all bits are unset, or `UINT32_MAX` (`UINT64_MAX` if the bitmap contains more than `2^64` bits).","bitmapMin(bitmap)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns the position of the smallest bit set in the bitmap, or `UINT32_MAX`/`UINT64_MAX` [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapMin(bitmapBuild([3, 5, 2, 6])) AS res;
```

```response title=Response
┌─res─┐
│   2 │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","JSONKey",0,0,"","","System","","","","","","",""
"25.8.1.5101","isValidJSON",0,0,"","","System","
Checks that the string passed is valid JSON.
        ","isValidJSON(json)","- `json` — JSON string to validate [`String`](/sql-reference/data-types/string)
","Returns `1` if the string is valid JSON, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT isValidJSON('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}') = 1;
SELECT isValidJSON('not JSON') = 0;
```

```response title=Response
1
0
```

**Using integers to access both JSON arrays and JSON objects**

```sql title=Query
SELECT JSONHas('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', 0);
SELECT JSONHas('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', 1);
SELECT JSONHas('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', 2);
SELECT JSONHas('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', -1);
SELECT JSONHas('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', -2);
SELECT JSONHas('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', 3);
```

```response title=Response
0
1
1
1
1
1
0
```

","20.1","JSON"
"25.8.1.5101","JSONHas",0,0,"","","System","
Checks for the existence of the provided value(s) in the JSON document.
        ","JSONHas(json[ ,indices_or_keys, ...])","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `[ ,indices_or_keys, ...]` — A list of zero or more arguments. [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns `1` if the value exists in `json`, otherwise `0` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT JSONHas('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', 'b') = 1;
SELECT JSONHas('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', 'b', 4) = 0;
```

```response title=Response
1
0
```

","20.1","JSON"
"25.8.1.5101","multiSearchAllPositionsCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","javaHashUTF16LE",0,0,"","","System","
Calculates [JavaHash](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/478a4add975b/src/share/classes/java/lang/String.java#l1452) from a string, assuming it contains bytes representing a string in UTF-16LE encoding.
","javaHashUTF16LE(arg)","- `arg` — A string in UTF-16LE encoding. [`String`](/sql-reference/data-types/string)
","Returns the computed hash of the UTF-16LE encoded string. [`Int32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT javaHashUTF16LE(convertCharset('test', 'utf-8', 'utf-16le'));
```

```response title=Response
┌─javaHashUTF16LE(convertCharset('test', 'utf-8', 'utf-16le'))─┐
│                                                      3556498 │
└──────────────────────────────────────────────────────────────┘
```

","20.1","Hash"
"25.8.1.5101","mergeTreePartInfo",0,1,"","","System","
Function that helps to cut the useful values out of the `MergeTree` part name.
    ","mergeTreePartInfo(part_name)","- `part_name` — Name of part to unpack. [`String`](/sql-reference/data-types/string)
","Returns a Tuple with subcolumns: `partition_id`, `min_block`, `max_block`, `level`, `mutation`. [`Tuple`](/sql-reference/data-types/tuple)","**Basic example**

```sql title=Query
WITH mergeTreePartInfo('all_12_25_7_4') AS info
SELECT info.partition_id, info.min_block, info.max_block, info.level, info.mutation;
```

```response title=Response
┌─info.partition_id─┬─info.min_block─┬─info.max_block─┬─info.level─┬─info.mutation─┐
│ all               │             12 │             25 │          7 │             4 │
└───────────────────┴────────────────┴────────────────┴────────────┴───────────────┘
```

","25.6","Introspection"
"25.8.1.5101","polygonsDistanceCartesian",0,0,"","","System","","","","","","",""
"25.8.1.5101","unbin",0,1,"","","System","
Interprets each pair of binary digits (in the argument) as a number and converts it to the byte represented by the number. The functions performs the opposite operation to bin.

For a numeric argument `unbin()` does not return the inverse of `bin()`. If you want to convert the result to a number, you can use the reverse and `reinterpretAs<Type>` functions.

:::note
If `unbin` is invoked from within the `clickhouse-client`, binary strings are displayed using UTF-8.
:::

Supports binary digits `0` and `1`. The number of binary digits does not have to be multiples of eight. If the argument string contains anything other than binary digits,
the result is undefined (no exception is thrown).
    ","unbin(arg)","- `arg` — A string containing any number of binary digits. [`String`](/sql-reference/data-types/string)
","Returns a binary string (BLOB). [`String`](/sql-reference/data-types/string)","**Basic usage**

```sql title=Query
SELECT UNBIN('001100000011000100110010'), UNBIN('0100110101111001010100110101000101001100')
```

```response title=Response
┌─unbin('001100000011000100110010')─┬─unbin('0100110101111001010100110101000101001100')─┐
│ 012                               │ MySQL                                             │
└───────────────────────────────────┴───────────────────────────────────────────────────┘
```

**Convert to number**

```sql title=Query
SELECT reinterpretAsUInt64(reverse(unbin('1110'))) AS num
```

```response title=Response
┌─num─┐
│  14 │
└─────┘
```

","21.8","Encoding"
"25.8.1.5101","unhex",0,1,"","","System","
Performs the opposite operation of [`hex`](#hex). It interprets each pair of hexadecimal digits (in the argument) as a number and converts
it to the byte represented by the number. The returned value is a binary string (BLOB).

If you want to convert the result to a number, you can use the `reverse` and `reinterpretAs<Type>` functions.

:::note
`clickhouse-client` interprets strings as UTF-8.
This may cause that values returned by `hex` to be displayed surprisingly.
:::

Supports both uppercase and lowercase letters `A-F`.
The number of hexadecimal digits does not have to be even.
If it is odd, the last digit is interpreted as the least significant half of the `00-0F` byte.
If the argument string contains anything other than hexadecimal digits, some implementation-defined result is returned (an exception isn't thrown).
For a numeric argument the inverse of hex(N) is not performed by unhex().
","unhex(arg)","- `arg` — A string containing any number of hexadecimal digits. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
","Returns a binary string (BLOB). [`String`](/sql-reference/data-types/string)","**Basic usage**

```sql title=Query
SELECT unhex('303132'), UNHEX('4D7953514C')
```

```response title=Response
┌─unhex('303132')─┬─unhex('4D7953514C')─┐
│ 012             │ MySQL               │
└─────────────────┴─────────────────────┘
```

**Convert to number**

```sql title=Query
SELECT reinterpretAsUInt64(reverse(unhex('FFF'))) AS num
```

```response title=Response
┌──num─┐
│ 4095 │
└──────┘
```

","1.1","Encoding"
"25.8.1.5101","hex",0,1,"","","System","
Returns a string containing the argument's hexadecimal representation according
to the following logic for different types:

| Type                       | Description                                                                                                                                                                                                                                                                            |
|----------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `(U)Int*`                  | Prints hex digits (""nibbles"") from the most significant to least significant (big-endian or ""human-readable"" order). It starts with the most significant non-zero byte (leading zero bytes are omitted) but always prints both digits of every byte even if the leading digit is zero. |
| `Date` and `DateTime`      | Formatted as corresponding integers (the number of days since epoch for Date and the value of unix timestamp for DateTime).                                                                                                                                                            |
| `String` and `FixedString` | All bytes are simply encoded as two hexadecimal numbers. Zero bytes are not omitted.                                                                                                                                                                                                   |
| `Float*` and `Decimal`     | Encoded as their representation in memory. ClickHouse represents the values internally always as little endian, therefore they are encoded as such. Zero leading/trailing bytes are not omitted.                                                                                                                   |
| `UUID`                     | Encoded as big-endian order string.                                                                                                                                                                                                                                                    |

The function uses uppercase letters `A-F` and not using any prefixes (like `0x`) or suffixes (like `h`).
    ","hex(arg)","- `arg` — A value to convert to hexadecimal. [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal) or [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime)
","Returns a string with the hexadecimal representation of the argument. [`String`](/sql-reference/data-types/string)","**Simple integer**

```sql title=Query
SELECT hex(1)
```

```response title=Response
01
```

**Float32 numbers**

```sql title=Query
SELECT hex(toFloat32(number)) AS hex_presentation FROM numbers(15, 2)
```

```response title=Response
┌─hex_presentation─┐
│ 00007041         │
│ 00008041         │
└──────────────────┘
```

**Float64 numbers**

```sql title=Query
SELECT hex(toFloat64(number)) AS hex_presentation FROM numbers(15, 2)
```

```response title=Response
┌─hex_presentation─┐
│ 0000000000002E40 │
│ 0000000000003040 │
└──────────────────┘
```

**UUID conversion**

```sql title=Query
SELECT lower(hex(toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0'))) AS uuid_hex
```

```response title=Response
┌─uuid_hex─────────────────────────┐
│ 61f0c4045cb311e7907ba6006ad3dba0 │
└──────────────────────────────────┘
```

","1.1","Encoding"
"25.8.1.5101","detectTonality",0,0,"","","System","","","","","","",""
"25.8.1.5101","extractAllGroupsHorizontal",0,0,"","","System","
Matches all groups of a string using the provided regular expression and returns an array of arrays, where each array contains all captures from the same capturing group, organized by group number.
","extractAllGroupsHorizontal(s, regexp)","- `s` — Input string to extract from. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `regexp` — Regular expression to match by. [`const String`](/sql-reference/data-types/string) or [`const FixedString`](/sql-reference/data-types/fixedstring)
","Returns an array of arrays, where each inner array contains all captures from one capturing group across all matches. The first inner array contains all captures from group 1, the second from group 2, etc. If no matches are found, returns an empty array. [`Array(Array(String))`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
WITH '< Server: nginx
< Date: Tue, 22 Jan 2019 00:26:14 GMT
< Content-Type: text/html; charset=UTF-8
< Connection: keep-alive
' AS s
SELECT extractAllGroupsHorizontal(s, '< ([\\w\\-]+): ([^\\r\\n]+)');
```

```response title=Response
[['Server','Date','Content-Type','Connection'],['nginx','Tue, 22 Jan 2019 00:26:14 GMT','text/html; charset=UTF-8','keep-alive']]
```

","20.5","String Splitting"
"25.8.1.5101","lcm",0,0,"","","System","
Returns the least common multiple of two values `x` and `y`.

An exception is thrown when dividing by zero or when dividing a minimal negative number by minus one.
    ","lcm(x, y)","- `x` — First integer. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `y` — Second integer. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns the least common multiple of `x` and `y`. [`(U)Int*`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT lcm(6, 8)
```

```response title=Response
24
```

","1.1","Arithmetic"
"25.8.1.5101","FQDN",0,1,"","","System","","","","","","",""
"25.8.1.5101","h3GetIndexesFromUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONLength",0,0,"","","System","
Return the length of a JSON array or a JSON object.
If the value does not exist or has the wrong type, `0` will be returned.
        ","JSONLength(json [, indices_or_keys, ...])","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `[, indices_or_keys, ...]` — Optional. A list of zero or more arguments. [`String`](/sql-reference/data-types/string) or [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns the length of the JSON array or JSON object, otherwise returns `0` if the value does not exist or has the wrong type. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT JSONLength('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}', 'b') = 3;
SELECT JSONLength('{""a"": ""hello"", ""b"": [-100, 200.0, 300]}') = 2;
```

```response title=Response
1
1
```

","20.1","JSON"
"25.8.1.5101","extract",0,0,"","","System","","","","","","",""
"25.8.1.5101","extractGroups",0,0,"","","System","
Extracts all groups from non-overlapping substrings matched by a regular expression.
    ","extractAllGroups(s, regexp)","- `s` — Input string to extract from. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `regexp` — Regular expression. Constant. [`const String`](/sql-reference/data-types/string) or [`const FixedString`](/sql-reference/data-types/fixedstring)
","If the function finds at least one matching group, it returns Array(Array(String)) column, clustered by group_id (`1` to `N`, where `N` is number of capturing groups in regexp). If there is no matching group, it returns an empty array. [`Array(Array(String))`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
WITH '< Server: nginx
< Date: Tue, 22 Jan 2019 00:26:14 GMT
< Content-Type: text/html; charset=UTF-8
< Connection: keep-alive
' AS s
SELECT extractAllGroups(s, '< ([\\w\\-]+): ([^\\r\\n]+)');
```

```response title=Response
[['Server','nginx'],['Date','Tue, 22 Jan 2019 00:26:14 GMT'],['Content-Type','text/html; charset=UTF-8'],['Connection','keep-alive']]
```

","20.5","String Splitting"
"25.8.1.5101","transactionLatestSnapshot",0,0,"","","System","","","","","","",""
"25.8.1.5101","transactionID",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitCount",0,0,"","","System","Calculates the number of bits set to one in the binary representation of a number.","bitCount(x)","- `x` — An integer or float value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the number of bits set to one in `x`. [`UInt8`](../data-types/int-uint.md).

:::note
The function does not convert the input value to a larger type ([sign extension](https://en.wikipedia.org/wiki/Sign_extension)).
For example: `bitCount(toUInt8(-1)) = 8`.
:::","**Usage example**

```sql title=Query
SELECT bin(333), bitCount(333);
```

```response title=Response
┌─bin(333)─────────┬─bitCount(333)─┐
│ 0000000101001101 │             5 │
└──────────────────┴───────────────┘
```

","20.3","Bit"
"25.8.1.5101","SHA512_256",0,0,"","","System","Calculates the SHA512_256 hash of the given string.","SELECT SHA512_256(s);","- `s` — The input [String](../../sql-reference/data-types/string.md). ","Returns the SHA512_256 hash of the given input string as a fixed-length string. [`FixedString(32)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT HEX(SHA512_256('abc'));
```

```response title=Response
┌─hex(SHA512_256('abc'))───────────────────────────────────────────┐
│ 53048E2681941EF99B2E29B76B4C7DABE4C2D0C634FC6D46E0E2F13107E7AF23 │
└──────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","SHA384",0,0,"","","System","Calculates the SHA384 hash of the given string.","SELECT SHA384(s);","- `s` — The input [String](../../sql-reference/data-types/string.md). ","Returns the SHA384 hash of the given input string as a fixed-length string. [`FixedString(48)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT HEX(SHA384('abc'));
```

```response title=Response
┌─hex(SHA384('abc'))───────────────────────────────────────────────────────────────────────────────┐
│ CB00753F45A35E8BB5A03D699AC65007272C32AB0EDED1631A8B605A43FF5BED8086072BA1E7CC2358BAECA134C825A7 │
└──────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","h3Distance",0,0,"","","System","","","","","","",""
"25.8.1.5101","SHA256",0,0,"","","System","Calculates the SHA256 hash of the given string.","SELECT SHA256(s);","- `s` — The input [String](../../sql-reference/data-types/string.md). ","Returns the SHA256 hash of the given input string as a fixed-length string. [`FixedString(32)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT HEX(SHA256('abc'));
```

```response title=Response
┌─hex(SHA256('abc'))───────────────────────────────────────────────┐
│ BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD │
└──────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","MD5",0,0,"","","System","Calculates the MD5 hash of the given string.","SELECT MD5(s);","- `s` — The input [String](../../sql-reference/data-types/string.md). ","Returns the MD5 hash of the given input string as a fixed-length string. [`FixedString(16)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT HEX(MD5('abc'));
```

```response title=Response
┌─hex(MD5('abc'))──────────────────┐
│ 900150983CD24FB0D6963F7D28E17F72 │
└──────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","geoToH3",0,0,"","","System","
Returns [H3](https://h3geo.org/docs/core-library/h3Indexing/) point index for the given latitude, longitude, and resolution.

:::note
In ClickHouse v25.4 or older, `geoToH3()` arguments are in the order `(lon, lat)`. As per ClickHouse v25.5, the input values are ordered `(lat, lon)`.
The previous behavior can be restored using setting `geotoh3_argument_order = 'lon_lat'`.
    ","geoToH3(lat, lon, resolution)","- `lat` — Latitude in degrees. [`Float64`](/sql-reference/data-types/float)
- `lon` — Longitude in degrees. [`Float64`](/sql-reference/data-types/float)
- `resolution` — Index resolution with range `[0, 15]`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the H3 index number, or `0` in case of error. [`UInt64`](/sql-reference/data-types/int-uint)","**Convert coordinates to H3 index**

```sql title=Query
SELECT geoToH3(55.71290588, 37.79506683, 15) AS h3Index
```

```response title=Response
┌────────────h3Index─┐
│ 644325524701193974 │
└────────────────────┘
```

","20.1","Geo"
"25.8.1.5101","intExp10",0,0,"","","System","
Like [exp10](#exp10) but returns a `UInt64` number.
","intExp10(x)","- `x` — The exponent. [`Int*`](/sql-reference/data-types/int-uint) or [`UInt*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns 10^x. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT intExp10(2);
```

```response title=Response
100
```

","1.1","Mathematical"
"25.8.1.5101","toInt16OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","timeSlots",0,0,"","","System","
For a time interval starting at `StartTime` and continuing for `Duration` seconds, it returns an array of moments in time, consisting of points from this interval rounded down to the `Size` in seconds. `Size` is an optional parameter set to 1800 (30 minutes) by default.

This is necessary, for example, when searching for pageviews in the corresponding session.

For `DateTime64`, the return value's scale can differ from the scale of `StartTime`. The highest scale among all given arguments is taken.
    ","timeSlots(StartTime, Duration[, Size])","- `StartTime` — Starting time for the interval. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `Duration` — Duration of the interval in seconds. [`UInt32`](/sql-reference/data-types/int-uint) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `Size` — Optional. Size of time slots in seconds. Default is 1800 (30 minutes). [`UInt32`](/sql-reference/data-types/int-uint) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns an array of DateTime/DateTime64 (return type matches the type of `StartTime`). For DateTime64, the return value's scale can differ from the scale of `StartTime` - the highest scale among all given arguments is taken. [`Array(DateTime)`](/sql-reference/data-types/array) or [`Array(DateTime64)`](/sql-reference/data-types/array)","**Generate time slots for an interval**

```sql title=Query
SELECT timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600));
SELECT timeSlots(toDateTime('1980-12-12 21:01:02', 'UTC'), toUInt32(600), 299);
SELECT timeSlots(toDateTime64('1980-12-12 21:01:02.1234', 4, 'UTC'), toDecimal64(600.1, 1), toDecimal64(299, 0))
```

```response title=Response
┌─timeSlots(toDateTime('2012-01-01 12:20:00'), toUInt32(600))─┐
│ ['2012-01-01 12:00:00','2012-01-01 12:30:00']               │
└─────────────────────────────────────────────────────────────┘
┌─timeSlots(toDateTime('1980-12-12 21:01:02', 'UTC'), toUInt32(600), 299)─┐
│ ['1980-12-12 20:56:13','1980-12-12 21:01:12','1980-12-12 21:06:11']     │
└─────────────────────────────────────────────────────────────────────────┘
┌─timeSlots(toDateTime64('1980-12-12 21:01:02.1234', 4, 'UTC'), toDecimal64(600.1, 1), toDecimal64(299, 0))─┐
│ ['1980-12-12 20:56:13.0000','1980-12-12 21:01:12.0000','1980-12-12 21:06:11.0000']                        │
└───────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","char",0,1,"","","System","
Returns a string with length equal to the number of arguments passed where each byte
has the value of the corresponding argument. Accepts multiple arguments of numeric types.

If the value of the argument is out of range of the `UInt8` data type, then it is converted
to `UInt8` with potential rounding and overflow.
        ","char(num1[, num2[, ...]]);","- `num1[, num2[, num3 ...]]` — Numerical arguments interpreted as integers. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns a string of the given bytes. [`String`](/sql-reference/data-types/string)","**Basic example**

```sql title=Query
SELECT char(104.1, 101, 108.9, 108.9, 111) AS hello;
```

```response title=Response
┌─hello─┐
│ hello │
└───────┘
```

**Constructing arbitrary encodings**

```sql title=Query
-- You can construct a string of arbitrary encoding by passing the corresponding bytes.
-- for example UTF8
SELECT char(0xD0, 0xBF, 0xD1, 0x80, 0xD0, 0xB8, 0xD0, 0xB2, 0xD0, 0xB5, 0xD1, 0x82) AS hello;
```

```response title=Response
┌─hello──┐
│ привет │
└────────┘
```

","20.1","Encoding"
"25.8.1.5101","addDays",0,0,"","","System","
Adds a specified number of days to a date, a date with time or a string-encoded date or date with time.
    ","addDays(datetime, num)","- `datetime` — Date or date with time to add specified number of days to. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of days to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` days. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Add days to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addDays(date, 5) AS add_days_with_date,
    addDays(date_time, 5) AS add_days_with_date_time,
    addDays(date_time_string, 5) AS add_days_with_date_time_string
```

```response title=Response
┌─add_days_with_date─┬─add_days_with_date_time─┬─add_days_with_date_time_string─┐
│         2024-01-06 │     2024-01-06 00:00:00 │        2024-01-06 00:00:00.000 │
└────────────────────┴─────────────────────────┴────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 day)
```

```response title=Response
┌─plus(CAST('1⋯valDay(10))─┐
│               1998-06-26 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","blockSize",0,0,"","","System","","","","","","",""
"25.8.1.5101","isNotNull",0,0,"","","System","
Checks if the argument is not `NULL`.

Also see: operator [`IS NOT NULL`](/sql-reference/operators#is_not_null).
    ","isNotNull(x)","- `x` — A value of non-compound data type. [`Any`](/sql-reference/data-types)
","Returns `1` if `x` is not `NULL`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
CREATE TABLE t_null
(
  x Int32,
  y Nullable(Int32)
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO t_null VALUES (1, NULL), (2, 3);

SELECT x FROM t_null WHERE isNotNull(y);
```

```response title=Response
┌─x─┐
│ 2 │
└───┘
```

","1.1","Null"
"25.8.1.5101","seriesPeriodDetectFFT",0,0,"","","System","
Finds the period of the given time series data using FFT
FFT - Fast Fourier transform (https://en.wikipedia.org/wiki/Fast_Fourier_transform)

**Syntax**

```sql
seriesPeriodDetectFFT(series);
```

**Arguments**

- `series` - An array of numeric values

**Returned value**

- A real value equal to the period of time series
- Returns NAN when number of data points are less than four.

Type: [Float64](../../sql-reference/data-types/float.md).

**Examples**

Query:

```sql
SELECT seriesPeriodDetectFFT([1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6, 1, 4, 6]) AS print_0;
```

Result:

```text
┌───────────print_0──────┐
│                      3 │
└────────────────────────┘
```

```sql
SELECT seriesPeriodDetectFFT(arrayMap(x -> abs((x % 6) - 3), range(1000))) AS print_0;
```

Result:

```text
┌─print_0─┐
│       6 │
└─────────┘
```
","","","","","","Time Series"
"25.8.1.5101","toUTCTimestamp",0,0,"","","System","
Converts a date or date with time value from one time zone to UTC timezone timestamp. This function is mainly included for compatibility with Apache Spark and similar frameworks.
    ","toUTCTimestamp(datetime, time_zone)","- `datetime` — A date or date with time type const value or an expression. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `time_zone` — A String type const value or an expression representing the time zone. [`String`](/sql-reference/data-types/string)
","Returns a date or date with time in UTC timezone. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Convert timezone to UTC**

```sql title=Query
SELECT toUTCTimestamp(toDateTime('2023-03-16'), 'Asia/Shanghai')
```

```response title=Response
┌─toUTCTimestamp(toDateTime('2023-03-16'), 'Asia/Shanghai')─┐
│                                     2023-03-15 16:00:00 │
└─────────────────────────────────────────────────────────┘
```

","23.8","Dates and Times"
"25.8.1.5101","colorSRGBToOKLCH",0,0,"","","System","Converts converts color from sRGB color space to perceptual OKLCH color space.
Takes an optional parameter gamma, that is defaulted at 2.2 in case it is not provided. Dual of colorOKLCHToSRGB","","- `rgb_tuple` — A 3-element tuple of numeric values (e.g. integers in rage [0...255]) - `gamma` — Optional gamma exponent to linearize sRGB before conversion. Defaults to 2.2. ","Returns a 3-element tuple of OKLCH values [`Tuple(Float64, Float64, Float64)`](/sql-reference/data-types/tuple)","","25.7","Other"
"25.8.1.5101","arrayLastIndex",0,0,"","","System","
Returns the index of the last element in the source array for which `func(x[, y1, y2, ... yN])` returns true, otherwise it returns '0'.
","arrayLastIndex(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns the index of the last element of the source array for which `func` is true, otherwise returns `0` [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT arrayLastIndex(x, y -> x=y, ['a', 'b', 'c'], ['a', 'b', 'c']);
```

```response title=Response
3
```

**No match**

```sql title=Query
SELECT arrayLastIndex(x, y -> x=y, ['a', 'b', 'c'], ['d', 'e', 'f']);
```

```response title=Response
0
```

","1.1","Arrays"
"25.8.1.5101","reverse",0,1,"","","System","Reverses the order of the elements in the input array or the characters in the input string.","reverse(arr | str)","- `arr | str` — The source array or string. [`Array(T)`](/sql-reference/data-types/array) or [`String`](/sql-reference/data-types/string)
","Returns an array or string with the order of elements or characters reversed.","**Reverse array**

```sql title=Query
SELECT reverse([1, 2, 3, 4]);
```

```response title=Response
[4, 3, 2, 1]
```

**Reverse string**

```sql title=Query
SELECT reverse('abcd');
```

```response title=Response
'dcba'
```

","1.1","Arrays"
"25.8.1.5101","simpleJSONHas",0,0,"","","System","
Checks whether there is a field named `field_name`.
","simpleJSONHas(json, field_name)","- `json` — The JSON in which the field is searched for. [`String`](/sql-reference/data-types/string)
- `field_name` — The name of the field to search for. [`const String`](/sql-reference/data-types/string)
","Returns `1` if the field exists, `0` otherwise [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
CREATE TABLE jsons
(
    `json` String
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO jsons VALUES ('{""foo"":""true"",""qux"":1}');

SELECT simpleJSONHas(json, 'foo') FROM jsons;
SELECT simpleJSONHas(json, 'bar') FROM jsons;
```

```response title=Response
1
0
```

","21.4","JSON"
"25.8.1.5101","arrayPartialReverseSort",0,0,"","","System","
This function is the same as `arrayReverseSort` but with an additional `limit` argument allowing partial sorting.

:::tip
To retain only the sorted elements use `arrayResize`.
:::
    ","arrayPartialReverseSort([f,] arr [, arr1, ... ,arrN], limit)","- `f(arr[, arr1, ... ,arrN])` — The lambda function to apply to elements of array `x`. [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `arr` — Array to be sorted. [`Array(T)`](/sql-reference/data-types/array)
- `arr1, ... ,arrN` — N additional arrays, in the case when `f` accepts multiple arguments. [`Array(T)`](/sql-reference/data-types/array)
- `limit` — Index value up until which sorting will occur. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns an array of the same size as the original array where elements in the range `[1..limit]` are sorted
in descending order. The remaining elements `(limit..N]` are in an unspecified order.","**simple_int**

```sql title=Query
SELECT arrayPartialReverseSort(2, [5, 9, 1, 3])
```

```response title=Response
[9, 5, 1, 3]
```

**simple_string**

```sql title=Query
SELECT arrayPartialReverseSort(2, ['expenses','lasso','embolism','gladly'])
```

```response title=Response
['lasso','gladly','expenses','embolism']
```

**retain_sorted**

```sql title=Query
SELECT arrayResize(arrayPartialReverseSort(2, [5, 9, 1, 3]), 2)
```

```response title=Response
[9, 5]
```

**lambda_simple**

```sql title=Query
SELECT arrayPartialReverseSort((x) -> -x, 2, [5, 9, 1, 3])
```

```response title=Response
[1, 3, 5, 9]
```

**lambda_complex**

```sql title=Query
SELECT arrayPartialReverseSort((x, y) -> -y, 1, [0, 1, 2], [1, 2, 3]) as res
```

```response title=Response
[0, 1, 2]
```

","23.2","Arrays"
"25.8.1.5101","toHour",0,0,"","","System","
Returns the hour component (0-23) of a `Date` or `DateTime` value.
        ","toHour(datetime)","- `datetime` — Date or date with time to get the hour from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","The hour of the given `Date` or `DateTime` value [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toHour(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toHour(toDateTime('2023-04-21 10:20:30'))─┐
    │                                        10 │
    └───────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","arrayPartialSort",0,0,"","","System","
This function is the same as `arraySort` but with an additional `limit` argument allowing partial sorting.

:::tip
To retain only the sorted elements use `arrayResize`.
:::
    ","arrayPartialSort([f,] arr [, arr1, ... ,arrN], limit)","- `f(arr[, arr1, ... ,arrN])` — The lambda function to apply to elements of array `x`. [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `arr` — Array to be sorted. [`Array(T)`](/sql-reference/data-types/array)
- `arr1, ... ,arrN` — N additional arrays, in the case when `f` accepts multiple arguments. [`Array(T)`](/sql-reference/data-types/array)
- `limit` — Index value up until which sorting will occur. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns an array of the same size as the original array where elements in the range `[1..limit]` are sorted
in ascending order. The remaining elements `(limit..N]` are in an unspecified order.","**simple_int**

```sql title=Query
SELECT arrayPartialSort(2, [5, 9, 1, 3])
```

```response title=Response
[1, 3, 5, 9]
```

**simple_string**

```sql title=Query
SELECT arrayPartialSort(2, ['expenses', 'lasso', 'embolism', 'gladly'])
```

```response title=Response
['embolism', 'expenses', 'gladly', 'lasso']
```

**retain_sorted**

```sql title=Query
SELECT arrayResize(arrayPartialSort(2, [5, 9, 1, 3]), 2)
```

```response title=Response
[1, 3]
```

**lambda_simple**

```sql title=Query
SELECT arrayPartialSort((x) -> -x, 2, [5, 9, 1, 3])
```

```response title=Response
[9, 5, 1, 3]
```

**lambda_complex**

```sql title=Query
SELECT arrayPartialSort((x, y) -> -y, 1, [0, 1, 2], [1, 2, 3]) as res
```

```response title=Response
[2, 1, 0]
```

","23.2","Arrays"
"25.8.1.5101","bitRotateRight",0,0,"","","System","Rotate bits right by a certain number of positions. Bits that fall off wrap around to the left.","bitRotateRight(a, N)","- `a` — A value to rotate. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)
- `N` — The number of positions to rotate right. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns the rotated value with type equal to that of `a`. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT 99 AS a, bin(a), bitRotateRight(a, 2) AS a_rotated, bin(a_rotated);
```

```response title=Response
┌──a─┬─bin(a)───┬─a_rotated─┬─bin(a_rotated)─┐
│ 99 │ 01100011 │       216 │ 11011000       │
└────┴──────────┴───────────┴────────────────┘
```

","1.1","Bit"
"25.8.1.5101","arrayReverseSort",0,0,"","","System","
Sorts the elements of an array in descending order.
If a function `f` is specified, the provided array is sorted according to the result
of the function applied to the elements of the array, and then the sorted array is reversed.
If `f` accepts multiple arguments, the `arrayReverseSort` function is passed several arrays that
the arguments of `func` will correspond to.

If the array to sort contains `-Inf`, `NULL`, `NaN`, or `Inf` they will be sorted in the following order:

1. `-Inf`
2. `Inf`
3. `NaN`
4. `NULL`

`arrayReverseSort` is a [higher-order function](/sql-reference/functions/overview#higher-order-functions).
    ","arrayReverseSort([f,] arr [, arr1, ... ,arrN)","- `f(y1[, y2 ... yN])` — The lambda function to apply to elements of array `x`. - `arr` — An array to be sorted. [`Array(T)`](/sql-reference/data-types/array) - `arr1, ..., yN` — Optional. N additional arrays, in the case when `f` accepts multiple arguments. ","Returns the array `x` sorted in descending order if no lambda function is provided, otherwise
it returns an array sorted according to the logic of the provided lambda function, and then reversed. [`Array(T)`](/sql-reference/data-types/array).","**Example 1**

```sql title=Query
SELECT arrayReverseSort((x, y) -> y, [4, 3, 5], ['a', 'b', 'c']) AS res;
```

```response title=Response
[5,3,4]
```

**Example 2**

```sql title=Query
SELECT arrayReverseSort((x, y) -> -y, [4, 3, 5], [1, 2, 3]) AS res;
```

```response title=Response
[4,3,5]
```

","1.1","Arrays"
"25.8.1.5101","arraySort",0,0,"","","System","
Sorts the elements of the provided array in ascending order.
If a lambda function `f` is specified, sorting order is determined by the result of
the lambda applied to each element of the array.
If the lambda accepts multiple arguments, the `arraySort` function is passed several
arrays that the arguments of `f` will correspond to.

If the array to sort contains `-Inf`, `NULL`, `NaN`, or `Inf` they will be sorted in the following order:

1. `-Inf`
2. `Inf`
3. `NaN`
4. `NULL`

`arraySort` is a [higher-order function](/sql-reference/functions/overview#higher-order-functions).
","arraySort([f,] arr [, arr1, ... ,arrN])","- `f(y1[, y2 ... yN])` — The lambda function to apply to elements of array `x`. - `arr` — An array to be sorted. [`Array(T)`](/sql-reference/data-types/array) - `arr1, ..., yN` — Optional. N additional arrays, in the case when `f` accepts multiple arguments. ","Returns the array `arr` sorted in ascending order if no lambda function is provided, otherwise
it returns an array sorted according to the logic of the provided lambda function. [`Array(T)`](/sql-reference/data-types/array).","**Example 1**

```sql title=Query
SELECT arraySort([1, 3, 3, 0]);
```

```response title=Response
[0,1,3,3]
```

**Example 2**

```sql title=Query
SELECT arraySort(['hello', 'world', '!']);
```

```response title=Response
['!','hello','world']
```

**Example 3**

```sql title=Query
SELECT arraySort([1, nan, 2, NULL, 3, nan, -4, NULL, inf, -inf]);
```

```response title=Response
[-inf,-4,1,2,3,inf,nan,nan,NULL,NULL]
```

","1.1","Arrays"
"25.8.1.5101","bar",0,0,"","","System","","","","","","",""
"25.8.1.5101","searchAny",0,0,"","","System","Searches the needle tokens in the generated tokens from the text by a given tokenizer. Returns true if any needle tokens exists in the text, otherwise false.","","","","","25.7","String Search"
"25.8.1.5101","formatDateTime",0,0,"","","System","
Formats a date or date with time according to the given format string. `format` is a constant expression, so you cannot have multiple formats for a single result column.

`formatDateTime` uses MySQL datetime format style, refer to the [mysql docs](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format).

The opposite operation of this function is [`parseDateTime`](/sql-reference/functions/type-conversion-functions#parsedatetime).

Using replacement fields, you can define a pattern for the resulting string.
The example column in the table below shows formatting result for `2018-01-02 22:33:44`.

**Replacement fields:**

| Placeholder | Description | Example |
|-------------|-------------|---------|
| %a | abbreviated weekday name (Mon-Sun) | Mon |
| %b | abbreviated month name (Jan-Dec) | Jan |
| %c | month as an integer number (01-12) | 01 |
| %C | year divided by 100 and truncated to integer (00-99) | 20 |
| %d | day of the month, zero-padded (01-31) | 02 |
| %D | Short MM/DD/YY date, equivalent to %m/%d/%y | 01/02/18 |
| %e | day of the month, space-padded (1-31) | 2 |
| %f | fractional second | 123456 |
| %F | short YYYY-MM-DD date, equivalent to %Y-%m-%d | 2018-01-02 |
| %g | two-digit year format, aligned to ISO 8601 | 18 |
| %G | four-digit year format for ISO week number | 2018 |
| %h | hour in 12h format (01-12) | 09 |
| %H | hour in 24h format (00-23) | 22 |
| %i | minute (00-59) | 33 |
| %I | hour in 12h format (01-12) | 10 |
| %j | day of the year (001-366) | 002 |
| %k | hour in 24h format (00-23) | 14 |
| %l | hour in 12h format (01-12) | 09 |
| %m | month as an integer number (01-12) | 01 |
| %M | full month name (January-December) | January |
| %n | new-line character | |
| %p | AM or PM designation | PM |
| %Q | Quarter (1-4) | 1 |
| %r | 12-hour HH:MM AM/PM time, equivalent to %h:%i %p | 10:30 PM |
| %R | 24-hour HH:MM time, equivalent to %H:%i | 22:33 |
| %s | second (00-59) | 44 |
| %S | second (00-59) | 44 |
| %t | horizontal-tab character | |
| %T | ISO 8601 time format (HH:MM:SS), equivalent to %H:%i:%S | 22:33:44 |
| %u | ISO 8601 weekday as number with Monday as 1 (1-7) | 2 |
| %V | ISO 8601 week number (01-53) | 01 |
| %w | weekday as a integer number with Sunday as 0 (0-6) | 2 |
| %W | full weekday name (Monday-Sunday) | Monday |
| %y | Year, last two digits (00-99) | 18 |
| %Y | Year | 2018 |
| %z | Time offset from UTC as +HHMM or -HHMM | -0500 |
| %% | a % sign | % |

- In ClickHouse versions earlier than v23.4, `%f` prints a single zero (0) if the formatted value is a Date, Date32 or DateTime (which have no fractional seconds) or a DateTime64 with a precision of 0.
- In ClickHouse versions earlier than v25.1, `%f` prints as many digits as specified by the scale of the DateTime64 instead of fixed 6 digits.
- In ClickHouse versions earlier than v23.4, `%M` prints the minute (00-59) instead of the full month name (January-December).
    ","formatDateTime(datetime, format[, timezone])","- `datetime` — A date or date time to format. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `format` — Format string with replacement fields. [`String`](/sql-reference/data-types/string)
- `timezone` — Optional. Timezone name for the formatted time. [`String`](/sql-reference/data-types/string)
","Returns time and date values according to the determined format. [`String`](/sql-reference/data-types/string)","**Format date with year placeholder**

```sql title=Query
SELECT formatDateTime(toDate('2010-01-04'), '%g')
```

```response title=Response
┌─formatDateTime(toDate('2010-01-04'), '%g')─┐
│ 10                                         │
└────────────────────────────────────────────┘
```

**Format DateTime64 with fractional seconds**

```sql title=Query
SELECT formatDateTime(toDateTime64('2010-01-04 12:34:56.123456', 7), '%f')
```

```response title=Response
┌─formatDateTime(toDateTime64('2010-01-04 12:34:56.123456', 7), '%f')─┐
│ 1234560                                                             │
└─────────────────────────────────────────────────────────────────────┘
```

**Format with timezone**

```sql title=Query
SELECT
    now() AS ts,
    time_zone,
    formatDateTime(ts, '%T', time_zone) AS str_tz_time
FROM system.time_zones
WHERE time_zone LIKE 'Europe%'
LIMIT 10
```

```response title=Response
┌──────────────────ts─┬─time_zone─────────┬─str_tz_time─┐
│ 2023-09-08 19:13:40 │ Europe/Amsterdam  │ 21:13:40    │
│ 2023-09-08 19:13:40 │ Europe/Andorra    │ 21:13:40    │
│ 2023-09-08 19:13:40 │ Europe/Astrakhan  │ 23:13:40    │
│ 2023-09-08 19:13:40 │ Europe/Athens     │ 22:13:40    │
│ 2023-09-08 19:13:40 │ Europe/Belfast    │ 20:13:40    │
│ 2023-09-08 19:13:40 │ Europe/Belgrade   │ 21:13:40    │
│ 2023-09-08 19:13:40 │ Europe/Berlin     │ 21:13:40    │
│ 2023-09-08 19:13:40 │ Europe/Bratislava │ 21:13:40    │
│ 2023-09-08 19:13:40 │ Europe/Brussels   │ 21:13:40    │
│ 2023-09-08 19:13:40 │ Europe/Bucharest  │ 22:13:40    │
└─────────────────────┴───────────────────┴─────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","sipHash128Keyed",0,0,"","","System","
Same as [`sipHash128`](#siphash128) but additionally takes an explicit key argument instead of using a fixed key.

:::tip use sipHash128ReferenceKeyed for new projects
This 128-bit variant differs from the reference implementation and it's weaker.
This version exists because, when it was written, there was no official 128-bit extension for SipHash.
New projects should probably use [`sipHash128ReferenceKeyed`](#sipHash128ReferenceKeyed).
:::
","sipHash128Keyed((k0, k1), [arg1, arg2, ...])","- `(k0, k1)` — A tuple of two UInt64 values representing the key. [`Tuple(UInt64, UInt64)`](/sql-reference/data-types/tuple)
- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","A 128-bit `SipHash` hash value of type [FixedString(16)](../data-types/fixedstring.md). [`FixedString(16)`](/sql-reference/data-types/fixedstring)","**Usage example**

```sql title=Query
SELECT hex(sipHash128Keyed((506097522914230528, 1084818905618843912),'foo', '\x01', 3));
```

```response title=Response
┌─hex(sipHash128Keyed((506097522914230528, 1084818905618843912), 'foo', '', 3))─┐
│ B8467F65C8B4CFD9A5F8BD733917D9BF                                              │
└───────────────────────────────────────────────────────────────────────────────┘
```

","23.2","Hash"
"25.8.1.5101","addMicroseconds",0,0,"","","System","
Adds a specified number of microseconds to a date with time or a string-encoded date with time.
    ","addMicroseconds(datetime, num)","- `datetime` — Date with time to add specified number of microseconds to. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of microseconds to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `date_time` plus `num` microseconds [`DateTime64`](/sql-reference/data-types/datetime64)","**Add microseconds to different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addMicroseconds(date_time, 1000000) AS add_microseconds_with_date_time,
    addMicroseconds(date_time_string, 1000000) AS add_microseconds_with_date_time_string
```

```response title=Response
┌─add_microseconds_with_date_time─┬─add_microseconds_with_date_time_string─┐
│      2024-01-01 00:00:01.000000 │             2024-01-01 00:00:01.000000 │
└─────────────────────────────────┴────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::DateTime, INTERVAL 10 microsecond)
```

```response title=Response
┌─plus(CAST('19⋯osecond(10))─┐
│ 1998-06-16 00:00:00.000010 │
└────────────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","toIntervalQuarter",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiSearchAny",0,0,"","","System","","","","","","",""
"25.8.1.5101","regexpQuoteMeta",0,0,"","","System","
Adds a backslash before these characters with special meaning in regular expressions: `\0`, `\\`, `|`, `(`, `)`, `^`, `$`, `.`, `[`, `]`, `?`, `*`, `+`, `{`, `:`, `-`.
This implementation slightly differs from re2::RE2::QuoteMeta.
It escapes zero byte as `\0` instead of `\x00` and it escapes only required characters.
","regexpQuoteMeta(s)","- `s` — The input string containing characters to be escaped for regex. [`String`](/sql-reference/data-types/string)
","Returns a string with regex special characters escaped. [`String`](/sql-reference/data-types/string)","**Escape regex special characters**

```sql title=Query
SELECT regexpQuoteMeta('Hello. [World]? (Yes)*') AS res
```

```response title=Response
┌─res───────────────────────────┐
│ Hello\. \[World\]\? \(Yes\)\* │
└───────────────────────────────┘
```

","20.1","String"
"25.8.1.5101","pointInEllipses",0,0,"","","System","
Checks whether the point belongs to at least one of the ellipses.
Coordinates are geometric in the Cartesian coordinate system.
    ","pointInEllipses(x, y, x₀, y₀, a₀, b₀,...,xₙ, yₙ, aₙ, bₙ)","- `x, y` — Coordinates of a point on the plane. [`Float64`](/sql-reference/data-types/float)
- `xᵢ, yᵢ` — Coordinates of the center of the i-th ellipsis. [`Float64`](/sql-reference/data-types/float)
- `aᵢ, bᵢ` — Axes of the i-th ellipsis in units of x, y coordinates. [`Float64`](/sql-reference/data-types/float)
","Returns `1` if the point is inside at least one of the ellipses, `0` otherwise [`UInt8`](/sql-reference/data-types/int-uint)","**Basic usage**

```sql title=Query
SELECT pointInEllipses(10., 10., 10., 9.1, 1., 0.9999)
```

```response title=Response
┌─pointInEllipses(10., 10., 10., 9.1, 1., 0.9999)─┐
│                                               1 │
└─────────────────────────────────────────────────┘
```

","1.1","Geo"
"25.8.1.5101","wkb",0,0,"","","System","
    Parses a Well-Known Binary (WKB) representation of a Point geometry and returns it in the internal ClickHouse format.
    ","wkb(geometry)","- `geometry` — The input geometry type to convert into WKB. ","","**first call**

```sql title=Query
CREATE TABLE IF NOT EXISTS geom1 (a Point) ENGINE = Memory();INSERT INTO geom1 VALUES((0, 0));SELECT hex(wkb(a)) FROM geom1;
```

```response title=Response
┌─hex(wkb(a))─-----------------------------------------┐
    │ 010100000000000000000000000000000000003440           │
    └──────────────────────────────────────────────────────┘
```

","25.7","Geo"
"25.8.1.5101","right",0,1,"","","System","
Returns a substring of string `s` with a specified `offset` starting from the right.
","right(s, offset)","- `s` — The string to calculate a substring from. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `offset` — The number of bytes of the offset. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns:
- For positive `offset`, a substring of `s` with `offset` many bytes, starting from the right of the string.
- For negative `offset`, a substring of `s` with `length(s) - |offset|` bytes, starting from the right of the string.
- An empty string if `length` is `0`.
     [`String`](/sql-reference/data-types/string)","**Positive offset**

```sql title=Query
SELECT right('Hello', 3)
```

```response title=Response
llo
```

**Negative offset**

```sql title=Query
SELECT right('Hello', -3)
```

```response title=Response
lo
```

","22.1","String"
"25.8.1.5101","searchAll",0,0,"","","System","Searches the needle tokens in the generated tokens from the text by a given tokenizer. Returns true if all needle tokens exists in the text, otherwise false.","","","","","25.7","String Search"
"25.8.1.5101","arrayResize",0,0,"","","System","Changes the length of the array.","arrayResize(arr, size[, extender])","- `arr` — Array to resize. [`Array(T)`](/sql-reference/data-types/array)
- `size` — 
-The new length of the array.
If `size` is less than the original size of the array, the array is truncated from the right.
If `size` is larger than the initial size of the array, the array is extended to the right with `extender` values or default values for the data type of the array items.
 - `extender` — Value to use for extending the array. Can be `NULL`. ","An array of length `size`. [`Array(T)`](/sql-reference/data-types/array)","**Example 1**

```sql title=Query
SELECT arrayResize([1], 3);
```

```response title=Response
[1,0,0]
```

**Example 2**

```sql title=Query
SELECT arrayResize([1], 3, NULL);
```

```response title=Response
[1,NULL,NULL]
```

","1.1","Arrays"
"25.8.1.5101","IPv6StringToNumOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitmapAndnot",0,0,"","","System","Computes the logical conjunction of two bitmaps and negates the result (AND-NOT).","bitmapAndnot(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns a bitmap containing set bits present in the first bitmap but not in the second [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapAndnot(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5]))) AS res;
```

```response title=Response
┌─res────┐
│ [1, 2] │
└────────┘
```

","20.1","Bitmap"
"25.8.1.5101","bitmapXorCardinality",0,0,"","","System","Returns the cardinality of the XOR (symmetric difference) of two bitmaps.","bitmapXorCardinality(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns the number of set bits in the symmetric difference of the two bitmaps [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapXorCardinality(bitmapBuild([1,2,3]), bitmapBuild([3,4,5])) AS res;
```

```response title=Response
┌─res─┐
│   4 │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","IPv6StringToNumOrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","IPv6NumToString",0,0,"","","System","","","","","","",""
"25.8.1.5101","UUIDNumToString",0,0,"","","System","","","","","","",""
"25.8.1.5101","IPv4StringToNumOrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","IPv4NumToStringClassC",0,0,"","","System","","","","","","",""
"25.8.1.5101","IPv4NumToString",0,0,"","","System","","","","","","",""
"25.8.1.5101","isIPv6String",0,0,"","","System","","","","","","",""
"25.8.1.5101","IPv4CIDRToRange",0,0,"","","System","","","","","","",""
"25.8.1.5101","IPv6CIDRToRange",0,0,"","","System","","","","","","",""
"25.8.1.5101","MACStringToOUI",0,0,"","","System","","","","","","",""
"25.8.1.5101","MACStringToNum",0,0,"","","System","","","","","","",""
"25.8.1.5101","MACNumToString",0,0,"","","System","","","","","","",""
"25.8.1.5101","punycodeDecode",0,0,"","","System","
Returns the UTF8-encoded plaintext of a [Punycode](https://en.wikipedia.org/wiki/Punycode)-encoded string.
If no valid Punycode-encoded string is given, an exception is thrown.
","punycodeDecode(s)","- `s` — Punycode-encoded string. [`String`](/sql-reference/data-types/string)
","Returns the plaintext of the input value. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT punycodeDecode('Mnchen-3ya')
```

```response title=Response
┌─punycodeDecode('Mnchen-3ya')─┐
│ München                      │
└──────────────────────────────┘
```

","24.1","String"
"25.8.1.5101","coalesce",0,1,"","","System","
Returns the leftmost non-`NULL` argument.
    ","coalesce(x[, y, ...])","- `x[, y, ...]` — Any number of parameters of non-compound type. All parameters must be of mutually compatible data types. [`Any`](/sql-reference/data-types)
","Returns the first non-`NULL` argument, otherwise `NULL`, if all arguments are `NULL`. [`Any`](/sql-reference/data-types) or [`NULL`](/sql-reference/syntax#null)","**Usage example**

```sql title=Query
-- Consider a list of contacts that may specify multiple ways to contact a customer.

CREATE TABLE aBook
(
    name String,
    mail Nullable(String),
    phone Nullable(String),
    telegram Nullable(UInt32)
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO aBook VALUES ('client 1', NULL, '123-45-67', 123), ('client 2', NULL, NULL, NULL);

-- The mail and phone fields are of type String, but the telegram field is UInt32 so it needs to be converted to String.

-- Get the first available contact method for the customer from the contact list

SELECT name, coalesce(mail, phone, CAST(telegram,'Nullable(String)')) FROM aBook;
```

```response title=Response
┌─name─────┬─coalesce(mail, phone, CAST(telegram, 'Nullable(String)'))─┐
│ client 1 │ 123-45-67                                                 │
│ client 2 │ ᴺᵁᴸᴸ                                                      │
└──────────┴───────────────────────────────────────────────────────────┘
```

","1.1","Null"
"25.8.1.5101","intHash64",0,0,"","","System","
Calculates a 64-bit hash of an integer.

The hash function is relatively fast (even faster than [`intHash32`](#inthash32)) but not a cryptographic hash function.
","intHash64(int)","- `int` — Integer to hash. [`(U)Int*`](/sql-reference/data-types/int-uint)
","64-bit hash code. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT intHash64(42);
```

```response title=Response
┌────────intHash64(42)─┐
│ 11490350930367293593 │
└──────────────────────┘
```

","1.1","Hash"
"25.8.1.5101","intHash32",0,0,"","","System","
Calculates a 32-bit hash of an integer.

The hash function is relatively fast but not cryptographic hash function.
","intHash32(arg)","- `arg` — Integer to hash. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns the computed 32-bit hash code of the input integer [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT intHash32(42);
```

```response title=Response
┌─intHash32(42)─┐
│    1228623923 │
└───────────────┘
```

","1.1","Hash"
"25.8.1.5101","arrayStringConcat",0,0,"","","System","
Concatenates string representations of values listed in the array with the provided separator, which is an optional parameter set to an empty string by default.
","arrayStringConcat(arr[, separator])","- `arr` — The array to concatenate. [`Array(T)`](/sql-reference/data-types/array)
- `separator` — Optional. Separator string. By default an empty string. [`const String`](/sql-reference/data-types/string)
","Returns the concatenated string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT arrayStringConcat(['12/05/2021', '12:50:00'], ' ') AS DateString;
```

```response title=Response
┌─DateString──────────┐
│ 12/05/2021 12:50:00 │
└─────────────────────┘
```

","1.1","String Splitting"
"25.8.1.5101","splitByNonAlpha",0,0,"","","System","
Splits a string separated by whitespace and punctuation characters into an array of substrings.

:::note
Setting [`splitby_max_substrings_includes_remaining_string`](../../operations/settings/settings.md#splitby_max_substrings_includes_remaining_string) (default: `0`) controls if the remaining string is included in the last element of the result array when argument `max_substrings > 0`.
:::
","splitByNonAlpha(s[, max_substrings])","- `s` — The string to split. [`String`](/sql-reference/data-types/string)
- `max_substrings` — Optional. When `max_substrings > 0`, the returned substrings will be no more than `max_substrings`, otherwise the function will return as many substrings as possible. Default value: `0`. [`Int64`](/sql-reference/data-types/int-uint)
","Returns an array of selected substrings of `s`. [`Array(String)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT splitByNonAlpha('user@domain.com');
```

```response title=Response
['user','domain','com']
```

","21.9","String Splitting"
"25.8.1.5101","parseDateTimeBestEffort",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal128OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","locate",0,1,"","","System","Like function `position` but with arguments `haystack` and `locate` switched. The behavior of this function depends on the ClickHouse version: In versions < v24.3, `locate` was an alias of function `position` and accepted arguments `(haystack, needle[, start_pos])`. In versions >= 24.3,, `locate` is an individual function (for better compatibility with MySQL) and accepts arguments `(needle, haystack[, start_pos])`. The previous behavior can be restored using setting `function_locate_has_mysql_compatible_argument_order = false`.","location(needle, haystack[, start_pos])","- `needle` — Substring to be searched. [`String`](/sql-reference/data-types/string)
- `haystack` — String in which the search is performed. [`String`](/sql-reference/data-types/string)
- `start_pos` — Position (1-based) in `haystack` at which the search starts. [`UInt*`](/sql-reference/data-types/int-uint)
","Starting position in bytes and counting from 1, if the substring was found. 0, if the substring was not found.","**Example**

```sql title=Query
SELECT locate('abcabc', 'ca');
```

```response title=Response
3
```

","18.16","String Search"
"25.8.1.5101","addressToLineWithInlines",0,0,"","","System","
Similar to `addressToLine`, but returns an Array with all inline functions.
As a result of this, it is slower than `addressToLine`.

To enable this introspection function:

- Install the `clickhouse-common-static-dbg` package.
- Set setting [`allow_introspection_functions`](../../operations/settings/settings.md#allow_introspection_functions) to `1`.
    ","addressToLineWithInlines(address_of_binary_instruction)","- `address_of_binary_instruction` — The address of an instruction in a running process. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns an array whose first element is the source code filename and line number delimited by a colon. The second, third, etc. element list inline functions' source code filenames, line numbers and function names. If no debug information could be found, then an array with a single element equal to the name of the binary is returned, otherwise an empty array is returned if the address is not valid. [`Array(String)`](/sql-reference/data-types/array)","**Applying the function to an address**

```sql title=Query
SET allow_introspection_functions=1;
SELECT addressToLineWithInlines(531055181::UInt64);
```

```response title=Response
┌─addressToLineWithInlines(CAST('531055181', 'UInt64'))────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ ['./src/Functions/addressToLineWithInlines.cpp:98','./build_normal_debug/./src/Functions/addressToLineWithInlines.cpp:176:DB::(anonymous namespace)::FunctionAddressToLineWithInlines::implCached(unsigned long) const'] │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

**Applying the function to the whole stack trace**

```sql title=Query
SET allow_introspection_functions=1;

-- The arrayJoin function will split array to rows

SELECT
    ta, addressToLineWithInlines(arrayJoin(trace) AS ta)
FROM system.trace_log
WHERE
    query_id = '5e173544-2020-45de-b645-5deebe2aae54';
```

```response title=Response
┌────────ta─┬─addressToLineWithInlines(arrayJoin(trace))───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ 365497529 │ ['./build_normal_debug/./contrib/libcxx/include/string_view:252']                                                                                                                                                        │
│ 365593602 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:191']                                                                                                                                                                      │
│ 365593866 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:0']                                                                                                                                                                        │
│ 365592528 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:0']                                                                                                                                                                        │
│ 365591003 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:477']                                                                                                                                                                      │
│ 365590479 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:442']                                                                                                                                                                      │
│ 365590600 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:457']                                                                                                                                                                      │
│ 365598941 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:0']                                                                                                                                                                        │
│ 365607098 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:0']                                                                                                                                                                        │
│ 365590571 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:451']                                                                                                                                                                      │
│ 365598941 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:0']                                                                                                                                                                        │
│ 365607098 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:0']                                                                                                                                                                        │
│ 365590571 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:451']                                                                                                                                                                      │
│ 365598941 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:0']                                                                                                                                                                        │
│ 365607098 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:0']                                                                                                                                                                        │
│ 365590571 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:451']                                                                                                                                                                      │
│ 365598941 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:0']                                                                                                                                                                        │
│ 365597289 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:807']                                                                                                                                                                      │
│ 365599840 │ ['./build_normal_debug/./src/Common/Dwarf.cpp:1118']                                                                                                                                                                     │
│ 531058145 │ ['./build_normal_debug/./src/Functions/addressToLineWithInlines.cpp:152']                                                                                                                                                │
│ 531055181 │ ['./src/Functions/addressToLineWithInlines.cpp:98','./build_normal_debug/./src/Functions/addressToLineWithInlines.cpp:176:DB::(anonymous namespace)::FunctionAddressToLineWithInlines::implCached(unsigned long) const'] │
│ 422333613 │ ['./build_normal_debug/./src/Functions/IFunctionAdaptors.h:21']                                                                                                                                                          │
│ 586866022 │ ['./build_normal_debug/./src/Functions/IFunction.cpp:216']                                                                                                                                                               │
│ 586869053 │ ['./build_normal_debug/./src/Functions/IFunction.cpp:264']                                                                                                                                                               │
│ 586873237 │ ['./build_normal_debug/./src/Functions/IFunction.cpp:334']                                                                                                                                                               │
│ 597901620 │ ['./build_normal_debug/./src/Interpreters/ExpressionActions.cpp:601']                                                                                                                                                    │
│ 597898534 │ ['./build_normal_debug/./src/Interpreters/ExpressionActions.cpp:718']                                                                                                                                                    │
│ 630442912 │ ['./build_normal_debug/./src/Processors/Transforms/ExpressionTransform.cpp:23']                                                                                                                                          │
│ 546354050 │ ['./build_normal_debug/./src/Processors/ISimpleTransform.h:38']                                                                                                                                                          │
│ 626026993 │ ['./build_normal_debug/./src/Processors/ISimpleTransform.cpp:89']                                                                                                                                                        │
│ 626294022 │ ['./build_normal_debug/./src/Processors/Executors/ExecutionThreadContext.cpp:45']                                                                                                                                        │
│ 626293730 │ ['./build_normal_debug/./src/Processors/Executors/ExecutionThreadContext.cpp:63']                                                                                                                                        │
│ 626169525 │ ['./build_normal_debug/./src/Processors/Executors/PipelineExecutor.cpp:213']                                                                                                                                             │
│ 626170308 │ ['./build_normal_debug/./src/Processors/Executors/PipelineExecutor.cpp:178']                                                                                                                                             │
│ 626166348 │ ['./build_normal_debug/./src/Processors/Executors/PipelineExecutor.cpp:329']                                                                                                                                             │
│ 626163461 │ ['./build_normal_debug/./src/Processors/Executors/PipelineExecutor.cpp:84']                                                                                                                                              │
│ 626323536 │ ['./build_normal_debug/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:85']                                                                                                                                  │
│ 626323277 │ ['./build_normal_debug/./src/Processors/Executors/PullingAsyncPipelineExecutor.cpp:112']                                                                                                                                 │
│ 626323133 │ ['./build_normal_debug/./contrib/libcxx/include/type_traits:3682']                                                                                                                                                       │
│ 626323041 │ ['./build_normal_debug/./contrib/libcxx/include/tuple:1415']                                                                                                                                                             │
└───────────┴──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","22.2","Introspection"
"25.8.1.5101","seriesDecomposeSTL",0,0,"","","System","
Decomposes a time series using STL [(Seasonal-Trend Decomposition Procedure Based on Loess)](https://www.wessa.net/download/stl.pdf) into a season, a trend and a residual component.

**Syntax**

```sql
seriesDecomposeSTL(series, period);
```

**Arguments**

- `series` - An array of numeric values
- `period` - A positive number

The number of data points in `series` should be at least twice the value of `period`.

**Returned value**

- An array of four arrays where the first array include seasonal components, the second array - trend, the third array - residue component, and the fourth array - baseline(seasonal + trend) component.

Type: [Array](../../sql-reference/data-types/array.md).

**Examples**

Query:

```sql
SELECT seriesDecomposeSTL([10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34], 3) AS print_0;
```

Result:

```text
┌───────────print_0──────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ [[
        -13.529999, -3.1799996, 16.71,      -13.53,     -3.1799996, 16.71,      -13.53,     -3.1799996,
        16.71,      -13.530001, -3.18,      16.710001,  -13.530001, -3.1800003, 16.710001,  -13.530001,
        -3.1800003, 16.710001,  -13.530001, -3.1799994, 16.71,      -13.529999, -3.1799994, 16.709997
    ],
    [
        23.63,     23.63,     23.630003, 23.630001, 23.630001, 23.630001, 23.630001, 23.630001,
        23.630001, 23.630001, 23.630001, 23.63,     23.630001, 23.630001, 23.63,     23.630001,
        23.630001, 23.63,     23.630001, 23.630001, 23.630001, 23.630001, 23.630001, 23.630003
    ],
    [
        0, 0.0000019073486, -0.0000019073486, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.0000019073486, 0,
        0
    ],
    [
        10.1, 20.449999, 40.340004, 10.100001, 20.45, 40.34, 10.100001, 20.45, 40.34, 10.1, 20.45, 40.34,
        10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.1, 20.45, 40.34, 10.100002, 20.45, 40.34
    ]]                                                                                                                   │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```","","","","","","Time Series"
"25.8.1.5101","monthName",0,1,"","","System","
Returns the name of the month as a string from a date or date with time value.
    ","monthName(datetime)","- `datetime` — Date or date with time. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the name of the month. [`String`](/sql-reference/data-types/string)","**Get month name from date**

```sql title=Query
WITH toDateTime('2021-04-14 11:22:33') AS date_value
SELECT monthName(date_value)
```

```response title=Response
┌─monthName(date_value)─┐
│ April                 │
└───────────────────────┘
```

","22.1","Dates and Times"
"25.8.1.5101","version",0,1,"","","System","","","","","","",""
"25.8.1.5101","splitByRegexp",0,0,"","","System","
Splits a string which is separated by the provided regular expression into an array of substrings.
If the provided regular expression is empty, it will split the string into an array of single characters.
If no match is found for the regular expression, the string won't be split.

Empty substrings may be selected when:
- a non-empty regular expression match occurs at the beginning or end of the string
- there are multiple consecutive non-empty regular expression matches
- the original string string is empty while the regular expression is not empty.

:::note
Setting [`splitby_max_substrings_includes_remaining_string`](../../operations/settings/settings.md#splitby_max_substrings_includes_remaining_string) (default: `0`) controls if the remaining string is included in the last element of the result array when argument `max_substrings > 0`.
:::
","splitByRegexp(regexp, s[, max_substrings])","- `regexp` — Regular expression. Constant. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `s` — The string to split. [`String`](/sql-reference/data-types/string)
- `max_substrings` — Optional. When `max_substrings > 0`, the returned substrings will be no more than `max_substrings`, otherwise the function will return as many substrings as possible. Default value: `0`. [`Int64`](/sql-reference/data-types/int-uint)
","Returns an array of the selected substrings of `s`. [`Array(String)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT splitByRegexp('\\d+', 'a12bc23de345f');
```

```response title=Response
┌─splitByRegex⋯c23de345f')─┐
│ ['a12bc23de345f']        │
└──────────────────────────┘
```

**Empty regexp**

```sql title=Query
SELECT splitByRegexp('', 'abcde');
```

```response title=Response
┌─splitByRegexp('', 'abcde')─┐
│ ['a','b','c','d','e']      │
└────────────────────────────┘
```

","21.6","String Splitting"
"25.8.1.5101","__patchPartitionID",0,0,"","","System","
Internal function. Receives the name of a part and a hash of patch part's column names. Returns the name of partition of patch part. The argument must be a correct name of part, the behaviour is undefined otherwise.
        ","","","","","25.5","Other"
"25.8.1.5101","erf",0,0,"","","System","
If `x` is non-negative, then `erf(x/(σ√2))` is the probability that a random variable having a normal distribution with standard deviation `σ` takes the value that is separated from the expected value by more than `x`.
","erf(x)","- `x` — The value for which to compute the error function value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the error function value [`Float*`](/sql-reference/data-types/float)","**Three sigma rule**

```sql title=Query
SELECT erf(3 / sqrt(2))
```

```response title=Response
┌─erf(divide(3, sqrt(2)))─┐
│      0.9973002039367398 │
└─────────────────────────┘
```

","1.1","Mathematical"
"25.8.1.5101","toIntervalSecond",0,0,"","","System","","","","","","",""
"25.8.1.5101","kostikConsistentHash",0,0,"","","System","
An O(1) time and space consistent hash algorithm by Konstantin 'Kostik' Oblakov.
Only efficient with n <= 32768.
","kostikConsistentHash(input, n)","- `input` — An integer key. [`UInt64`](/sql-reference/data-types/int-uint)
- `n` — The number of buckets. [`UInt16`](/sql-reference/data-types/int-uint)
","Returns the computed hash value. [`UInt16`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT kostikConsistentHash(16045690984833335023, 2);
```

```response title=Response
┌─kostikConsistentHash(16045690984833335023, 2)─┐
│                                             1 │
└───────────────────────────────────────────────┘
```

","22.6","Hash"
"25.8.1.5101","proportionsZTest",0,0,"","","System","","","","","","",""
"25.8.1.5101","if",0,1,"","","System","
Performs conditional branching.

- If the condition `cond` evaluates to a non-zero value, the function returns the result of the expression `then`.
- If `cond` evaluates to zero or NULL, the result of the `else` expression is returned.

The setting [`short_circuit_function_evaluation`](/operations/settings/settings#short_circuit_function_evaluation) controls whether short-circuit evaluation is used.

If enabled, the `then` expression is evaluated only on rows where `cond` is true and the `else` expression where `cond` is false.

For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the following query:

```sql
SELECT if(number = 0, 0, intDiv(42, number)) FROM numbers(10)
```

`then` and `else` must be of a similar type.
","if(cond, then, else)","- `cond` — The evaluated condition. [`UInt8`](/sql-reference/data-types/int-uint) or [`Nullable(UInt8)`](/sql-reference/data-types/nullable) or [`NULL`](/sql-reference/syntax#null)
- `then` — The expression returned if `cond` is true. - `else` — The expression returned if `cond` is false or `NULL`. ","The result of either the `then` or `else` expressions, depending on condition `cond`.","**Example usage**

```sql title=Query
SELECT if(1, 2 + 2, 2 + 6) AS res;
```

```response title=Response
┌─res─┐
│   4 │
└─────┘
```

","1.1","Conditional"
"25.8.1.5101","jaroWinklerSimilarity",0,0,"","","System","
Calculates the [Jaro-Winkler similarity](https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance) between two byte strings.
","jaroWinklerSimilarity(s1, s2)","- `s1` — First input string. [`String`](/sql-reference/data-types/string)
- `s2` — Second input string. [`String`](/sql-reference/data-types/string)
","Returns the Jaro-Winkler similarity between the two strings. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT jaroWinklerSimilarity('clickhouse', 'click')
```

```response title=Response
┌─jaroWinklerSimilarity('clickhouse', 'click')─┐
│                           0.8999999999999999 │
└──────────────────────────────────────────────┘
```

","24.1","String"
"25.8.1.5101","stringJaccardIndexUTF8",0,0,"","","System","
Like [`stringJaccardIndex`](#stringJaccardIndex) but for UTF8-encoded strings.
","stringJaccardIndexUTF8(s1, s2)","- `s1` — First input UTF8 string. [`String`](/sql-reference/data-types/string)
- `s2` — Second input UTF8 string. [`String`](/sql-reference/data-types/string)
","Returns the Jaccard similarity index between the two UTF8 strings. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT stringJaccardIndexUTF8('我爱你', '我也爱你')
```

```response title=Response
┌─stringJaccardIndexUTF8('我爱你', '我也爱你')─┐
│                                       0.75 │
└─────────────────────────────────────────────┘
```

","23.11","String"
"25.8.1.5101","stringJaccardIndex",0,0,"","","System","
Calculates the [Jaccard similarity index](https://en.wikipedia.org/wiki/Jaccard_index) between two byte strings.
","stringJaccardIndex(s1, s2)","- `s1` — First input string. [`String`](/sql-reference/data-types/string)
- `s2` — Second input string. [`String`](/sql-reference/data-types/string)
","Returns the Jaccard similarity index between the two strings. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT stringJaccardIndex('clickhouse', 'mouse')
```

```response title=Response
┌─stringJaccardIndex('clickhouse', 'mouse')─┐
│                                       0.4 │
└───────────────────────────────────────────┘
```

","23.11","String"
"25.8.1.5101","damerauLevenshteinDistance",0,0,"","","System","
Calculates the [Damerau-Levenshtein distance](https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance) between two byte strings.
","damerauLevenshteinDistance(s1, s2)","- `s1` — First input string. [`String`](/sql-reference/data-types/string)
- `s2` — Second input string. [`String`](/sql-reference/data-types/string)
","Returns the Damerau-Levenshtein distance between the two strings. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT damerauLevenshteinDistance('clickhouse', 'mouse')
```

```response title=Response
┌─damerauLevenshteinDistance('clickhouse', 'mouse')─┐
│                                                 6 │
└───────────────────────────────────────────────────┘
```

","24.1","String"
"25.8.1.5101","UUIDToNum",0,0,"","","System","
This function accepts a UUID and returns a FixedString(16) as its binary representation, with its format optionally specified by variant (Big-endian by default).
","","","","**uuid**

```sql title=Query
select toUUID(UUIDNumToString(toFixedString('a/<@];!~p{jTj={)', 16))) as uuid, UUIDToNum(uuid) as uuidNum, UUIDToNum(uuid, 2) as uuidMsNum
```

```response title=Response
┌─uuid─────────────────────────────────┬─uuidNum──────────┬─uuidMsNum────────┐
│ 612f3c40-5d3b-217e-707b-6a546a3d7b29 │ a/<@];!~p{jTj={) │ @</a];!~p{jTj={) │
└──────────────────────────────────────┴──────────────────┴──────────────────┘
```

","","UUID"
"25.8.1.5101","editDistanceUTF8",0,0,"","","System","
Calculates the [edit distance](https://en.wikipedia.org/wiki/Edit_distance) between two UTF8 strings.
","editDistanceUTF8(s1, s2)","- `s1` — First input string. [`String`](/sql-reference/data-types/string)
- `s2` — Second input string. [`String`](/sql-reference/data-types/string)
","Returns the edit distance between the two UTF8 strings. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT editDistanceUTF8('我是谁', '我是我')
```

```response title=Response
┌─editDistanceUTF8('我是谁', '我是我')──┐
│                                   1 │
└─────────────────────────────────────┘
```

","24.6","String"
"25.8.1.5101","editDistance",0,0,"","","System","
Calculates the [edit distance](https://en.wikipedia.org/wiki/Edit_distance) between two byte strings.
","editDistance(s1, s2)","- `s1` — First input string. [`String`](/sql-reference/data-types/string)
- `s2` — Second input string. [`String`](/sql-reference/data-types/string)
","Returns the edit distance between the two strings. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT editDistance('clickhouse', 'mouse')
```

```response title=Response
┌─editDistance('clickhouse', 'mouse')─┐
│                                   6 │
└─────────────────────────────────────┘
```

","23.9","String"
"25.8.1.5101","toIPv4OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","byteHammingDistance",0,0,"","","System","
Calculates the [hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between two byte strings.
","byteHammingDistance(s1, s2)","- `s1` — First input string. [`String`](/sql-reference/data-types/string)
- `s2` — Second input string. [`String`](/sql-reference/data-types/string)
","Returns the Hamming distance between the two strings. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT byteHammingDistance('karolin', 'kathrin')
```

```response title=Response
┌─byteHammingDistance('karolin', 'kathrin')─┐
│                                         3 │
└───────────────────────────────────────────┘
```

","23.9","String"
"25.8.1.5101","JSONExtractKeysAndValuesCaseInsensitive",0,0,"","","System","
Parses key-value pairs from JSON using case-insensitive key matching. This function is similar to [`JSONExtractKeysAndValues`](#jsonextractkeysandvalues).
        ","JSONExtractKeysAndValuesCaseInsensitive(json [, indices_or_keys...], value_type)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the object. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
- `value_type` — The ClickHouse data type of the values [`String`](/sql-reference/data-types/string)
","Returns an array of tuples containing key-value pairs. [`Array(Tuple(String, T))`](/sql-reference/data-types/array)","**basic**

```sql title=Query
SELECT JSONExtractKeysAndValuesCaseInsensitive('{""Name"": ""Alice"", ""AGE"": 30}', 'String')
```

```response title=Response
[('Name','Alice'),('AGE','30')]
```

","25.8","JSON"
"25.8.1.5101","bitmapAndCardinality",0,0,"","","System","Returns the cardinality of the logical conjunction (AND) of two bitmaps.","bitmapAndCardinality(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns the number of set bits in the intersection of the two bitmaps [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapAndCardinality(bitmapBuild([1,2,3]), bitmapBuild([3,4,5])) AS res;
```

```response title=Response
┌─res─┐
│   1 │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","JSONExtractCaseInsensitive",0,0,"","","System","
Parses JSON and extracts a value of the given ClickHouse data type using case-insensitive key matching. This function is similar to [`JSONExtract`](#jsonextract).
        ","JSONExtractCaseInsensitive(json [, indices_or_keys...], return_type)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the field. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
- `return_type` — The ClickHouse data type to extract [`String`](/sql-reference/data-types/string)
","Returns the extracted value in the specified data type. [`Any`](/sql-reference/data-types)","**int_type**

```sql title=Query
SELECT JSONExtractCaseInsensitive('{""Number"": 123}', 'number', 'Int32')
```

```response title=Response
123
```

**array_type**

```sql title=Query
SELECT JSONExtractCaseInsensitive('{""List"": [1, 2, 3]}', 'list', 'Array(Int32)')
```

```response title=Response
[1,2,3]
```

","25.8","JSON"
"25.8.1.5101","JSONExtractStringCaseInsensitive",0,0,"","","System","
Parses JSON and extracts a string using case-insensitive key matching. This function is similar to [`JSONExtractString`](#jsonextractstring).
        ","JSONExtractStringCaseInsensitive(json [, indices_or_keys]...)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the field. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns the extracted string value, empty string if not found. [`String`](/sql-reference/data-types/string)","**basic**

```sql title=Query
SELECT JSONExtractStringCaseInsensitive('{""ABC"": ""def""}', 'abc')
```

```response title=Response
def
```

**nested**

```sql title=Query
SELECT JSONExtractStringCaseInsensitive('{""User"": {""Name"": ""John""}}', 'user', 'name')
```

```response title=Response
John
```

","25.8","JSON"
"25.8.1.5101","JSONExtractBoolCaseInsensitive",0,0,"","","System","
Parses JSON and extracts a boolean value using case-insensitive key matching. This function is similar to [`JSONExtractBool`](#jsonextractbool).
        ","JSONExtractBoolCaseInsensitive(json [, indices_or_keys]...)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the field. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns the extracted boolean value (1 for true, 0 for false), 0 if not found. [`UInt8`](/sql-reference/data-types/int-uint)","**basic**

```sql title=Query
SELECT JSONExtractBoolCaseInsensitive('{""IsActive"": true}', 'isactive')
```

```response title=Response
1
```

","25.8","JSON"
"25.8.1.5101","JSONExtractFloatCaseInsensitive",0,0,"","","System","
Parses JSON and extracts a value of Float type using case-insensitive key matching. This function is similar to [`JSONExtractFloat`](#jsonextractfloat).
        ","JSONExtractFloatCaseInsensitive(json [, indices_or_keys]...)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the field. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns the extracted Float value, 0 if not found or cannot be converted. [`Float64`](/sql-reference/data-types/float)","**basic**

```sql title=Query
SELECT JSONExtractFloatCaseInsensitive('{""Price"": 12.34}', 'PRICE')
```

```response title=Response
12.34
```

","25.8","JSON"
"25.8.1.5101","JSONExtractUIntCaseInsensitive",0,0,"","","System","
Parses JSON and extracts a value of UInt type using case-insensitive key matching. This function is similar to [`JSONExtractUInt`](#jsonextractuint).
        ","JSONExtractUIntCaseInsensitive(json [, indices_or_keys]...)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the field. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns the extracted UInt value, 0 if not found or cannot be converted. [`UInt64`](/sql-reference/data-types/int-uint)","**basic**

```sql title=Query
SELECT JSONExtractUIntCaseInsensitive('{""COUNT"": 789}', 'count')
```

```response title=Response
789
```

","25.8","JSON"
"25.8.1.5101","JSONExtractIntCaseInsensitive",0,0,"","","System","
Parses JSON and extracts a value of Int type using case-insensitive key matching. This function is similar to [`JSONExtractInt`](#jsonextractint).
        ","JSONExtractIntCaseInsensitive(json [, indices_or_keys]...)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the field. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns the extracted Int value, 0 if not found or cannot be converted. [`Int64`](/sql-reference/data-types/int-uint)","**basic**

```sql title=Query
SELECT JSONExtractIntCaseInsensitive('{""Value"": 123}', 'value')
```

```response title=Response
123
```

**nested**

```sql title=Query
SELECT JSONExtractIntCaseInsensitive('{""DATA"": {""COUNT"": 42}}', 'data', 'Count')
```

```response title=Response
42
```

","25.8","JSON"
"25.8.1.5101","toFloat32OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitAnd",0,0,"","","System","Performs bitwise AND operation between two values.","bitAnd(a, b)","- `a` — First value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
- `b` — Second value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the result of bitwise operation `a AND b`","**Usage example**

```sql title=Query
CREATE TABLE bits
(
    `a` UInt8,
    `b` UInt8
)
ENGINE = Memory;

INSERT INTO bits VALUES (0, 0), (0, 1), (1, 0), (1, 1);

SELECT
    a,
    b,
    bitAnd(a, b)
FROM bits
```

```response title=Response
┌─a─┬─b─┬─bitAnd(a, b)─┐
│ 0 │ 0 │            0 │
│ 0 │ 1 │            0 │
│ 1 │ 0 │            0 │
│ 1 │ 1 │            1 │
└───┴───┴──────────────┘
```

","1.1","Bit"
"25.8.1.5101","decodeXMLComponent",0,0,"","","System","
Decodes XML entities in a string to their corresponding characters.
","decodeXMLComponent(s)","- `s` — String containing XML entities to decode. [`String`](/sql-reference/data-types/string)
","Returns the provided string with XML entities decoded. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT decodeXMLComponent('&lt;tag&gt;Hello &amp; World&lt;/tag&gt;')
```

```response title=Response
┌─decodeXMLCom⋯;/tag&gt;')─┐
│ <tag>Hello & World</tag> │
└──────────────────────────┘
```

","21.2","String"
"25.8.1.5101","subtractMicroseconds",0,0,"","","System","
Subtracts a specified number of microseconds from a date with time or a string-encoded date with time.
    ","subtractMicroseconds(datetime, num)","- `datetime` — Date with time to subtract specified number of microseconds from. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of microseconds to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` microseconds [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract microseconds from different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractMicroseconds(date_time, 1000000) AS subtract_microseconds_with_date_time,
    subtractMicroseconds(date_time_string, 1000000) AS subtract_microseconds_with_date_time_string
```

```response title=Response
┌─subtract_microseconds_with_date_time─┬─subtract_microseconds_with_date_time_string─┐
│           2023-12-31 23:59:59.000000 │                  2023-12-31 23:59:59.000000 │
└──────────────────────────────────────┴─────────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::DateTime, INTERVAL 10 microsecond)
```

```response title=Response
┌─minus(CAST('1⋯osecond(10))─┐
│ 1998-06-15 23:59:59.999990 │
└────────────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","arraySlice",0,0,"","","System","Returns a slice of the array, with `NULL` elements included.","arraySlice(arr, offset [, length])","- `arr` — Array to slice. [`Array(T)`](/sql-reference/data-types/array)
- `offset` — Indent from the edge of the array. A positive value indicates an offset on the left, and a negative value is an indent on the right. Numbering of the array items begins with `1`. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `length` — The length of the required slice. If you specify a negative value, the function returns an open slice `[offset, array_length - length]`. If you omit the value, the function returns the slice `[offset, the_end_of_array]`. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a slice of the array with `length` elements from the specified `offset` [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arraySlice([1, 2, NULL, 4, 5], 2, 3) AS res;
```

```response title=Response
[2, NULL, 4]
```

","1.1","Arrays"
"25.8.1.5101","currentQueryID",0,0,"","","System","
Returns current Query id.
","currentQueryID()","","","**Example**

```sql title=Query
SELECT currentQueryID();
```

```response title=Response
┌─currentQueryID()─────────────────────┐
│ 1280d0e8-1a08-4524-be6e-77975bb68e7d │
└──────────────────────────────────────┘
```

","","Other"
"25.8.1.5101","hilbertDecode",0,0,"","","System","
Decodes a Hilbert curve index back into a tuple of unsigned integers, representing coordinates in multi-dimensional space.

As with the `hilbertEncode` function, this function has two modes of operation:
- **Simple**
- **Expanded**

**Simple mode**

Accepts up to 2 unsigned integers as arguments and produces a `UInt64` code.

**Expanded mode**

Accepts a range mask (tuple) as a first argument and up to 2 unsigned integers as
other arguments. Each number in the mask configures the number of bits by which
the corresponding argument will be shifted left, effectively scaling the argument
within its range.

Range expansion can be beneficial when you need a similar distribution for
arguments with wildly different ranges (or cardinality) For example: 'IP Address' `(0...FFFFFFFF)`
and 'Country code' `(0...FF)`. As with the encode function, this is limited to 8
numbers at most.
    ","hilbertDecode(tuple_size, code)","- `tuple_size` — Integer value of no more than `2`. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint) or [`Tuple(UInt8/16/32/64)`](/sql-reference/data-types/tuple)
- `code` — `UInt64` code. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns a tuple of the specified size. [`Tuple(UInt64)`](/sql-reference/data-types/tuple)","**Simple mode**

```sql title=Query
SELECT hilbertDecode(2, 31)
```

```response title=Response
[""3"", ""4""]
```

**Single argument**

```sql title=Query
-- Hilbert code for one argument is always the argument itself (as a tuple).
SELECT hilbertDecode(1, 1)
```

```response title=Response
[""1""]
```

**Expanded mode**

```sql title=Query
-- A single argument with a tuple specifying bit shifts will be right-shifted accordingly.
SELECT hilbertDecode(tuple(2), 32768)
```

```response title=Response
[""128""]
```

**Column usage**

```sql title=Query
-- First create the table and insert some data
CREATE TABLE hilbert_numbers(
    n1 UInt32,
    n2 UInt32
)
ENGINE=MergeTree()
ORDER BY n1 SETTINGS index_granularity = 8192, index_granularity_bytes = '10Mi';
insert into hilbert_numbers (*) values(1,2);

-- Use column names instead of constants as function arguments
SELECT untuple(hilbertDecode(2, hilbertEncode(n1, n2))) FROM hilbert_numbers;
```

```response title=Response
1    2
```

","24.6","Encoding"
"25.8.1.5101","arrayJaccardIndex",0,0,"","","System","Returns the [Jaccard index](https://en.wikipedia.org/wiki/Jaccard_index) of two arrays.","arrayJaccardIndex(arr_x, arr_y)","- `arr_x` — First array. [`Array(T)`](/sql-reference/data-types/array)
- `arr_y` — Second array. [`Array(T)`](/sql-reference/data-types/array)
","Returns the Jaccard index of `arr_x` and `arr_y` [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT arrayJaccardIndex([1, 2], [2, 3]) AS res
```

```response title=Response
0.3333333333333333
```

","23.7","Arrays"
"25.8.1.5101","base64Encode",0,0,"","","System","
Encodes a string using [Base64](https://en.wikipedia.org/wiki/Base64) representation, according to RFC 4648.
","base64Encode(plaintext)","- `plaintext` — Plaintext column or constant to decode. [`String`](/sql-reference/data-types/string)
","Returns a string containing the encoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT base64Encode('clickhouse')
```

```response title=Response
┌─base64Encode('clickhouse')─┐
│ Y2xpY2tob3VzZQ==           │
└────────────────────────────┘
```

","18.16","String"
"25.8.1.5101","__actionName",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayReduceInRanges",0,0,"","","System","
Applies an aggregate function to array elements in the given ranges and returns an array containing the result corresponding to each range.
The function will return the same result as multiple `arrayReduce(agg_func, arraySlice(arr1, index, length), ...)`.
","arrayReduceInRanges(agg_f, ranges, arr1 [, arr2, ... ,arrN)]","- `agg_f` — The name of the aggregate function to use. [`String`](/sql-reference/data-types/string)
- `ranges` — The range over which to aggregate. An array of tuples, `(i, r)` containing the index `i` from which to begin from and the range `r` over which to aggregate. [`Array(T)`](/sql-reference/data-types/array) or [`Tuple(T)`](/sql-reference/data-types/tuple)
- `arr1 [, arr2, ... ,arrN)]` — N arrays as arguments to the aggregate function. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array containing results of the aggregate function over the specified ranges [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayReduceInRanges(
    'sum',
    [(1, 5), (2, 3), (3, 4), (4, 4)],
    [1000000, 200000, 30000, 4000, 500, 60, 7]
) AS res
```

```response title=Response
┌─res─────────────────────────┐
│ [1234500,234000,34560,4567] │
└─────────────────────────────┘
```

","20.4","Arrays"
"25.8.1.5101","polygonsDistanceSpherical",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitHammingDistance",0,0,"","","System","
Returns the [Hamming Distance](https://en.wikipedia.org/wiki/Hamming_distance) between the bit representations of two numbers.
Can be used with [`SimHash`](../../sql-reference/functions/hash-functions.md#ngramsimhash) functions for detection of semi-duplicate strings.
The smaller the distance, the more similar the strings are.
","bitHammingDistance(x, y)","- `x` — First number for Hamming distance calculation. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
- `y` — Second number for Hamming distance calculation. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the hamming distance between `x` and `y` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitHammingDistance(111, 121);
```

```response title=Response
┌─bitHammingDistance(111, 121)─┐
│                            3 │
└──────────────────────────────┘
```

","21.1","Bit"
"25.8.1.5101","bitRotateLeft",0,0,"","","System","Rotate bits left by a certain number of positions. Bits that fall off wrap around to the right.","bitRotateLeft(a, N)","- `a` — A value to rotate. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)
- `N` — The number of positions to rotate left. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns the rotated value with type equal to that of `a`. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT 99 AS a, bin(a), bitRotateLeft(a, 2) AS a_rotated, bin(a_rotated);
```

```response title=Response
┌──a─┬─bin(a)───┬─a_rotated─┬─bin(a_rotated)─┐
│ 99 │ 01100011 │       141 │ 10001101       │
└────┴──────────┴───────────┴────────────────┘
```

","1.1","Bit"
"25.8.1.5101","isNaN",0,0,"","","System","Returns `1` if the Float32 and Float64 argument is `NaN`, otherwise returns `0`.","isNaN(x)","- `x` — Argument to evaluate for if it is `NaN`. [`Float*`](/sql-reference/data-types/float)
","`1` if `NaN`, otherwise `0`","**Usage example**

```sql title=Query
SELECT isNaN(NaN)
```

```response title=Response
1
```

","1.1","Arithmetic"
"25.8.1.5101","intDivOrZero",0,0,"","","System","
Same as `intDiv` but returns zero when dividing by zero or when dividing a
minimal negative number by minus one.
    ","intDivOrZero(a, b)","- `a` — Left hand operand. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `b` — Right hand operand. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Result of integer division of a and b, or zero.","**Integer division by zero**

```sql title=Query
SELECT intDivOrZero(1, 0)
```

```response title=Response
0
```

**Dividing a minimal negative number by minus 1**

```sql title=Query
SELECT intDivOrZero(0.05, -1)
```

```response title=Response
0
```

","1.1","Arithmetic"
"25.8.1.5101","__bitSwapLastTwo",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONExtractArrayRawCaseInsensitive",0,0,"","","System","
Returns an array with elements of JSON array, each represented as unparsed string, using case-insensitive key matching. This function is similar to [`JSONExtractArrayRaw`](#jsonextractarrayraw).
        ","JSONExtractArrayRawCaseInsensitive(json [, indices_or_keys]...)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the array. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns an array of raw JSON strings. [`Array(String)`](/sql-reference/data-types/array)","**basic**

```sql title=Query
SELECT JSONExtractArrayRawCaseInsensitive('{""Items"": [1, 2, 3]}', 'ITEMS')
```

```response title=Response
['1','2','3']
```

","25.8","JSON"
"25.8.1.5101","lowCardinalityKeys",0,0,"","","System","","","","","","",""
"25.8.1.5101","timeSlot",0,0,"","","System","
Round the time to the start of a half-an-hour length interval.

:::note
Although this function can take values of the extended types `Date32` and `DateTime64` as an argument,
passing it a time outside the normal range (year 1970 to 2149 for `Date` / 2106 for `DateTime`) will produce wrong results.
:::
    ","timeSlot(time[, time_zone])","- `time` — Time to round to the start of a half-an-hour length interval. [`DateTime`](/sql-reference/data-types/datetime) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `time_zone` — Optional. A String type const value or an expression representing the time zone. [`String`](/sql-reference/data-types/string)
","Returns the time rounded to the start of a half-an-hour length interval. [`DateTime`](/sql-reference/data-types/datetime)","**Round time to half-hour interval**

```sql title=Query
SELECT timeSlot(toDateTime('2000-01-02 03:04:05', 'UTC'))
```

```response title=Response
┌─timeSlot(toDateTime('2000-01-02 03:04:05', 'UTC'))─┐
│                                2000-01-02 03:00:00 │
└────────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","JSONExtractKeysCaseInsensitive",0,0,"","","System","
Parses a JSON string and extracts the keys using case-insensitive key matching to navigate to nested objects. This function is similar to [`JSONExtractKeys`](#jsonextractkeys).
        ","JSONExtractKeysCaseInsensitive(json [, indices_or_keys]...)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the object. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns an array of keys from the JSON object. [`Array(String)`](/sql-reference/data-types/array)","**basic**

```sql title=Query
SELECT JSONExtractKeysCaseInsensitive('{""Name"": ""Alice"", ""AGE"": 30}')
```

```response title=Response
['Name','AGE']
```

**nested**

```sql title=Query
SELECT JSONExtractKeysCaseInsensitive('{""User"": {""name"": ""John"", ""AGE"": 25}}', 'user')
```

```response title=Response
['name','AGE']
```

","25.8","JSON"
"25.8.1.5101","changeMinute",0,0,"","","System","Changes the minute component of a `date or date time`.","changeMinute(date_or_datetime, value);","- `date_or_datetime` — The value to change. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `value` — The new value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a value of the same type as `date_or_datetime` with modified minute component. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Usage example**

```sql title=Query
SELECT changeMinute('2024-01-01 12:30:00'::DateTime, 45)
```

```response title=Response
2024-01-01 12:45:00
```

","24.7","Dates and Times"
"25.8.1.5101","changeDay",0,0,"","","System","Changes the day component of a date or date time.","changeDay(date_or_datetime, value);","- `date_or_datetime` — The value to change. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `value` — The new value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a value of the same type as `date_or_datetime` with modified day component. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Usage example**

```sql title=Query
SELECT changeDay('2024-01-31'::DateTime, 15)
```

```response title=Response
2024-01-15 00:00:00
```

","24.7","Dates and Times"
"25.8.1.5101","changeYear",0,0,"","","System","Changes the year component of a date or date time.","changeYear(date_or_datetime, value);","- `date_or_datetime` — The value to change. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `value` — The new value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a value of the same type as `date_or_datetime` with modified year component. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Usage example**

```sql title=Query
SELECT changeYear('2024-01-01'::DateTime, 2023)
```

```response title=Response
2023-01-01 00:00:00
```

","24.7","Dates and Times"
"25.8.1.5101","bitTestAny",0,0,"","","System","
Returns result of the [logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction) (OR operator) of all bits at the given positions in a number.
Counts right-to-left, starting at 0.

The logical OR between two bits is true if at least one of the input bits is true.
    ","bitTestAny(a, index1[, index2, ... , indexN])","- `a` — An integer value. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)
- `index1, ...` — One or multiple positions of bits. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns the result of the logical disjunction [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example 1**

```sql title=Query
SELECT bitTestAny(43, 0, 2);
```

```response title=Response
┌─bin(43)──┬─bitTestAny(43, 0, 2)─┐
│ 00101011 │                    1 │
└──────────┴──────────────────────┘
```

**Usage example 2**

```sql title=Query
SELECT bitTestAny(43, 4, 2);
```

```response title=Response
┌─bin(43)──┬─bitTestAny(43, 4, 2)─┐
│ 00101011 │                    0 │
└──────────┴──────────────────────┘
```

","1.1","Bit"
"25.8.1.5101","bitOr",0,0,"","","System","Performs bitwise OR operation between two values.","bitOr(a, b)","- `a` — First value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
- `b` — Second value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the result of bitwise operation `a OR b`","**Usage example**

```sql title=Query
CREATE TABLE bits
(
    `a` UInt8,
    `b` UInt8
)
ENGINE = Memory;

INSERT INTO bits VALUES (0, 0), (0, 1), (1, 0), (1, 1);

SELECT
    a,
    b,
    bitOr(a, b)
FROM bits;
```

```response title=Response
┌─a─┬─b─┬─bitOr(a, b)─┐
│ 0 │ 0 │           0 │
│ 0 │ 1 │           1 │
│ 1 │ 0 │           1 │
│ 1 │ 1 │           1 │
└───┴───┴─────────────┘
```

","1.1","Bit"
"25.8.1.5101","showCertificate",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitXor",0,0,"","","System","Performs bitwise exclusive or (XOR) operation between two values.","bitXor(a, b)","- `a` — First value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
- `b` — Second value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the result of bitwise operation `a XOR b`","**Usage example**

```sql title=Query
CREATE TABLE bits
(
    `a` UInt8,
    `b` UInt8
)
ENGINE = Memory;

INSERT INTO bits VALUES (0, 0), (0, 1), (1, 0), (1, 1);

SELECT
    a,
    b,
    bitXor(a, b)
FROM bits;
```

```response title=Response
┌─a─┬─b─┬─bitXor(a, b)─┐
│ 0 │ 0 │            0 │
│ 0 │ 1 │            1 │
│ 1 │ 0 │            1 │
│ 1 │ 1 │            0 │
└───┴───┴──────────────┘
```

","1.1","Bit"
"25.8.1.5101","round",0,1,"","","System","
Rounds a value to a specified number of decimal places `N`.

- If `N > 0`, the function rounds to the right of the decimal point.
- If `N < 0`, the function rounds to the left of the decimal point.
- If `N = 0`, the function rounds to the next integer.

The function returns the nearest number of the specified order.
If the input value has equal distance to two neighboring numbers, the function uses banker's rounding for `Float*` inputs and rounds away from zero for the other number types (`Decimal*`).
","round(x[, N])","- `x` — A number to round. [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal) or [`(U)Int*`](/sql-reference/data-types/int-uint)
- `N` — Optional. The number of decimal places to round to. Defaults to `0`. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a rounded number of the same type as `x`. [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal) or [`(U)Int*`](/sql-reference/data-types/int-uint)","**Float inputs**

```sql title=Query
SELECT number / 2 AS x, round(x) FROM system.numbers LIMIT 3;
```

```response title=Response
┌───x─┬─round(x)─┐
│   0 │        0 │
│ 0.5 │        0 │
│   1 │        1 │
└─────┴──────────┘
```

**Decimal inputs**

```sql title=Query
SELECT cast(number / 2 AS  Decimal(10,4)) AS x, round(x) FROM system.numbers LIMIT 3;
```

```response title=Response
┌───x─┬─round(x)─┐
│   0 │        0 │
│ 0.5 │        1 │
│   1 │        1 │
└─────┴──────────┘
```

","1.1","Rounding"
"25.8.1.5101","hasTokenCaseInsensitiveOrNull",0,1,"","","System","Performs case insensitive lookup of needle in haystack using tokenbf_v1 index. Returns null if needle is ill-formed.","","","","","","String Search"
"25.8.1.5101","hasTokenCaseInsensitive",0,1,"","","System","Performs case insensitive lookup of needle in haystack using tokenbf_v1 index.","","","","","","String Search"
"25.8.1.5101","JSONExtractUInt",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayReduce",0,0,"","","System","
Applies an aggregate function to array elements and returns its result.
The name of the aggregation function is passed as a string in single quotes `'max'`, `'sum'`.
When using parametric aggregate functions, the parameter is indicated after the function name in parentheses `'uniqUpTo(6)'`.
","arrayReduce(agg_f, arr1 [, arr2, ... , arrN)]","- `agg_f` — The name of an aggregate function which should be a constant. [`String`](/sql-reference/data-types/string)
- `arr1 [, arr2, ... , arrN)]` — N arrays corresponding to the arguments of `agg_f`. [`Array(T)`](/sql-reference/data-types/array)
","Returns the result of the aggregate function","**Usage example**

```sql title=Query
SELECT arrayReduce('max', [1, 2, 3]);
```

```response title=Response
┌─arrayReduce('max', [1, 2, 3])─┐
│                             3 │
└───────────────────────────────┘
```

**Example with aggregate function using multiple arguments**

```sql title=Query
--If an aggregate function takes multiple arguments, then this function must be applied to multiple arrays of the same size.

SELECT arrayReduce('maxIf', [3, 5], [1, 0]);
```

```response title=Response
┌─arrayReduce('maxIf', [3, 5], [1, 0])─┐
│                                    3 │
└──────────────────────────────────────┘
```

**Example with a parametric aggregate function**

```sql title=Query
SELECT arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
```

```response title=Response
┌─arrayReduce('uniqUpTo(3)', [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])─┐
│                                                           4 │
└─────────────────────────────────────────────────────────────┘
```

","1.1","Arrays"
"25.8.1.5101","hasAll",0,0,"","","System","
Checks whether one array is a subset of another.

- An empty array is a subset of any array.
- `Null` is processed as a value.
- The order of values in both the arrays does not matter.
","hasAll(set, subset)","- `set` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array)
- `subset` — Array of any type that shares a common supertype with `set` containing elements that should be tested to be a subset of `set`. [`Array(T)`](/sql-reference/data-types/array)
","- `1`, if `set` contains all of the elements from `subset`.
- `0`, otherwise.

Raises a `NO_COMMON_TYPE` exception if the set and subset elements do not share a common supertype.","**Empty arrays**

```sql title=Query
SELECT hasAll([], [])
```

```response title=Response
1
```

**Arrays containing NULL values**

```sql title=Query
SELECT hasAll([1, Null], [Null])
```

```response title=Response
1
```

**Arrays containing values of a different type**

```sql title=Query
SELECT hasAll([1.0, 2, 3, 4], [1, 3])
```

```response title=Response
1
```

**Arrays containing String values**

```sql title=Query
SELECT hasAll(['a', 'b'], ['a'])
```

```response title=Response
1
```

**Arrays without a common type**

```sql title=Query
SELECT hasAll([1], ['a'])
```

```response title=Response
Raises a NO_COMMON_TYPE exception
```

**Array of arrays**

```sql title=Query
SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [3, 5]])
```

```response title=Response
0
```

","1.1","Arrays"
"25.8.1.5101","toIPv6OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toIPv4OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUUIDOrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal128OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal64OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateTime64OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateTimeOrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","runningConcurrency",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateOrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toFloat64OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toFloat32OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt256OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt128OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toISOYear",0,0,"","","System","
Converts a date or date with time to the ISO year number.
    ","toISOYear(datetime)","- `datetime` — The value with date or date with time. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the input value converted to an ISO year number. [`UInt16`](/sql-reference/data-types/int-uint)","**Get ISO year from date values**

```sql title=Query
SELECT
toISOYear(toDate('2024/10/02')) as year1,
toISOYear(toDateTime('2024-10-02 01:30:00')) as year2
```

```response title=Response
┌─week1─┬─week2─┐
│    40 │    40 │
└───────┴───────┘
```

","18.4","Dates and Times"
"25.8.1.5101","toInt64OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt32OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt8OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt256OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt128OrDefault",0,0,"","","System","
Converts a string in the first argument of the function to UInt128 by parsing it.
If it cannot parse the value, returns the default value, which can be provided as the second function argument, and if provided, must be of UInt128 type.
If the default value is not provided in the second argument, it is assumed to be zero.
","","","","**Successful conversion**

```sql title=Query
SELECT toUInt128OrDefault('1', 2::UInt128)
```

```response title=Response
1
```

**Default value**

```sql title=Query
SELECT toUInt128OrDefault('upyachka', 123456789012345678901234567890::UInt128)
```

```response title=Response
123456789012345678901234567890
```

**Implicit default value**

```sql title=Query
SELECT toUInt128OrDefault('upyachka')
```

```response title=Response
0
```

","","Type Conversion"
"25.8.1.5101","hasSubstr",0,0,"","","System","
Checks whether all the elements of array2 appear in a array1 in the same exact order.
Therefore, the function will return `1`, if and only if array1 = prefix + array2 + suffix.

In other words, the functions will check whether all the elements of array2 are contained in array1 like the `hasAll` function.
In addition, it will check that the elements are observed in the same order in both array1 and array2.

- The function will return `1` if array2 is empty.
- `Null` is processed as a value. In other words `hasSubstr([1, 2, NULL, 3, 4], [2,3])` will return `0`. However, `hasSubstr([1, 2, NULL, 3, 4], [2,NULL,3])` will return `1`
- The order of values in both the arrays does matter.

Raises a `NO_COMMON_TYPE` exception if any of the elements of the two arrays do not share a common supertype.
","hasSubstr(arr1, arr2)","- `arr1` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array)
- `arr2` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array)
","Returns `1` if array `arr1` contains array `arr2`. Otherwise, returns `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Both arrays are empty**

```sql title=Query
SELECT hasSubstr([], [])
```

```response title=Response
1
```

**Arrays containing NULL values**

```sql title=Query
SELECT hasSubstr([1, Null], [Null])
```

```response title=Response
1
```

**Arrays containing values of a different type**

```sql title=Query
SELECT hasSubstr([1.0, 2, 3, 4], [1, 3])
```

```response title=Response
0
```

**Arrays containing strings**

```sql title=Query
SELECT hasSubstr(['a', 'b'], ['a'])
```

```response title=Response
1
```

**Arrays with valid ordering**

```sql title=Query
SELECT hasSubstr(['a', 'b' , 'c'], ['a', 'b'])
```

```response title=Response
1
```

**Arrays with invalid ordering**

```sql title=Query
SELECT hasSubstr(['a', 'b' , 'c'], ['a', 'c'])
```

```response title=Response
0
```

**Array of arrays**

```sql title=Query
SELECT hasSubstr([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4]])
```

```response title=Response
1
```

**Arrays without a common type**

```sql title=Query
SELECT hasSubstr([1, 2, NULL, 3, 4], ['a'])
```

```response title=Response
Raises a `NO_COMMON_TYPE` exception
```

","20.6","Arrays"
"25.8.1.5101","__bitBoolMaskAnd",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt64OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt16OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","accurateCastOrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","tryBase32Decode",0,0,"","","System","
Accepts a string and decodes it using [Base32](https://datatracker.ietf.org/doc/html/rfc4648#section-6) encoding scheme.
","tryBase32Decode(encoded)","- `encoded` — String column or constant to decode. If the string is not valid Base32-encoded, returns an empty string in case of error. [`String`](/sql-reference/data-types/string)
","Returns a string containing the decoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT tryBase32Decode('IVXGG33EMVSA====');
```

```response title=Response
┌─tryBase32Decode('IVXGG33EMVSA====')─┐
│ Encoded                             │
└─────────────────────────────────────┘
```

","25.6","String"
"25.8.1.5101","addressToSymbol",0,0,"","","System","
Converts virtual memory address inside the ClickHouse server process to a symbol from ClickHouse's object files.
    ","addressToSymbol(address_of_binary_instruction)","- `address_of_binary_instruction` — Address of instruction in a running process. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns the symbol from ClickHouse object files or an empty string, if the address is not valid. [`String`](/sql-reference/data-types/string)","**Selecting the first string from the `trace_log` system table**

```sql title=Query
SET allow_introspection_functions=1;
SELECT * FROM system.trace_log LIMIT 1 \G;
```

```response title=Response
-- The `trace` field contains the stack trace at the moment of sampling.
Row 1:
──────
event_date:    2019-11-20
event_time:    2019-11-20 16:57:59
revision:      54429
timer_type:    Real
thread_number: 48
query_id:      724028bf-f550-45aa-910d-2af6212b94ac
trace:         [94138803686098,94138815010911,94138815096522,94138815101224,94138815102091,94138814222988,94138806823642,94138814457211,94138806823642,94138814457211,94138806823642,94138806795179,94138806796144,94138753770094,94138753771646,94138753760572,94138852407232,140399185266395,140399178045583]
```

**Getting a symbol for a single address**

```sql title=Query
SET allow_introspection_functions=1;
SELECT addressToSymbol(94138803686098) \G;
```

```response title=Response
Row 1:
──────
addressToSymbol(94138803686098): _ZNK2DB24IAggregateFunctionHelperINS_20AggregateFunctionSumImmNS_24AggregateFunctionSumDataImEEEEE19addBatchSinglePlaceEmPcPPKNS_7IColumnEPNS_5ArenaE
```

**Applying the function to the whole stack trace**

```sql title=Query
SET allow_introspection_functions=1;

-- The arrayMap function allows to process each individual element of the trace array by the addressToSymbols function.
-- The result of this processing is shown in the trace_symbols column of output.

SELECT
    arrayStringConcat(arrayMap(x -> addressToSymbol(x), trace), '\n') AS trace_symbols
FROM system.trace_log
LIMIT 1
\G
```

```response title=Response
Row 1:
──────
trace_symbols: _ZNK2DB24IAggregateFunctionHelperINS_20AggregateFunctionSumImmNS_24AggregateFunctionSumDataImEEEEE19addBatchSinglePlaceEmPcPPKNS_7IColumnEPNS_5ArenaE
_ZNK2DB10Aggregator21executeWithoutKeyImplERPcmPNS0_28AggregateFunctionInstructionEPNS_5ArenaE
_ZN2DB10Aggregator14executeOnBlockESt6vectorIN3COWINS_7IColumnEE13immutable_ptrIS3_EESaIS6_EEmRNS_22AggregatedDataVariantsERS1_IPKS3_SaISC_EERS1_ISE_SaISE_EERb
_ZN2DB10Aggregator14executeOnBlockERKNS_5BlockERNS_22AggregatedDataVariantsERSt6vectorIPKNS_7IColumnESaIS9_EERS6_ISB_SaISB_EERb
_ZN2DB10Aggregator7executeERKSt10shared_ptrINS_17IBlockInputStreamEERNS_22AggregatedDataVariantsE
_ZN2DB27AggregatingBlockInputStream8readImplEv
_ZN2DB17IBlockInputStream4readEv
_ZN2DB26ExpressionBlockInputStream8readImplEv
_ZN2DB17IBlockInputStream4readEv
_ZN2DB26ExpressionBlockInputStream8readImplEv
_ZN2DB17IBlockInputStream4readEv
_ZN2DB28AsynchronousBlockInputStream9calculateEv
_ZNSt17_Function_handlerIFvvEZN2DB28AsynchronousBlockInputStream4nextEvEUlvE_E9_M_invokeERKSt9_Any_data
_ZN14ThreadPoolImplI20ThreadFromGlobalPoolE6workerESt14_List_iteratorIS0_E
_ZZN20ThreadFromGlobalPoolC4IZN14ThreadPoolImplIS_E12scheduleImplIvEET_St8functionIFvvEEiSt8optionalImEEUlvE1_JEEEOS4_DpOT0_ENKUlvE_clEv
_ZN14ThreadPoolImplISt6threadE6workerESt14_List_iteratorIS0_E
execute_native_thread_routine
start_thread
clone
```

","20.1","Introspection"
"25.8.1.5101","toDecimal128OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt16OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","extractURLParameters",0,0,"","","System","","","","","","",""
"25.8.1.5101","lowCardinalityIndices",0,0,"","","System","","","","","","",""
"25.8.1.5101","colorOKLCHToSRGB",0,0,"","","System","Converts color from OKLCH perceptual color space to sRGB color space.
Takes an optional parameter gamma, that is defaulted at 2.2 in case it is not provided. Dual of colorSRGBToOKLCH","","- `OKLCH_tuple` — A 3-element tuple of numeric values representing OKLCH coordinates: L (lightness in [0...1]),
C (chroma >= 0), and H (hue in degrees [0...360]) - `gamma` — Optional gamma exponent for sRGB transfer function. Defaults to 2.2 if omitted. ","Returns a 3-element tuple of sRGB values [`Tuple(Float64, Float64, Float64)`](/sql-reference/data-types/tuple)","","25.7","Other"
"25.8.1.5101","fromModifiedJulianDayOrNull",0,0,"","","System","
Similar to [`fromModifiedJulianDay()`](#fromModifiedJulianDay), but instead of raising exceptions it returns `NULL`.
    ","fromModifiedJulianDayOrNull(day)","- `day` — Modified Julian Day number. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns date in text form for valid `day` argument, otherwise `null`. [`Nullable(String)`](/sql-reference/data-types/nullable)","**Convert Modified Julian Day to date with null handling**

```sql title=Query
SELECT fromModifiedJulianDayOrNull(58849);
SELECT fromModifiedJulianDayOrNull(60000000); -- invalid argument, returns NULL
```

```response title=Response
┌─fromModified⋯Null(58849)─┐
│ 2020-01-01               │
└──────────────────────────┘
┌─fromModified⋯l(60000000)─┐
│ ᴺᵁᴸᴸ                     │
└──────────────────────────┘
```

","21.1","Dates and Times"
"25.8.1.5101","fromModifiedJulianDay",0,0,"","","System","
Converts a [Modified Julian Day](https://en.wikipedia.org/wiki/Julian_day#Variants) number to a [Proleptic Gregorian calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar) date in text form `YYYY-MM-DD`. This function supports day number from `-678941` to `2973483` (which represent 0000-01-01 and 9999-12-31 respectively). It raises an exception if the day number is outside of the supported range.
    ","fromModifiedJulianDay(day)","- `day` — Modified Julian Day number. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns date in text form. [`String`](/sql-reference/data-types/string)","**Convert Modified Julian Day to date**

```sql title=Query
SELECT fromModifiedJulianDay(58849)
```

```response title=Response
┌─fromModifiedJulianDay(58849)─┐
│ 2020-01-01                   │
└──────────────────────────────┘
```

","21.1","Dates and Times"
"25.8.1.5101","toIntervalMonth",0,0,"","","System","","","","","","",""
"25.8.1.5101","fromUTCTimestamp",0,0,"","","System","
Converts a date or date with time value from UTC timezone to a date or date with time value with the specified time zone. This function is mainly included for compatibility with Apache Spark and similar frameworks.
    ","fromUTCTimestamp(datetime, time_zone)","- `datetime` — A date or date with time const value or an expression. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `time_zone` — A String type const value or an expression representing the time zone. [`String`](/sql-reference/data-types/string)
","Returns DateTime/DateTime64 in the specified timezone. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Convert UTC timezone to specified timezone**

```sql title=Query
SELECT fromUTCTimestamp(toDateTime64('2023-03-16 10:00:00', 3), 'Asia/Shanghai')
```

```response title=Response
┌─fromUTCTimestamp(toDateTime64('2023-03-16 10:00:00',3), 'Asia/Shanghai')─┐
│                                                 2023-03-16 18:00:00.000 │
└─────────────────────────────────────────────────────────────────────────┘
```

","22.1","Dates and Times"
"25.8.1.5101","defaultProfiles",0,0,"","","System","","","","","","",""
"25.8.1.5101","toTime64",0,0,"","","System","","","","","","",""
"25.8.1.5101","enabledProfiles",0,0,"","","System","","","","","","",""
"25.8.1.5101","convertCharset",0,0,"","","System","
Returns string `s` converted from the encoding `from` to encoding `to`.
","convertCharset(s, from, to)","- `s` — Input string. [`String`](/sql-reference/data-types/string)
- `from` — Source character encoding. [`String`](/sql-reference/data-types/string)
- `to` — Target character encoding. [`String`](/sql-reference/data-types/string)
","Returns string `s` converted from encoding `from` to encoding `to`. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT convertCharset('Café', 'UTF-8', 'ISO-8859-1');
```

```response title=Response
┌─convertChars⋯SO-8859-1')─┐
│ Caf�                     │
└──────────────────────────┘
```

","1.1","String"
"25.8.1.5101","arrayRandomSample",0,0,"","","System","Returns a subset with `samples`-many random elements of an input array. If `samples` exceeds the size of the input array, the sample size is limited to the size of the array, i.e. all array elements are returned but their order is not guaranteed. The function can handle both flat arrays and nested arrays.","arrayRandomSample(arr, samples)","- `arr` — The input array or multidimensional array from which to sample elements. [`Array(T)`](/sql-reference/data-types/array)
- `samples` — The number of elements to include in the random sample. [`(U)Int*`](/sql-reference/data-types/int-uint)
","An array containing a random sample of elements from the input array [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayRandomSample(['apple', 'banana', 'cherry', 'date'], 2) as res;
```

```response title=Response
['cherry','apple']
```

**Using a multidimensional array**

```sql title=Query
SELECT arrayRandomSample([[1, 2], [3, 4], [5, 6]], 2) as res;
```

```response title=Response
[[3,4],[5,6]]
```

","23.10","Arrays"
"25.8.1.5101","cosh",0,0,"","","System","
Returns the hyperbolic cosine of the argument.
","cosh(x)","- `x` — The angle, in radians. Values from the interval: `-∞ < x < +∞`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns values from the interval: `1 ≤ cosh(x) < +∞` [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT cosh(0)
```

```response title=Response
1
```

","20.12","Mathematical"
"25.8.1.5101","countDigits",0,0,"","","System","","","","","","",""
"25.8.1.5101","getClientHTTPHeader",0,0,"","","System","
Gets the value of an HTTP header.

If there is no such header or the current request is not performed via the HTTP interface, the function returns an empty string.
Certain HTTP headers (e.g., `Authentication` and `X-ClickHouse-*`) are restricted.

The function requires the setting `allow_get_client_http_header` to be enabled.
The setting is not enabled by default for security reasons, because some headers, such as `Cookie`, could contain sensitive info.

HTTP headers are case sensitive for this function.

If the function is used in the context of a distributed query, it returns non-empty result only on the initiator node.
","getClientHTTPHeader(name)","- `name` — The HTTP header name. [`String`](/sql-reference/data-types/string)
","The value of the header [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT getClientHTTPHeader('Content-Type')
```

```response title=Response
application/x-www-form-urlencoded
```

","24.5","Other"
"25.8.1.5101","e",0,0,"","","System","
Returns Euler's constant (e).
","e()","","Returns Euler's constant [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT e();
```

```response title=Response
2.718281828459045
```

","1.1","Mathematical"
"25.8.1.5101","polygonPerimeterCartesian",0,0,"","","System","","","","","","",""
"25.8.1.5101","currentDatabase",0,0,"","","System","","","","","","",""
"25.8.1.5101","currentRoles",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3ExactEdgeLengthKm",0,0,"","","System","","","","","","",""
"25.8.1.5101","positiveModulo",0,1,"","","System","
Calculates the remainder when dividing `x` by `y`. Similar to function
`modulo` except that `positiveModulo` always return non-negative number.
    ","positiveModulo(x, y)","- `x` — The dividend. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `y` — The divisor (modulus). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns the difference between `x` and the nearest integer not greater than
`x` divisible by `y`.","**Usage example**

```sql title=Query
SELECT positiveModulo(-1, 10)
```

```response title=Response
9
```

","22.11","Arithmetic"
"25.8.1.5101","isMergeTreePartCoveredBy",0,1,"","","System","
Function which checks if the part of the first argument is covered by the part of the second argument.
    ","isMergeTreePartCoveredBy(nested_part, covering_part)","- `nested_part` — Name of expected nested part. [`String`](/sql-reference/data-types/string)
- `covering_part` — Name of expected covering part. [`String`](/sql-reference/data-types/string)
","Returns `1` if it covers, `0` otherwise. [`UInt8`](/sql-reference/data-types/int-uint)","**Basic example**

```sql title=Query
WITH 'all_12_25_7_4' AS lhs, 'all_7_100_10_20' AS rhs
SELECT isMergeTreePartCoveredBy(rhs, lhs), isMergeTreePartCoveredBy(lhs, rhs);
```

```response title=Response
┌─isMergeTreePartCoveredBy(rhs, lhs)─┬─isMergeTreePartCoveredBy(lhs, rhs)─┐
│                                  0 │                                  1 │
└────────────────────────────────────┴────────────────────────────────────┘
```

","25.6","Introspection"
"25.8.1.5101","bitmaskToList",0,0,"","","System","
Like bitmaskToArray but returns the powers of two as a comma-separated string.
    ","bitmaskToList(num)","- `num` — An integer value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a string containing comma-separated powers of two. [`String`](/sql-reference/data-types/string)","**Basic example**

```sql title=Query
SELECT bitmaskToList(50) AS powers_list
```

```response title=Response
┌─powers_list───┐
│ 2, 16, 32     │
└───────────────┘
```

","1.1","Encoding"
"25.8.1.5101","bitmaskToArray",0,0,"","","System","
This function decomposes an integer into a sum of powers of two.
The powers of two are returned as an ascendingly ordered array.
    ","bitmaskToArray(num)","- `num` — An integer value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns an array with the ascendingly ordered powers of two which sum up to the input number. [`Array(UInt64)`](/sql-reference/data-types/array)","**Basic example**

```sql title=Query
SELECT bitmaskToArray(50) AS powers_of_two
```

```response title=Response
┌─powers_of_two───┐
│ [2, 16, 32]     │
└─────────────────┘
```

**Single power of two**

```sql title=Query
SELECT bitmaskToArray(8) AS powers_of_two
```

```response title=Response
┌─powers_of_two─┐
│ [8]           │
└───────────────┘
```

","1.1","Encoding"
"25.8.1.5101","bitPositionsToArray",0,0,"","","System","
This function returns the positions (in ascending order) of the 1 bits in the binary representation of an unsigned integer.
Signed input integers are first casted to an unsigned integer.
    ","bitPositionsToArray(arg)","- `arg` — An integer value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns an array with the ascendingly ordered positions of 1 bits in the binary representation of the input. [`Array(UInt64)`](/sql-reference/data-types/array)","**Single bit set**

```sql title=Query
SELECT bitPositionsToArray(toInt8(1)) AS bit_positions
```

```response title=Response
┌─bit_positions─┐
│ [0]           │
└───────────────┘
```

**All bits set**

```sql title=Query
SELECT bitPositionsToArray(toInt8(-1)) AS bit_positions
```

```response title=Response
┌─bit_positions─────────────┐
│ [0, 1, 2, 3, 4, 5, 6, 7]  │
└───────────────────────────┘
```

","21.7","Encoding"
"25.8.1.5101","currentSchemas",0,1,"","","System","
Returns a single-element array with the name of the current database

Requires a boolean parameter, but it is ignored actually. It is required just for compatibility with the implementation of this function in other DB engines.

[example:common]
","","","","**common**

```sql title=Query
SELECT current_schemas(true);
```

```response title=Response
['default']
```

","","Other"
"25.8.1.5101","currentUser",0,0,"","","System","","","","","","",""
"25.8.1.5101","age",0,1,"","","System","
Returns the unit component of the difference between `startdate` and `enddate`.
The difference is calculated using a precision of 1 nanosecond.

For example, the difference between 2021-12-29 and 2022-01-01 is 3 days for the day unit,
0 months for the month unit, and 0 years for the year unit.

For an alternative to age, see function [`timeDiff`](#timeDiff).
    ","age('unit', startdate, enddate, [timezone])","- `unit` — The type of interval for result.

| Unit        | Possible values                          |
|-------------|------------------------------------------|
| nanosecond  | `nanosecond`, `nanoseconds`, `ns`        |
| microsecond | `microsecond`, `microseconds`, `us`, `u` |
| millisecond | `millisecond`, `milliseconds`, `ms`      |
| second      | `second`, `seconds`, `ss`, `s`           |
| minute      | `minute`, `minutes`, `mi`, `n`           |
| hour        | `hour`, `hours`, `hh`, `h`               |
| day         | `day`, `days`, `dd`, `d`                 |
| week        | `week`, `weeks`, `wk`, `ww`              |
| month       | `month`, `months`, `mm`, `m`             |
| quarter     | `quarter`, `quarters`, `qq`, `q`         |
| year        | `year`, `years`, `yyyy`, `yy`            |
 - `startdate` — The first time value to subtract (the subtrahend). [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `enddate` — The second time value to subtract from (the minuend). [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone name. If specified, it is applied to both startdate and enddate. If not specified, timezones of startdate and enddate are used. If they are not the same, the result is unspecified. [`String`](/sql-reference/data-types/string)
","Returns the difference between enddate and startdate expressed in unit. [`Int32`](/sql-reference/data-types/int-uint)","**Calculate age in hours**

```sql title=Query
SELECT age('hour', toDateTime('2018-01-01 22:30:00'), toDateTime('2018-01-02 23:00:00'))
```

```response title=Response
┌─age('hour', toDateTime('2018-01-01 22:30:00'), toDateTime('2018-01-02 23:00:00'))─┐
│                                                                                24 │
└───────────────────────────────────────────────────────────────────────────────────┘
```

**Calculate age in different units**

```sql title=Query
SELECT
    toDate('2022-01-01') AS e,
    toDate('2021-12-29') AS s,
    age('day', s, e) AS day_age,
    age('month', s, e) AS month_age,
    age('year', s, e) AS year_age
```

```response title=Response
┌──────────e─┬──────────s─┬─day_age─┬─month_age─┬─year_age─┐
│ 2022-01-01 │ 2021-12-29 │       3 │         0 │        0 │
└────────────┴────────────┴─────────┴───────────┴──────────┘
```

","23.1","Dates and Times"
"25.8.1.5101","cos",0,1,"","","System","
Returns the cosine of the argument.
","cos(x)","- `x` — The angle in radians. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the cosine of `x`. [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT cos(0);
```

```response title=Response
1
```

","1.1","Mathematical"
"25.8.1.5101","stringToH3",0,0,"","","System","","","","","","",""
"25.8.1.5101","dateName",0,1,"","","System","
Returns the specified part of the date.

Possible values:
- 'year'
- 'quarter'
- 'month'
- 'week'
- 'dayofyear'
- 'day'
- 'weekday'
- 'hour'
- 'minute'
- 'second'
    ","dateName(date_part, date[, timezone])","- `date_part` — The part of the date that you want to extract. [`String`](/sql-reference/data-types/string)
- `datetime` — A date or date with time value. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone. [`String`](/sql-reference/data-types/string)
","Returns the specified part of date. [`String`](/sql-reference/data-types/string)","**Extract different date parts**

```sql title=Query
WITH toDateTime('2021-04-14 11:22:33') AS date_value
SELECT
    dateName('year', date_value),
    dateName('month', date_value),
    dateName('day', date_value)
```

```response title=Response
┌─dateName('year', date_value)─┬─dateName('month', date_value)─┬─dateName('day', date_value)─┐
│ 2021                         │ April                         │ 14                          │
└──────────────────────────────┴───────────────────────────────┴─────────────────────────────┘
```

","21.7","Dates and Times"
"25.8.1.5101","assumeNotNull",0,0,"","","System","
Returns the corresponding non-`Nullable` value for a value of type [`Nullable`](../data-types/nullable.md).
If the original value is `NULL`, an arbitrary result can be returned.

See also: functions [`ifNull`](#ifNull) and [`coalesce`](#coalesce).
    ","assumeNotNull(x)","- `x` — The original value of any nullable type. [`Nullable(T)`](/sql-reference/data-types/nullable)
","Returns the non-nullable value, if the original value was not `NULL`, otherwise an arbitrary value, if the input value is `NULL`. [`Any`](/sql-reference/data-types)","**Usage example**

```sql title=Query
CREATE TABLE t_null (x Int8, y Nullable(Int8))
ENGINE=MergeTree()
ORDER BY x;

INSERT INTO t_null VALUES (1, NULL), (2, 3);

SELECT assumeNotNull(y) FROM table;
SELECT toTypeName(assumeNotNull(y)) FROM t_null;
```

```response title=Response
┌─assumeNotNull(y)─┐
│                0 │
│                3 │
└──────────────────┘
┌─toTypeName(assumeNotNull(y))─┐
│ Int8                         │
│ Int8                         │
└──────────────────────────────┘
```

","1.1","Null"
"25.8.1.5101","changeSecond",0,0,"","","System","Changes the second component of a date or date time.","changeSecond(date_or_datetime, value);","- `date_or_datetime` — The value to change. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `value` — The new value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a value of the same type as `date_or_datetime` with modified seconds component. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Usage example**

```sql title=Query
SELECT changeSecond('2024-01-01 12:30:45'::DateTime, 15)
```

```response title=Response
2024-01-01 12:30:15
```

","24.7","Dates and Times"
"25.8.1.5101","dateTime64ToSnowflakeID",0,0,"","","System","Converts a [DateTime64](../data-types/datetime64.md) value to the first [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) at the giving time.","dateTime64ToSnowflakeID(value[, epoch])","- `value` — Date with time. [`DateTime64`](/sql-reference/data-types/datetime64)
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. [`UInt*`](/sql-reference/data-types/int-uint)
","Input value converted to [`UInt64`](/sql-reference/data-types/int-uint)","**simple**

```sql title=Query
SELECT dateTime64ToSnowflakeID(toDateTime64('2021-08-15 18:57:56', 3, 'Asia/Shanghai'))
```

```response title=Response
6832626394434895872
```

","24.6","UUID"
"25.8.1.5101","xxHash32",0,0,"","","System","
Calculates a [xxHash](http://cyan4973.github.io/xxHash/) from a string.

For the 64-bit version see [`xxHash64`](#xxHash64)
","xxHash32(arg)","- `arg` — Input string to hash. [`String`](/sql-reference/data-types/string)
","Returns the computed 32-bit hash of the input string. [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT xxHash32('Hello, world!');
```

```response title=Response
┌─xxHash32('Hello, world!')─┐
│                 834093149 │
└───────────────────────────┘
```

","20.1","Hash"
"25.8.1.5101","dateTimeToSnowflakeID",0,0,"","","System","Converts a [DateTime](../data-types/datetime.md) value to the first [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) at the giving time.","dateTimeToSnowflakeID(value[, epoch])","- `value` — Date with time. [`DateTime`](/sql-reference/data-types/datetime)
- `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. [`UInt*`](/sql-reference/data-types/int-uint)
","Input value converted to [`UInt64`](/sql-reference/data-types/int-uint)","**simple**

```sql title=Query
SELECT dateTimeToSnowflakeID(toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai'))
```

```response title=Response
6832626392367104000
```

","24.6","UUID"
"25.8.1.5101","neighbor",0,0,"","","System","","","","","","",""
"25.8.1.5101","sipHash64Keyed",0,0,"","","System","
Like [`sipHash64`](#siphash64) but additionally takes an explicit key argument instead of using a fixed key.
","sipHash64Keyed((k0, k1), arg1[,arg2, ...])","- `(k0, k1)` — A tuple of two values representing the key. [`Tuple(UInt64, UInt64)`](/sql-reference/data-types/tuple)
- `arg1[,arg2, ...]` — A variable number of input arguments. [`Any`](/sql-reference/data-types)
","Returns the computed hash of the input values. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT sipHash64Keyed((506097522914230528, 1084818905618843912), array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;
```

```response title=Response
┌─────────────SipHash─┬─type───┐
│ 8017656310194184311 │ UInt64 │
└─────────────────────┴────────┘
```

","23.2","Hash"
"25.8.1.5101","extractAll",0,0,"","","System","","","","","","",""
"25.8.1.5101","__bitWrapperFunc",0,0,"","","System","","","","","","",""
"25.8.1.5101","lemmatize",0,0,"","","System","","","","","","",""
"25.8.1.5101","dateTrunc",0,0,"","","System","
Truncates a date and time value to the specified part of the date.
    ","dateTrunc(unit, datetime[, timezone])","- `unit` — 
The type of interval to truncate the result. `unit` argument is case-insensitive.
| Unit         | Compatibility                   |
|--------------|---------------------------------|
| `nanosecond` | Compatible only with DateTime64 |
| `microsecond`| Compatible only with DateTime64 |
| `millisecond`| Compatible only with DateTime64 |
| `second`     |                                 |
| `minute`     |                                 |
| `hour`       |                                 |
| `day`        |                                 |
| `week`       |                                 |
| `month`      |                                 |
| `quarter`    |                                 |
| `year`       |                                 |
 [`String`](/sql-reference/data-types/string)
- `datetime` — Date and time. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone name for the returned datetime. If not specified, the function uses the timezone of the `datetime` parameter. [`String`](/sql-reference/data-types/string)
","Returns the truncated date and time value.

| Unit Argument               | `datetime` Argument                   | Return Type                                                                            |
|-----------------------------|---------------------------------------|----------------------------------------------------------------------------------------|
| Year, Quarter, Month, Week  | `Date32` or `DateTime64` or `Date` or `DateTime` | [`Date32`](../data-types/date32.md) or [`Date`](../data-types/date.md)                 |
| Day, Hour, Minute, Second   | `Date32`, `DateTime64`, `Date`, or `DateTime` | [`DateTime64`](../data-types/datetime64.md) or [`DateTime`](../data-types/datetime.md) |
| Millisecond, Microsecond,   | Any                                   | [`DateTime64`](../data-types/datetime64.md)                                            |
| Nanosecond                  |                                       | with scale 3, 6, or 9                                                                  |","**Truncate without timezone**

```sql title=Query
SELECT now(), dateTrunc('hour', now());
```

```response title=Response
┌───────────────now()─┬─dateTrunc('hour', now())──┐
│ 2020-09-28 10:40:45 │       2020-09-28 10:00:00 │
└─────────────────────┴───────────────────────────┘
```

**Truncate with specified timezone**

```sql title=Query
SELECT now(), dateTrunc('hour', now(), 'Asia/Istanbul');
```

```response title=Response
┌───────────────now()─┬─dateTrunc('hour', now(), 'Asia/Istanbul')──┐
│ 2020-09-28 10:46:26 │                        2020-09-28 13:00:00 │
└─────────────────────┴────────────────────────────────────────────┘
```

","20.8","Dates and Times"
"25.8.1.5101","toNullable",0,0,"","","System","
Converts the provided argument type to `Nullable`.
    ","toNullable(x)","- `x` — A value of any non-compound type. [`Any`](/sql-reference/data-types)
","Returns the input value but of `Nullable` type. [`Nullable(Any)`](/sql-reference/data-types/nullable)","**Usage example**

```sql title=Query
SELECT toTypeName(10), toTypeName(toNullable(10));
```

```response title=Response
┌─toTypeName(10)─┬─toTypeName(toNullable(10))─┐
│ UInt8          │ Nullable(UInt8)            │
└────────────────┴────────────────────────────┘
```

","1.1","Null"
"25.8.1.5101","formatReadableSize",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt256OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt32",0,0,"","","System","","","","","","",""
"25.8.1.5101","decodeHTMLComponent",0,0,"","","System","
Decodes HTML entities in a string to their corresponding characters.
","decodeHTMLComponent(s)","- `s` — String containing HTML entities to decode. [`String`](/sql-reference/data-types/string)
","Returns the string with HTML entities decoded. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT decodeHTMLComponent('&lt;div&gt;Hello &amp; &quot;World&quot;&lt;/div&gt;')
```

```response title=Response
┌─decodeHTMLComponent('&lt;div&gt;Hello &amp; &quot;World&quot;&lt;/div&gt;')─┐
│ <div>Hello & ""World""</div>                                                  │
└─────────────────────────────────────────────────────────────────────────────┘
```

","23.9","String"
"25.8.1.5101","numericIndexedVectorShortDebugString",0,0,"","","System","Returns internal information of the NumericIndexedVector in a json format. This function is primarily used for debugging purposes.","numericIndexedVectorShortDebugString(numericIndexedVector)","- `numericIndexedVector` — A NumericIndexedVector object. ","String","****

```sql title=Query
SELECT numericIndexedVectorShortDebugString(numericIndexedVectorBuild(mapFromArrays([1, 2, 3], [10, 20, 30]))) AS res\G;
```

```response title=Response
Row 1:
──────
res: {""vector_type"":""BSI"",""index_type"":""char8_t"",""value_type"":""char8_t"",""integer_bit_num"":8,""fraction_bit_num"":0,""zero_indexes_info"":{""cardinality"":""0""},""non_zero_indexes_info"":{""total_cardinality"":""3"",""all_value_sum"":60,""number_of_bitmaps"":""8"",""bitmap_info"":{""cardinality"":{""0"":""0"",""1"":""2"",""2"":""2"",""3"":""2"",""4"":""2"",""5"":""0"",""6"":""0"",""7"":""0""}}}}
```

","25.7","Arithmetic"
"25.8.1.5101","uniqThetaNot",0,0,"","","System","
Two uniqThetaSketch objects to do a_not_b calculation(set operation ×), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
select finalizeAggregation(uniqThetaNot(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

```response title=Response

```

","","Other"
"25.8.1.5101","numericIndexedVectorCardinality",0,0,"","","System","Returns the cardinality (number of unique indexes) of the NumericIndexedVector.","numericIndexedVectorCardinality(numericIndexedVector)","- `numericIndexedVector` — A NumericIndexedVector object. ","Numeric value which type is UInt","****

```sql title=Query
SELECT numericIndexedVectorCardinality(numericIndexedVectorBuild(mapFromArrays([1, 2, 3], [10, 20, 30]))) AS res;
```

```response title=Response
┌─res─┐
│  3  │
└─────┘
```

","25.7","Arithmetic"
"25.8.1.5101","positionCaseInsensitive",0,0,"","","System","","","","","","",""
"25.8.1.5101","numericIndexedVectorGetValue",0,0,"","","System","Retrieves the value corresponding to a specified index.","numericIndexedVectorGetValue(numericIndexedVector, index)","- `numericIndexedVector` — A NumericIndexedVector object. - `index` — The index for which the value is to be retrieved. ","A Numeric value with the same type as the value type of NumericIndexedVector.","****

```sql title=Query
SELECT numericIndexedVectorGetValue(numericIndexedVectorBuild(mapFromArrays([1, 2, 3], [10, 20, 30])), 3) AS res;
```

```response title=Response
┌─res─┐
│  30 │
└─────┘
```

","25.7","Arithmetic"
"25.8.1.5101","extractTextFromHTML",0,0,"","","System","
Extracts text content from HTML or XHTML.

This function removes HTML tags, comments, and script/style elements, leaving only the text content. It handles:
- Removal of all HTML/XML tags
- Removal of comments (`<!-- -->`)
- Removal of script and style elements with their content
- Processing of CDATA sections (copied verbatim)
- Proper whitespace handling and normalization

Note: HTML entities are not decoded and should be processed with a separate function if needed.
","extractTextFromHTML(html)","- `html` — String containing HTML content to extract text from. [`String`](/sql-reference/data-types/string)
","Returns the extracted text content with normalized whitespace. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT extractTextFromHTML('
<html>
    <head><title>Page Title</title></head>
    <body>
        <p>Hello <b>World</b>!</p>
        <script>alert(""test"");</script>
        <!-- comment -->
    </body>
</html>
');
```

```response title=Response
┌─extractTextFromHTML('<html><head>...')─┐
│ Page Title Hello World!                │
└────────────────────────────────────────┘
```

","21.3","String"
"25.8.1.5101","L1Norm",0,0,"","","System","
Calculates the sum of absolute values of a vector.
    ","L1Norm(vector)","- `vector` — Vector or tuple of numeric values. [`Array(T)`](/sql-reference/data-types/array) or [`Tuple(T)`](/sql-reference/data-types/tuple)
","Returns the L1-norm or [taxicab geometry](https://en.wikipedia.org/wiki/Taxicab_geometry) distance. [`UInt*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)","**Basic usage**

```sql title=Query
SELECT L1Norm((1, 2))
```

```response title=Response
┌─L1Norm((1, 2))─┐
│              3 │
└────────────────┘
```

","21.11","Distance"
"25.8.1.5101","numericIndexedVectorPointwiseGreaterEqual",0,0,"","","System","Performs pointwise comparison between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant. The result is a NumericIndexedVector containing the indices where the first vector’s value is greater than or equal to the second vector’s value, with all corresponding value set to 1.","numericIndexedVectorPointwiseGreaterEqual(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toFloat64(x), [10, 20, 50]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toFloat64(x), [20, 40, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseGreaterEqual(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseGreaterEqual(vec1, 20)) AS res2;
```

```response title=Response
┌─res1──────────┬─res2──────┐
│ {1:1,2:1,3:1} │ {2:1,3:1} │
└───────────────┴───────────┘
```

","25.7","Arithmetic"
"25.8.1.5101","numericIndexedVectorPointwiseGreater",0,0,"","","System","Performs pointwise comparison between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant. The result is a NumericIndexedVector containing the indices where the first vector’s value is greater than the second vector’s value, with all corresponding value set to 1.","numericIndexedVectorPointwiseGreater(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toFloat64(x), [10, 20, 50]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toFloat64(x), [20, 40, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseGreater(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseGreater(vec1, 20)) AS res2;
```

```response title=Response
┌─res1──────┬─res2──┐
│ {1:1,3:1} │ {3:1} │
└───────────┴───────┘
```

","25.7","Arithmetic"
"25.8.1.5101","timeSeriesRange",0,0,"","","System","
        Returns a range of timestamps [start_timestamp, start_timestamp + step, start_timestamp + 2 * step, ..., end_timestamp].
        ","timeSeriesRange(start_timestamp, end_timestamp, step)","- `start_timestamp` — Start of the range. [`DateTime64`](/sql-reference/data-types/datetime64) or [`DateTime`](/sql-reference/data-types/datetime) or [`UInt32`](/sql-reference/data-types/int-uint)
- `end_timestamp` — End of the range. [`DateTime64`](/sql-reference/data-types/datetime64) or [`DateTime`](/sql-reference/data-types/datetime) or [`UInt32`](/sql-reference/data-types/int-uint)
- `step` — Step of the range in seconds [`Decimal64`](/sql-reference/data-types/decimal) or [`Decimal32`](/sql-reference/data-types/decimal) or [`UInt64`](/sql-reference/data-types/int-uint) or [`UInt32`](/sql-reference/data-types/int-uint)
","Returns a range of timestamps [`Array(DateTime64)`](/sql-reference/data-types/array)","**Example**

```sql title=Query
SELECT timeSeriesRange('2025-06-01 00:00:00'::DateTime64(3), '2025-06-01 00:01:00'::DateTime64(3), 30)
```

```response title=Response
['2025-06-01 00:00:00.000', '2025-06-01 00:00:30.000', '2025-06-01 00:01:00.000']
```

","25.8","Time Series"
"25.8.1.5101","numericIndexedVectorPointwiseLess",0,0,"","","System","Performs pointwise comparison between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant. The result is a NumericIndexedVector containing the indices where the first vector’s value is less than the second vector’s value, with all corresponding value set to 1.","numericIndexedVectorPointwiseLess(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toFloat64(x), [10, 20, 30]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toFloat64(x), [20, 40, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseLess(vec1, 20)) AS res2;
```

```response title=Response
┌─res1──────┬─res2──┐
│ {3:1,4:1} │ {1:1} │
└───────────┴───────┘
```

","25.7","Arithmetic"
"25.8.1.5101","h3HexAreaM2",0,0,"","","System","
Returns average hexagon area in square meters at the given [H3](#h3-index) resolution.
    ","h3HexAreaM2(resolution)","- `resolution` — Index resolution with range `[0, 15]`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the average area of an H3 hexagon in square meters for the given resolution. [`Float64`](/sql-reference/data-types/float)","**Get hexagon area at resolution 13**

```sql title=Query
SELECT h3HexAreaM2(13) AS area
```

```response title=Response
┌─area─┐
│ 43.9 │
└──────┘
```

","20.3","Geo"
"25.8.1.5101","toYYYYMMDDhhmmss",0,0,"","","System","
Converts a date or date with time to a `UInt64` number containing the year and month number (YYYY * 10000000000 + MM * 100000000 + DD * 1000000 + hh * 10000 + mm * 100 + ss).
Accepts a second optional timezone argument. If provided, the timezone must be a string constant.
    ","toYYYYMMDDhhmmss(datetime[, timezone])","- `datetime` — Date or date with time to convert. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone for the conversion. If provided, the timezone must be a string constant. [`String`](/sql-reference/data-types/string)
","Returns a `UInt64` number containing the year, month, day, hour, minute and second (YYYY * 10000000000 + MM * 100000000 + DD * 1000000 + hh * 10000 + mm * 100 + ss). [`UInt64`](/sql-reference/data-types/int-uint)","**Convert current date and time to YYYYMMDDhhmmss format**

```sql title=Query
SELECT toYYYYMMDDhhmmss(now(), 'US/Eastern')
```

```response title=Response
┌─toYYYYMMDDhhmmss(now(), 'US/Eastern')─┐
│                        20230302112209 │
└───────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","h3NumHexagons",0,0,"","","System","","","","","","",""
"25.8.1.5101","numericIndexedVectorPointwiseEqual",0,0,"","","System","Performs pointwise comparison between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant. The result is a NumericIndexedVector containing the indices where the values are equal, with all corresponding value set to 1.","numericIndexedVectorPointwiseEqual(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toFloat64(x), [10, 20, 30]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toFloat64(x), [20, 20, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseEqual(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseEqual(vec1, 20)) AS res2;
```

```response title=Response
┌─res1──┬─res2──┐
│ {2:1} │ {2:1} │
└───────┴───────┘
```

","25.7","Arithmetic"
"25.8.1.5101","JSONExtractKeysAndValues",0,0,"","","System","","","","","","",""
"25.8.1.5101","replicate",0,0,"","","System","","","","","","",""
"25.8.1.5101","extractKeyValuePairs",0,0,"","","System","Extracts key-value pairs from any string. The string does not need to be 100% structured in a key value pair format;

            It can contain noise (e.g. log files). The key-value pair format to be interpreted should be specified via function arguments.

            A key-value pair consists of a key followed by a `key_value_delimiter` and a value. Quoted keys and values are also supported. Key value pairs must be separated by pair delimiters.

            **Syntax**
            ```sql
            extractKeyValuePairs(data, [key_value_delimiter], [pair_delimiter], [quoting_character])
            ```

            **Arguments**
            - `data` - String to extract key-value pairs from. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `key_value_delimiter` - Character to be used as delimiter between the key and the value. Defaults to `:`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `pair_delimiters` - Set of character to be used as delimiters between pairs. Defaults to `\space`, `,` and `;`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `quoting_character` - Character to be used as quoting character. Defaults to `""`. [String](../../sql-reference/data-types/string.md) or [FixedString](../../sql-reference/data-types/fixedstring.md).
            - `unexpected_quoting_character_strategy` - Strategy to handle quoting characters in unexpected places during `read_key` and `read_value` phase. Possible values: `invalid`, `accept` and `promote`. Invalid will discard key/value and transition back to `WAITING_KEY` state. Accept will treat it as a normal character. Promote will transition to `READ_QUOTED_{KEY/VALUE}` state and start from next character. The default value is `INVALID`

            **Returned values**
            - The extracted key-value pairs in a Map(String, String).

            **Examples**

            Query:

            **Simple case**
            ```sql
            arthur :) select extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv

            SELECT extractKeyValuePairs('name:neymar, age:31 team:psg,nationality:brazil') as kv

            Query id: f9e0ca6f-3178-4ee2-aa2c-a5517abb9cee

            ┌─kv──────────────────────────────────────────────────────────────────────┐
            │ {'name':'neymar','age':'31','team':'psg','nationality':'brazil'}        │
            └─────────────────────────────────────────────────────────────────────────┘
            ```

            **Single quote as quoting character**
            ```sql
            arthur :) select extractKeyValuePairs('name:\'neymar\';\'age\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\'') as kv

            SELECT extractKeyValuePairs('name:\'neymar\';\'age\':31;team:psg;nationality:brazil,last_key:last_value', ':', ';,', '\'') as kv

            Query id: 0e22bf6b-9844-414a-99dc-32bf647abd5e

            ┌─kv───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
            │ {'name':'neymar','age':'31','team':'psg','nationality':'brazil','last_key':'last_value'}                                 │
            └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
            ```

            unexpected_quoting_character_strategy examples:

            unexpected_quoting_character_strategy=invalid

            ```sql
            SELECT extractKeyValuePairs('name""abc:5', ':', ' ,;', '\""', 'INVALID') as kv;
            ```

            ```text
            ┌─kv────────────────┐
            │ {'abc':'5'}  │
            └───────────────────┘
            ```

            ```sql
            SELECT extractKeyValuePairs('name""abc"":5', ':', ' ,;', '\""', 'INVALID') as kv;
            ```

            ```text
            ┌─kv──┐
            │ {}  │
            └─────┘
            ```

            unexpected_quoting_character_strategy=accept

            ```sql
            SELECT extractKeyValuePairs('name""abc:5', ':', ' ,;', '\""', 'ACCEPT') as kv;
            ```

            ```text
            ┌─kv────────────────┐
            │ {'name""abc':'5'}  │
            └───────────────────┘
            ```

            ```sql
            SELECT extractKeyValuePairs('name""abc"":5', ':', ' ,;', '\""', 'ACCEPT') as kv;
            ```

            ```text
            ┌─kv─────────────────┐
            │ {'name""abc""':'5'}  │
            └────────────────────┘
            ```

            unexpected_quoting_character_strategy=promote

            ```sql
            SELECT extractKeyValuePairs('name""abc:5', ':', ' ,;', '\""', 'PROMOTE') as kv;
            ```

            ```text
            ┌─kv──┐
            │ {}  │
            └─────┘
            ```

            ```sql
            SELECT extractKeyValuePairs('name""abc"":5', ':', ' ,;', '\""', 'PROMOTE') as kv;
            ```

            ```text
            ┌─kv───────────┐
            │ {'abc':'5'}  │
            └──────────────┘
            ```

            **Escape sequences without escape sequences support**
            ```sql
            arthur :) select extractKeyValuePairs('age:a\\x0A\\n\\0') as kv

            SELECT extractKeyValuePairs('age:a\\x0A\\n\\0') AS kv

            Query id: e9fd26ee-b41f-4a11-b17f-25af6fd5d356

            ┌─kv────────────────────┐
            │ {'age':'a\\x0A\\n\\0'} │
            └───────────────────────┘
            ```","","","","","","Map"
"25.8.1.5101","h3ToChildren",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsInt128",0,0,"","","System","","","","","","",""
"25.8.1.5101","emptyArrayToSingle",0,0,"","","System","
Accepts an empty array and returns a one-element array that is equal to the default value.
    ","emptyArrayToSingle(arr)","- `arr` — An empty array. [`Array(T)`](/sql-reference/data-types/array)
","An array with a single value of the Array's default type. [`Array(T)`](/sql-reference/data-types/array)","**Basic example**

```sql title=Query
CREATE TABLE test (
  a Array(Int32),
  b Array(String),
  c Array(DateTime)
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO test VALUES ([], [], []);

SELECT emptyArrayToSingle(a), emptyArrayToSingle(b), emptyArrayToSingle(c) FROM test;
```

```response title=Response
┌─emptyArrayToSingle(a)─┬─emptyArrayToSingle(b)─┬─emptyArrayToSingle(c)───┐
│ [0]                   │ ['']                  │ ['1970-01-01 01:00:00'] │
└───────────────────────┴───────────────────────┴─────────────────────────┘
```

","1.1","Arrays"
"25.8.1.5101","degrees",0,1,"","","System","
Converts radians to degrees.
","degrees(x)","- `x` — Input in radians. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the value of `x` in degrees. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT degrees(3.141592653589793)
```

```response title=Response
180
```

","22.2","Mathematical"
"25.8.1.5101","svg",0,0,"","","System","","","","","","",""
"25.8.1.5101","modulo",0,0,"","","System","
    Calculates the remainder of the division of two values a by b.

    The result type is an integer if both inputs are integers. If one of the
    inputs is a floating-point number, the result type is Float64.

    The remainder is computed like in C++. Truncated division is used for
    negative numbers.

    An exception is thrown when dividing by zero or when dividing a minimal
    negative number by minus one.
    ","modulo(a, b)","- `a` — The dividend - `b` — The divisor (modulus) ","The remainder of a % b","**Usage example**

```sql title=Query
SELECT modulo(5, 2)
```

```response title=Response
1
```

","1.1","Arithmetic"
"25.8.1.5101","getOSKernelVersion",0,0,"","","System","","","","","","",""
"25.8.1.5101","pathFull",0,0,"","","System","","","","","","",""
"25.8.1.5101","ngramMinHashArgCaseInsensitiveUTF8",0,0,"","","System","
Splits a UTF-8 string into n-grams of `ngramsize` symbols and returns the n-grams with minimum and maximum hashes, calculated by the ngramMinHashCaseInsensitiveUTF8 function with the same input.
It is case insensitive.
","ngramMinHashArgCaseInsensitiveUTF8(string[, ngramsize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two tuples with `hashnum` n-grams each. [`Tuple(Tuple(String))`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT ngramMinHashArgCaseInsensitiveUTF8('ClickHouse') AS Tuple;
```

```response title=Response
┌─Tuple─────────────────────────────────────────────────────────────────────────┐
│ (('ckH','ous','ick','lic','kHo','use'),('kHo','lic','ick','ous','ckH','Hou')) │
└───────────────────────────────────────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","ngramMinHashArgUTF8",0,0,"","","System","
Splits a UTF-8 string into n-grams of `ngramsize` symbols and returns the n-grams with minimum and maximum hashes, calculated by the `ngramMinHashUTF8` function with the same input.
It is case sensitive.
","ngramMinHashArgUTF8(string[, ngramsize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two tuples with `hashnum` n-grams each. [`Tuple(Tuple(String))`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT ngramMinHashArgUTF8('ClickHouse') AS Tuple;
```

```response title=Response
┌─Tuple─────────────────────────────────────────────────────────────────────────┐
│ (('ous','ick','lic','Hou','kHo','use'),('kHo','Hou','lic','ick','ous','ckH')) │
└───────────────────────────────────────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","cutToFirstSignificantSubdomainRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomain` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.8.1.5101","wordShingleMinHashUTF8",0,0,"","","System","
Splits a UTF-8 string into parts (shingles) of `shinglesize` words, calculates hash values for each word shingle and returns a tuple with these hashes.
Uses `hashnum` minimum hashes to calculate the minimum hash and `hashnum` maximum hashes to calculate the maximum hash.
It is case sensitive.

Can be used to detect semi-duplicate strings with [`tupleHammingDistance`](../functions/tuple-functions.md/#tuplehammingdistance).
For two strings, if the returned hashes are the same for both strings, then those strings are the same.
","wordShingleMinHashUTF8(string[, shinglesize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two hashes — the minimum and the maximum. [`Tuple(UInt64, UInt64)`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT wordShingleMinHashUTF8('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;
```

```response title=Response
┌─Tuple──────────────────────────────────────┐
│ (16452112859864147620,5844417301642981317) │
└────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","arrayDifference",0,0,"","","System","
Calculates an array of differences between adjacent array elements.
The first element of the result array will be 0, the second `arr[1] - arr[0]`, the third `arr[2] - arr[1]`, etc.
The type of elements in the result array are determined by the type inference rules for subtraction (e.g. `UInt8` - `UInt8` = `Int16`).
    ","arrayDifference(arr)","- `arr` — Array for which to calculate differences between adjacent elements. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array of differences between adjacent array elements [`UInt*`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT arrayDifference([1, 2, 3, 4]);
```

```response title=Response
[0,1,1,1]
```

**Example of overflow due to result type Int64**

```sql title=Query
SELECT arrayDifference([0, 10000000000000000000]);
```

```response title=Response
┌─arrayDifference([0, 10000000000000000000])─┐
│ [0,-8446744073709551616]                   │
└────────────────────────────────────────────┘
```

","1.1","Arrays"
"25.8.1.5101","wordShingleMinHash",0,0,"","","System","
Splits a ASCII string into parts (shingles) of `shinglesize` words, calculates hash values for each word shingle and returns a tuple with these hashes.
Uses `hashnum` minimum hashes to calculate the minimum hash and `hashnum` maximum hashes to calculate the maximum hash.
It is case sensitive.

Can be used to detect semi-duplicate strings with [`tupleHammingDistance`](../functions/tuple-functions.md/#tuplehammingdistance).
For two strings, if the returned hashes are the same for both strings, then those strings are the same.
","wordShingleMinHash(string[, shinglesize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two hashes — the minimum and the maximum. [`Tuple(UInt64, UInt64)`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT wordShingleMinHash('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;
```

```response title=Response
┌─Tuple──────────────────────────────────────┐
│ (16452112859864147620,5844417301642981317) │
└────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","ngramMinHash",0,0,"","","System","
Splits a ASCII string into n-grams of `ngramsize` symbols and calculates hash values for each n-gram and returns a tuple with these hashes.
Uses `hashnum` minimum hashes to calculate the minimum hash and `hashnum` maximum hashes to calculate the maximum hash.
It is case sensitive.

Can be used to detect semi-duplicate strings with [`tupleHammingDistance`](../functions/tuple-functions.md/#tuplehammingdistance).
For two strings, if the returned hashes are the same for both strings, then those strings are the same.
","ngramMinHash(string[, ngramsize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two hashes — the minimum and the maximum. [`Tuple`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT ngramMinHash('ClickHouse') AS Tuple;
```

```response title=Response
┌─Tuple──────────────────────────────────────┐
│ (18333312859352735453,9054248444481805918) │
└────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","formatRowNoNewline",0,0,"","","System","","","","","","",""
"25.8.1.5101","wordShingleSimHashCaseInsensitiveUTF8",0,0,"","","System","
Splits a UTF-8 encoded string into parts (shingles) of `shinglesize` words and returns the word shingle `simhash`.
It is case insensitive.

Can be used for detection of semi-duplicate strings with [`bitHammingDistance`](../functions/bit-functions.md/#bitHammingDistance).
The smaller the [Hamming Distance](https://en.wikipedia.org/wiki/Hamming_distance) of the calculated `simhashes` of two strings, the more likely these strings are the same.
","wordShingleSimHashCaseInsensitiveUTF8(string[, shinglesize])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the computed hash value. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT wordShingleSimHashCaseInsensitiveUTF8('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;
```

```response title=Response
┌───────Hash─┐
│ 2194812424 │
└────────────┘
```

","1.1","Hash"
"25.8.1.5101","wordShingleSimHashUTF8",0,0,"","","System","
Splits a UTF-8 string into parts (shingles) of `shinglesize` words and returns the word shingle `simhash`.
It is case sensitive.

Can be used for detection of semi-duplicate strings with [`bitHammingDistance`](../functions/bit-functions.md/#bitHammingDistance).
The smaller the [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) of the calculated `simhashes` of two strings, the more likely these strings are the same.
","wordShingleSimHashUTF8(string[, shinglesize])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the computed hash value. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT wordShingleSimHashUTF8('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;
```

```response title=Response
┌───────Hash─┐
│ 2328277067 │
└────────────┘
```

","21.1","Hash"
"25.8.1.5101","parseDateTime32BestEffortOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","cutToFirstSignificantSubdomainWithWWW",0,0,"","","System","Returns the part of the domain that includes top-level subdomains up to the ""first significant subdomain"", without stripping ""www"".","","","","","","URL"
"25.8.1.5101","mapApply",0,0,"","","System","The same as arrayMap.","","","","**mapApply**

```sql title=Query
SELECT mapApply((k, v) -> (k, v * 2), map('k1', 1, 'k2', 2))
```

```response title=Response

```

","22.3","Map"
"25.8.1.5101","wordShingleSimHashCaseInsensitive",0,0,"","","System","
Splits a ASCII string into parts (shingles) of `shinglesize` words and returns the word shingle `simhash`.
It is case insensitive.

Can be used for detection of semi-duplicate strings with [`bitHammingDistance`](../functions/bit-functions.md/#bitHammingDistance).
The smaller the [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) of the calculated `simhashes` of two strings, the more likely these strings are the same.
","wordShingleSimHashCaseInsensitive(string[, shinglesize])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the computed hash value. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT wordShingleSimHashCaseInsensitive('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;
```

```response title=Response
┌───────Hash─┐
│ 2194812424 │
└────────────┘
```

","21.1","Hash"
"25.8.1.5101","ngramSimHash",0,0,"","","System","
Splits a ASCII string into n-grams of `ngramsize` symbols and returns the n-gram `simhash`.

Can be used for detection of semi-duplicate strings with [`bitHammingDistance`](../functions/bit-functions.md/#bitHammingDistance).
The smaller the [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) of the calculated `simhashes` of two strings, the more likely these strings are the same.
","ngramSimHash(string[, ngramsize])","- `string` — String for which to compute the case sensitive `simhash`. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is`3`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the computed hash of the input string. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT ngramSimHash('ClickHouse') AS Hash;
```

```response title=Response
┌───────Hash─┐
│ 1627567969 │
└────────────┘
```

","21.1","Hash"
"25.8.1.5101","regionToCountry",0,0,"","","System","","","","","","",""
"25.8.1.5101","generateUUIDv7",0,0,"","","System","Generates a UUID of version 7. The generated UUID contains the current Unix timestamp in milliseconds (48 bits), followed by version ""7"" (4 bits), a counter (42 bit, including a variant field ""2"", 2 bit) to distinguish UUIDs within a millisecond, and a random field (32 bits). For any given timestamp (unix_ts_ms), the counter starts at a random value and is incremented by 1 for each new UUID until the timestamp changes. In case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to a random new start value. Function generateUUIDv7 guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.","SELECT generateUUIDv7()","- `expression` — Optional. The expression is used to bypass common subexpression elimination if the function is called multiple times in a query but otherwise ignored. ","A value of type UUID version 7.","**single**

```sql title=Query
SELECT generateUUIDv7()
```

```response title=Response

```

**multiple**

```sql title=Query
SELECT generateUUIDv7(1), generateUUIDv7(2)
```

```response title=Response

```

","24.5","UUID"
"25.8.1.5101","toTimezone",0,0,"","","System","
Converts a `DateTime` or `DateTime64` to the specified time zone.
The internal value (number of unix seconds) of the data doesn't change.
Only the value's time zone attribute and the value's string representation changes.
        ","toTimeZone(datetime, timezone)","- `date` — The value to convert. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — The target time zone name. [`String`](/sql-reference/data-types/string)
","Returns the same timestamp as the input, but with the specified time zone [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Usage example**

```sql title=Query
SELECT toDateTime('2019-01-01 00:00:00', 'UTC') AS time_utc,
toTypeName(time_utc) AS type_utc,
toInt32(time_utc) AS int32utc,
toTimeZone(time_utc, 'Asia/Yekaterinburg') AS time_yekat,
toTypeName(time_yekat) AS type_yekat,
toInt32(time_yekat) AS int32yekat,
toTimeZone(time_utc, 'US/Samoa') AS time_samoa,
toTypeName(time_samoa) AS type_samoa,
toInt32(time_samoa) AS int32samoa
FORMAT Vertical;
```

```response title=Response
Row 1:
──────
time_utc:   2019-01-01 00:00:00
type_utc:   DateTime('UTC')
int32utc:   1546300800
time_yekat: 2019-01-01 05:00:00
type_yekat: DateTime('Asia/Yekaterinburg')
int32yekat: 1546300800
time_samoa: 2018-12-31 13:00:00
type_samoa: DateTime('US/Samoa')
int32samoa: 1546300800
```

","1.1","Dates and Times"
"25.8.1.5101","emptyArrayDate",0,0,"","","System","Returns an empty Date array","emptyArrayDate()","","An empty Date array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayDate
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","CRC32IEEE",0,1,"","","System","
Calculates the CRC32 checksum of a string using the CRC-32-IEEE 802.3 polynomial.
","CRC32IEEE(s)","- `s` — String to calculate CRC32 for. [`String`](/sql-reference/data-types/string)
","Returns the CRC32 checksum of the string. [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT CRC32IEEE('ClickHouse');
```

```response title=Response
┌─CRC32IEEE('ClickHouse')─┐
│              3089448422 │
└─────────────────────────┘
```

","20.1","String"
"25.8.1.5101","notEmpty",0,0,"","","System","
Checks whether the input array is non-empty.

An array is considered non-empty if it contains at least one element.

:::note
Can be optimized by enabling the [`optimize_functions_to_subcolumns`](/operations/settings/settings#optimize_functions_to_subcolumns) setting. With `optimize_functions_to_subcolumns = 1` the function reads only [size0](/sql-reference/data-types/array#array-size) subcolumn instead of reading and processing the whole array column. The query `SELECT notEmpty(arr) FROM table` transforms to `SELECT arr.size0 != 0 FROM TABLE`.
:::

The function also works for [strings](string-functions.md#notempty) or [UUID](uuid-functions.md#notempty).
    ","notEmpty(arr)","- `arr` — Input array. [`Array(T)`](/sql-reference/data-types/array)
","Returns `1` for a non-empty array or `0` for an empty array [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT notEmpty([1,2]);
```

```response title=Response
1
```

","1.1","Arrays"
"25.8.1.5101","tryPunycodeDecode",0,0,"","","System","
Like `punycodeDecode` but returns an empty string if no valid Punycode-encoded string is given.
","tryPunycodeDecode(s)","- `s` — Punycode-encoded string. [`String`](/sql-reference/data-types/string)
","Returns the plaintext of the input value, or empty string if input is invalid. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT tryPunycodeDecode('Mnchen-3ya')
```

```response title=Response
┌─tryPunycodeDecode('Mnchen-3ya')─┐
│ München                         │
└─────────────────────────────────┘
```

","24.1","String"
"25.8.1.5101","L2Normalize",0,0,"","","System","
Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in Euclidean space (using [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance)).
    ","L2Normalize(tuple)","- `tuple` — A tuple of numeric values. [`Tuple(T)`](/sql-reference/data-types/tuple)
","Returns the unit vector. [`Tuple(Float64)`](/sql-reference/data-types/tuple)","**Basic usage**

```sql title=Query
SELECT L2Normalize((3, 4))
```

```response title=Response
┌─L2Normalize((3, 4))─┐
│ (0.6,0.8)           │
└─────────────────────┘
```

","21.11","Distance"
"25.8.1.5101","YYYYMMDDhhmmssToDateTime64",0,0,"","","System","
Converts a number containing the year, month, day, hour, minute, and second to a `DateTime64`.
This function is the opposite of function [`toYYYYMMDDhhmmss()`](/sql-reference/functions/date-time-functions#toYYYYMMDDhhmmss).
The output is undefined if the input does not encode a valid `DateTime64` value.
    ","YYYYMMDDhhmmssToDateTime64(YYYYMMDDhhmmss[, precision[, timezone]])","- `YYYYMMDDhhmmss` — Number containing the year, month, day, hour, minute, and second. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `precision` — Precision for the fractional part (0-9). [`UInt8`](/sql-reference/data-types/int-uint)
- `timezone` — Timezone name. [`String`](/sql-reference/data-types/string)
","Returns a `DateTime64` value from the provided arguments [`DateTime64`](/sql-reference/data-types/datetime64)","**Example**

```sql title=Query
SELECT YYYYMMDDhhmmssToDateTime64(20230911131415, 3, 'Asia/Istanbul');
```

```response title=Response
┌─YYYYMMDDhhmm⋯/Istanbul')─┐
│  2023-09-11 13:14:15.000 │
└──────────────────────────┘
```

","23.9","Dates and Times"
"25.8.1.5101","pow",0,1,"","","System","
Returns x raised to the power of y.
","pow(x, y)","- `x` — The base. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
- `y` — The exponent. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns x^y [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT pow(2, 3);
```

```response title=Response
8
```

","1.1","Mathematical"
"25.8.1.5101","polygonsWithinSpherical",0,0,"","","System","","","","","","",""
"25.8.1.5101","flattenTuple",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsUInt64",0,0,"","","System","","","","","","",""
"25.8.1.5101","erfc",0,0,"","","System","
Returns a number close to `1-erf(x)` without loss of precision for large `x` values.
","erfc(x)","- `x` — The value for which to find the error function value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the complementary error function value [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT erfc(0);
```

```response title=Response
1
```

","1.1","Mathematical"
"25.8.1.5101","numericIndexedVectorPointwiseAdd",0,0,"","","System","Performs pointwise addition between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant. The function returns a new NumericIndexedVector.","numericIndexedVectorPointwiseAdd(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toInt32(x), [10, 20, 30]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toInt32(x), [10, 20, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseAdd(vec1, 2)) AS res2;
```

```response title=Response
┌─res1──────────────────┬─res2─────────────┐
│ {1:10,2:30,3:50,4:30} │ {1:12,2:22,3:32} │
└───────────────────────┴──────────────────┘
```

","25.7","Arithmetic"
"25.8.1.5101","tumbleEnd",0,0,"","","System","","","","","","",""
"25.8.1.5101","isInfinite",0,0,"","","System","
    Returns `1` if the Float32 or Float64 argument is infinite, otherwise this function returns `0`.
    Note that `0` is returned for a `NaN`.
    ","isInfinite(x)","- `x` — Number to check for infiniteness. [`Float*`](/sql-reference/data-types/float)
","`1` if x is infinite, otherwise `0` (including for `NaN`).","**Test if a number is infinite**

```sql title=Query
SELECT isInfinite(inf), isInfinite(NaN), isInfinite(10))
```

```response title=Response
1 0 0
```

","1.1","Arithmetic"
"25.8.1.5101","replaceRegexpOne",0,0,"","","System","
Replaces the first occurrence of the substring matching the regular expression `pattern` (in re2 syntax) in `haystack` by the `replacement` string.
`replacement` can contain substitutions `\0-\9`.
Substitutions `\1-\9` correspond to the 1st to 9th capturing group (submatch), substitution `\0` corresponds to the entire match.
To use a verbatim `\` character in the `pattern` or `replacement` strings, escape it using `\`.
Also keep in mind that string literals require extra escaping.
","replaceRegexpOne(haystack, pattern, replacement)","- `haystack` — The input string to search in. [`String`](/sql-reference/data-types/string)
- `pattern` — The regular expression pattern to find. [`const String`](/sql-reference/data-types/string)
- `replacement` — The string to replace the pattern with, may contain substitutions. [`const String`](/sql-reference/data-types/string)
","Returns a string with the first regex match replaced. [`String`](/sql-reference/data-types/string)","**Converting ISO dates to American format**

```sql title=Query
SELECT DISTINCT
    EventDate,
    replaceRegexpOne(toString(EventDate), '(\\d{4})-(\\d{2})-(\\d{2})', '\\2/\\3/\\1') AS res
FROM test.hits
LIMIT 7
FORMAT TabSeparated
```

```response title=Response
2014-03-17      03/17/2014
2014-03-18      03/18/2014
2014-03-19      03/19/2014
2014-03-20      03/20/2014
2014-03-21      03/21/2014
2014-03-22      03/22/2014
2014-03-23      03/23/2014
```

**Copying a string ten times**

```sql title=Query
SELECT replaceRegexpOne('Hello, World!', '.*', '\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0\\\\0') AS res
```

```response title=Response
┌─res────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World!Hello, World! │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","1.1","String Replacement"
"25.8.1.5101","isNull",0,1,"","","System","
Checks if the argument is `NULL`.

Also see: operator [`IS NULL`](/sql-reference/operators#is_null).
    ","isNull(x)","- `x` — A value of non-compound data type. [`Any`](/sql-reference/data-types)
","Returns `1` if `x` is `NULL`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
CREATE TABLE t_null
(
  x Int32,
  y Nullable(Int32)
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO t_null VALUES (1, NULL), (2, 3);

SELECT x FROM t_null WHERE isNull(y);
```

```response title=Response
┌─x─┐
│ 1 │
└───┘
```

","1.1","Null"
"25.8.1.5101","factorial",0,1,"","","System","
Computes the factorial of an integer value. It works with any native integer type including UInt(8|16|32|64) and Int(8|16|32|64). The return type is UInt64.

The factorial of 0 is 1. Likewise, the factorial() function returns 1 for any negative value. The maximum positive value for the input argument is 20, a value of 21 or greater will cause exception throw.
","","","","**factorial**

```sql title=Query
SELECT factorial(10)
```

```response title=Response

```

","","Mathematical"
"25.8.1.5101","financialNetPresentValue",0,0,"","","System","
Calculates the Net Present Value (NPV) of a series of cash flows assuming equal time intervals between each cash flow.

Default variant (`start_from_zero` = true):

$$
\sum_{i=0}^{N-1} \frac{values_i}{(1 + rate)^i}
$$

Excel-compatible variant (`start_from_zero` = false):

$$
\sum_{i=1}^{N} \frac{values_i}{(1 + rate)^i}
$$
    ","financialNetPresentValue(rate, cashflows[, start_from_zero])","- `rate` — The discount rate to apply. [`Float*`](/sql-reference/data-types/float)
- `cashflows` — Array of cash flows. Each value represents a payment (negative value) or income (positive value). [`Array(Int8/16/32/64)`](/sql-reference/data-types/array) or [`Array(Float*)`](/sql-reference/data-types/array)
- `[, start_from_zero]` — Optional boolean parameter indicating whether to start the NPV calculation from period `0` (true) or period `1` (false, Excel-compatible). Default: true. [`Bool`](/sql-reference/data-types/boolean)
","Returns the net present value as a Float64 value. [`Float64`](/sql-reference/data-types/float)","**default_calculation**

```sql title=Query
SELECT financialNetPresentValue(0.08, [-40000., 5000., 8000., 12000., 30000.])
```

```response title=Response
3065.2226681795255
```

**excel_compatible_calculation**

```sql title=Query
SELECT financialNetPresentValue(0.08, [-40000., 5000., 8000., 12000., 30000.], false)
```

```response title=Response
2838.1691372032656
```

","25.7","Financial"
"25.8.1.5101","ngramSearch",0,0,"","","System","","","","","","",""
"25.8.1.5101","lessOrEquals",0,0,"","","System","Compares two values for less-than-or-equal-to relation.","lessOrEquals(a, b)
    -- a <= b","- `a` — First value.<sup>[*](#comparison-rules)</sup> - `b` — Second value.<sup>[*](#comparison-rules)</sup> ","Returns `1` if `a` is less than or equal to `b`, otherwise `0` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT 1 <= 2, 2 <= 2, 3 <= 2;
```

```response title=Response
┌─lessOrEquals(1, 2)─┬─lessOrEquals(2, 2)─┬─lessOrEquals(3, 2)─┐
│                  1 │                  1 │                  0 │
└────────────────────┴────────────────────┴────────────────────┘
```

","1.1","Comparison"
"25.8.1.5101","subtractQuarters",0,0,"","","System","
Subtracts a specified number of quarters from a date, a date with time or a string-encoded date or date with time.
    ","subtractQuarters(datetime, num)","- `datetime` — Date or date with time to subtract specified number of quarters from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of quarters to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` quarters [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract quarters from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractQuarters(date, 1) AS subtract_quarters_with_date,
    subtractQuarters(date_time, 1) AS subtract_quarters_with_date_time,
    subtractQuarters(date_time_string, 1) AS subtract_quarters_with_date_time_string
```

```response title=Response
┌─subtract_quarters_with_date─┬─subtract_quarters_with_date_time─┬─subtract_quarters_with_date_time_string─┐
│                  2023-10-01 │              2023-10-01 00:00:00 │                 2023-10-01 00:00:00.000 │
└─────────────────────────────┴──────────────────────────────────┴─────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 quarter)
```

```response title=Response
┌─minus(CAST('1⋯Quarter(10))─┐
│                1996-09-16 │
└───────────────────────────┘
```

","20.1","Dates and Times"
"25.8.1.5101","fromUnixTimestamp64Nano",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitShiftLeft",0,0,"","","System","
Shifts the binary representation of a value to the left by a specified number of bit positions.

A `FixedString` or a `String` is treated as a single multibyte value.

Bits of a `FixedString` value are lost as they are shifted out.
On the contrary, a `String` value is extended with additional bytes, so no bits are lost.
","bitShiftLeft(a, N)","- `a` — A value to shift. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `N` — The number of positions to shift. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns the shifted value with type equal to that of `a`.","**Usage example with binary encoding**

```sql title=Query
SELECT 99 AS a, bin(a), bitShiftLeft(a, 2) AS a_shifted, bin(a_shifted);
```

```response title=Response
┌──a─┬─bin(99)──┬─a_shifted─┬─bin(bitShiftLeft(99, 2))─┐
│ 99 │ 01100011 │       140 │ 10001100                 │
└────┴──────────┴───────────┴──────────────────────────┘
```

**Usage example with hexadecimal encoding**

```sql title=Query
SELECT 'abc' AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);
```

```response title=Response
┌─a───┬─hex('abc')─┬─a_shifted─┬─hex(bitShiftLeft('abc', 4))─┐
│ abc │ 616263     │ &0        │ 06162630                    │
└─────┴────────────┴───────────┴─────────────────────────────┘
```

**Usage example with Fixed String encoding**

```sql title=Query
SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);
```

```response title=Response
┌─a───┬─hex(toFixedString('abc', 3))─┬─a_shifted─┬─hex(bitShiftLeft(toFixedString('abc', 3), 4))─┐
│ abc │ 616263                       │ &0        │ 162630                                        │
└─────┴──────────────────────────────┴───────────┴───────────────────────────────────────────────┘
```

","1.1","Bit"
"25.8.1.5101","cutToFirstSignificantSubdomainCustomRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainCustom` but follows stricter rules according to RFC 3986.","","","","","","URL"
"25.8.1.5101","dictGetInt16OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int16 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","cutToFirstSignificantSubdomainCustom",0,0,"","","System","
Returns the part of the domain that includes top-level subdomains up to the first significant subdomain. Accepts custom TLD list name.

Can be useful if you need fresh TLD list or you have custom.
        ","","","","**cutToFirstSignificantSubdomainCustom**

```sql title=Query
SELECT cutToFirstSignificantSubdomainCustom('bar.foo.there-is-no-such-domain', 'public_suffix_list');
```

```response title=Response

```

","","URL"
"25.8.1.5101","JSONExtractArrayRaw",0,0,"","","System","","","","","","",""
"25.8.1.5101","atan2",0,1,"","","System","
Returns the atan2 as the angle in the Euclidean plane, given in radians, between the positive x axis and the ray to the point `(x, y) ≠ (0, 0)`.
","atan2(y, x)","- `y` — y-coordinate of the point through which the ray passes. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
- `x` — x-coordinate of the point through which the ray passes. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the angle `θ` such that `-π < θ ≤ π`, in radians [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT atan2(1, 1)
```

```response title=Response
0.7853981633974483
```

","20.12","Mathematical"
"25.8.1.5101","joinGetOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","trimRight",0,0,"","","System","
Removes the specified characters from the end of a string.
By default, removes common whitespace (ASCII) characters.
","trimRight(s[, trim_characters])","- `s` — String to trim. [`String`](/sql-reference/data-types/string)
- `trim_characters` — Optional characters to trim. If not specified, common whitespace characters are removed. [`String`](/sql-reference/data-types/string)
","Returns the string with specified characters trimmed from the right. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT trimRight('ClickHouse','House');
```

```response title=Response
┌─trimRight('C⋯', 'House')─┐
│ Click                    │
└──────────────────────────┘
```

","20.1","String"
"25.8.1.5101","translate",0,0,"","","System","
Replaces characters in the string `s` using a one-to-one character mapping defined by `from` and `to` strings.
`from` and `to` must be constant ASCII strings.
If `from` and `to` have equal sizes, each occurrence of the first character of `first` in `s` is replaced by the first character of `to`, the second character of `first` in `s` is replaced by the second character of `to`, etc.
If `from` contains more characters than `to`, all occurrences of the characters at the end of `from` that have no corresponding character in `to` are deleted from `s`.
Non-ASCII characters in `s` are not modified by the function.
","translate(s, from, to)","- `s` — The input string to translate. [`String`](/sql-reference/data-types/string)
- `from` — A constant ASCII string containing characters to replace. [`const String`](/sql-reference/data-types/string)
- `to` — A constant ASCII string containing replacement characters. [`const String`](/sql-reference/data-types/string)
","Returns a string with character translations applied. [`String`](/sql-reference/data-types/string)","**Character mapping**

```sql title=Query
SELECT translate('Hello, World!', 'delor', 'DELOR') AS res
```

```response title=Response
┌─res───────────┐
│ HELLO, WORLD! │
└───────────────┘
```

**Different lengths**

```sql title=Query
SELECT translate('clickhouse', 'clickhouse', 'CLICK') AS res
```

```response title=Response
┌─res───┐
│ CLICK │
└───────┘
```

","22.7","String Replacement"
"25.8.1.5101","timeSeriesFromGrid",0,0,"","","System","
        Converts array of values [value1, value2, value3, ...] to array of tuples
        [(start_timestamp, value1), (start_timestamp + step, value2), (start_timestamp + 2 * step, value3), ...].
        If some of the values [value1, value2, value3, ...] are NULL then the function won't copy such null values to the result array
        but will still increase the current timestamp, i.e. for example for [value1, NULL, value2] the function will return
        [(start_timestamp, value1), (start_timestamp + 2 * step, value2)].
        The current timestamp is increased by step until it becomes greater than end_timestamp, each timestamp will be combined with a value
        from a specified array of values. If number of the values doesn't match number of the timestamps the function will throw an exception.
        ","timeSeriesFromGrid(start_timestamp, end_timestamp, step, values)","- `start_timestamp` — Start of the grid. [`DateTime64`](/sql-reference/data-types/datetime64) or [`DateTime`](/sql-reference/data-types/datetime) or [`UInt32`](/sql-reference/data-types/int-uint)
- `end_timestamp` — End of the grid. [`DateTime64`](/sql-reference/data-types/datetime64) or [`DateTime`](/sql-reference/data-types/datetime) or [`UInt32`](/sql-reference/data-types/int-uint)
- `step` — Step of the grid in seconds [`Decimal64`](/sql-reference/data-types/decimal) or [`Decimal32`](/sql-reference/data-types/decimal) or [`UInt64`](/sql-reference/data-types/int-uint) or [`UInt32`](/sql-reference/data-types/int-uint)
- `values` — array of values [`Array(Nullable(Float64))`](/sql-reference/data-types/array) or [`Array(Float64)`](/sql-reference/data-types/array) or [`Array(Nullable(Float32))`](/sql-reference/data-types/array) or [`Array(Float32)`](/sql-reference/data-types/array)
","Returns values from the source array of values combined with timestamps on a regular time grid described by start timestamp and step [`Array(DateTime64, Float64`](/sql-reference/data-types/array)","**Example**

```sql title=Query
SELECT timeSeriesFromGrid('2025-06-01 00:00:00'::DateTime64(3), '2025-06-01 00:01:30.000'::DateTime64(3), 30, [10, 20, NULL, 30])
```

```response title=Response
[('2025-06-01 00:00:00.000',10),('2025-06-01 00:00:30.000',20),('2025-06-01 00:01:30.000',30)]
```

","25.8","Time Series"
"25.8.1.5101","formatQueryOrNull",0,0,"","","System","Returns a formatted, possibly multi-line, version of the given SQL query. Returns NULL in case of a parsing error.
[example:multiline]","formatQueryOrNull(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md) ","The formatted query [`String`](/sql-reference/data-types/string)","**multiline**

```sql title=Query
SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

```response title=Response
SELECT
    a,
    b
FROM tab
WHERE (a > 3) AND (b < 3)
```

","","Other"
"25.8.1.5101","lengthUTF8",0,0,"","","System","
Returns the length of a string in Unicode code points rather than in bytes or characters.
It assumes that the string contains valid UTF-8 encoded text.
If this assumption is violated, no exception is thrown and the result is undefined.

","lengthUTF8(s)","- `s` — String containing valid UTF-8 encoded text. [`String`](/sql-reference/data-types/string)
","Length of the string `s` in Unicode code points. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT lengthUTF8('Здравствуй, мир!')
```

```response title=Response
┌─lengthUTF8('Здравствуй, мир!')─┐
│                             16 │
└────────────────────────────────┘
```

","1.1","String"
"25.8.1.5101","aes_decrypt_mysql",0,0,"","","System","","","","","","",""
"25.8.1.5101","position",0,1,"","","System","","","","","","",""
"25.8.1.5101","formatQuerySingleLine",0,0,"","","System","Like formatQuery() but the returned formatted string contains no line breaks. Throws in case of a parsing error.
[example:multiline]","formatQuerySingleLine(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md) ","The formatted query [`String`](/sql-reference/data-types/string)","**multiline**

```sql title=Query
SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

```response title=Response
SELECT a, b FROM tab WHERE (a > 3) AND (b < 3)
```

","","Other"
"25.8.1.5101","mapAll",0,0,"","","System","The same as arrayAll.","","","","**mapAll**

```sql title=Query
SELECT mapAll((k, v) -> v = 1, map('k1', 1, 'k2', 2))
```

```response title=Response

```

","23.4","Map"
"25.8.1.5101","overlay",0,1,"","","System","
Replaces part of the string `input` with another string `replace`, starting at the 1-based index `offset`.
","overlay(s, replace, offset[, length])","- `s` — The input string. [`String`](/sql-reference/data-types/string)
- `replace` — The replacement string [`const String`](/sql-reference/data-types/string)
- `offset` — An integer type `Int` (1-based). If `offset` is negative, it is counted from the end of the string `s`. [`Int`](/sql-reference/data-types/int-uint)
- `length` — Optional. An integer type `Int`. `length` specifies the length of the snippet within the input string `s` to be replaced. If `length` is not specified, the number of bytes removed from `s` equals the length of `replace`; otherwise `length` bytes are removed. [`Int`](/sql-reference/data-types/int-uint)
","Returns a string with replacement. [`String`](/sql-reference/data-types/string)","**Basic replacement**

```sql title=Query
SELECT overlay('My father is from Mexico.', 'mother', 4) AS res;
```

```response title=Response
┌─res──────────────────────┐
│ My mother is from Mexico.│
└──────────────────────────┘
```

**Replacement with length**

```sql title=Query
SELECT overlay('My father is from Mexico.', 'dad', 4, 6) AS res;
```

```response title=Response
┌─res───────────────────┐
│ My dad is from Mexico.│
└───────────────────────┘
```

","24.9","String"
"25.8.1.5101","toStartOfMinute",0,0,"","","System","
Rounds down a date with time to the start of the minute.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfMinute(datetime)","- `datetime` — A date with time to round. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the date with time rounded down to the start of the minute. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Round down to the start of the minute**

```sql title=Query
SELECT
    toStartOfMinute(toDateTime('2023-04-21 10:20:30')),
    toStartOfMinute(toDateTime64('2023-04-21 10:20:30.5300', 8))
FORMAT Vertical
```

```response title=Response
Row 1:
──────
toStartOfMinute(toDateTime('2023-04-21 10:20:30')):           2023-04-21 10:20:00
toStartOfMinute(toDateTime64('2023-04-21 10:20:30.5300', 8)): 2023-04-21 10:20:00
```

","1.1","Dates and Times"
"25.8.1.5101","wordShingleSimHash",0,0,"","","System","
Splits a ASCII string into parts (shingles) of `shinglesize` words and returns the word shingle `simhash`.
Is is case sensitive.

Can be used for detection of semi-duplicate strings with [`bitHammingDistance`](../functions/bit-functions.md/#bitHammingDistance).
The smaller the [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) of the calculated `simhashes` of two strings, the more likely these strings are the same.
","wordShingleSimHash(string[, shinglesize])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the computed hash value. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT wordShingleSimHash('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Hash;
```

```response title=Response
┌───────Hash─┐
│ 2328277067 │
└────────────┘
```

","21.1","Hash"
"25.8.1.5101","arrayCumSum",0,0,"","","System","Returns an array of the partial (running) sums of the elements in the source array. If a lambda function is specified, the sum is computed from applying the lambda to the array elements at each position.","arrayCumSum([func,] arr1[, arr2, ... , arrN])","- `func` — Optional. A lambda function to apply to the array elements at each position. [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `arr1` — The source array of numeric values. [`Array(T)`](/sql-reference/data-types/array)
- `[arr2, ..., arrN]` — Optional. Additional arrays of the same size, passed as arguments to the lambda function if specified. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array of the partial sums of the elements in the source array. The result type matches the input array's numeric type. [`Array(T)`](/sql-reference/data-types/array)","**Basic usage**

```sql title=Query
SELECT arrayCumSum([1, 1, 1, 1]) AS res
```

```response title=Response
[1, 2, 3, 4]
```

**With lambda**

```sql title=Query
SELECT arrayCumSum(x -> x * 2, [1, 2, 3]) AS res
```

```response title=Response
[2, 6, 12]
```

","1.1","Arrays"
"25.8.1.5101","formatQuerySingleLineOrNull",0,0,"","","System","Like formatQuery() but the returned formatted string contains no line breaks. Returns NULL in case of a parsing error.
[example:multiline]","formatQuerySingleLineOrNull(query)","- `query` — The SQL query to be formatted. [`String`](/sql-reference/data-types/string)
","The formatted query [`String`](/sql-reference/data-types/string)","**multiline**

```sql title=Query
SELECT formatQuerySingleLine('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

```response title=Response
SELECT a, b FROM tab WHERE (a > 3) AND (b < 3)
```

","","Other"
"25.8.1.5101","IPv4StringToNumOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","trimLeft",0,0,"","","System","
Removes the specified characters from the start of a string.
By default, removes common whitespace (ASCII) characters.
","trimLeft(input[, trim_characters])","- `input` — String to trim. [`String`](/sql-reference/data-types/string)
- `trim_characters` — Optional. Characters to trim. If not specified, common whitespace characters are removed. [`String`](/sql-reference/data-types/string)
","Returns the string with specified characters trimmed from the left. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT trimLeft('ClickHouse', 'Click');
```

```response title=Response
┌─trimLeft('Cl⋯', 'Click')─┐
│ House                    │
└──────────────────────────┘
```

","20.1","String"
"25.8.1.5101","formatReadableQuantity",0,0,"","","System","","","","","","",""
"25.8.1.5101","countMatchesCaseInsensitive",0,0,"","","System","","","","","","",""
"25.8.1.5101","toQuarter",0,0,"","","System","
Returns the quarter of the year (1-4) for a given `Date` or `DateTime` value.
    ","toQuarter(datetime)","- `datetime` — Date or date with time to get the quarter of the year from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the quarter of the year for the given date/time [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toQuarter(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toQuarter(toDateTime('2023-04-21 10:20:30'))─┐
│                                            2 │
└──────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","isFinite",0,0,"","","System","
Returns `1` if the Float32 or Float64 argument not infinite and not a `NaN`,
otherwise this function returns `0`.
    ","isFinite(x)","- `x` — Number to check for finiteness. [`Float*`](/sql-reference/data-types/float)
","`1` if x is not infinite and not `NaN`, otherwise `0`.","**Test if a number is finite**

```sql title=Query
SELECT isFinite(inf)
```

```response title=Response
0
```

","1.1","Arithmetic"
"25.8.1.5101","countMatches",0,0,"","","System","","","","","","",""
"25.8.1.5101","fromDaysSinceYearZero",0,0,"","","System","
For a given number of days elapsed since [1 January 0000](https://en.wikipedia.org/wiki/Year_zero), returns the corresponding date in the [proleptic Gregorian calendar defined by ISO 8601](https://en.wikipedia.org/wiki/Gregorian_calendar#Proleptic_Gregorian_calendar).

The calculation is the same as in MySQL's `FROM_DAYS()` function. The result is undefined if it cannot be represented within the bounds of the [Date](../data-types/date.md) type.
    ","fromDaysSinceYearZero(days)","- `days` — The number of days passed since year zero. [`UInt32`](/sql-reference/data-types/int-uint)
","Returns the date corresponding to the number of days passed since year zero. [`Date`](/sql-reference/data-types/date)","**Convert days since year zero to dates**

```sql title=Query
SELECT
fromDaysSinceYearZero(739136) AS date1,
fromDaysSinceYearZero(toDaysSinceYearZero(toDate('2023-09-08'))) AS date2
```

```response title=Response
┌──────date1─┬──────date2─┐
│ 2023-09-08 │ 2023-09-08 │
└────────────┴────────────┘
```

","23.11","Dates and Times"
"25.8.1.5101","arrayWithConstant",0,0,"","","System","
Creates an array of length `length` filled with the constant `x`.
    ","arrayWithConstant(N, x)","- `length` — Number of elements in the array. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `x` — The value of the `N` elements in the array, of any type. ","Returns an Array with `N` elements of value `x`. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayWithConstant(3, 1)
```

```response title=Response
[1, 1, 1]
```

","20.1","Arrays"
"25.8.1.5101","toStartOfNanosecond",0,0,"","","System","
Rounds down a date with time to the start of the nanoseconds.
        ","toStartOfNanosecond(datetime, [timezone])","- `datetime` — Date and time. [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone for the returned value. If not specified, the function uses the timezone of the `value` parameter. [`String`](/sql-reference/data-types/string)
","Input value with nanoseconds. [`DateTime64`](/sql-reference/data-types/datetime64)","**Query without timezone**

```sql title=Query
WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64
SELECT toStartOfNanosecond(dt64);
```

```response title=Response
┌─────toStartOfNanosecond(dt64)─┐
│ 2020-01-01 10:20:30.999999999 │
└───────────────────────────────┘
```

**Query with timezone**

```sql title=Query
WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64
SELECT toStartOfNanosecond(dt64, 'Asia/Istanbul');
```

```response title=Response
┌─toStartOfNanosecond(dt64, 'Asia/Istanbul')─┐
│              2020-01-01 12:20:30.999999999 │
└────────────────────────────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","fromUnixTimestamp64Second",0,0,"","","System","","","","","","",""
"25.8.1.5101","countEqual",0,0,"","","System","
Returns the number of elements in the array equal to `x`. Equivalent to `arrayCount(elem -> elem = x, arr)`.

`NULL` elements are handled as separate values.
","countEqual(arr, x)","- `arr` — Array to search. [`Array(T)`](/sql-reference/data-types/array)
- `x` — Value in the array to count. Any type. ","Returns the number of elements in the array equal to `x` [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT countEqual([1, 2, NULL, NULL], NULL)
```

```response title=Response
2
```

","1.1","Arrays"
"25.8.1.5101","JSONArrayLength",0,0,"","","System","Returns the number of elements in the outermost JSON array. The function returns NULL if input JSON string is invalid.","","","","","","JSON"
"25.8.1.5101","timezone",0,1,"","","System","
Returns the time zone name of the current session or converts a time zone
offset or name to a canonical time zone name.
    ","timezone()","","Returns the canonical time zone name as a [`String`](/sql-reference/data-types/string)","**Get current session time zone**

```sql title=Query
SELECT timezone()
```

```response title=Response
┌─timezone()───────┐
│ Europe/Amsterdam │
└──────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","dynamicElement",0,0,"","","System","
Extracts a column with specified type from a `Dynamic` column.
","dynamicElement(dynamic, type_name)","- `dynamic` — Dynamic column - `type_name` — The name of the variant type to extract ","","**Example**

```sql title=Query
CREATE TABLE test (d Dynamic) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, dynamicType(d), dynamicElement(d, 'String'), dynamicElement(d, 'Int64'), dynamicElement(d, 'Array(Int64)'), dynamicElement(d, 'Date'), dynamicElement(d, 'Array(String)') FROM test;
```

```response title=Response
┌─d─────────────┬─dynamicType(d)─┬─dynamicElement(d, 'String')─┬─dynamicElement(d, 'Int64')─┬─dynamicElement(d, 'Array(Int64)')─┬─dynamicElement(d, 'Date')─┬─dynamicElement(d, 'Array(String)')─┐
│ ᴺᵁᴸᴸ          │ None           │ ᴺᵁᴸᴸ                        │                       ᴺᵁᴸᴸ │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ 42            │ Int64          │ ᴺᵁᴸᴸ                        │                         42 │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ Hello, World! │ String         │ Hello, World!               │                       ᴺᵁᴸᴸ │ []                                │                      ᴺᵁᴸᴸ │ []                                 │
│ [1,2,3]       │ Array(Int64)   │ ᴺᵁᴸᴸ                        │                       ᴺᵁᴸᴸ │ [1,2,3]                           │                      ᴺᵁᴸᴸ │ []                                 │
└───────────────┴────────────────┴─────────────────────────────┴────────────────────────────┴───────────────────────────────────┴───────────────────────────┴────────────────────────────────────┘
```

","","JSON"
"25.8.1.5101","divide",0,0,"","","System","
    Calculates the quotient of two values `a` and `b`. The result type is always [Float64](/sql-reference/data-types/float).
    Integer division is provided by the `intDiv` function.

    :::note
    Division by `0` returns `inf`, `-inf`, or `nan`.
    :::
    ","divide(x, y)","- `x` — Dividend - `y` — Divisor ","The quotient of x and y","**Dividing two numbers**

```sql title=Query
SELECT divide(25,5) AS quotient, toTypeName(quotient)
```

```response title=Response
5 Float64
```

**Dividing by zero**

```sql title=Query
SELECT divide(25,0)
```

```response title=Response
inf
```

","1.1","Arithmetic"
"25.8.1.5101","h3EdgeAngle",0,0,"","","System","
Calculates the average length of an [H3](https://h3geo.org/docs/core-library/h3Indexing/) hexagon edge in grades.
    ","h3EdgeAngle(resolution)","- `resolution` — Index resolution. Range: `[0, 15]`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the average length of an [H3](#h3-index) hexagon edge in grades. [`Float64`](/sql-reference/data-types/float)","**Get edge angle for resolution 10**

```sql title=Query
SELECT h3EdgeAngle(10) AS edgeAngle
```

```response title=Response
┌───────h3EdgeAngle(10)─┐
│ 0.0005927224846720883 │
└───────────────────────┘
```

","20.1","Geo"
"25.8.1.5101","acos",0,1,"","","System","
Returns the arc cosine of the argument.
","acos(x)","- `x` — The value for which to find arc cosine of. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the arc cosine of x [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT acos(0.5);
```

```response title=Response
1.0471975511965979
```

","1.1","Mathematical"
"25.8.1.5101","fromUnixTimestamp64Micro",0,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesTagsGroupToTags",0,0,"","","System","Finds tags associated with a group index. Group indices are numbers 0, 1, 2, 3 associated with each unique set of tags in the context of the currently executed query.","timeSeriesTagsGroupToTags(group)","- `group` — Group index associated with a time series. [`UInt64`](/sql-reference/data-types/int-uint)
","Array of pairs (tag_name, tag_value). [`Array(Tuple(String, String))`](/sql-reference/data-types/array)","**Example**

```sql title=Query
SELECT timeSeriesStoreTags(8374283493092, [('region', 'eu'), ('env', 'dev')], '__name__', 'http_requests_count') AS id, timeSeriesIdToTagsGroup(id) AS group, timeSeriesTagsGroupToTags(group)
```

```response title=Response
8374283493092    0    [('__name__', ''http_requests_count''), ('env', 'dev'), ('region', 'eu')]
```

","25.8","Time Series"
"25.8.1.5101","windowID",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiMatchAnyIndex",0,0,"","","System","","","","","","",""
"25.8.1.5101","hopStart",0,0,"","","System","","","","","","",""
"25.8.1.5101","dateDiff",0,1,"","","System","","","","","","",""
"25.8.1.5101","hop",0,0,"","","System","","","","","","",""
"25.8.1.5101","hasAny",0,0,"","","System","
Checks whether two arrays have intersection by some elements.

- `Null` is processed as a value.
- The order of the values in both of the arrays does not matter.
","hasAny(arr_x, arr_y)","- `arr_x` — Array of any type with a set of elements. [`Array(T)`](/sql-reference/data-types/array)
- `arr_y` — Array of any type that shares a common supertype with array `arr_x`. [`Array(T)`](/sql-reference/data-types/array)
","- `1`, if `arr_x` and `arr_y` have one similar element at least.
- `0`, otherwise.

Raises a `NO_COMMON_TYPE` exception if any of the elements of the two arrays do not share a common supertype.","**One array is empty**

```sql title=Query
SELECT hasAny([1], [])
```

```response title=Response
0
```

**Arrays containing NULL values**

```sql title=Query
SELECT hasAny([Null], [Null, 1])
```

```response title=Response
1
```

**Arrays containing values of a different type**

```sql title=Query
SELECT hasAny([-128, 1., 512], [1])
```

```response title=Response
1
```

**Arrays without a common type**

```sql title=Query
SELECT hasAny([[1, 2], [3, 4]], ['a', 'c'])
```

```response title=Response
Raises a `NO_COMMON_TYPE` exception
```

**Array of arrays**

```sql title=Query
SELECT hasAll([[1, 2], [3, 4]], [[1, 2], [1, 2]])
```

```response title=Response
1
```

","1.1","Arrays"
"25.8.1.5101","fuzzBits",0,0,"","","System","
Flips the bits of the input string `s`, with probability `p` for each bit.
    ","fuzzBits(s, p)","- `s` — String or FixedString to perform bit fuzzing on [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `p` — Probability of flipping each bit as a number between `0.0` and `1.0` [`Float*`](/sql-reference/data-types/float)
","Returns a Fuzzed string with same type as `s`. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)","**Usage example**

```sql title=Query
SELECT fuzzBits(materialize('abacaba'), 0.1)
FROM numbers(3)
```

```response title=Response
┌─fuzzBits(materialize('abacaba'), 0.1)─┐
│ abaaaja                               │
│ a*cjab+                               │
│ aeca2A                                │
└───────────────────────────────────────┘
```

","20.5","Random Number"
"25.8.1.5101","gcd",0,0,"","","System","
    Returns the greatest common divisor of two values a and b.

    An exception is thrown when dividing by zero or when dividing a minimal
    negative number by minus one.
    ","gcd(x, y)","- `x` — First integer - `y` — Second integer ","The greatest common divisor of `x` and `y`.","**Usage example**

```sql title=Query
SELECT gcd(12, 18)
```

```response title=Response
6
```

","1.1","Arithmetic"
"25.8.1.5101","minSampleSizeConversion",0,0,"","","System","","","","","","",""
"25.8.1.5101","jumpConsistentHash",0,0,"","","System","
Calculates the [jump consistent hash](https://arxiv.org/pdf/1406.2294.pdf) for an integer.
","jumpConsistentHash(key, buckets)","- `key` — The input key. [`UInt64`](/sql-reference/data-types/int-uint)
- `buckets` — The number of buckets. [`Int32`](/sql-reference/data-types/int-uint)
","Returns the computed hash value. [`Int32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT jumpConsistentHash(256, 4)
```

```response title=Response
┌─jumpConsistentHash(256, 4)─┐
│                          3 │
└────────────────────────────┘
```

","1.1","Hash"
"25.8.1.5101","getTypeSerializationStreams",0,0,"","","System","","","","","","",""
"25.8.1.5101","space",0,1,"","","System","
Concatenates a space (` `) as many times with itself as specified.
","space(n)","- `n` — The number of times to repeat the space. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns astring containing a space repeated `n` times. If `n <= 0`, the function returns the empty string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT space(3) AS res, length(res);
```

```response title=Response
┌─res─┬─length(res)─┐
│     │           3 │
└─────┴─────────────┘
```

","23.5","String"
"25.8.1.5101","toMillisecond",0,0,"","","System","
Returns the millisecond component (0-999) of a `DateTime` or `DateTime64` value.
    ","toMillisecond(datetime)","- `datetime` — Date with time to get the millisecond from. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the millisecond in the minute (0 - 59) of the given `Date` or `DateTime` [`UInt16`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3));
```

```response title=Response
┌──toMillisecond(toDateTime64('2023-04-21 10:20:30.456', 3))─┐
│                                                        456 │
└────────────────────────────────────────────────────────────┘
```

","24.2","Dates and Times"
"25.8.1.5101","parseDateTime64InJodaSyntax",0,0,"","","System","","","","","","",""
"25.8.1.5101","generateUUIDv4",0,0,"","","System","","","","","","",""
"25.8.1.5101","toFloat32OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","endsWithUTF8",0,0,"","","System","
Returns whether string `s` ends with `suffix`.
Assumes that the string contains valid UTF-8 encoded text.
If this assumption is violated, no exception is thrown and the result is undefined.
","endsWithUTF8(s, suffix)","- `s` — String to check. [`String`](/sql-reference/data-types/string)
- `suffix` — Suffix to check for. [`String`](/sql-reference/data-types/string)
","Returns `1` if `s` ends with `suffix`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT endsWithUTF8('данных', 'ых');
```

```response title=Response
┌─endsWithUTF8('данных', 'ых')─┐
│                            1 │
└──────────────────────────────┘
```

","23.8","String"
"25.8.1.5101","h3IndexesAreNeighbors",0,0,"","","System","","","","","","",""
"25.8.1.5101","tryIdnaEncode",0,0,"","","System","
Returns the Unicode (UTF-8) representation (ToUnicode algorithm) of a domain name according to the [Internationalized Domain Names in Applications](https://en.wikipedia.org/wiki/Internationalized_domain_name#Internationalizing_Domain_Names_in_Applications) (IDNA) mechanism.
In case of an error it returns an empty string instead of throwing an exception.
","tryIdnaEncode(s)","- `s` — Input string. [`String`](/sql-reference/data-types/string)
","Returns an ASCII representation of the input string according to the IDNA mechanism of the input value, or empty string if input is invalid. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT tryIdnaEncode('straße.münchen.de')
```

```response title=Response
┌─tryIdnaEncode('straße.münchen.de')──┐
│ xn--strae-oqa.xn--mnchen-3ya.de     │
└─────────────────────────────────────┘
```

","24.1","String"
"25.8.1.5101","geohashDecode",0,0,"","","System","
Decodes any [geohash](https://en.wikipedia.org/wiki/Geohash)-encoded string into longitude and latitude coordinates.
    ","geohashDecode(hash_str)","- `hash_str` — Geohash-encoded string to decode. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
","Returns a tuple of `(longitude, latitude)` with `Float64` precision. [`Tuple(Float64, Float64)`](/sql-reference/data-types/tuple)","**Basic usage**

```sql title=Query
SELECT geohashDecode('ezs42') AS res
```

```response title=Response
┌─res─────────────────────────────┐
│ (-5.60302734375,42.60498046875) │
└─────────────────────────────────┘
```

","20.1","Geo"
"25.8.1.5101","polygonsSymDifferenceCartesian",0,0,"","","System","","","","","","",""
"25.8.1.5101","substringIndexUTF8",0,0,"","","System","
Returns the substring of `s` before `count` occurrences of the delimiter `delim`, specifically for Unicode code points.
Assumes that the string contains valid UTF-8 encoded text.
If this assumption is violated, no exception is thrown and the result is undefined.
","substringIndexUTF8(s, delim, count)","- `s` — The string to extract substring from. [`String`](/sql-reference/data-types/string)
- `delim` — The character to split. [`String`](/sql-reference/data-types/string)
- `count` — The number of occurrences of the delimiter to count before extracting the substring. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. [`UInt`](/sql-reference/data-types/int-uint) or [`Int`](/sql-reference/data-types/int-uint)
","Returns a substring of `s` before `count` occurrences of `delim`. [`String`](/sql-reference/data-types/string)","**UTF8 example**

```sql title=Query
SELECT substringIndexUTF8('www.straßen-in-europa.de', '.', 2)
```

```response title=Response
www.straßen-in-europa
```

","23.7","String"
"25.8.1.5101","substringIndex",0,0,"","","System","
Returns the substring of `s` before `count` occurrences of the delimiter `delim`, as in Spark or MySQL.
","substringIndex(s, delim, count)","- `s` — The string to extract substring from. [`String`](/sql-reference/data-types/string)
- `delim` — The character to split. [`String`](/sql-reference/data-types/string)
- `count` — The number of occurrences of the delimiter to count before extracting the substring. If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. [`UInt`](/sql-reference/data-types/int-uint) or [`Int`](/sql-reference/data-types/int-uint)
","Returns a substring of `s` before `count` occurrences of `delim`. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT substringIndex('www.clickhouse.com', '.', 2)
```

```response title=Response
┌─substringIndex('www.clickhouse.com', '.', 2)─┐
│ www.clickhouse                               │
└──────────────────────────────────────────────┘
```

","23.7","String"
"25.8.1.5101","formatReadableTimeDelta",0,0,"","","System","","","","","","",""
"25.8.1.5101","geohashEncode",0,0,"","","System","
Encodes longitude and latitude as a [geohash](https://en.wikipedia.org/wiki/Geohash)-string.

:::
All coordinate parameters must be of the same type: either `Float32` or `Float64`.

For the `precision` parameter, any value less than `1` or greater than `12` is silently converted to `12`.
:::
    ","geohashEncode(longitude, latitude, [precision])","- `longitude` — Longitude part of the coordinate to encode. Range: `[-180°, 180°]`. [`Float32`](/sql-reference/data-types/float) or [`Float64`](/sql-reference/data-types/float)
- `latitude` — Latitude part of the coordinate to encode. Range: `[-90°, 90°]`. [`Float32`](/sql-reference/data-types/float) or [`Float64`](/sql-reference/data-types/float)
- `precision` — Optional. Length of the resulting encoded string. Default: 12. Range: `[1, 12]`. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns an alphanumeric string of the encoded coordinate (modified version of the base32-encoding alphabet is used) [`String`](/sql-reference/data-types/string)","**Basic usage with default precision**

```sql title=Query
SELECT geohashEncode(-5.60302734375, 42.593994140625) AS res
```

```response title=Response
┌─res──────────┐
│ ezs42d000000 │
└──────────────┘
```

","20.1","Geo"
"25.8.1.5101","cutToFirstSignificantSubdomainCustomWithWWW",0,0,"","","System","
Returns the part of the domain that includes top-level subdomains up to the first significant subdomain without stripping `www`.
Accepts custom TLD list name from config.

Can be useful if you need fresh TLD list or you have custom.
        ","","","","**cutToFirstSignificantSubdomainCustomWithWWW**

```sql title=Query
SELECT cutToFirstSignificantSubdomainCustomWithWWW('www.foo', 'public_suffix_list')
```

```response title=Response

```

","","URL"
"25.8.1.5101","addHours",0,0,"","","System","
Adds a specified number of hours to a date, a date with time or a string-encoded date or date with time.
    ","addHours(datetime, num)","- `datetime` — Date or date with time to add specified number of hours to. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of hours to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` hours [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64(3)`](/sql-reference/data-types/datetime64)","**Add hours to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addHours(date, 12) AS add_hours_with_date,
    addHours(date_time, 12) AS add_hours_with_date_time,
    addHours(date_time_string, 12) AS add_hours_with_date_time_string
```

```response title=Response
┌─add_hours_with_date─┬─add_hours_with_date_time─┬─add_hours_with_date_time_string─┐
│ 2024-01-01 12:00:00 │      2024-01-01 12:00:00 │         2024-01-01 12:00:00.000 │
└─────────────────────┴──────────────────────────┴─────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 hour)
```

```response title=Response
┌─plus(CAST('1⋯alHour(10))─┐
│      1998-06-16 10:00:00 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","arrayFill",0,0,"","","System","
The `arrayFill` function sequentially processes a source array from the first element
to the last, evaluating a lambda condition at each position using elements from
the source and condition arrays. When the lambda function evaluates to false at
position i, the function replaces that element with the element at position i-1
from the current state of the array. The first element is always preserved
regardless of any condition.
","arrayFill(func(x [, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x [, y1, ..., yN])` — A lambda function `func(x [, y1, y2, ... yN]) → F(x [, y1, y2, ... yN])` which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array [`Array(T)`](/sql-reference/data-types/array)","**Example with single array**

```sql title=Query
SELECT arrayFill(x -> not isNull(x), [1, null, 2, null]) AS res
```

```response title=Response
[1, 1, 2, 2]
```

**Example with two arrays**

```sql title=Query
SELECT arrayFill(x, y, z -> x > y AND x < z, [5, 3, 6, 2], [4, 7, 1, 3], [10, 2, 8, 5]) AS res
```

```response title=Response
[5, 5, 6, 6]
```

","20.1","Arrays"
"25.8.1.5101","toDate32OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","getServerSetting",0,0,"","","System","
Returns the current value of server setting.
","getServerSetting('custom_setting')","- `custom_setting` — The setting name. [`String`](/sql-reference/data-types/string)
","The setting's current value.","**getServerSetting**

```sql title=Query
SELECT getSetting('page_cache_size_ratio');
```

```response title=Response
SRLU
```

","","Other"
"25.8.1.5101","identity",0,0,"","","System","","","","","","",""
"25.8.1.5101","icebergHash",0,0,"","","System","Implements logic of iceberg hashing transform: https://iceberg.apache.org/spec/#appendix-b-32-bit-hash-requirements.","icebergHash(N, value)","- `value` — Integer, bool, decimal, float, string, fixed_string, uuid, date, time, datetime. ","Int32","**Example**

```sql title=Query
SELECT icebergHash(1.0 :: Float32)
```

```response title=Response
-142385009
```

","25.5","Other"
"25.8.1.5101","bech32Decode",0,0,"","","System","
Decodes a Bech32 address string generated by either the bech32 or bech32m algorithms.

:::note
Unlike the encode function, `Bech32Decode` will automatically handle padded FixedStrings.
:::
    ","bech32Decode(address)","- `address` — A Bech32 string to decode. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
","Returns a tuple consisting of `(hrp, data)` that was used to encode the string. The data is in binary format. [`Tuple(String, String)`](/sql-reference/data-types/tuple)","**Decode address**

```sql title=Query
SELECT tup.1 AS hrp, hex(tup.2) AS data FROM (SELECT bech32Decode('bc1w508d6qejxtdg4y5r3zarvary0c5xw7kj7gz7z') AS tup)
```

```response title=Response
bc   751E76E8199196D454941C45D1B3A323F1433BD6
```

**Testnet address**

```sql title=Query
SELECT tup.1 AS hrp, hex(tup.2) AS data FROM (SELECT bech32Decode('tb1w508d6qejxtdg4y5r3zarvary0c5xw7kzp034v') AS tup)
```

```response title=Response
tb   751E76E8199196D454941C45D1B3A323F1433BD6
```

","25.6","Encoding"
"25.8.1.5101","geoDistance",0,0,"","","System","
Similar to the `greatCircleDistance` function but it calculates the distance on the WGS-84 ellipsoid, which is a more accurate representation of Earth's shape than a perfect sphere.
It offers the same performance as for `greatCircleDistance` and it is therefore recommended to use `geoDistance` to calculate distances on Earth.

Technical note: for close enough points it calculates the distance using planar approximation with the metric on the tangent plane at the midpoint of the coordinates.
        ","geoDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)","- `lon1Deg` — Longitude of the first point in degrees. Range: `[-180°, 180°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `lat1Deg` — Latitude of the first point in degrees. Range: `[-90°, 90°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `lon2Deg` — Longitude of the second point in degrees. Range: `[-180°, 180°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `lat2Deg` — Latitude of the second point in degrees. Range: `[-90°, 90°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns the distance between two points on the Earth's surface, in meters [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT geoDistance(38.8976, -77.0366, 39.9496, -75.1503) AS geoDistance
```

```response title=Response
┌─geoDistance─┐
│   212458.73 │
└─────────────┘
```

","1.1","Geo"
"25.8.1.5101","greatCircleDistance",0,0,"","","System","
Calculates the distance between two points on the Earth's surface using [the great-circle formula](https://en.wikipedia.org/wiki/Great-circle_distance).
        ","greatCircleDistance(lon1Deg, lat1Deg, lon2Deg, lat2Deg)","- `lon1Deg` — Longitude of the first point in degrees. Range: `[-180°, 180°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `lat1Deg` — Latitude of the first point in degrees. Range: `[-90°, 90°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `lon2Deg` — Longitude of the second point in degrees. Range: `[-180°, 180°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `lat2Deg` — Latitude of the second point in degrees. Range: `[-90°, 90°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns the distance between two points on the Earth's surface, in meters [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT greatCircleDistance(55.755831, 37.617673, -55.755831, -37.617673) AS greatCircleDistance
```

```response title=Response
┌─greatCircleDistance─┐
│            14128352 │
└─────────────────────┘
```

","1.1","Geo"
"25.8.1.5101","isIPv4String",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSON_QUERY",0,0,"","","System","","","","","","",""
"25.8.1.5101","greater",0,0,"","","System","Compares two values for greater-than relation.","greater(a, b)
    -- a > b","- `a` — First value.<sup>[*](#comparison-rules)</sup> - `b` — Second value.<sup>[*](#comparison-rules)</sup> ","Returns `1` if `a` is greater than `b`, otherwise `0` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT 2 > 1, 1 > 2;
```

```response title=Response
┌─greater(2, 1)─┬─greater(1, 2)─┐
│             1 │             0 │
└───────────────┴───────────────┘
```

","1.1","Comparison"
"25.8.1.5101","murmurHash3_128",0,0,"","","System","
Computes the 128-bit [MurmurHash3](https://github.com/aappleby/smhasher) hash of the input value.
","murmurHash3_128(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed 128-bit `MurmurHash3` hash value of the input arguments. [`FixedString(16)`](/sql-reference/data-types/fixedstring)","**Usage example**

```sql title=Query
SELECT hex(murmurHash3_128('foo', 'foo', 'foo'));
```

```response title=Response
┌─hex(murmurHash3_128('foo', 'foo', 'foo'))─┐
│ F8F7AD9B6CD4CF117A71E277E2EC2931          │
└───────────────────────────────────────────┘
```

","18.10","Hash"
"25.8.1.5101","reverseUTF8",0,0,"","","System","
Reverses a sequence of Unicode code points in a string.
Assumes that the string contains valid UTF-8 encoded text.
If this assumption is violated, no exception is thrown and the result is undefined.
","reverseUTF8(s)","- `s` — String containing valid UTF-8 encoded text. [`String`](/sql-reference/data-types/string)
","Returns a string with the sequence of Unicode code points reversed. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT reverseUTF8('ClickHouse')
```

```response title=Response
esuoHkcilC
```

","1.1","String"
"25.8.1.5101","murmurHash3_64",0,0,"","","System","
Computes the [MurmurHash3](https://github.com/aappleby/smhasher) hash of the input value.

:::note
The calculated hash values may be equal for the same input values of different argument types.
This affects for example integer types of different size, named and unnamed `Tuple` with the same data, `Map` and the corresponding `Array(Tuple(key, value))` type with the same data.
:::
","murmurHash3_64(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed hash value of the input arguments. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT murmurHash3_64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash3, toTypeName(MurmurHash3) AS type;
```

```response title=Response
┌──────────MurmurHash3─┬─type───┐
│ 11832096901709403633 │ UInt64 │
└──────────────────────┴────────┘
```

","18.10","Hash"
"25.8.1.5101","greaterOrEquals",0,0,"","","System","Compares two values for greater-than-or-equal-to relation.","greaterOrEquals(a, b)
    -- a >= b","- `a` — First value.<sup>[*](#comparison-rules)</sup> - `b` — Second value.<sup>[*](#comparison-rules)</sup> ","Returns `1` if `a` is greater than or equal to `b`, otherwise `0` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT 2 >= 1, 2 >= 2, 1 >= 2;
```

```response title=Response
┌─greaterOrEquals(2, 1)─┬─greaterOrEquals(2, 2)─┬─greaterOrEquals(1, 2)─┐
│                     1 │                     1 │                     0 │
└───────────────────────┴───────────────────────┴───────────────────────┘
```

","1.1","Comparison"
"25.8.1.5101","CRC32",0,1,"","","System","
Calculates the CRC32 checksum of a string using the CRC-32-IEEE 802.3 polynomial and initial value `0xffffffff` (zlib implementation).
","CRC32(s)","- `s` — String to calculate CRC32 for. [`String`](/sql-reference/data-types/string)
","Returns the CRC32 checksum of the string. [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT CRC32('ClickHouse')
```

```response title=Response
┌─CRC32('ClickHouse')─┐
│          1538217360 │
└─────────────────────┘
```

","20.1","String"
"25.8.1.5101","printf",0,0,"","","System","
The `printf` function formats the given string with the values (strings, integers, floating-points etc.) listed in the arguments, similar to printf function in C++.
The format string can contain format specifiers starting with `%` character.
Anything not contained in `%` and the following format specifier is considered literal text and copied verbatim into the output.
Literal `%` character can be escaped by `%%`.
","printf(format[, sub1, sub2, ...])","- `format` — The format string with `%` specifiers. [`String`](/sql-reference/data-types/string)
- `sub1, sub2, ...` — Optional. Zero or more values to substitute into the format string. [`Any`](/sql-reference/data-types)
","Returns a formatted string. [`String`](/sql-reference/data-types/string)","**C++-style formatting**

```sql title=Query
SELECT printf('%%%s %s %d', 'Hello', 'World', 2024);
```

```response title=Response
┌─printf('%%%s %s %d', 'Hello', 'World', 2024)─┐
│ %Hello World 2024                            │
└──────────────────────────────────────────────┘
```

","24.8","String Replacement"
"25.8.1.5101","domainWithoutWWWRFC",0,0,"","","System","Similar to `domainWithoutWWW` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.8.1.5101","arrayEnumerateDenseRanked",0,0,"","","System","Returns an array the same size as the source array, indicating where each element first appears in the source array. It allows for enumeration of a multidimensional array with the ability to specify how deep to look inside the array.","arrayEnumerateDenseRanked(clear_depth, arr, max_array_depth)","- `clear_depth` — Enumerate elements at the specified level separately. Must be less than or equal to `max_arr_depth`. [`UInt*`](/sql-reference/data-types/int-uint)
- `arr` — N-dimensional array to enumerate. [`Array(T)`](/sql-reference/data-types/array)
- `max_array_depth` — The maximum effective depth. Must be less than or equal to the depth of `arr`. [`UInt*`](/sql-reference/data-types/int-uint)
","Returns an array denoting where each element first appears in the source array [`Array`](/sql-reference/data-types/array)","**Basic usage**

```sql title=Query
-- With clear_depth=1 and max_array_depth=1, the result is identical to what arrayEnumerateDense would give.

SELECT arrayEnumerateDenseRanked(1,[10, 20, 10, 30],1);
```

```response title=Response
[1,2,1,3]
```

**Usage with a multidimensional array**

```sql title=Query
-- In this example, arrayEnumerateDenseRanked is used to obtain an array indicating, for each element of the
-- multidimensional array, what its position is among elements of the same value.
-- For the first row of the passed array, [10, 10, 30, 20], the corresponding first row of the result is [1, 1, 2, 3],
-- indicating that 10 is the first number encountered in position 1 and 2, 30 the second number encountered in position 3
-- and 20 is the third number encountered in position 4.
-- For the second row, [40, 50, 10, 30], the corresponding second row of the result is [4,5,1,2], indicating that 40
-- and 50 are the fourth and fifth numbers encountered in position 1 and 2 of that row, that another 10
-- (the first encountered number) is in position 3 and 30 (the second number encountered) is in the last position.

SELECT arrayEnumerateDenseRanked(1,[[10,10,30,20],[40,50,10,30]],2);
```

```response title=Response
[[1,1,2,3],[4,5,1,2]]
```

**Example with increased clear_depth**

```sql title=Query
-- Changing clear_depth=2 results in the enumeration occurring separately for each row anew.

SELECT arrayEnumerateDenseRanked(2,[[10,10,30,20],[40,50,10,30]],2);
```

```response title=Response
[[1, 1, 2, 3], [1, 2, 3, 4]]
```

","20.1","Arrays"
"25.8.1.5101","reinterpretAsUUID",0,0,"","","System","","","","","","",""
"25.8.1.5101","simpleJSONExtractFloat",0,0,"","","System","
Parses `Float64` from the value of the field named `field_name`.
If `field_name` is a string field, it tries to parse a number from the beginning of the string.
If the field does not exist, or it exists but does not contain a number, it returns `0`.
","simpleJSONExtractFloat(json, field_name)","- `json` — The JSON in which the field is searched for. [`String`](/sql-reference/data-types/string)
- `field_name` — The name of the field to search for. [`const String`](/sql-reference/data-types/string)
","Returns the number parsed from the field if the field exists and contains a number, otherwise `0`. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
CREATE TABLE jsons
(
    `json` String
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractFloat(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
0
-4000
0
-3.4
5
```

","21.4","JSON"
"25.8.1.5101","generateULID",0,0,"","","System","
Generates a Universally Unique Lexicographically Sortable Identifier (ULID).
This function takes an optional argument, the value of which is discarded to generate different values in case the function is called multiple times.
The function returns a value of type FixedString(26).
","","","","**ulid**

```sql title=Query
SELECT generateULID()
```

```response title=Response

```

**multiple**

```sql title=Query
SELECT generateULID(1), generateULID(2)
```

```response title=Response

```

","","ULID"
"25.8.1.5101","randLogNormal",0,0,"","","System","
Returns a random Float64 number drawn from a [log-normal distribution](https://en.wikipedia.org/wiki/Log-normal_distribution).
    ","randLogNormal(mean, stddev[, x])","- `mean` — The mean value of distribution. [`Float64`](/sql-reference/data-types/float)
- `stddev` — The standard deviation of the distribution. [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified log-normal distribution. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT randLogNormal(100, 5) FROM numbers(5)
```

```response title=Response
┌─randLogNormal(100, 5)─┐
│  1.295699673937363e48 │
│  9.719869109186684e39 │
│  6.110868203189557e42 │
│  9.912675872925529e39 │
│ 2.3564708490552458e42 │
└───────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","ifNull",0,1,"","","System","
Returns an alternative value if the first argument is `NULL`.
    ","ifNull(x, alt)","- `x` — The value to check for `NULL`. [`Any`](/sql-reference/data-types)
- `alt` — The value that the function returns if `x` is `NULL`. [`Any`](/sql-reference/data-types)
","Returns the value of `x` if it is not `NULL`, otherwise `alt`. [`Any`](/sql-reference/data-types)","**Usage example**

```sql title=Query
SELECT ifNull('a', 'b'), ifNull(NULL, 'b');
```

```response title=Response
┌─ifNull('a', 'b')─┬─ifNull(NULL, 'b')─┐
│ a                │ b                 │
└──────────────────┴───────────────────┘
```

","1.1","Null"
"25.8.1.5101","h3EdgeLengthM",0,0,"","","System","
Calculates the average length of an [H3](https://h3geo.org/docs/core-library/h3Indexing/) hexagon edge in meters.
    ","h3EdgeLengthM(resolution)","- `resolution` — Index resolution. Range: `[0, 15]`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the average edge length of an [H3](#h3-index) hexagon in meters. [`Float64`](/sql-reference/data-types/float)","**Get edge length for maximum resolution**

```sql title=Query
SELECT h3EdgeLengthM(15) AS edgeLengthM
```

```response title=Response
┌─edgeLengthM─┐
│ 0.509713273 │
└─────────────┘
```

","20.1","Geo"
"25.8.1.5101","arrayRotateLeft",0,0,"","","System","Rotates an array to the left by the specified number of elements. Negative values of `n` are treated as rotating to the right by the absolute value of the rotation.","arrayRotateLeft(arr, n)","- `arr` — The array for which to rotate the elements.[`Array(T)`](/sql-reference/data-types/array). - `n` — Number of elements to rotate. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint). ","An array rotated to the left by the specified number of elements [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayRotateLeft([1,2,3,4,5,6], 2) as res;
```

```response title=Response
[3,4,5,6,1,2]
```

**Negative value of n**

```sql title=Query
SELECT arrayRotateLeft([1,2,3,4,5,6], -2) as res;
```

```response title=Response
[5,6,1,2,3,4]
```

","23.8","Arrays"
"25.8.1.5101","changeMonth",0,0,"","","System","Changes the month component of a date or date time.","changeMonth(date_or_datetime, value);","- `date_or_datetime` — The value to change. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `value` — The new value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a value of the same type as `date_or_datetime` with modified month component. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Usage example**

```sql title=Query
SELECT changeMonth('2024-01-01'::DateTime, 12)
```

```response title=Response
2024-12-01 00:00:00
```

","24.7","Dates and Times"
"25.8.1.5101","cutToFirstSignificantSubdomainWithWWWRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainWithWWW` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.8.1.5101","intDiv",0,0,"","","System","
Performs an integer division of two values `x` by `y`. In other words it
computes the quotient rounded down to the next smallest integer.

The result has the same width as the dividend (the first parameter).

An exception is thrown when dividing by zero, when the quotient does not fit
in the range of the dividend, or when dividing a minimal negative number by minus one.
    ","intDiv(x, y)","- `x` — Left hand operand. - `y` — Right hand operand. ","Result of integer division of `x` and `y`","**Integer division of two floats**

```sql title=Query
SELECT intDiv(toFloat64(1), 0.001) AS res, toTypeName(res)
```

```response title=Response
┌──res─┬─toTypeName(intDiv(toFloat64(1), 0.001))─┐
│ 1000 │ Int64                                   │
└──────┴─────────────────────────────────────────┘
```

**Quotient does not fit in the range of the dividend**

```sql title=Query
SELECT
intDiv(1, 0.001) AS res,
toTypeName(res)
```

```response title=Response
Received exception from server (version 23.2.1):
Code: 153. DB::Exception: Received from localhost:9000. DB::Exception:
Cannot perform integer division, because it will produce infinite or too
large number: While processing intDiv(1, 0.001) AS res, toTypeName(res).
(ILLEGAL_DIVISION)
```

","1.1","Arithmetic"
"25.8.1.5101","dateTimeToSnowflake",0,0,"","","System","","","","","","",""
"25.8.1.5101","domain",0,0,"","","System","
Extracts the hostname from a URL.

The URL can be specified with or without a scheme.
If the argument can't be parsed as URL, the function returns an empty string.
        ","","","","**domain**

```sql title=Query
SELECT domain('svn+ssh://some.svn-hosting.com:80/repo/trunk')
```

```response title=Response

```

","","URL"
"25.8.1.5101","cutToFirstSignificantSubdomain",0,0,"","","System","Returns the part of the domain that includes top-level subdomains up to the ""first significant subdomain"" (see documentation of the `firstSignificantSubdomain`).","","","","**cutToFirstSignificantSubdomain1**

```sql title=Query
SELECT cutToFirstSignificantSubdomain('https://news.clickhouse.com.tr/')
```

```response title=Response

```

**cutToFirstSignificantSubdomain2**

```sql title=Query
SELECT cutToFirstSignificantSubdomain('www.tr')
```

```response title=Response

```

**cutToFirstSignificantSubdomain3**

```sql title=Query
SELECT cutToFirstSignificantSubdomain('tr')
```

```response title=Response

```

","","URL"
"25.8.1.5101","getMacro",0,0,"","","System","","","","","","",""
"25.8.1.5101","toYear",0,0,"","","System","
Returns the year component (AD) of a `Date` or `DateTime` value.
    ","toYear(datetime)","- `datetime` — Date or date with time to get the year from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the year of the given Date or DateTime [`UInt16`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toYear(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toYear(toDateTime('2023-04-21 10:20:30'))─┐
    │                                     2023  │
    └───────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","log",0,1,"","","System","
Returns the natural logarithm of the argument.
","log(x)","- `x` — The number for which to compute the natural logarithm of. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the natural logarithm of `x`. [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT log(10);
```

```response title=Response
2.302585092994046
```

","1.1","Mathematical"
"25.8.1.5101","errorCodeToName",0,0,"","","System","","","","","","",""
"25.8.1.5101","toTimeOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3GetDestinationIndexFromUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDate32OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","addMinutes",0,0,"","","System","
Adds a specified number of minutes to a date, a date with time or a string-encoded date or date with time.
    ","addMinutes(datetime, num)","- `datetime` — Date or date with time to add specified number of minutes to. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of minutes to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` minutes [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64(3)`](/sql-reference/data-types/datetime64)","**Add minutes to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addMinutes(date, 20) AS add_minutes_with_date,
    addMinutes(date_time, 20) AS add_minutes_with_date_time,
    addMinutes(date_time_string, 20) AS add_minutes_with_date_time_string
```

```response title=Response
┌─add_minutes_with_date─┬─add_minutes_with_date_time─┬─add_minutes_with_date_time_string─┐
│   2024-01-01 00:20:00 │        2024-01-01 00:20:00 │           2024-01-01 00:20:00.000 │
└───────────────────────┴────────────────────────────┴───────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 minute)
```

```response title=Response
┌─plus(CAST('1⋯Minute(10))─┐
│      1998-06-16 00:10:00 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","roundDuration",0,0,"","","System","
Rounds a number down to the closest from a set of commonly used durations: `1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000`.
If the number is less than one, it returns `0`.
","roundDuration(num)","- `num` — A number to round to one of the numbers in the set of common durations. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `0`, for `num` < 1. Otherwise, one of: `1, 10, 30, 60, 120, 180, 240, 300, 600, 1200, 1800, 3600, 7200, 18000, 36000`. [`UInt16`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT *, roundDuration(*) FROM system.numbers WHERE number IN (0, 9, 19, 47, 101, 149, 205, 271, 421, 789, 1423, 2345, 4567, 9876, 24680, 42573)
```

```response title=Response
┌─number─┬─roundDuration(number)─┐
│      0 │                     0 │
│      9 │                     1 │
│     19 │                    10 │
│     47 │                    30 │
│    101 │                    60 │
│    149 │                   120 │
│    205 │                   180 │
│    271 │                   240 │
│    421 │                   300 │
│    789 │                   600 │
│   1423 │                  1200 │
│   2345 │                  1800 │
│   4567 │                  3600 │
│   9876 │                  7200 │
│  24680 │                 18000 │
│  42573 │                 36000 │
└────────┴───────────────────────┘
```

","1.1","Rounding"
"25.8.1.5101","URLPathHierarchy",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3HexRing",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3GetUnidirectionalEdgesFromHexagon",0,0,"","","System","","","","","","",""
"25.8.1.5101","simpleJSONExtractUInt",0,0,"","","System","
Parses `UInt64` from the value of the field named `field_name`.
If `field_name` is a string field, it tries to parse a number from the beginning of the string.
If the field does not exist, or it exists but does not contain a number, it returns `0`.
","simpleJSONExtractUInt(json, field_name)","- `json` — The JSON in which the field is searched for. [`String`](/sql-reference/data-types/string)
- `field_name` — The name of the field to search for. [`const String`](/sql-reference/data-types/string)
","Returns the number parsed from the field if the field exists and contains a number, `0` otherwise [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
CREATE TABLE jsons
(
    `json` String
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO jsons VALUES ('{""foo"":""4e3""}');
INSERT INTO jsons VALUES ('{""foo"":3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractUInt(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
0
4
0
3
5
```

","21.4","JSON"
"25.8.1.5101","getSettingOrDefault",0,0,"","","System","
Returns the current value of a custom setting or returns the default value specified in the 2nd argument if the custom setting is not set in the current profile.
","getSettingOrDefault('custom_setting', default_value)","- `custom_setting` — The setting name. [`String`](/sql-reference/data-types/string)
- `default_value` — Value to return if custom_setting is not set. Value may be of any data type or Null. ","The setting's current value or the default_value if setting is not set.","**getSettingOrDefault**

```sql title=Query
SELECT getSettingOrDefault('custom_undef1', 'my_value');
```

```response title=Response
my_value
```

**getSettingOrDefault**

```sql title=Query
SELECT getSettingOrDefault('custom_undef1', 100);
```

```response title=Response
100
```

**getSettingOrDefault**

```sql title=Query
SELECT getSettingOrDefault('custom_undef1', NULL);
```

```response title=Response
NULL
```

","","Other"
"25.8.1.5101","ngramMinHashArgCaseInsensitive",0,0,"","","System","
Splits a ASCII string into n-grams of `ngramsize` symbols and returns the n-grams with minimum and maximum hashes, calculated by the [`ngramMinHashCaseInsensitive`](#ngramMinHashCaseInsensitive) function with the same input.
It is case insensitive.
","ngramMinHashArgCaseInsensitive(string[, ngramsize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two tuples with `hashnum` n-grams each. [`Tuple(Tuple(String))`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT ngramMinHashArgCaseInsensitive('ClickHouse') AS Tuple;
```

```response title=Response
┌─Tuple─────────────────────────────────────────────────────────────────────────┐
│ (('ous','ick','lic','kHo','use','Cli'),('kHo','lic','ick','ous','ckH','Hou')) │
└───────────────────────────────────────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","ngramMinHashUTF8",0,0,"","","System","
Splits a UTF-8 string into n-grams of `ngramsize` symbols and calculates hash values for each n-gram and returns a tuple with these hashes.
Uses `hashnum` minimum hashes to calculate the minimum hash and `hashnum` maximum hashes to calculate the maximum hash.
It is case sensitive.

Can be used to detect semi-duplicate strings with [`tupleHammingDistance`](../functions/tuple-functions.md/#tuplehammingdistance).
For two strings, if the returned hashes are the same for both strings, then those strings are the same.
","ngramMinHashUTF8(string[, ngramsize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two hashes — the minimum and the maximum. [`Tuple`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT ngramMinHashUTF8('ClickHouse') AS Tuple;
```

```response title=Response
┌─Tuple──────────────────────────────────────┐
│ (18333312859352735453,6742163577938632877) │
└────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","compareSubstrings",0,0,"","","System","
Compares two strings lexicographically.
","compareSubstrings(s1, s2, s1_offset, s2_offset, num_bytes)","- `s1` — The first string to compare. [`String`](/sql-reference/data-types/string)
- `s2` — The second string to compare. [`String`](/sql-reference/data-types/string)
- `s1_offset` — The position (zero-based) in `s1` from which the comparison starts. [`UInt*`](/sql-reference/data-types/int-uint)
- `s2_offset` — The position (zero-based index) in `s2` from which the comparison starts. [`UInt*`](/sql-reference/data-types/int-uint)
- `num_bytes` — The maximum number of bytes to compare in both strings. If `s1_offset` (or `s2_offset`) + `num_bytes` exceeds the end of an input string, `num_bytes` will be reduced accordingly. [`UInt*`](/sql-reference/data-types/int-uint)
","Returns:
- `-1` if `s1`[`s1_offset` : `s1_offset` + `num_bytes`] < `s2`[`s2_offset` : `s2_offset` + `num_bytes`].
- `0` if `s1`[`s1_offset` : `s1_offset` + `num_bytes`] = `s2`[`s2_offset` : `s2_offset` + `num_bytes`].
- `1` if `s1`[`s1_offset` : `s1_offset` + `num_bytes`] > `s2`[`s2_offset` : `s2_offset` + `num_bytes`].
     [`Int8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT compareSubstrings('Saxony', 'Anglo-Saxon', 0, 6, 5) AS result
```

```response title=Response
┌─result─┐
│      0 │
└────────┘
```

","25.2","String"
"25.8.1.5101","plus",0,0,"","","System","
Calculates the sum of two values `x` and `y`. Alias: `x + y` (operator).
It is possible to add an integer and a date or date with time. The former
operation increments the number of days in the date, the latter operation
increments the number of seconds in the date with time.
    ","plus(x, y)","- `x` — Left hand operand. - `y` — Right hand operand. ","Returns the sum of x and y","**Adding two numbers**

```sql title=Query
SELECT plus(5,5)
```

```response title=Response
10
```

**Adding an integer and a date**

```sql title=Query
SELECT plus(toDate('2025-01-01'),5)
```

```response title=Response
2025-01-06
```

","1.1","Arithmetic"
"25.8.1.5101","readWKTMultiPolygon",0,0,"","","System","","","","","","",""
"25.8.1.5101","subtractYears",0,0,"","","System","
Subtracts a specified number of years from a date, a date with time or a string-encoded date or date with time.
    ","subtractYears(datetime, num)","- `datetime` — Date or date with time to subtract specified number of years from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of years to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` years [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract years from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractYears(date, 1) AS subtract_years_with_date,
    subtractYears(date_time, 1) AS subtract_years_with_date_time,
    subtractYears(date_time_string, 1) AS subtract_years_with_date_time_string
```

```response title=Response
┌─subtract_years_with_date─┬─subtract_years_with_date_time─┬─subtract_years_with_date_time_string─┐
│               2023-01-01 │           2023-01-01 00:00:00 │              2023-01-01 00:00:00.000 │
└──────────────────────────┴───────────────────────────────┴──────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 year)
```

```response title=Response
┌─minus(CAST('⋯alYear(10))─┐
│               1988-06-16 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","detectLanguageMixed",0,0,"","","System","","","","","","",""
"25.8.1.5101","acosh",0,0,"","","System","
Returns the inverse hyperbolic cosine.
","acosh(x)","- `x` — Hyperbolic cosine of angle. Values from the interval: `1 ≤ x < +∞`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the angle, in radians. Values from the interval: `0 ≤ acosh(x) < +∞`. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT acosh(1)
```

```response title=Response
0
```

","20.12","Mathematical"
"25.8.1.5101","arrayPushBack",0,0,"","","System","Adds one item to the end of the array.","arrayPushBack(arr, x)","- `arr` — The array for which to add value `x` to the end of. [`Array(T)`](/sql-reference/data-types/array)
- `x` — 
- Single value to add to the end of the array. [`Array(T)`](/sql-reference/data-types/array).

:::note
- Only numbers can be added to an array with numbers, and only strings can be added to an array of strings.
- When adding numbers, ClickHouse automatically sets the type of `x` for the data type of the array.
- Can be `NULL`. The function adds a `NULL` element to an array, and the type of array elements converts to `Nullable`.

For more information about the types of data in ClickHouse, see [Data types](/sql-reference/data-types).
:::
     ","Returns an array identical to `arr` but with an additional value `x` at the end of the array [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayPushBack(['a'], 'b') AS res;
```

```response title=Response
['a','b']
```

","1.1","Arrays"
"25.8.1.5101","domainWithoutWWW",0,0,"","","System","
Extracts the hostname from a URL, removing the leading ""www."" if present.

The URL can be specified with or without a scheme.
If the argument can't be parsed as URL, the function returns an empty string.
        ","","","","**domainWithoutWWW**

```sql title=Query
SELECT domainWithoutWWW('https://www.clickhouse.com')
```

```response title=Response

```

","","URL"
"25.8.1.5101","ngramSearchUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONExtractBool",0,0,"","","System","","","","","","",""
"25.8.1.5101","tupleHammingDistance",0,0,"","","System","","","","","","",""
"25.8.1.5101","readWKBMultiPolygon",0,0,"","","System","
        Parses a Well-Known Binary (WKB) representation of a MultiPolygon geometry and returns it in the internal ClickHouse format.
        ","readWKBMultiPolygon(wkt_string)","- `wkb_string` — The input WKB string representing a MultiPolygon geometry. [`String`](/sql-reference/data-types/string)
","The function returns a ClickHouse internal representation of the MultiPolygon geometry.","**first call**

```sql title=Query
SELECT readWKBMultiPolygon(unhex('0106000000020000000103000000020000000500000000000000000000400000000000000000000000000000244000000000000000000000000000002440000000000000244000000000000000000000000000002440000000000000004000000000000000000500000000000000000010400000000000001040000000000000144000000000000010400000000000001440000000000000144000000000000010400000000000001440000000000000104000000000000010400103000000010000000400000000000000000024c000000000000024c000000000000024c000000000000022c000000000000022c0000000000000244000000000000024c000000000000024c0'));
```

```response title=Response
┌─readWKBMultiPolygon(unhex'01060000000200000001030000000200000005000000000000000000004000000000000000000000000000002440...'))─┐
        │ [[[(2,0),(10,0),(10,10),(0,10),(2,0)],[(4,4),(5,4),(5,5),(4,5),(4,4)]],[[(-10,-10),(-10,-9),(-9,10),(-10,-10)]]]             │
        └──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.8.1.5101","h3ExactEdgeLengthRads",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetDateTime",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the DateTime if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","h3ToGeoBoundary",0,0,"","","System","
Returns array of pairs `(lat, lon)`, which corresponds to the boundary of the provided H3 index.
    ","h3ToGeoBoundary(h3Index)","- `h3Index` — H3 index. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns an array of coordinate pairs `(lat, lon)` that define the boundary of the H3 hexagon. [`Array(Tuple(Float64, Float64))`](/sql-reference/data-types/array)","**Get boundary coordinates for an H3 index**

```sql title=Query
SELECT h3ToGeoBoundary(644325524701193974) AS coordinates
```

```response title=Response
┌─h3ToGeoBoundary(599686042433355775)────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ [(37.2713558667319,-121.91508032705622),(37.353926450852256,-121.8622232890249),(37.42834118609435,-121.92354999630156),(37.42012867767779,-122.03773496427027),(37.33755608435299,-122.090428929044),(37.26319797461824,-122.02910130919001)] │
└────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","21.11","Geo"
"25.8.1.5101","arrayShiftRight",0,0,"","","System","
Shifts an array to the right by the specified number of elements.
New elements are filled with the provided argument or the default value of the array element type.
If the number of elements is negative, the array is shifted to the left.
    ","arrayShiftRight(arr, n[, default])","- `arr` — The array for which to shift the elements. [`Array(T)`](/sql-reference/data-types/array)
- `n` — Number of elements to shift. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)
- `default` — Optional. Default value for new elements. ","An array shifted to the right by the specified number of elements [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayShiftRight([1, 2, 3, 4, 5, 6], 2) as res;
```

```response title=Response
[0, 0, 1, 2, 3, 4]
```

**Negative value of n**

```sql title=Query
SELECT arrayShiftRight([1, 2, 3, 4, 5, 6], -2) as res;
```

```response title=Response
[3, 4, 5, 6, 0, 0]
```

**Using a default value**

```sql title=Query
SELECT arrayShiftRight([1, 2, 3, 4, 5, 6], 2, 42) as res;
```

```response title=Response
[42, 42, 1, 2, 3, 4]
```

","23.8","Arrays"
"25.8.1.5101","h3ToString",0,0,"","","System","","","","","","",""
"25.8.1.5101","numericIndexedVectorToMap",0,0,"","","System","Converts a NumericIndexedVector to a map.","numericIndexedVectorToMap(numericIndexedVector)","- `numericIndexedVector` — A NumericIndexedVector object. ","Map(IndexType, ValueType)","****

```sql title=Query
SELECT numericIndexedVectorToMap(numericIndexedVectorBuild(mapFromArrays([1, 2, 3], [10, 20, 30]))) AS res;
```

```response title=Response
┌─res──────────────┐
│ {1:10,2:20,3:30} │
└──────────────────┘
```

","25.7","Arithmetic"
"25.8.1.5101","arrayRotateRight",0,0,"","","System","Rotates an array to the right by the specified number of elements. Negative values of `n` are treated as rotating to the left by the absolute value of the rotation.","arrayRotateRight(arr, n)","- `arr` — The array for which to rotate the elements.[`Array(T)`](/sql-reference/data-types/array). - `n` — Number of elements to rotate. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint). ","An array rotated to the right by the specified number of elements [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayRotateRight([1,2,3,4,5,6], 2) as res;
```

```response title=Response
[5,6,1,2,3,4]
```

**Negative value of n**

```sql title=Query
SELECT arrayRotateRight([1,2,3,4,5,6], -2) as res;
```

```response title=Response
[3,4,5,6,1,2]
```

","23.8","Arrays"
"25.8.1.5101","hasSubsequence",0,1,"","","System","","","","","","",""
"25.8.1.5101","JSON_VALUE",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONExtract",0,0,"","","System","","","","","","",""
"25.8.1.5101","tumbleStart",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitShiftRight",0,0,"","","System","
Shifts the binary representation of a value to the right by a specified number of bit positions.

A `FixedString` or a `String` is treated as a single multibyte value.

Bits of a `FixedString` value are lost as they are shifted out.
On the contrary, a `String` value is extended with additional bytes, so no bits are lost.
","bitShiftRight(a, N)","- `a` — A value to shift. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `N` — The number of positions to shift. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns the shifted value with type equal to that of `a`.","**Usage example with binary encoding**

```sql title=Query
SELECT 101 AS a, bin(a), bitShiftRight(a, 2) AS a_shifted, bin(a_shifted);
```

```response title=Response
┌───a─┬─bin(101)─┬─a_shifted─┬─bin(bitShiftRight(101, 2))─┐
│ 101 │ 01100101 │        25 │ 00011001                   │
└─────┴──────────┴───────────┴────────────────────────────┘
```

**Usage example with hexadecimal encoding**

```sql title=Query
SELECT 'abc' AS a, hex(a), bitShiftLeft(a, 4) AS a_shifted, hex(a_shifted);
```

```response title=Response
┌─a───┬─hex('abc')─┬─a_shifted─┬─hex(bitShiftRight('abc', 12))─┐
│ abc │ 616263     │           │ 0616                          │
└─────┴────────────┴───────────┴───────────────────────────────┘
```

**Usage example with Fixed String encoding**

```sql title=Query
SELECT toFixedString('abc', 3) AS a, hex(a), bitShiftRight(a, 12) AS a_shifted, hex(a_shifted);
```

```response title=Response
┌─a───┬─hex(toFixedString('abc', 3))─┬─a_shifted─┬─hex(bitShiftRight(toFixedString('abc', 3), 12))─┐
│ abc │ 616263                       │           │ 000616                                          │
└─────┴──────────────────────────────┴───────────┴─────────────────────────────────────────────────┘
```

","1.1","Bit"
"25.8.1.5101","today",0,0,"","","System","Returns the current date at moment of query analysis. Same as `toDate(now())`.","today()","","Returns the current date [`Date`](/sql-reference/data-types/date)","**Usage example**

```sql title=Query
SELECT today() AS today, curdate() AS curdate, current_date() AS current_date FORMAT Pretty
```

```response title=Response
┏━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓
┃      today ┃    curdate ┃ current_date ┃
┡━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩
│ 2025-03-03 │ 2025-03-03 │   2025-03-03 │
└────────────┴────────────┴──────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","tryBase58Decode",0,0,"","","System","
Like [`base58Decode`](#base58Decode), but returns an empty string in case of error.
","tryBase58Decode(encoded)","- `encoded` — String column or constant. If the string is not valid Base58-encoded, returns an empty string in case of error. [`String`](/sql-reference/data-types/string)
","Returns a string containing the decoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT tryBase58Decode('3dc8KtHrwM') AS res, tryBase58Decode('invalid') AS res_invalid;
```

```response title=Response
┌─res─────┬─res_invalid─┐
│ Encoded │             │
└─────────┴─────────────┘
```

","22.10","String"
"25.8.1.5101","geohashesInBox",0,0,"","","System","
Returns an array of [geohash](https://en.wikipedia.org/wiki/Geohash)-encoded strings of given precision that fall inside and intersect boundaries of given box, essentially a 2D grid flattened into an array.

:::note
All coordinate parameters must be of the same type: either `Float32` or `Float64`.
:::

This function throws an exception if the size of the resulting array exceeds more than 10,000,000 items.
    ","geohashesInBox(longitude_min, latitude_min, longitude_max, latitude_max, precision)","- `longitude_min` — Minimum longitude. Range: `[-180°, 180°]`. [`Float32`](/sql-reference/data-types/float) or [`Float64`](/sql-reference/data-types/float)
- `latitude_min` — Minimum latitude. Range: `[-90°, 90°]`. [`Float32`](/sql-reference/data-types/float) or [`Float64`](/sql-reference/data-types/float)
- `longitude_max` — Maximum longitude. Range: `[-180°, 180°]`. [`Float32`](/sql-reference/data-types/float) or [`Float64`](/sql-reference/data-types/float)
- `latitude_max` — Maximum latitude. Range: `[-90°, 90°]`. [`Float32`](/sql-reference/data-types/float) or [`Float64`](/sql-reference/data-types/float)
- `precision` — Geohash precision. Range: `[1, 12]`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns an array of precision-long strings of geohash-boxes covering the provided area, or an empty array if the minimum longitude and latitude values aren't less than the corresponding maximum values. [`Array(String)`](/sql-reference/data-types/array)","**Basic usage**

```sql title=Query
SELECT geohashesInBox(24.48, 40.56, 24.785, 40.81, 4) AS thasos
```

```response title=Response
┌─thasos──────────────────────────────────────┐
│ ['sx1q','sx1r','sx32','sx1w','sx1x','sx38'] │
└─────────────────────────────────────────────┘
```

","20.1","Geo"
"25.8.1.5101","hasSubsequenceUTF8",0,1,"","","System","","","","","","",""
"25.8.1.5101","rightPadUTF8",0,0,"","","System","
Pads the string from the right with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length.
Unlike [`rightPad`](#rightPad) which measures the string length in bytes, the string length is measured in code points.
","rightPadUTF8(string, length[, pad_string])","- `string` — Input string that should be padded. [`String`](/sql-reference/data-types/string)
- `length` — The length of the resulting string. If the value is smaller than the input string length, then the input string is shortened to `length` characters. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `pad_string` — Optional. The string to pad the input string with. If not specified, then the input string is padded with spaces. [`String`](/sql-reference/data-types/string)
","Returns a right-padded string of the given length. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT rightPadUTF8('абвг', 7, '*'), rightPadUTF8('абвг', 7)
```

```response title=Response
┌─rightPadUTF8('абвг', 7, '*')─┬─rightPadUTF8('абвг', 7)─┐
│ абвг***                      │ абвг                    │
└──────────────────────────────┴─────────────────────────┘
```

","21.8","String"
"25.8.1.5101","rightPad",0,0,"","","System","
Pads a string from the right with spaces or with a specified string (multiple times, if needed) until the resulting string reaches the specified `length`.
","rightPad(string, length[, pad_string])","- `string` — Input string that should be padded. [`String`](/sql-reference/data-types/string)
- `length` — The length of the resulting string. If the value is smaller than the input string length, then the input string is shortened to `length` characters. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `pad_string` — Optional. The string to pad the input string with. If not specified, then the input string is padded with spaces. [`String`](/sql-reference/data-types/string)
","Returns a right-padded string of the given length. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT rightPad('abc', 7, '*'), rightPad('abc', 7)
```

```response title=Response
┌─rightPad('abc', 7, '*')─┬─rightPad('abc', 7)─┐
│ abc****                 │ abc                │
└─────────────────────────┴────────────────────┘
```

","21.8","String"
"25.8.1.5101","aes_encrypt_mysql",0,0,"","","System","","","","","","",""
"25.8.1.5101","hasTokenOrNull",0,0,"","","System","Performs lookup of needle in haystack using tokenbf_v1 index. Returns null if needle is ill-formed.","","","","","","String Search"
"25.8.1.5101","dictGetUUIDOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UUID if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","hasToken",0,0,"","","System","Performs lookup of needle in haystack using tokenbf_v1 index.","","","","","","String Search"
"25.8.1.5101","idnaEncode",0,0,"","","System","
Returns the ASCII representation (ToASCII algorithm) of a domain name according to the [Internationalized Domain Names in Applications](https://en.wikipedia.org/wiki/Internationalized_domain_name#Internationalizing_Domain_Names_in_Applications) (IDNA) mechanism.
The input string must be UTF-encoded and translatable to an ASCII string, otherwise an exception is thrown.

:::note
No percent decoding or trimming of tabs, spaces or control characters is performed.
:::
","idnaEncode(s)","- `s` — Input string. [`String`](/sql-reference/data-types/string)
","Returns an ASCII representation of the input string according to the IDNA mechanism of the input value. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT idnaEncode('straße.münchen.de')
```

```response title=Response
┌─idnaEncode('straße.münchen.de')─────┐
│ xn--strae-oqa.xn--mnchen-3ya.de     │
└─────────────────────────────────────┘
```

","24.1","String"
"25.8.1.5101","tan",0,1,"","","System","
Returns the tangent of the argument.
","tan(x)","- `x` — The angle in radians. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the tangent of `x`. [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT tan(0);
```

```response title=Response
0
```

","1.1","Mathematical"
"25.8.1.5101","substring",0,1,"","","System","
Returns the substring of a string `s` which starts at the specified byte index `offset`.
Byte counting starts from 1 with the following logic:
- If `offset` is `0`, an empty string is returned.
- If `offset` is negative, the substring starts `pos` characters from the end of the string, rather than from the beginning.

An optional argument `length` specifies the maximum number of bytes the returned substring may have.
","substring(s, offset[, length])","- `s` — The string to calculate a substring from. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring) or [`Enum`](/sql-reference/data-types/enum)
- `offset` — The starting position of the substring in `s`. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `length` — Optional. The maximum length of the substring. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a substring of `s` with `length` many bytes, starting at index `offset`. [`String`](/sql-reference/data-types/string)","**Basic usage**

```sql title=Query
SELECT 'database' AS db, substr(db, 5), substr(db, 5, 1)
```

```response title=Response
┌─db───────┬─substring('database', 5)─┬─substring('database', 5, 1)─┐
│ database │ base                     │ b                           │
└──────────┴──────────────────────────┴─────────────────────────────┘
```

","1.1","String"
"25.8.1.5101","toDateTime64OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","regionHierarchy",0,0,"","","System","","","","","","",""
"25.8.1.5101","polygonsWithinCartesian",0,0,"","","System","","","","","","",""
"25.8.1.5101","materialize",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimalString",0,1,"","","System","
Returns string representation of a number. First argument is the number of any numeric type,
second argument is the desired number of digits in fractional part. Returns String.

        ","","","","**toDecimalString**

```sql title=Query
SELECT toDecimalString(2.1456,2)
```

```response title=Response

```

","","Type Conversion"
"25.8.1.5101","readWKTMultiLineString",0,0,"","","System","
Parses a Well-Known Text (WKT) representation of a MultiLineString geometry and returns it in the internal ClickHouse format.
","readWKTMultiLineString(wkt_string)","- `wkt_string` — The input WKT string representing a MultiLineString geometry. [`String`](/sql-reference/data-types/string)
","The function returns a ClickHouse internal representation of the multilinestring geometry.","**first call**

```sql title=Query
SELECT readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))');
```

```response title=Response
┌─readWKTMultiLineString('MULTILINESTRING ((1 1, 2 2, 3 3), (4 4, 5 5, 6 6))')─┐
│ [[(1,1),(2,2),(3,3)],[(4,4),(5,5),(6,6)]]                                    │
└──────────────────────────────────────────────────────────────────────────────┘
```

**second call**

```sql title=Query
SELECT toTypeName(readWKTLineString('MULTILINESTRING ((1 1, 2 2, 3 3, 1 1))'));
```

```response title=Response
┌─toTypeName(readWKTLineString('MULTILINESTRING ((1 1, 2 2, 3 3, 1 1))'))─┐
│ MultiLineString                                                         │
└─────────────────────────────────────────────────────────────────────────┘
```

","","Geo"
"25.8.1.5101","ignore",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3GetUnidirectionalEdgeBoundary",0,0,"","","System","","","","","","",""
"25.8.1.5101","globalNullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.8.1.5101","fromDaysSinceYearZero32",0,0,"","","System","
For a given number of days elapsed since [1 January 0000](https://en.wikipedia.org/wiki/Year_zero), returns the corresponding date in the [proleptic Gregorian calendar defined by ISO 8601](https://en.wikipedia.org/wiki/Gregorian_calendar#Proleptic_Gregorian_calendar).
The calculation is the same as in MySQL's `FROM_DAYS()` function. The result is undefined if it cannot be represented within the bounds of the [`Date32`](../data-types/date32.md) type.
    ","fromDaysSinceYearZero32(days)","- `days` — The number of days passed since year zero. [`UInt32`](/sql-reference/data-types/int-uint)
","Returns the date corresponding to the number of days passed since year zero. [`Date32`](/sql-reference/data-types/date32)","**Convert days since year zero to dates**

```sql title=Query
SELECT
fromDaysSinceYearZero32(739136) AS date1,
fromDaysSinceYearZero32(toDaysSinceYearZero(toDate('2023-09-08'))) AS date2
```

```response title=Response
┌──────date1─┬──────date2─┐
│ 2023-09-08 │ 2023-09-08 │
└────────────┴────────────┘
```

","23.11","Dates and Times"
"25.8.1.5101","globalNotInIgnoreSet",0,0,"","","System","","","","","","",""
"25.8.1.5101","splitByChar",0,0,"","","System","
Splits a string separated by a specified constant string `separator` of exactly one character into an array of substrings.
Empty substrings may be selected if the separator occurs at the beginning or end of the string, or if there are multiple consecutive separators.

:::note
Setting [`splitby_max_substrings_includes_remaining_string`](../../operations/settings/settings.md#splitby_max_substrings_includes_remaining_string) (default: `0`) controls if the remaining string is included in the last element of the result array when argument `max_substrings > 0`.
:::

Empty substrings may be selected when:
- A separator occurs at the beginning or end of the string
- There are multiple consecutive separators
- The original string `s` is empty
","splitByChar(separator, s[, max_substrings])","- `separator` — The separator must be a single-byte character. [`String`](/sql-reference/data-types/string)
- `s` — The string to split. [`String`](/sql-reference/data-types/string)
- `max_substrings` — Optional. If `max_substrings > 0`, the returned array will contain at most `max_substrings` substrings, otherwise the function will return as many substrings as possible. The default value is `0`.  [`Int64`](/sql-reference/data-types/int-uint)
","Returns an array of selected substrings. [`Array(String)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT splitByChar(',', '1,2,3,abcde');
```

```response title=Response
┌─splitByChar(⋯2,3,abcde')─┐
│ ['1','2','3','abcde']    │
└──────────────────────────┘
```

","1.1","String Splitting"
"25.8.1.5101","toRelativeDayNum",0,0,"","","System","
Converts a date or date with time to the number of days elapsed since a certain fixed point in the past.
The exact point in time is an implementation detail, and therefore this function is not intended to be used standalone.
The main purpose of the function is to calculate the difference in days between two dates or dates with time, e.g., `toRelativeDayNum(dt1) - toRelativeDayNum(dt2)`.
    ","toRelativeDayNum(date)","- `date` — Date or date with time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the number of days from a fixed reference point in the past. [`UInt32`](/sql-reference/data-types/int-uint)","**Get relative day numbers**

```sql title=Query
SELECT toRelativeDayNum(toDate('2023-04-01')) - toRelativeDayNum(toDate('2023-01-01'))
```

```response title=Response
┌─minus(toRela⋯3-01-01')))─┐
│                       90 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","notInIgnoreSet",0,0,"","","System","","","","","","",""
"25.8.1.5101","globalInIgnoreSet",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayConcat",0,0,"","","System","Combines arrays passed as arguments.","arrayConcat(arr1 [, arr2, ... , arrN])","- `arr1 [, arr2, ... , arrN]` — N number of arrays to concatenate. [`Array(T)`](/sql-reference/data-types/array)
","Returns a single combined array from the provided array arguments. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayConcat([1, 2], [3, 4], [5, 6]) AS res
```

```response title=Response
[1, 2, 3, 4, 5, 6]
```

","1.1","Arrays"
"25.8.1.5101","globalNotNullIn",0,0,"","","System","","","","","","",""
"25.8.1.5101","sqrt",0,1,"","","System","
Returns the square root of the argument.
","sqrt(x)","- `x` — The number for which to find the square root of. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the square root of x [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT sqrt(16);
```

```response title=Response
4
```

","1.1","Mathematical"
"25.8.1.5101","notNullIn",0,0,"","","System","","","","","","",""
"25.8.1.5101","globalNullIn",0,0,"","","System","","","","","","",""
"25.8.1.5101","nullIn",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetHierarchy",0,0,"","","System","
Creates an array, containing all the parents of a key in the hierarchical dictionary.
Accepts 2 parameters: name of the dictionary, key value - expression returning a UInt64-type value.
Returned value: parents for the key, type of Array(UInt64)
","","","","","","Dictionary"
"25.8.1.5101","globalIn",0,0,"","","System","","","","","","",""
"25.8.1.5101","finalizeAggregation",0,0,"","","System","","","","","","",""
"25.8.1.5101","ngramSimHashCaseInsensitiveUTF8",0,0,"","","System","
Splits a UTF-8 string into n-grams of `ngramsize` symbols and returns the n-gram `simhash`.
It is case insensitive.

Can be used for detection of semi-duplicate strings with [bitHammingDistance](../functions/bit-functions.md/#bitHammingDistance). The smaller is the [Hamming Distance](https://en.wikipedia.org/wiki/Hamming_distance) of the calculated `simhashes` of two strings, the more likely these strings are the same.
","ngramSimHashCaseInsensitiveUTF8(string[, ngramsize])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the computed hash value. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT ngramSimHashCaseInsensitiveUTF8('ClickHouse') AS Hash;
```

```response title=Response
┌───────Hash─┐
│ 1636742693 │
└────────────┘
```

","21.1","Hash"
"25.8.1.5101","toStartOfWeek",0,0,"","","System","
Rounds a date or date with time down to the nearest Sunday or Monday.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfWeek(datetime[, mode[, timezone]])","- `datetime` — A date or date with time to convert. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `mode` — Determines the first day of the week as described in the `toWeek()` function. Default `0`. [`UInt8`](/sql-reference/data-types/int-uint)
- `timezone` — The timezone to use for the conversion. If not specified, the server's timezone is used. [`String`](/sql-reference/data-types/string)
","Returns the date of the nearest Sunday or Monday on, or prior to, the given date, depending on the mode [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Round down to the nearest Sunday or Monday**

```sql title=Query
SELECT
        toStartOfWeek(toDateTime('2023-04-21 10:20:30')), /* a Friday */
        toStartOfWeek(toDateTime('2023-04-21 10:20:30'), 1), /* a Friday */
        toStartOfWeek(toDate('2023-04-24')), /* a Monday */
        toStartOfWeek(toDate('2023-04-24'), 1) /* a Monday */
    FORMAT Vertical
```

```response title=Response
Row 1:
    ──────
    toStartOfWeek(toDateTime('2023-04-21 10:20:30')):      2023-04-17
    toStartOfWeek(toDateTime('2023-04-21 10:20:30'), 1):   2023-04-17
    toStartOfWeek(toDate('2023-04-24')):                   2023-04-24
    toStartOfWeek(toDate('2023-04-24'), 1):                2023-04-24
```

","20.1","Dates and Times"
"25.8.1.5101","timeSeriesIdToTagsGroup",0,0,"","","System","Converts the specified identifier of a time series to its group index. Group indices are numbers 0, 1, 2, 3 associated with each unique set of tags in the context of the currently executed query.","timeSeriesIdToTagsGroup(id)","- `id` — Identifier of a time series. [`UInt64`](/sql-reference/data-types/int-uint) or [`UInt128`](/sql-reference/data-types/int-uint) or [`UUID`](/sql-reference/data-types/uuid) or [`FixedString(16)`](/sql-reference/data-types/fixedstring)
","Returns a group index associated with this set of tags. [`UInt64`](/sql-reference/data-types/int-uint)","**Example**

```sql title=Query
SELECT timeSeriesStoreTags(8374283493092, [('region', 'eu'), ('env', 'dev')], '__name__', 'http_requests_count') AS id, timeSeriesIdToTagsGroup(id)
```

```response title=Response
8374283493092    0
```

","25.8","Time Series"
"25.8.1.5101","indexHint",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateTime32",0,0,"","","System","","","","","","",""
"25.8.1.5101","arraySplit",0,0,"","","System","Split a source array into multiple arrays. When `func(x [, y1, ..., yN])` returns something other than zero, the array will be split to the left of the element. The array will not be split before the first element.","arraySplit(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`).[Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda). - `source_arr` — The source array to split [`Array(T)`](/sql-reference/data-types/array). - `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array). ","Returns an array of arrays [`Array(Array(T))`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arraySplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res
```

```response title=Response
[[1, 2, 3], [4, 5]]
```

","20.1","Arrays"
"25.8.1.5101","initcapUTF8",0,0,"","","System","
Like [`initcap`](#initCap), `initcapUTF8` converts the first letter of each word to upper case and the rest to lower case.
Assumes that the string contains valid UTF-8 encoded text.
If this assumption is violated, no exception is thrown and the result is undefined.

:::note
This function does not detect the language, e.g. for Turkish the result might not be exactly correct (i/İ vs. i/I).
If the length of the UTF-8 byte sequence is different for upper and lower case of a code point, the result may be incorrect for this code point.
:::
","initcapUTF8(s)","- `s` — Input string. [`String`](/sql-reference/data-types/string)
","Returns `s` with the first letter of each word converted to upper case. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT initcapUTF8('не тормозит')
```

```response title=Response
┌─initcapUTF8('не тормозит')─┐
│ Не Тормозит                │
└────────────────────────────┘
```

","23.7","String"
"25.8.1.5101","path",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUnixTimestamp64Nano",0,0,"","","System","","","","","","",""
"25.8.1.5101","structureToProtobufSchema",0,0,"","","System","
Function that converts ClickHouse table structure to Protobuf format schema
","","","","**random**

```sql title=Query
SELECT structureToProtobufSchema('s String, x UInt32', 'MessageName') format TSVRaw
```

```response title=Response
syntax = ""proto3"";

message MessageName
{
    bytes s = 1;
    uint32 x = 2;
}
```

","","Other"
"25.8.1.5101","polygonAreaSpherical",0,0,"","","System","","","","","","",""
"25.8.1.5101","base58Encode",0,0,"","","System","
Encodes a string using [Base58](https://tools.ietf.org/id/draft-msporny-base58-01.html) encoding.
","base58Encode(plaintext)","- `plaintext` — Plaintext to encode. [`String`](/sql-reference/data-types/string)
","Returns a string containing the encoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT base58Encode('ClickHouse');
```

```response title=Response
┌─base58Encode('ClickHouse')─┐
│ 4nhk8K7GHXf6zx             │
└────────────────────────────┘
```

","22.7","String"
"25.8.1.5101","ngramDistanceCaseInsensitive",0,0,"","","System","","","","","","",""
"25.8.1.5101","connectionId",0,1,"","","System","","","","","","",""
"25.8.1.5101","startsWith",0,0,"","","System","
Checks whether a string begins with the provided string.
","startsWith(s, prefix)","- `s` — String to check. [`String`](/sql-reference/data-types/string)
- `prefix` — Prefix to check for. [`String`](/sql-reference/data-types/string)
","Returns `1` if `s` starts with `prefix`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT startsWith('ClickHouse', 'Click');
```

```response title=Response
┌─startsWith('⋯', 'Click')─┐
│                        1 │
└──────────────────────────┘
```

","1.1","String"
"25.8.1.5101","initialQueryID",0,0,"","","System","","","","","","",""
"25.8.1.5101","murmurHash2_64",0,0,"","","System","
Computes the [MurmurHash2](https://github.com/aappleby/smhasher) hash of the input value.

:::note
The calculated hash values may be equal for the same input values of different argument types.
This affects for example integer types of different size, named and unnamed `Tuple` with the same data, `Map` and the corresponding `Array(Tuple(key, value))` type with the same data.
:::
","murmurHash2_64(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed hash of the input arguments. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT murmurHash2_64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash2, toTypeName(MurmurHash2) AS type;
```

```response title=Response
┌──────────MurmurHash2─┬─type───┐
│ 11832096901709403633 │ UInt64 │
└──────────────────────┴────────┘
```

","18.10","Hash"
"25.8.1.5101","parseReadableSizeOrNull",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns `NULL`","parseReadableSizeOrNull(x)","- `x` — Readable size with ISO/IEC 80000-13  or decimal byte unit ([String](../../sql-reference/data-types/string.md)) ","Number of bytes, rounded up to the nearest integer, or NULL if unable to parse the input [`Nullable(UInt64)`](/sql-reference/data-types/nullable)","**basic**

```sql title=Query
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes, parseReadableSizeOrNull(readable_sizes) AS sizes;
```

```response title=Response
┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
│ invalid        │    ᴺᵁᴸᴸ │
└────────────────┴─────────┘
```

","","Other"
"25.8.1.5101","numericIndexedVectorPointwiseSubtract",0,0,"","","System","Performs pointwise subtraction between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant. The function returns a new NumericIndexedVector.","numericIndexedVectorPointwiseSubtract(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toInt32(x), [10, 20, 30]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toInt32(x), [10, 20, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseSubtract(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseSubtract(vec1, 2)) AS res2;
```

```response title=Response
┌─res1───────────────────┬─res2────────────┐
│ {1:10,2:10,3:10,4:-30} │ {1:8,2:18,3:28} │
└────────────────────────┴─────────────────┘
```

","25.7","Arithmetic"
"25.8.1.5101","h3GetBaseCell",0,0,"","","System","
Returns the base cell number of the [H3](#h3-index) index.
    ","h3GetBaseCell(index)","- `index` — Hexagon index number. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns the hexagon base cell number. [`UInt8`](/sql-reference/data-types/int-uint)","**Get base cell number**

```sql title=Query
SELECT h3GetBaseCell(612916788725809151) AS basecell
```

```response title=Response
┌─basecell─┐
│       12 │
└──────────┘
```

","20.3","Geo"
"25.8.1.5101","JSONExtractKeysAndValuesRawCaseInsensitive",0,0,"","","System","
Extracts raw key-value pairs from JSON using case-insensitive key matching. This function is similar to [`JSONExtractKeysAndValuesRaw`](#jsonextractkeysandvaluesraw).
        ","JSONExtractKeysAndValuesRawCaseInsensitive(json [, indices_or_keys]...)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the object. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns an array of tuples containing key-value pairs as raw strings. [`Array(Tuple(String, String))`](/sql-reference/data-types/array)","**basic**

```sql title=Query
SELECT JSONExtractKeysAndValuesRawCaseInsensitive('{""Name"": ""Alice"", ""AGE"": 30}')
```

```response title=Response
[('Name','""Alice""'),('AGE','30')]
```

","25.8","JSON"
"25.8.1.5101","intDivOrNull",0,0,"","","System","
Same as `intDiv` but returns NULL when dividing by zero or when dividing a
minimal negative number by minus one.
    ","intDivOrNull(x, y)","- `x` — Left hand operand. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `y` — Right hand operand. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Result of integer division of `x` and `y`, or NULL.","**Integer division by zero**

```sql title=Query
SELECT intDivOrNull(1, 0)
```

```response title=Response
\N
```

**Dividing a minimal negative number by minus 1**

```sql title=Query
SELECT intDivOrNull(-9223372036854775808, -1)
```

```response title=Response
\N
```

","25.5","Arithmetic"
"25.8.1.5101","isIPAddressInRange",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSON_EXISTS",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetDescendants",0,0,"","","System","
Returns all descendants as if dictGetChildren function was applied level times recursively.
Accepts 3 parameters: name of the dictionary, key value - expression returning a UInt64-type value, level — hierarchy level - If level = 0 returns all descendants to the end - UInt8
Returned value: descendants for the key, type of Array(UInt64)
","","","","","","Dictionary"
"25.8.1.5101","readWKBMultiLineString",0,0,"","","System","
            Parses a Well-Known Binary (WKB) representation of a MultiLineString geometry and returns it in the internal ClickHouse format.
            ","readWKBMultiLineString(wkt_string)","- `wkb_string` — The input WKB string representing a MultiLineString geometry. ","The function returns a ClickHouse internal representation of the multilinestring geometry.","**first call**

```sql title=Query
SELECT readWKTMultiLineString(unhex('010500000002000000010200000003000000000000000000f03f000000000000f03f0000000000000040000000000000004000000000000008400000000000000840010200000003000000000000000000104000000000000010400000000000001440000000000000144000000000000018400000000000001840'));
```

```response title=Response
┌─readWKBMultiLineString('unhex('010500000002000000010200000003000000000...'))─┐
            │ [[(1,1),(2,2),(3,3)],[(4,4),(5,5),(6,6)]]                                    │
            └──────────────────────────────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.8.1.5101","mapContainsValue",0,0,"","","System","Checks whether the map has the specified value.","","","","**mapContainsValue**

```sql title=Query
SELECT mapContainsValue(map('k1', 'v1', 'k2', 'v2'), 'v1')
```

```response title=Response

```

","25.5","Map"
"25.8.1.5101","dictGetChildren",0,0,"","","System","
Returns first-level children as an array of indexes. It is the inverse transformation for dictGetHierarchy.
Accepts 2 parameters: name of the dictionary, key value - expression returning a UInt64-type value.
Returned value: first-level descendants for the key, type of Array(UInt64)
","","","","","","Dictionary"
"25.8.1.5101","dictIsIn",0,0,"","","System","
Checks the ancestor of a key through the whole hierarchical chain in the dictionary.
Accepts 3 parameters: name of the dictionary, key to be checked - expression returning a UInt64-type value, alleged ancestor of the key - expression returning a UInt64-type.
Returned value: 0 if key is not a child of the ancestor, 1 if key is a child of the ancestor or if key is the ancestor, type of UInt8
","","","","","","Dictionary"
"25.8.1.5101","dictGetStringOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the String if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","evalMLMethod",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetIPv6OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the IPv6 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","_CAST",0,1,"","","System","","","","","","",""
"25.8.1.5101","dictGetIPv4OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the IPv4 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","UTCTimestamp",0,1,"","","System","
Returns the current date and time at the moment of query analysis. The function is a constant expression.

This function gives the same result that `now('UTC')` would. It was added only for MySQL support. [`now`](#now) is the preferred usage.
    ","UTCTimestamp()","","Returns the current date and time at the moment of query analysis. [`DateTime`](/sql-reference/data-types/datetime)","**Get current UTC timestamp**

```sql title=Query
SELECT UTCTimestamp()
```

```response title=Response
┌──────UTCTimestamp()─┐
│ 2024-05-28 08:32:09 │
└─────────────────────┘
```

","22.11","Dates and Times"
"25.8.1.5101","dictGetFloat64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Float64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","s2RectAdd",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetFloat32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Float32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","keccak256",0,0,"","","System","Calculates the Keccak-256 cryptographic hash of the given string.
        This hash function is widely used in blockchain applications, particularly Ethereum.","SELECT keccak256(message)","- `message` — The input [String](../../sql-reference/data-types/string.md). ","Returns the 32-byte Keccak-256 hash of the input string as a fixed-length string. [`FixedString(32)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT hex(keccak256('hello'))
```

```response title=Response
┌─hex(keccak256('hello'))──────────────────────────────────────────┐
│ 1C8AFF950685C2ED4BC3174F3472287B56D9517B9C948127319A09A7A36DEAC8 │
└──────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","dictGetInt64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","bitTestAll",0,0,"","","System","
Returns result of the [logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction) (AND operator) of all bits at the given positions.
Counts right-to-left, starting at 0.

The logical AND between two bits is true if and only if both input bits are true.
    ","bitTestAll(a, index1[, index2, ... , indexN])","- `a` — An integer value. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)
- `index1, ...` — One or multiple positions of bits. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns the result of the logical conjunction [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example 1**

```sql title=Query
SELECT bitTestAll(43, 0, 1, 3, 5);
```

```response title=Response
┌─bin(43)──┬─bitTestAll(43, 0, 1, 3, 5)─┐
│ 00101011 │                          1 │
└──────────┴────────────────────────────┘
```

**Usage example 2**

```sql title=Query
SELECT bitTestAll(43, 0, 1, 3, 5, 2);
```

```response title=Response
┌─bin(43)──┬─bitTestAll(4⋯1, 3, 5, 2)─┐
│ 00101011 │                        0 │
└──────────┴──────────────────────────┘
```

","1.1","Bit"
"25.8.1.5101","normalizedQueryHash",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetInt32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","addressToLine",0,0,"","","System","
Converts a virtual memory address inside the ClickHouse server process to a filename and line number in ClickHouse's source code.

:::note
This function is slow and may impose security considerations.
:::

To enable this introspection function:

- Install the `clickhouse-common-static-dbg` package.
- Set setting [`allow_introspection_functions`](../../operations/settings/settings.md#allow_introspection_functions) to `1`.
    ","addressToLine(address_of_binary_instruction)","- `address_of_binary_instruction` — Address of instruction in a running process. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns a source code filename and line number delimited by a colon, for example, `/build/obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:199`. Returns the name of a binary, if no debug information could be found, otherwise an empty string, if the address is not valid. [`String`](/sql-reference/data-types/string)","**Selecting the first string from the `trace_log` system table**

```sql title=Query
SET allow_introspection_functions=1;
SELECT * FROM system.trace_log LIMIT 1 \G;
```

```response title=Response
-- The `trace` field contains the stack trace at the moment of sampling.
Row 1:
──────
event_date:              2019-11-19
event_time:              2019-11-19 18:57:23
revision:                54429
timer_type:              Real
thread_number:           48
query_id:                421b6855-1858-45a5-8f37-f383409d6d72
trace:                   [140658411141617,94784174532828,94784076370703,94784076372094,94784076361020,94784175007680,140658411116251,140658403895439]
```

**Getting the source code filename and the line number for a single address**

```sql title=Query
SET allow_introspection_functions=1;
SELECT addressToLine(94784076370703) \G;
```

```response title=Response
Row 1:
──────
addressToLine(94784076370703): /build/obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:199
```

**Applying the function to the whole stack trace**

```sql title=Query
-- The arrayMap function in this example processing each individual element of the trace array by the addressToLine function.
-- The result of this processing is seen in the trace_source_code_lines column of output.

SELECT
    arrayStringConcat(arrayMap(x -> addressToLine(x), trace), '\n') AS trace_source_code_lines
FROM system.trace_log
LIMIT 1
\G
```

```response title=Response
Row 1:
──────
trace_source_code_lines: /lib/x86_64-linux-gnu/libpthread-2.27.so
/usr/lib/debug/usr/bin/clickhouse
/build/obj-x86_64-linux-gnu/../src/Common/ThreadPool.cpp:199
/build/obj-x86_64-linux-gnu/../src/Common/ThreadPool.h:155
/usr/include/c++/9/bits/atomic_base.h:551
/usr/lib/debug/usr/bin/clickhouse
/lib/x86_64-linux-gnu/libpthread-2.27.so
/build/glibc-OTsEL5/glibc-2.27/misc/../sysdeps/unix/sysv/linux/x86_64/clone.S:97
```

","20.1","Introspection"
"25.8.1.5101","globalNotIn",0,0,"","","System","","","","","","",""
"25.8.1.5101","dateTime64ToSnowflake",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetInt8OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Int8 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","wordShingleMinHashCaseInsensitive",0,0,"","","System","
Splits a ASCII string into parts (shingles) of `shinglesize` words, calculates hash values for each word shingle and returns a tuple with these hashes.
Uses `hashnum` minimum hashes to calculate the minimum hash and `hashnum` maximum hashes to calculate the maximum hash.
It is case insensitive.

Can be used to detect semi-duplicate strings with [`tupleHammingDistance`](../functions/tuple-functions.md/#tuplehammingdistance).
For two strings, if the returned hashes are the same for both strings, then those strings are the same.
","wordShingleMinHashCaseInsensitive(string[, shinglesize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two hashes — the minimum and the maximum. [`Tuple(UInt64, UInt64)`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT wordShingleMinHashCaseInsensitive('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;
```

```response title=Response
┌─Tuple─────────────────────────────────────┐
│ (3065874883688416519,1634050779997673240) │
└───────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","dictGetDateOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the Date if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","dictGetUInt64OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt64 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","dictGetUInt32OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt32 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","h3ExactEdgeLengthM",0,0,"","","System","","","","","","",""
"25.8.1.5101","countSubstringsCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3IsPentagon",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetUInt16OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt16 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","dictGetString",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the String if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","hasSubsequenceCaseInsensitive",0,1,"","","System","","","","","","",""
"25.8.1.5101","numericIndexedVectorPointwiseLessEqual",0,0,"","","System","Performs pointwise comparison between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant. The result is a NumericIndexedVector containing the indices where the first vector’s value is less than or equal to the second vector’s value, with all corresponding value set to 1.","numericIndexedVectorPointwiseLessEqual(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toFloat64(x), [10, 20, 30]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toFloat64(x), [20, 40, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseLessEqual(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseLessEqual(vec1, 20)) AS res2;
```

```response title=Response
┌─res1──────────┬─res2──────┐
│ {2:1,3:1,4:1} │ {1:1,2:1} │
└───────────────┴───────────┘
```

","25.7","Arithmetic"
"25.8.1.5101","dictGetIPv6",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the IPv6 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","dictGetIPv4",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the IPv4 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","multiSearchFirstPosition",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetDate",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Date if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","YYYYMMDDToDate32",0,1,"","","System","
Converts a number containing the year, month and day number to a `Date32`.
This function is the opposite of function [`toYYYYMMDD()`](/sql-reference/functions/date-time-functions#toYYYYMMDD).
The output is undefined if the input does not encode a valid `Date32` value.
    ","YYYYMMDDToDate32(YYYYMMDD)","- `YYYYMMDD` — Number containing the year, month and day. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns a `Date32` value from the provided arguments [`Date32`](/sql-reference/data-types/date32)","**Example**

```sql title=Query
SELECT YYYYMMDDToDate32(20000507);
```

```response title=Response
┌─YYYYMMDDToDate32(20000507)─┐
│                 2000-05-07 │
└────────────────────────────┘
```

","23.9","Dates and Times"
"25.8.1.5101","reinterpretAsInt32",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetFloat64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Float64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","greatCircleAngle",0,0,"","","System","
Calculates the central angle between two points on the Earth's surface using the [great-circle formula](https://en.wikipedia.org/wiki/Great-circle_distance).
This function returns the angle in degrees between two points on a sphere.
        ","greatCircleAngle(lon1Deg, lat1Deg, lon2Deg, lat2Deg)","- `lon1Deg` — Longitude of the first point in degrees. Range: `[-180°, 180°]` [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `lat1Deg` — Latitude of the first point in degrees. Range: `[-90°, 90°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `lon2Deg` — Longitude of the second point in degrees. Range: `[-180°, 180°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `lat2Deg` — Latitude of the second point in degrees. Range: `[-90°, 90°]`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns the central angle between the two points in degrees [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT greatCircleAngle(0, 0, 45, 0) AS angle
```

```response title=Response
┌─angle─┐
│    45 │
└───────┘
```

","1.1","Geo"
"25.8.1.5101","IPv6StringToNum",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetInt64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","min2",0,1,"","","System","
    Returns the smaller of two numeric values `x` and `y`.
    ","min2(x, y)","- `x` — First value [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `y` — Second value [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns the smaller value of `x` and `y`. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT min2(-1, 2)
```

```response title=Response
-1
```

","21.11","Arithmetic"
"25.8.1.5101","dictGetInt16",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int16 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","leftUTF8",0,0,"","","System","
Returns a substring of a UTF-8-encoded string `s` with a specified `offset` starting from the left.
","leftUTF8(s, offset)","- `s` — The UTF-8 encoded string to calculate a substring from. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `offset` — The number of bytes of the offset. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns:
- For positive `offset`, a substring of `s` with `offset` many bytes, starting from the left of the string.\n""
- For negative `offset`, a substring of `s` with `length(s) - |offset|` bytes, starting from the left of the string.\n""
- An empty string if `length` is 0.
     [`String`](/sql-reference/data-types/string)","**Positive offset**

```sql title=Query
SELECT leftUTF8('Привет', 4)
```

```response title=Response
Прив
```

**Negative offset**

```sql title=Query
SELECT leftUTF8('Привет', -4)
```

```response title=Response
Пр
```

","22.1","String"
"25.8.1.5101","isValidUTF8",0,0,"","","System","
Checks if the set of bytes constitutes valid UTF-8-encoded text.
","isValidUTF8(s)","- `s` — The string to check for UTF-8 encoded validity. [`String`](/sql-reference/data-types/string)
","Returns `1`, if the set of bytes constitutes valid UTF-8-encoded text, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT isValidUTF8('\\xc3\\xb1') AS valid, isValidUTF8('\\xc3\\x28') AS invalid
```

```response title=Response
┌─valid─┬─invalid─┐
│     1 │       0 │
└───────┴─────────┘
```

","20.1","String"
"25.8.1.5101","dictGetInt8",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int8 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","dictGetUInt64",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt64 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","dictGetUInt32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","numericIndexedVectorPointwiseNotEqual",0,0,"","","System","Performs pointwise comparison between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant.  The result is a NumericIndexedVector containing the indices where the values are not equal, with all corresponding value set to 1.","numericIndexedVectorPointwiseNotEqual(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toFloat64(x), [10, 20, 30]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toFloat64(x), [20, 20, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseNotEqual(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseNotEqual(vec1, 20)) AS res2;
```

```response title=Response
┌─res1──────────┬─res2──────┐
│ {1:1,3:1,4:1} │ {1:1,3:1} │
└───────────────┴───────────┘
```

","25.7","Arithmetic"
"25.8.1.5101","dictGetAll",0,0,"","","System","
Retrieves all values from a dictionary corresponding to the given key values.

Accepts 3 or 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- [optional] maximum number of values to return for each attribute;

Returned value: array of dictionary attribute values parsed in the attribute's data type if key is found, otherwise empty array.

Throws an exception if cannot parse the value of the attribute, the value does not match the attribute data type, or the dictionary doesn't support this function.
","","","","","","Dictionary"
"25.8.1.5101","h3GetPentagonIndexes",0,0,"","","System","","","","","","",""
"25.8.1.5101","emptyArrayInt16",0,0,"","","System","Returns an empty Int16 array","emptyArrayInt16()","","An empty Int16 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayInt16
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","replaceOne",0,0,"","","System","
Replaces the first occurrence of the substring `pattern` in `haystack` by the `replacement` string.
","replaceOne(haystack, pattern, replacement)","- `haystack` — The input string to search in. [`String`](/sql-reference/data-types/string)
- `pattern` — The substring to find and replace. [`const String`](/sql-reference/data-types/string)
- `replacement` — The string to replace the pattern with. [`const String`](/sql-reference/data-types/string)
","Returns a string with the first occurrence of pattern replaced. [`String`](/sql-reference/data-types/string)","**Replace first occurrence**

```sql title=Query
SELECT replaceOne('Hello, Hello world', 'Hello', 'Hi') AS res;
```

```response title=Response
┌─res─────────────┐
│ Hi, Hello world │
└─────────────────┘
```

","1.1","String"
"25.8.1.5101","dictGetOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the attribute's data type if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","toFixedString",0,0,"","","System","","","","","","",""
"25.8.1.5101","isNotDistinctFrom",0,0,"","","System","
Performs a null-safe comparison between two `JOIN` keys. This function will consider
two `NULL` values as identical and will return `true`, which is distinct from the usual
equals behavior where comparing two `NULL` values would return `NULL`.

:::info
This function is an internal function used by the implementation of `JOIN ON`.
Please do not use it manually in queries.
:::

For a complete example see: [`NULL` values in `JOIN` keys](/sql-reference/statements/select/join#null-values-in-join-keys).
    ","isNotDistinctFrom(x, y)","- `x` — First `JOIN` key to compare. [`Any`](/sql-reference/data-types)
- `y` — Second `JOIN` key to compare. [`Any`](/sql-reference/data-types)
","Returns `true` when `x` and `y` are both `NULL`, otherwise `false`. [`Bool`](/sql-reference/data-types/boolean)","","23.8","Null"
"25.8.1.5101","addWeeks",0,0,"","","System","
Adds a specified number of weeks to a date, a date with time or a string-encoded date or date with time.
    ","addWeeks(datetime, num)","- `datetime` — Date or date with time to add specified number of weeks to. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of weeks to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` weeks [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Add weeks to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addWeeks(date, 5) AS add_weeks_with_date,
    addWeeks(date_time, 5) AS add_weeks_with_date_time,
    addWeeks(date_time_string, 5) AS add_weeks_with_date_time_string
```

```response title=Response
┌─add_weeks_with_date─┬─add_weeks_with_date_time─┬─add_weeks_with_date_time_string─┐
│          2024-02-05 │      2024-02-05 00:00:00 │         2024-02-05 00:00:00.000 │
└─────────────────────┴──────────────────────────┴─────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 week)
```

```response title=Response
┌─plus(CAST('1⋯alWeek(10))─┐
│               1998-08-25 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","lgamma",0,0,"","","System","
Returns the logarithm of the gamma function.
","lgamma(x)","- `x` — The number for which to compute the logarithm of the gamma function. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the logarithm of the gamma function of `x`. [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT lgamma(5);
```

```response title=Response
3.1780538303479458
```

","1.1","Mathematical"
"25.8.1.5101","h3PointDistM",0,0,"","","System","","","","","","",""
"25.8.1.5101","runningDifferenceStartingWithFirstValue",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3CellAreaM2",0,0,"","","System","","","","","","",""
"25.8.1.5101","normalizeUTF8NFC",0,0,"","","System","
Normalizes a UTF-8 string according to the [NFC normalization form](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms).
","normalizeUTF8NFC(str)","- `str` — UTF-8 encoded input string. [`String`](/sql-reference/data-types/string)
","Returns the NFC normalized form of the UTF-8 string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT
'é' AS original, -- e + combining acute accent (U+0065 + U+0301)
length(original),
normalizeUTF8NFC('é') AS nfc_normalized, -- é (U+00E9)
length(nfc_normalized);
```

```response title=Response
┌─original─┬─length(original)─┬─nfc_normalized─┬─length(nfc_normalized)─┐
│ é        │                2 │ é              │                      2 │
└──────────┴──────────────────┴────────────────┴────────────────────────┘
```

","21.11","String"
"25.8.1.5101","like",0,0,"","","System","","","","","","",""
"25.8.1.5101","extractURLParameterNames",0,0,"","","System","","","","","","",""
"25.8.1.5101","LinfNormalize",0,0,"","","System","
Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in `L_{inf}` space (using [maximum norm](https://en.wikipedia.org/wiki/Norm_(mathematics)#Maximum_norm_(special_case_of:_infinity_norm,_uniform_norm,_or_supremum_norm))).
    ","LinfNormalize(tuple)","- `tuple` — A tuple of numeric values. [`Tuple(T)`](/sql-reference/data-types/tuple)
","Returns the unit vector. [`Tuple(Float64)`](/sql-reference/data-types/tuple)","**Basic usage**

```sql title=Query
SELECT LinfNormalize((3, 4))
```

```response title=Response
┌─LinfNormalize((3, 4))─┐
│ (0.75,1)              │
└───────────────────────┘
```

","21.11","Distance"
"25.8.1.5101","cosineDistance",0,0,"","","System","
Calculates the cosine distance between two vectors (the values of the tuples are the coordinates). The smaller the returned value is, the more similar are the vectors.
    ","cosineDistance(vector1, vector2)","- `vector1` — First tuple. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
- `vector2` — Second tuple. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
","Returns the cosine of the angle between two vectors subtracted from one. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT cosineDistance((1, 2), (2, 3));
```

```response title=Response
┌─cosineDistance((1, 2), (2, 3))─┐
│           0.007722123286332261 │
└────────────────────────────────┘
```

","1.1","Distance"
"25.8.1.5101","toIntervalNanosecond",0,0,"","","System","","","","","","",""
"25.8.1.5101","addDate",0,1,"","","System","
Adds the time interval to the provided date, date with time or string-encoded date or date with time.
If the addition results in a value outside the bounds of the data type, the result is undefined.
    ","addDate(datetime, interval)","- `datetime` — The date or date with time to which `interval` is added. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `interval` — Interval to add. [`Interval`](/sql-reference/data-types/int-uint)
","Returns date or date with time obtained by adding `interval` to `datetime`. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Add interval to date**

```sql title=Query
SELECT addDate(toDate('2018-01-01'), INTERVAL 3 YEAR)
```

```response title=Response
┌─addDate(toDa⋯valYear(3))─┐
│               2021-01-01 │
└──────────────────────────┘
```

","23.9","Dates and Times"
"25.8.1.5101","tupleIntDivOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","LpDistance",0,0,"","","System","
Calculates the distance between two points (the values of the vectors are the coordinates) in `Lp` space ([p-norm distance](https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm)).
    ","LpDistance(vector1, vector2, p)","- `vector1` — First vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
- `vector2` — Second vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
- `p` — The power. Possible values: real number from `[1; inf)`. [`UInt*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the p-norm distance. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT LpDistance((1, 2), (2, 3), 3)
```

```response title=Response
┌─LpDistance((1, 2), (2, 3), 3)─┐
│            1.2599210498948732 │
└───────────────────────────────┘
```

","21.11","Distance"
"25.8.1.5101","JSONSharedDataPathsWithTypes",0,0,"","","System","
Returns the list of paths that are stored in shared data structure and their types in each row in JSON column.
","JSONDynamicPathsWithTypes(json)","- `json` — JSON column ","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONDynamicPathsWithTypes(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONDynamicPathsWithTypes(json)─┐
│ {""a"":""42""}                           │ {'a':'Int64'}                   │
│ {""b"":""Hello""}                        │ {}                              │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ {'a':'Array(Nullable(Int64))'}  │
└──────────────────────────────────────┴─────────────────────────────────┘
```

","","JSON"
"25.8.1.5101","dictHas",0,0,"","","System","
Checks whether a key is present in a dictionary.
Accepts 2 parameters: name of the dictionary, key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration.
Returned value: 0 if there is no key, 1 if there is a key, type of UInt8
","","","","","","Dictionary"
"25.8.1.5101","toDecimal256OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","emptyArrayInt64",0,0,"","","System","Returns an empty Int64 array","emptyArrayInt64()","","An empty Int64 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayInt64
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","arraySum",0,0,"","","System","
Returns the sum of elements in the source array.

If a lambda function `func` is specified, returns the sum of elements of the lambda results.
    ","arrayMax([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns the sum of elements in the source array, or the sum of elements of the lambda results if provided.","**Basic example**

```sql title=Query
SELECT arraySum([1, 2, 3, 4]);
```

```response title=Response
10
```

**Usage with lambda function**

```sql title=Query
SELECT arraySum(x, y -> x+y, [1, 1, 1, 1], [1, 1, 1, 1]);
```

```response title=Response
8
```

","21.1","Arrays"
"25.8.1.5101","L2SquaredDistance",0,0,"","","System","
Calculates the sum of the squares of the difference between the corresponding elements of two vectors.
    ","L2SquaredDistance(vector1, vector2)","- `vector1` — First vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
- `vector2` — Second vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
","Returns the sum of the squares of the difference between the corresponding elements of two vectors. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT L2SquaredDistance([1, 2, 3], [0, 0, 0])
```

```response title=Response
┌─L2SquaredDis⋯ [0, 0, 0])─┐
│                       14 │
└──────────────────────────┘
```

","22.7","Distance"
"25.8.1.5101","encodeURLComponent",0,0,"","","System","","","","","","",""
"25.8.1.5101","wordShingleMinHashArgCaseInsensitiveUTF8",0,0,"","","System","
Splits a UTF-8 string into parts (shingles) of `shinglesize` words each and returns the shingles with minimum and maximum word hashes, calculated by the [`wordShingleMinHashCaseInsensitiveUTF8`](#wordShingleMinHashCaseInsensitiveUTF8) function with the same input.
It is case insensitive.
","wordShingleMinHashArgCaseInsensitiveUTF8(string[, shinglesize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two tuples with `hashnum` word shingles each. [`Tuple(Tuple(String))`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT wordShingleMinHashArgCaseInsensitiveUTF8('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;
```

```response title=Response
┌─Tuple──────────────────────────────────────────────────────────────────┐
│ (('queries','database','analytical'),('oriented','processing','DBMS')) │
└────────────────────────────────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","h3GetResolution",0,0,"","","System","
Defines the resolution of the given [H3](https://h3geo.org/docs/core-library/h3Indexing/) index.
    ","h3GetResolution(h3index)","- `h3index` — Hexagon index number. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns the resolution of the index with range `[0, 15]` if the index is valid, otherwise returns a random value. [`UInt8`](/sql-reference/data-types/int-uint)","**Get resolution of H3 index**

```sql title=Query
SELECT h3GetResolution(639821929606596015) AS resolution
```

```response title=Response
┌─resolution─┐
│         14 │
└────────────┘
```

","20.1","Geo"
"25.8.1.5101","getSetting",0,0,"","","System","
Returns the current value of a custom setting.
","getSetting('custom_setting')","- `custom_setting` — The setting name. [`String`](/sql-reference/data-types/string)
","The setting's current value.","**getSetting**

```sql title=Query
SET custom_a = 123; SELECT getSetting('custom_a');
```

```response title=Response
123
```

","","Other"
"25.8.1.5101","LpNorm",0,0,"","","System","
Calculates the p-norm of a vector, which is the p-th root of the sum of the p-th powers of the absolute values of its elements.

Special cases:
- When p=1, it's equivalent to L1Norm (Manhattan distance).
- When p=2, it's equivalent to L2Norm (Euclidean distance).
- When p=∞, it's equivalent to LinfNorm (maximum norm).
    ","LpNorm(vector, p)","- `vector` — Vector or tuple of numeric values. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
- `p` — The power. Possible values are real numbers in the range `[1; inf)`. [`UInt*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the [Lp-norm](https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm). [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT LpNorm((1, -2), 2)
```

```response title=Response
┌─LpNorm((1, -2), 2)─┐
│   2.23606797749979 │
└────────────────────┘
```

","21.11","Distance"
"25.8.1.5101","toYYYYMM",0,0,"","","System","
Converts a date or date with time to a `UInt32` number containing the year and month number (YYYY * 100 + MM).
Accepts a second optional timezone argument. If provided, the timezone must be a string constant.

This function is the opposite of function `YYYYMMDDToDate()`.
    ","toYYYYMM(datetime[, timezone])","- `datetime` — A date or date with time to convert. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone for the conversion. If provided, the timezone must be a string constant. [`String`](/sql-reference/data-types/string)
","Returns a UInt32 number containing the year and month number (YYYY * 100 + MM). [`UInt32`](/sql-reference/data-types/int-uint)","**Convert current date to YYYYMM format**

```sql title=Query
SELECT toYYYYMM(now(), 'US/Eastern')
```

```response title=Response
┌─toYYYYMM(now(), 'US/Eastern')─┐
│                        202303 │
└───────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","L2Norm",0,0,"","","System","
Calculates the square root of the sum of the squares of the vector values.
    ","L2Norm(vector)","- `vector` — Vector or tuple of numeric values. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
","Returns the L2-norm or [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance). [`UInt*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT L2Norm((1, 2))
```

```response title=Response
┌───L2Norm((1, 2))─┐
│ 2.23606797749979 │
└──────────────────┘
```

","21.11","Distance"
"25.8.1.5101","fromUnixTimestamp64Milli",0,0,"","","System","","","","","","",""
"25.8.1.5101","addSeconds",0,0,"","","System","
Adds a specified number of seconds to a date, a date with time or a string-encoded date or date with time.
    ","addSeconds(datetime, num)","- `datetime` — Date or date with time to add specified number of seconds to. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of seconds to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` seconds [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64(3)`](/sql-reference/data-types/datetime64)","**Add seconds to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addSeconds(date, 30) AS add_seconds_with_date,
    addSeconds(date_time, 30) AS add_seconds_with_date_time,
    addSeconds(date_time_string, 30) AS add_seconds_with_date_time_string
```

```response title=Response
┌─add_seconds_with_date─┬─add_seconds_with_date_time─┬─add_seconds_with_date_time_string─┐
│   2024-01-01 00:00:30 │        2024-01-01 00:00:30 │           2024-01-01 00:00:30.000 │
└───────────────────────┴────────────────────────────┴───────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 second)
```

```response title=Response
┌─dateAdd('1998-06-16'::Date, INTERVAL 10 second)─┐
│                             1998-06-16 00:00:10 │
└─────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","tupleIntDivOrZeroByNumber",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3ToCenterChild",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetFloat32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Float32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","tupleModuloByNumber",0,0,"","","System","","","","","","",""
"25.8.1.5101","ngramSimHashUTF8",0,0,"","","System","
Splits a UTF-8 encoded string into n-grams of `ngramsize` symbols and returns the n-gram `simhash`.
It is case sensitive.

Can be used for detection of semi-duplicate strings with [`bitHammingDistance`](../functions/bit-functions.md/#bitHammingDistance).
The smaller the [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) of the calculated `simhashes` of two strings, the more likely these strings are the same.
","ngramSimHashUTF8(string[, ngramsize])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the computed hash value. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT ngramSimHashUTF8('ClickHouse') AS Hash;
```

```response title=Response
┌───────Hash─┐
│ 1628157797 │
└────────────┘
```

","21.1","Hash"
"25.8.1.5101","emptyArrayUInt8",0,0,"","","System","Returns an empty UInt8 array","emptyArrayUInt8()","","An empty UInt8 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayUInt8
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","dictGetUInt8",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt8 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","subtractTupleOfIntervals",0,0,"","","System","
Consecutively subtracts a tuple of intervals from a date or a date with time.
    ","subtractTupleOfIntervals(datetime, intervals)","- `datetime` — Date or date with time to subtract intervals from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `intervals` — Tuple of intervals to subtract from `datetime`. [`Tuple(Interval)`](/sql-reference/data-types/tuple)
","Returns `date` with subtracted `intervals` [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract tuple of intervals from date**

```sql title=Query
WITH toDate('2018-01-01') AS date SELECT subtractTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 YEAR))
```

```response title=Response
┌─subtractTupl⋯alYear(1)))─┐
│               2016-12-31 │
└──────────────────────────┘
```

","22.11","Dates and Times"
"25.8.1.5101","addTupleOfIntervals",0,0,"","","System","
Consecutively adds a tuple of intervals to a date or a date with time.
    ","addTupleOfIntervals(datetime, intervals)","- `datetime` — Date or date with time to add intervals to. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `intervals` — Tuple of intervals to add to `datetime`. [`Tuple(Interval)`](/sql-reference/data-types/tuple)
","Returns `date` with added `intervals` [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Add tuple of intervals to date**

```sql title=Query
WITH toDate('2018-01-01') AS date
SELECT addTupleOfIntervals(date, (INTERVAL 1 DAY, INTERVAL 1 MONTH, INTERVAL 1 YEAR))
```

```response title=Response
┌─addTupleOfIntervals(date, (toIntervalDay(1), toIntervalMonth(1), toIntervalYear(1)))─┐
│                                                                           2019-02-02 │
└──────────────────────────────────────────────────────────────────────────────────────┘
```

","22.11","Dates and Times"
"25.8.1.5101","__scalarSubqueryResult",0,0,"","","System","","","","","","",""
"25.8.1.5101","tupleDivide",0,0,"","","System","","","","","","",""
"25.8.1.5101","tupleMultiply",0,0,"","","System","","","","","","",""
"25.8.1.5101","least",0,1,"","","System","
Returns the smallest value among the arguments.

- For arrays, returns the lexicographically least array.
- For DateTime types, the result type is promoted to the largest type (e.g., DateTime64 if mixed with DateTime32).
    ","least(x1[, x2, ..., xN])","- `x1[, x2, ..., xN]` — One or multiple values to compare. All arguments must be of comparable types. ","Returns the least value among the arguments, promoted to the largest compatible type.","**Numeric types**

```sql title=Query
SELECT least(1, 2, toUInt8(3), 3.) AS result, toTypeName(result) AS type;
-- The type returned is a Float64 as the UInt8 must be promoted to 64 bit for the comparison.
```

```response title=Response
┌─result─┬─type────┐
│      1 │ Float64 │
└────────┴─────────┘
```

**Arrays**

```sql title=Query
SELECT least(['hello'], ['there'], ['world']);
```

```response title=Response
┌─least(['hell⋯ ['world'])─┐
│ ['hello']                │
└──────────────────────────┘
```

**DateTime types**

```sql title=Query
SELECT least(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3));
-- The type returned is a DateTime64 as the DateTime32 must be promoted to 64 bit for the comparison.
```

```response title=Response
┌─least(toDate⋯(now(), 3))─┐
│  2025-05-27 15:55:20.000 │
└──────────────────────────┘
```

","1.1","Conditional"
"25.8.1.5101","tupleMinus",0,0,"","","System","","","","","","",""
"25.8.1.5101","log10",0,1,"","","System","
Returns the decimal logarithm of the argument.
","log10(x)","- `x` — Number for which to compute the decimal logarithm of. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the decimal logarithm of `x`. [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT log10(100);
```

```response title=Response
2
```

","1.1","Mathematical"
"25.8.1.5101","lower",0,1,"","","System","
Converts an ASCII string to lowercase.
","lower(s)","- `s` — A string to convert to lowercase. [`String`](/sql-reference/data-types/string)
","Returns a lowercase string from `s`. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT lower('CLICKHOUSE')
```

```response title=Response
┌─lower('CLICKHOUSE')─┐
│ clickhouse          │
└─────────────────────┘
```

","1.1","String"
"25.8.1.5101","lowerUTF8",0,0,"","","System","Converts a string to lowercase, assuming that the string contains valid UTF-8 encoded text. If this assumption is violated, no exception is thrown and the result is undefined.","lowerUTF8(input)","- `input` — Input string to convert to lowercase. [`String`](/sql-reference/data-types/string)
","Returns a lowercase string. [`String`](/sql-reference/data-types/string)","**first**

```sql title=Query
SELECT lowerUTF8('München') as Lowerutf8;
```

```response title=Response
münchen
```

","1.1","String"
"25.8.1.5101","YYYYMMDDToDate",0,1,"","","System","
Converts a number containing the year, month and day number to a `Date`.
This function is the opposite of function [`toYYYYMMDD()`](/sql-reference/functions/date-time-functions#toYYYYMMDD).
The output is undefined if the input does not encode a valid Date value.
    ","YYYYMMDDToDate(YYYYMMDD)","- `YYYYMMDD` — Number containing the year, month and day. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns a `Date` value from the provided arguments [`Date`](/sql-reference/data-types/date)","**Example**

```sql title=Query
SELECT YYYYMMDDToDate(20230911);
```

```response title=Response
┌─toYYYYMMDD(20230911)─┐
│           2023-09-11 │
└──────────────────────┘
```

","23.9","Dates and Times"
"25.8.1.5101","subDate",0,1,"","","System","
Subtracts the time interval from the provided date, date with time or string-encoded date or date with time.
If the subtraction results in a value outside the bounds of the data type, the result is undefined.
    ","subDate(datetime, interval)","- `datetime` — The date or date with time from which `interval` is subtracted. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `interval` — Interval to subtract. [`Interval`](/sql-reference/data-types/int-uint)
","Returns date or date with time obtained by subtracting `interval` from `datetime`. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract interval from date**

```sql title=Query
SELECT subDate(toDate('2018-01-01'), INTERVAL 3 YEAR)
```

```response title=Response
┌─subDate(toDate('2018-01-01'), toIntervalYear(3))─┐
│                                       2015-01-01 │
└──────────────────────────────────────────────────┘
```

","23.9","Dates and Times"
"25.8.1.5101","ngramMinHashCaseInsensitiveUTF8",0,0,"","","System","
Splits a UTF-8 string into n-grams of `ngramsize` symbols and calculates hash values for each n-gram and returns a tuple with these hashes..
Uses `hashnum` minimum hashes to calculate the minimum hash and `hashnum` maximum hashes to calculate the maximum hash.
It is case insensitive.

Can be used to detect semi-duplicate strings with [`tupleHammingDistance`](../functions/tuple-functions.md/#tuplehammingdistance).
For two strings, if the returned hashes are the same for both strings, then those strings are the same.
","ngramMinHashCaseInsensitiveUTF8(string [, ngramsize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two hashes — the minimum and the maximum. [`Tuple`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT ngramMinHashCaseInsensitiveUTF8('ClickHouse') AS Tuple;
```

```response title=Response
┌─Tuple───────────────────────────────────────┐
│ (12493625717655877135,13203602793651726206) │
└─────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","timeSeriesStoreTags",0,0,"","","System","Stores mapping between the identifier of a time series and its tags in the query context, so that function timeSeriesIdToTags() can extract these tags later.","timeSeriesStoreTags(id, tags_array, separate_tag_name_1, separate_tag_value_1, ...)","- `id` — Identifier of a time series. [`UInt64`](/sql-reference/data-types/int-uint) or [`UInt128`](/sql-reference/data-types/int-uint) or [`UUID`](/sql-reference/data-types/uuid) or [`FixedString(16)`](/sql-reference/data-types/fixedstring)
- `tags_array` — Array of pairs (tag_name, tag_value). [`Array(Tuple(String, String))`](/sql-reference/data-types/array) or [`NULL`](/sql-reference/syntax#null)
- `separate_tag_name_i` — The name of a tag. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `separate_tag_value_i` — The value of a tag. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring) or [`Nullable(String)`](/sql-reference/data-types/nullable)
","Returns the first argument, i.e. the identifier of a time series.","**Example**

```sql title=Query
SELECT timeSeriesStoreTags(8374283493092, [('region', 'eu'), ('env', 'dev')], '__name__', 'http_requests_count')
```

```response title=Response
8374283493092
```

","25.8","Time Series"
"25.8.1.5101","makeDateTime64",0,1,"","","System","
Creates a `DateTime64` from year, month, day, hour, minute, second, with optional fraction, precision, and timezone.
    ","makeDateTime64(year, month, day, hour, minute, second[, fraction[, precision[, timezone]]])","- `year` — Year number. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `month` — Month number (1-12). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `day` — Day of the month (1-31). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `hour` — Hour (0-23). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `minute` — Minute (0-59). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `second` — Second (0-59). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `fraction` — Fractional part of the second. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `precision` — Precision for the fractional part (0-9). [`UInt8`](/sql-reference/data-types/int-uint)
- `timezone` — Timezone name. [`String`](/sql-reference/data-types/string)
","Returns a `DateTime64` value constructed from the provided arguments [`DateTime64`](/sql-reference/data-types/datetime64)","**DateTime64 from year, month, day, hour, minute, second**

```sql title=Query
SELECT makeDateTime64(2023, 5, 15, 10, 30, 45, 779, 5);
```

```response title=Response
┌─makeDateTime64(2023, 5, 15, 10, 30, 45, 779, 5)─┐
│                       2023-05-15 10:30:45.00779 │
└─────────────────────────────────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","regionToContinent",0,0,"","","System","","","","","","",""
"25.8.1.5101","makeDate32",0,1,"","","System","
Creates a `Date32` from either:
- a year, month and day
- a year and day of year
    ","makeDate32(year, month, day)
makeDate32(year, day_of_year)","- `year` — Year number. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `month` — Month number (1-12). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `day` — Day of the month (1-31). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `day_of_year` — Day of the year (1-365). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns a `Date32` value constructed from the provided arguments [`Date32`](/sql-reference/data-types/date32)","**Date32 from a year, month, day**

```sql title=Query
SELECT makeDate(2023, 2, 28) AS date;
```

```response title=Response
┌───────date─┐
│ 2023-02-28 │
└────────────┘
```

**Date32 from year and day of year**

```sql title=Query
SELECT makeDate(2023, 42) AS date;
```

```response title=Response
┌───────date─┐
│ 2023-02-11 │
└────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","makeDate",0,1,"","","System","
Creates a `Date` from either:
- a year, month and day
- a year and day of year
    ","makeDate(year, month, day)
makeDate(year, day_of_year)","- `year` — Year number. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `month` — Month number (1-12). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `day` — Day of the month (1-31). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `day_of_year` — Day of the year (1-365). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns a `Date` value constructed from the provided arguments [`Date`](/sql-reference/data-types/date)","**Date from a year, month, day**

```sql title=Query
SELECT makeDate(2023, 2, 28) AS date;
```

```response title=Response
┌───────date─┐
│ 2023-02-28 │
└────────────┘
```

**Date from year and day of year**

```sql title=Query
SELECT makeDate(2023, 42) AS date;
```

```response title=Response
┌───────date─┐
│ 2023-02-11 │
└────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","filesystemUnreserved",0,0,"","","System","","","","","","",""
"25.8.1.5101","isZeroOrNull",0,0,"","","System","
Checks if the argument is either zero (`0`) or `NULL`.
    ","isZeroOrNull(x)","- `x` — A numeric value. [`UInt`](/sql-reference/data-types/int-uint)
","Returns `1` if `x` is `NULL` or equal to zero, otherwise `0`. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float32/Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
CREATE TABLE t_null
(
  x Int32,
  y Nullable(Int32)
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO t_null VALUES (1, NULL), (2, 0), (3, 3);

SELECT x FROM t_null WHERE isZeroOrNull(y);
```

```response title=Response
┌─x─┐
│ 1 │
│ 2 │
└───┘
```

","20.3","Null"
"25.8.1.5101","toUInt8OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","leftPadUTF8",0,0,"","","System","
Pads a UTF8 string from the left with spaces or a specified string (multiple times, if needed) until the resulting string reaches the given length.
Unlike [`leftPad`](#leftPad) which measures the string length in bytes, the string length is measured in code points.
","leftPadUTF8(string, length[, pad_string])","- `string` — Input string that should be padded. [`String`](/sql-reference/data-types/string)
- `length` — The length of the resulting string. If the value is smaller than the input string length, then the input string is shortened to `length` characters. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `pad_string` — Optional. The string to pad the input string with. If not specified, then the input string is padded with spaces. [`String`](/sql-reference/data-types/string)
","Returns a left-padded string of the given length. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT leftPadUTF8('абвг', 7, '*'), leftPadUTF8('дежз', 7)
```

```response title=Response
┌─leftPadUTF8('абвг', 7, '*')─┬─leftPadUTF8('дежз', 7)─┐
│ ***абвг                     │    дежз                │
└─────────────────────────────┴────────────────────────┘
```

","21.8","String"
"25.8.1.5101","notILike",0,0,"","","System","","","","","","",""
"25.8.1.5101","concatWithSeparator",0,0,"","","System","
Concatenates the provided strings, separating them by the specified separator.
","concatWithSeparator(sep[, exp1, exp2, ...])","- `sep` — The separator to use. [`const String`](/sql-reference/data-types/string) or [`const FixedString`](/sql-reference/data-types/fixedstring)
- `exp1, exp2, ...` — Expression to be concatenated. Arguments which are not of type `String` or `FixedString` are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments. [`Any`](/sql-reference/data-types)
","Returns the String created by concatenating the arguments. If any of the argument values is `NULL`, the function returns `NULL`. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT concatWithSeparator('a', '1', '2', '3', '4')
```

```response title=Response
┌─concatWithSeparator('a', '1', '2', '3', '4')─┐
│ 1a2a3a4                                      │
└──────────────────────────────────────────────┘
```

","22.12","String"
"25.8.1.5101","toMonthNumSinceEpoch",0,0,"","","System","Returns amount of months passed from year 1970","toMonthNumSinceEpoch(date)","- `date` — A date or date with time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Positive integer","**Example**

```sql title=Query
SELECT toMonthNumSinceEpoch(toDate('2024-10-01'))
```

```response title=Response
657
```

","25.3","Dates and Times"
"25.8.1.5101","minSampleSizeContinuous",0,0,"","","System","","","","","","",""
"25.8.1.5101","hopEnd",0,0,"","","System","","","","","","",""
"25.8.1.5101","map",0,0,"","","System","","","","","","",""
"25.8.1.5101","rand",0,1,"","","System","
Returns a random `UInt32` number with uniform distribution.

Uses a linear congruential generator with an initial state obtained from the system, which means that while it appears random, it's not truly random and can be predictable if the initial state is known.
For scenarios where true randomness is crucial, consider using alternative methods like system-level calls or integrating with external libraries.
    ","rand([x])","- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random number of type `UInt32`. [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT rand();
```

```response title=Response
1569354847
```

","1.1","Random Number"
"25.8.1.5101","toUUIDOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3GetUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.8.1.5101","log1p",0,0,"","","System","
Calculates log(1+x).
The calculation log1p(x) is more accurate than log(1+x) for small values of `x`.
","log1p(x)","- `x` — Values from the interval: `-1 < x < +∞`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns values from the interval: -∞ < log1p(x) < +∞ [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT log1p(0)
```

```response title=Response
0
```

","20.12","Mathematical"
"25.8.1.5101","tgamma",0,0,"","","System","
Returns the gamma function.
","tgamma(x)","- `x` — The number for which to compute the gamma function of. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the gamma function value [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT tgamma(5);
```

```response title=Response
24
```

","1.1","Mathematical"
"25.8.1.5101","SHA512",0,0,"","","System","Calculates the SHA512 hash of the given string.","SELECT SHA512(s);","- `s` — The input [String](../../sql-reference/data-types/string.md). ","Returns the SHA512 hash of the given input string as a fixed-length string. [`FixedString(64)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT HEX(SHA512('abc'));
```

```response title=Response
┌─hex(SHA512('abc'))───────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ DDAF35A193617ABACC417349AE20413112E6FA4E89A97EA20A9EEEE64B55D39A2192992A274FC1A836BA3C23A3FEEBBD454D4423643CE80E2A9AC94FA54CA49F │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","notLike",0,0,"","","System","","","","","","",""
"25.8.1.5101","shardCount",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3GetFaces",0,0,"","","System","","","","","","",""
"25.8.1.5101","__getScalar",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetInt32",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the Int32 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","mortonEncode",0,0,"","","System","
Calculates the Morton encoding (ZCurve) for a list of unsigned integers.

The function has two modes of operation:
- **Simple**
- *Expanded**

**Simple mode**

Accepts up to 8 unsigned integers as arguments and produces a `UInt64` code.

**Expanded mode**

Accepts a range mask ([Tuple](../data-types/tuple.md)) as the first argument and
up to 8 [unsigned integers](../data-types/int-uint.md) as other arguments.

Each number in the mask configures the amount of range expansion:
* 1 - no expansion
* 2 - 2x expansion
* 3 - 3x expansion
⋮
* Up to 8x expansion.
    ","-- Simplified mode
mortonEncode(args)

-- Expanded mode
mortonEncode(range_mask, args)","- `args` — Up to 8 unsigned integers or columns of the aforementioned type. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint)
- `range_mask` — For the expanded mode, the mask for each argument. The mask is a tuple of unsigned integers from `1` - `8`. Each number in the mask configures the amount of range shrink. [`Tuple(UInt8/16/32/64)`](/sql-reference/data-types/tuple)
","Returns a `UInt64` code. [`UInt64`](/sql-reference/data-types/int-uint)","**Simple mode**

```sql title=Query
SELECT mortonEncode(1, 2, 3)
```

```response title=Response
53
```

**Expanded mode**

```sql title=Query
-- Range expansion can be beneficial when you need a similar distribution for
-- arguments with wildly different ranges (or cardinality)
-- For example: 'IP Address' (0...FFFFFFFF) and 'Country code' (0...FF).
-- Note: the Tuple size must be equal to the number of the other arguments.
SELECT mortonEncode((1,2), 1024, 16)
```

```response title=Response
1572864
```

**Single argument**

```sql title=Query
-- Morton encoding for one argument is always the argument itself
SELECT mortonEncode(1)
```

```response title=Response
1
```

**Expanded single argument**

```sql title=Query
SELECT mortonEncode(tuple(2), 128)
```

```response title=Response
32768
```

**Column usage**

```sql title=Query
-- First create the table and insert some data
CREATE TABLE morton_numbers(
    n1 UInt32,
    n2 UInt32,
    n3 UInt16,
    n4 UInt16,
    n5 UInt8,
    n6 UInt8,
    n7 UInt8,
    n8 UInt8
)
ENGINE=MergeTree()
ORDER BY n1;
INSERT INTO morton_numbers (*) values(1, 2, 3, 4, 5, 6, 7, 8);

-- Use column names instead of constants as function arguments
SELECT mortonEncode(n1, n2, n3, n4, n5, n6, n7, n8) FROM morton_numbers;
```

```response title=Response
2155374165
```

","24.6","Encoding"
"25.8.1.5101","toTypeName",0,0,"","","System","","","","","","",""
"25.8.1.5101","polygonsUnionCartesian",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDaysSinceYearZero",0,0,"","","System","
For a given date, returns the number of days which have passed since [1 January 0000](https://en.wikipedia.org/wiki/Year_zero) in the
[proleptic Gregorian calendar defined by ISO 8601](https://en.wikipedia.org/wiki/Gregorian_calendar#Proleptic_Gregorian_calendar).

The calculation is the same as in MySQL's [`TO_DAYS`](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_to-days) function.
    ","toDaysSinceYearZero(date[, time_zone])","- `date` — The date or date with time for which to calculate the number of days since year zero from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `time_zone` — Time zone. [`String`](/sql-reference/data-types/string)
","Returns the number of days passed since date `0000-01-01`. [`UInt32`](/sql-reference/data-types/int-uint)","**Calculate days since year zero**

```sql title=Query
SELECT toDaysSinceYearZero(toDate('2023-09-08'))
```

```response title=Response
┌─toDaysSinceYearZero(toDate('2023-09-08')))─┐
│                                     713569 │
└────────────────────────────────────────────┘
```

","23.9","Dates and Times"
"25.8.1.5101","reinterpretAsUInt16",0,0,"","","System","","","","","","",""
"25.8.1.5101","arraySymmetricDifference",0,0,"","","System","Takes multiple arrays and returns an array with elements that are not present in all source arrays. The result contains only unique values.

:::note
The symmetric difference of _more than two sets_ is [mathematically defined](https://en.wikipedia.org/wiki/Symmetric_difference#n-ary_symmetric_difference)
as the set of all input elements which occur in an odd number of input sets.
In contrast, function `arraySymmetricDifference` simply returns the set of input elements which do not occur in all input sets.
:::
","arraySymmetricDifference(arr1, arr2, ... , arrN)","- `arrN` — N arrays from which to make the new array. [`Array(T)`](/sql-reference/data-types/array). ","Returns an array of distinct elements not present in all source arrays [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT
arraySymmetricDifference([1, 2], [1, 2], [1, 2]) AS empty_symmetric_difference,
arraySymmetricDifference([1, 2], [1, 2], [1, 3]) AS non_empty_symmetric_difference;
```

```response title=Response
┌─empty_symmetric_difference─┬─non_empty_symmetric_difference─┐
│ []                         │ [3]                            │
└────────────────────────────┴────────────────────────────────┘
```

","25.4","Arrays"
"25.8.1.5101","addMilliseconds",0,0,"","","System","
Adds a specified number of milliseconds to a date with time or a string-encoded date with time.
    ","addMilliseconds(datetime, num)","- `datetime` — Date with time to add specified number of milliseconds to. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of milliseconds to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` milliseconds [`DateTime64`](/sql-reference/data-types/datetime64)","**Add milliseconds to different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addMilliseconds(date_time, 1000) AS add_milliseconds_with_date_time,
    addMilliseconds(date_time_string, 1000) AS add_milliseconds_with_date_time_string
```

```response title=Response
┌─add_milliseconds_with_date_time─┬─add_milliseconds_with_date_time_string─┐
│         2024-01-01 00:00:01.000 │                2024-01-01 00:00:01.000 │
└─────────────────────────────────┴────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::DateTime, INTERVAL 10 millisecond)
```

```response title=Response
┌─plus(CAST('1⋯second(10))─┐
│  1998-06-16 00:00:00.010 │
└──────────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","multiSearchFirstPositionUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","encrypt",0,0,"","","System","","","","","","",""
"25.8.1.5101","addYears",0,0,"","","System","
Adds a specified number of years to a date, a date with time or a string-encoded date or date with time.
    ","addYears(datetime, num)","- `datetime` — Date or date with time to add specified number of years to. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of years to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` years [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Add years to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addYears(date, 1) AS add_years_with_date,
    addYears(date_time, 1) AS add_years_with_date_time,
    addYears(date_time_string, 1) AS add_years_with_date_time_string
```

```response title=Response
┌─add_years_with_date─┬─add_years_with_date_time─┬─add_years_with_date_time_string─┐
│          2025-01-01 │      2025-01-01 00:00:00 │         2025-01-01 00:00:00.000 │
└─────────────────────┴──────────────────────────┴─────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 year)
```

```response title=Response
┌─plus(CAST('1⋯alYear(10))─┐
│               2008-06-16 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","toStartOfSecond",0,0,"","","System","
Rounds down a date with time to the start of the seconds.
    ","toStartOfSecond(datetime, [timezone])","- `datetime` — Date and time to truncate sub-seconds from. [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone for the returned value. If not specified, the function uses the timezone of the `value` parameter. [`String`](/sql-reference/data-types/string)
","Returns the input value without sub-seconds. [`DateTime64`](/sql-reference/data-types/datetime64)","**Query without timezone**

```sql title=Query
WITH toDateTime64('2020-01-01 10:20:30.999', 3) AS dt64
SELECT toStartOfSecond(dt64);
```

```response title=Response
┌───toStartOfSecond(dt64)─┐
│ 2020-01-01 10:20:30.000 │
└─────────────────────────┘
```

**Query with timezone**

```sql title=Query
WITH toDateTime64('2020-01-01 10:20:30.999', 3) AS dt64
SELECT toStartOfSecond(dt64, 'Asia/Istanbul');
```

```response title=Response
┌─toStartOfSecond(dt64, 'Asia/Istanbul')─┐
│                2020-01-01 13:20:30.000 │
└────────────────────────────────────────┘
```

","20.5","Dates and Times"
"25.8.1.5101","enabledRoles",0,0,"","","System","","","","","","",""
"25.8.1.5101","concat",0,1,"","","System","
Concatenates the given arguments.

Arguments which are not of types [`String`](../data-types/string.md) or [`FixedString`](../data-types/fixedstring.md) are converted to strings using their default serialization.
As this decreases performance, it is not recommended to use non-String/FixedString arguments.
","concat([s1, s2, ...])","- `s1, s2, ...` — Any number of values of arbitrary type. [`Any`](/sql-reference/data-types)
","Returns the String created by concatenating the arguments. If any of arguments is `NULL`, the function returns `NULL`. If there are no arguments, it returns an empty string. [`Nullable(String)`](/sql-reference/data-types/nullable)","**String concatenation**

```sql title=Query
SELECT concat('Hello, ', 'World!')
```

```response title=Response
┌─concat('Hello, ', 'World!')─┐
│ Hello, World!               │
└─────────────────────────────┘
```

**Number concatenation**

```sql title=Query
SELECT concat(42, 144)
```

```response title=Response
┌─concat(42, 144)─┐
│ 42144           │
└─────────────────┘
```

","1.1","String"
"25.8.1.5101","mapAdd",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayUnion",0,0,"","","System","Takes multiple arrays and returns an array which contains all elements that are present in one of the source arrays.The result contains only unique values.","arrayUnion(arr1, arr2, ..., arrN)","- `arrN` — N arrays from which to make the new array. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array with distinct elements from the source arrays [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT
arrayUnion([-2, 1], [10, 1], [-2], []) as num_example,
arrayUnion(['hi'], [], ['hello', 'hi']) as str_example,
arrayUnion([1, 3, NULL], [2, 3, NULL]) as null_example
```

```response title=Response
┌─num_example─┬─str_example────┬─null_example─┐
│ [10,-2,1]   │ ['hello','hi'] │ [3,2,1,NULL] │
└─────────────┴────────────────┴──────────────┘
```

","24.10","Arrays"
"25.8.1.5101","multiSearchAllPositions",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt16",0,0,"","","System","","","","","","",""
"25.8.1.5101","upper",0,1,"","","System","
Converts the ASCII Latin symbols in a string to uppercase.
","upper(s)","- `s` — The string to convert to uppercase. [`String`](/sql-reference/data-types/string)
","Returns an uppercase string from `s`. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT upper('clickhouse')
```

```response title=Response
┌─upper('clickhouse')─┐
│ CLICKHOUSE          │
└─────────────────────┘
```

","1.1","String"
"25.8.1.5101","arrayFlatten",0,0,"","","System","
Converts an array of arrays to a flat array.

Function:

- Applies to any depth of nested arrays.
- Does not change arrays that are already flat.

The flattened array contains all the elements from all source arrays.
","arrayFlatten(arr)","- `arr` — A multidimensional array. [`Array(Array(T))`](/sql-reference/data-types/array)
","Returns a flattened array from the multidimensional array [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayFlatten([[[1]], [[2], [3]]]);
```

```response title=Response
[1, 2, 3]
```

","20.1","Arrays"
"25.8.1.5101","tupleIntDiv",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt256OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","pointInPolygon",0,0,"","","System","
Checks whether the point belongs to the polygon on the plane.

:::note
- You can set `validate_polygons = 0` to bypass geometry validation.
- `pointInPolygon` assumes every polygon is well-formed. If the input is self-intersecting, has mis-ordered rings, or overlapping edges, results become unreliable—especially for points that sit exactly on an edge, a vertex, or inside a self-intersection where the notion of ""inside"" vs. ""outside"" is undefined.
:::
    ","pointInPolygon((x, y), [(a, b), (c, d) ...], ...)","- `(x, y)` — Coordinates of a point on the plane. [`Tuple(Float64, Float64)`](/sql-reference/data-types/tuple)
- `[(a, b), (c, d) ...]` — Polygon vertices as an array of coordinate pairs. Vertices should be in clockwise or counterclockwise order. Minimum 3 vertices required. [`Array(Tuple(Float64, Float64))`](/sql-reference/data-types/array)
- `...` — Optional. Additional arguments for polygons with holes (as separate arrays) or multipolygons (as separate polygons). [`Array(Tuple(Float64, Float64))`](/sql-reference/data-types/array) or [`Polygon`](/sql-reference/data-types/geo#polygon) or [`MultiPolygon`](/sql-reference/data-types/geo#multipolygon)
","Returns `1` if the point is inside the polygon, `0` if it is not. If the point is on the polygon boundary, the function may return either `0` or `1`. [`UInt8`](/sql-reference/data-types/int-uint)","**Basic usage with a simple polygon**

```sql title=Query
SELECT pointInPolygon((3., 3.), [(6, 0), (8, 4), (5, 8), (0, 2)]) AS res
```

```response title=Response
┌─res─┐
│   1 │
└─────┘
```

","1.1","Geo"
"25.8.1.5101","splitByWhitespace",0,0,"","","System","
Splits a string which is separated by whitespace characters into an array of substrings.

:::note
Setting [`splitby_max_substrings_includes_remaining_string`](../../operations/settings/settings.md#splitby_max_substrings_includes_remaining_string) (default: `0`) controls if the remaining string is included in the last element of the result array when argument `max_substrings > 0`.
:::
","splitByWhitespace(s[, max_substrings])","- `s` — The string to split. [`String`](/sql-reference/data-types/string)
- `max_substrings` — Optional. When `max_substrings > 0`, the returned substrings will be no more than `max_substrings`, otherwise the function will return as many substrings as possible. Default value: `0`. [`Int64`](/sql-reference/data-types/int-uint)
","Returns an array of the selected substrings of `s`. [`Array(String)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT splitByWhitespace('  1!  a,  b.  ');
```

```response title=Response
['1!','a,','b.']
```

","21.9","String Splitting"
"25.8.1.5101","tryDecrypt",0,0,"","","System","Similar to `decrypt`, but returns NULL if decryption fails because of using the wrong key.","","","","","","Encryption"
"25.8.1.5101","countSubstrings",0,1,"","","System","","","","","","",""
"25.8.1.5101","parseDateTimeOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsFloat64",0,0,"","","System","","","","","","",""
"25.8.1.5101","s2GetNeighbors",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiSearchAnyCaseInsensitive",0,0,"","","System","","","","","","",""
"25.8.1.5101","ascii",0,1,"","","System","
Returns the ASCII code point of the first character of string `s` as an `Int32`.
","ascii(s)","- `s` — String input. [`String`](/sql-reference/data-types/string)
","Returns the ASCII code point of the first character. If `s` is empty, the result is `0`. If the first character is not an ASCII character or not part of the Latin-1 supplement range of UTF-16, the result is undefined. [`Int32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT ascii('234')
```

```response title=Response
┌─ascii('234')─┐
│           50 │
└──────────────┘
```

","22.11","String"
"25.8.1.5101","ngramDistanceCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitmapMax",0,0,"","","System","Returns the position of the greatest bit set in a bitmap, or `0` if the bitmap is empty.","bitmapMax(bitmap)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns the position of the greatest bit set in the bitmap, otherwise `0` [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapMax(bitmapBuild([1, 2, 3, 4, 5])) AS res;
```

```response title=Response
┌─res─┐
│   5 │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","h3GetOriginIndexFromUnidirectionalEdge",0,0,"","","System","","","","","","",""
"25.8.1.5101","blockNumber",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTime32BestEffortOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","rightUTF8",0,0,"","","System","
Returns a substring of UTF-8 encoded string `s` with a specified `offset` starting from the right.
","rightUTF8(s, offset)","- `s` — The UTF-8 encoded string to calculate a substring from. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `offset` — The number of bytes of the offset. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns:
- For positive `offset`, a substring of `s` with `offset` many bytes, starting from the right of the string.
- For negative `offset`, a substring of `s` with `length(s) - |offset|` bytes, starting from the right of the string.
- An empty string if `length` is `0`.
     [`String`](/sql-reference/data-types/string)","**Positive offset**

```sql title=Query
SELECT rightUTF8('Привет', 4)
```

```response title=Response
ивет
```

**Negative offset**

```sql title=Query
SELECT rightUTF8('Привет', -4)
```

```response title=Response
ет
```

","22.1","String"
"25.8.1.5101","cutURLParameter",0,0,"","","System","","","","","","",""
"25.8.1.5101","positionCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiSearchFirstPositionCaseInsensitive",0,0,"","","System","","","","","","",""
"25.8.1.5101","subtractHours",0,0,"","","System","
Subtracts a specified number of hours from a date, a date with time or a string-encoded date or date with time.
    ","subtractHours(datetime, num)","- `datetime` — Date or date with time to subtract specified number of hours from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of hours to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` hours [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64(3)`](/sql-reference/data-types/datetime64)","**Subtract hours from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractHours(date, 12) AS subtract_hours_with_date,
    subtractHours(date_time, 12) AS subtract_hours_with_date_time,
    subtractHours(date_time_string, 12) AS subtract_hours_with_date_time_string
```

```response title=Response
┌─subtract_hours_with_date─┬─subtract_hours_with_date_time─┬─subtract_hours_with_date_time_string─┐
│      2023-12-31 12:00:00 │           2023-12-31 12:00:00 │              2023-12-31 12:00:00.000 │
└──────────────────────────┴───────────────────────────────┴──────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 hour)
```

```response title=Response
┌─minus(CAST('⋯alHour(10))─┐
│      1998-06-15 14:00:00 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","geoToS2",0,0,"","","System","","","","","","",""
"25.8.1.5101","indexOf",0,0,"","","System","
Returns the index of the first element with value 'x' (starting from 1) if it is in the array.
If the array does not contain the searched-for value, the function returns `0`.

Elements set to `NULL` are handled as normal values.
    ","indexOf(arr, x)","- `arr` — An array to search in for `x`. [`Array(T)`](/sql-reference/data-types/array)
- `x` — Value of the first matching element in `arr` for which to return an index. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns the index (numbered from one) of the first `x` in `arr` if it exists. Otherwise, returns `0`. [`UInt64`](/sql-reference/data-types/int-uint)","**Basic example**

```sql title=Query
SELECT indexOf([5, 4, 1, 3], 3)
```

```response title=Response
4
```

**Array with nulls**

```sql title=Query
SELECT indexOf([1, 3, NULL, NULL], NULL)
```

```response title=Response
3
```

","1.1","Arrays"
"25.8.1.5101","emptyArrayString",0,0,"","","System","Returns an empty String array","emptyArrayString()","","An empty String array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayString
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","tryBase64URLDecode",0,0,"","","System","
Like [`base64URLDecode`](#base64URLDecode), but returns an empty string in case of error.
","tryBase64URLDecode(encoded)","- `encoded` — String column or constant to decode. If the string is not valid Base64-encoded, returns an empty string in case of error. [`String`](/sql-reference/data-types/string)
","Returns a string containing the decoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT tryBase64URLDecode('aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ')
```

```response title=Response
┌─tryBase64URLDecode('aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ')─┐
│ https://clickhouse.com                               │
└──────────────────────────────────────────────────────┘
```

","18.16","String"
"25.8.1.5101","h3IsValid",0,0,"","","System","
Verifies whether the number is a valid [H3](https://h3geo.org/docs/core-library/h3Indexing/) index.
    ","h3IsValid(h3index)","- `h3index` — Hexagon index number. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns `1` if the number is a valid H3 index, `0` otherwise. [`UInt8`](/sql-reference/data-types/int-uint)","**Check valid H3 index**

```sql title=Query
SELECT h3IsValid(630814730351855103) AS isValid
```

```response title=Response
┌─isValid─┐
│       1 │
└─────────┘
```

**Check invalid H3 index**

```sql title=Query
SELECT h3IsValid(12345) AS isValid
```

```response title=Response
┌─isValid─┐
│       0 │
└─────────┘
```

","20.1","Geo"
"25.8.1.5101","emptyArrayUInt32",0,0,"","","System","Returns an empty UInt32 array","emptyArrayUInt32()","","An empty UInt32 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayUInt32
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","concatAssumeInjective",0,0,"","","System","
Like [`concat`](#concat) but assumes that `concat(s1, s2, ...) → sn` is injective,
i.e, it returns different results for different arguments.

Can be used for optimization of `GROUP BY`.
","concatAssumeInjective([s1, s2, ...])","- `s1, s2, ...` — Any number of values of arbitrary type. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
","Returns the string created by concatenating the arguments. If any of argument values is `NULL`, the function returns `NULL`. If no arguments are passed, it returns an empty string. [`String`](/sql-reference/data-types/string)","**Group by optimization**

```sql title=Query
SELECT concat(key1, key2), sum(value) FROM key_val GROUP BY concatAssumeInjective(key1, key2)
```

```response title=Response
┌─concat(key1, key2)─┬─sum(value)─┐
│ Hello, World!      │          3 │
│ Hello, World!      │          2 │
│ Hello, World       │          3 │
└────────────────────┴────────────┘
```

","1.1","String"
"25.8.1.5101","toStartOfHour",0,0,"","","System","
Rounds down a date with time to the start of the hour.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfHour(datetime)","- `datetime` — A date with time to round. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the date with time rounded down to the start of the hour. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Round down to the start of the hour**

```sql title=Query
SELECT
    toStartOfHour(toDateTime('2023-04-21 10:20:30'));
```

```response title=Response
┌─────────────────res─┬─toTypeName(res)─┐
│ 2023-04-21 10:00:00 │ DateTime        │
└─────────────────────┴─────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","getMergeTreeSetting",0,0,"","","System","
Returns the current value of merge tree setting.
","getMergeTreeSetting('custom_setting')","- `custom_setting` — The setting name. [`String`](/sql-reference/data-types/string)
","The setting's current value.","**getMergeTreeSetting**

```sql title=Query
SELECT getMergeTreeSetting('index_granularity');
```

```response title=Response
8192
```

","","Other"
"25.8.1.5101","isDecimalOverflow",0,0,"","","System","","","","","","",""
"25.8.1.5101","sinh",0,0,"","","System","
Returns the hyperbolic sine.
","sinh(x)","- `x` — The angle, in radians. Values from the interval: -∞ < x < +∞. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns values from the interval: -∞ < sinh(x) < +∞ [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT sinh(0)
```

```response title=Response
0
```

","20.12","Mathematical"
"25.8.1.5101","toModifiedJulianDayOrNull",0,0,"","","System","
Similar to [`toModifiedJulianDay()`](#toModifiedJulianDay), but instead of raising exceptions it returns `NULL`.
    ","toModifiedJulianDayOrNull(date)","- `date` — Date in text form. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
","Returns the modified Julian day number for valid `date`, otherwise `null`. [`Nullable(Int32)`](/sql-reference/data-types/nullable)","**Convert date to Modified Julian Day with null handling**

```sql title=Query
SELECT toModifiedJulianDayOrNull('2020-01-01');
SELECT toModifiedJulianDayOrNull('0000-00-00'); -- invalid date, returns NULL
```

```response title=Response
┌─toModifiedJu⋯020-01-01')─┐
│                    58849 │
└──────────────────────────┘
┌─toModifiedJu⋯000-00-00')─┐
│                     ᴺᵁᴸᴸ │
└──────────────────────────┘
```

","21.1","Dates and Times"
"25.8.1.5101","multiplyDecimal",0,0,"","","System","
Performs multiplication on two decimals. Result value will be of type [Decimal256](/sql-reference/data-types/decimal).
Result scale can be explicitly specified by `result_scale` argument (const Integer in range `[0, 76]`). If not specified, the result scale is the max scale of given arguments.

:::note
These functions work significantly slower than usual `multiply`.
In case you don't really need controlled precision and/or need fast computation, consider using [multiply](#multiply)
:::
    ","multiplyDecimal(a, b[, result_scale])","- `a` — First value. [`Decimal`](/sql-reference/data-types/decimal)
- `b` — Second value. [`Decimal`](/sql-reference/data-types/decimal)
- `result_scale` — Scale of result. [`(U)Int*`](/sql-reference/data-types/int-uint)
","The result of multiplication with the given scale. Type: [`Decimal256`](/sql-reference/data-types/decimal)","**Usage example**

```sql title=Query
SELECT multiplyDecimal(toDecimal256(-12, 0), toDecimal32(-2.1, 1), 1)
```

```response title=Response
25.2
```

**Difference with regular multiplication**

```sql title=Query
SELECT multiplyDecimal(toDecimal256(-12, 0), toDecimal32(-2.1, 1), 1)
```

```response title=Response
┌─multiply(toDecimal64(-12.647, 3), toDecimal32(2.1239, 4))─┐
│                                               -26.8609633 │
└───────────────────────────────────────────────────────────┘
┌─multiplyDecimal(toDecimal64(-12.647, 3), toDecimal32(2.1239, 4))─┐
│                                                         -26.8609 │
└──────────────────────────────────────────────────────────────────┘
```

**Decimal overflow**

```sql title=Query
SELECT
    toDecimal64(-12.647987876, 9) AS a,
    toDecimal64(123.967645643, 9) AS b,
    multiplyDecimal(a, b);
SELECT
    toDecimal64(-12.647987876, 9) AS a,
    toDecimal64(123.967645643, 9) AS b,
    a * b;
```

```response title=Response
┌─────────────a─┬─────────────b─┬─multiplyDecimal(toDecimal64(-12.647987876, 9), toDecimal64(123.967645643, 9))─┐
│ -12.647987876 │ 123.967645643 │                                                               -1567.941279108 │
└───────────────┴───────────────┴───────────────────────────────────────────────────────────────────────────────┘
Received exception from server (version 22.11.1):
Code: 407. DB::Exception: Received from localhost:9000. DB::Exception: Decimal math overflow:
While processing toDecimal64(-12.647987876, 9) AS a, toDecimal64(123.967645643, 9) AS b, a * b. (DECIMAL_OVERFLOW)
```

","22.12","Arithmetic"
"25.8.1.5101","tumble",0,0,"","","System","","","","","","",""
"25.8.1.5101","ngrams",0,0,"","","System","
Splits a UTF-8 string into n-grams of `ngramsize` symbols.
","ngrams(s, ngram_size)","- `s` — Input string. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `ngram_size` — The size of an n-gram. [`const UInt8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns an array with n-grams. [`Array(String)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT ngrams('ClickHouse', 3);
```

```response title=Response
['Cli','lic','ick','ckH','kHo','Hou','ous','use']
```

","21.11","String Splitting"
"25.8.1.5101","readWKBPolygon",0,0,"","","System","
                Parses a Well-Known Binary (WKB) representation of a Polygon geometry and returns it in the internal ClickHouse format.
                ","readWKBPolygon(wkt_string)","- `wkb_string` — The input WKB string representing a Polygon geometry. ","The function returns a ClickHouse internal representation of the Polygon geometry.","**first call**

```sql title=Query
SELECT readWKBPolygon(unhex('01030000000100000005000000000000000000f03f0000000000000000000000000000244000000000000000000000000000002440000000000000244000000000000000000000000000002440000000000000f03f0000000000000000'));
```

```response title=Response
┌─readWKBPolygon(unhex'01030000000200000005000000000000000000000000000000000000000000000000002440000000000000000000000000000024...'))─┐
                │ (1,0),(10,0),(10,10),(0,10),(1,0)]]                                                                                                 │
                └─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.8.1.5101","normalizeQuery",0,0,"","","System","","","","","","",""
"25.8.1.5101","randExponential",0,0,"","","System","
Returns a random Float64 number drawn from an [exponential distribution](https://en.wikipedia.org/wiki/Exponential_distribution).
    ","randExponential(lambda[, x])","- `lambda` — Rate parameter or lambda value of the distribution [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified exponential distribution. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT randExponential(1/10) FROM numbers(5)
```

```response title=Response
┌─randExponential(divide(1, 10))─┐
│              44.71628934340778 │
│              4.211013337903262 │
│             10.809402553207766 │
│              15.63959406553284 │
│             1.8148392319860158 │
└────────────────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","randomString",0,0,"","","System","
Generates a random string with the specified number of characters.
The returned characters are not necessarily ASCII characters, i.e. they may not be printable.
    ","randomString(length[, x])","- `length` — Length of the string in bytes. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a string filled with random bytes. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT randomString(5) AS str FROM numbers(2)
```

```response title=Response
���
�v6B�
```

","20.5","Random Number"
"25.8.1.5101","normalizeUTF8NFKD",0,0,"","","System","
Normalizes a UTF-8 string according to the [NFKD normalization form](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms).
","normalizeUTF8NFKD(str)","- `str` — UTF-8 encoded input string. [`String`](/sql-reference/data-types/string)
","Returns the NFKD normalized form of the UTF-8 string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT
    'H₂O²' AS original,                            -- H + subscript 2 + O + superscript 2
    normalizeUTF8NFKD('H₂O²') AS nfkd_normalized;  -- Converts to H 2 O 2
```

```response title=Response
┌─original─┬─nfkd_normalized─┐
│ H₂O²     │ H2O2            │
└──────────┴─────────────────┘
```

","21.11","String"
"25.8.1.5101","toUnixTimestamp64Milli",0,0,"","","System","","","","","","",""
"25.8.1.5101","firstSignificantSubdomainCustom",0,0,"","","System","","","","","","",""
"25.8.1.5101","simpleJSONExtractBool",0,0,"","","System","
Parses a true/false value from the value of the field named `field_name`.
The result is `UInt8`.
","simpleJSONExtractBool(json, field_name)","- `json` — The JSON in which the field is searched for. [`String`](/sql-reference/data-types/string)
- `field_name` — The name of the field to search for. [`const String`](/sql-reference/data-types/string)
","Returns `1` if the value of the field is `true`, `0` otherwise. This means this function will return `0` including (and not only) in the following cases:
- If the field doesn't exists.
- If the field contains `true` as a string, e.g.: `{""field"":""true""}`.
- If the field contains `1` as a numerical value. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
CREATE TABLE jsons
(
    `json` String
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO jsons VALUES ('{""foo"":false,""bar"":true}');
INSERT INTO jsons VALUES ('{""foo"":""true"",""qux"":1}');

SELECT simpleJSONExtractBool(json, 'bar') FROM jsons ORDER BY json;
SELECT simpleJSONExtractBool(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
0
1
0
0
```

","21.4","JSON"
"25.8.1.5101","normalizeUTF8NFKC",0,0,"","","System","
Normalizes a UTF-8 string according to the [NFKC normalization form](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms).
","normalizeUTF8NFKC(str)","- `str` — UTF-8 encoded input string. [`String`](/sql-reference/data-types/string)
","Returns the NFKC normalized form of the UTF-8 string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT
    '① ② ③' AS original,                            -- Circled number characters
    normalizeUTF8NFKC('① ② ③') AS nfkc_normalized;  -- Converts to 1 2 3
```

```response title=Response
┌─original─┬─nfkc_normalized─┐
│ ① ② ③  │ 1 2 3           │
└──────────┴─────────────────┘
```

","21.11","String"
"25.8.1.5101","multiSearchFirstIndexCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","less",0,0,"","","System","Compares two values for less-than relation.","less(a, b)
    -- a < b","- `a` — First value.<sup>[*](#comparison-rules)</sup> - `b` — Second value.<sup>[*](#comparison-rules)</sup> ","Returns `1` if `a` is less than `b`, otherwise `0` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT 1 < 2, 2 < 1;
```

```response title=Response
┌─less(1, 2)─┬─less(2, 1)─┐
│          1 │          0 │
└────────────┴────────────┘
```

","1.1","Comparison"
"25.8.1.5101","normalizeUTF8NFD",0,0,"","","System","
Normalizes a UTF-8 string according to the [NFD normalization form](https://en.wikipedia.org/wiki/Unicode_equivalence#Normal_forms).
","normalizeUTF8NFD(str)","- `str` — UTF-8 encoded input string. [`String`](/sql-reference/data-types/string)
","Returns the NFD normalized form of the UTF-8 string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT
    'é' AS original, -- é (U+00E9)
    length(original),
    normalizeUTF8NFD('é') AS nfd_normalized, -- e + combining acute (U+0065 + U+0301)
    length(nfd_normalized);
```

```response title=Response
┌─original─┬─length(original)─┬─nfd_normalized─┬─length(nfd_normalized)─┐
│ é        │                2 │ é              │                      3 │
└──────────┴──────────────────┴────────────────┴────────────────────────┘
```

","21.11","String"
"25.8.1.5101","toDateTime64OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","port",0,0,"","","System","Returns the port or `default_port` if there is no port in the URL (or in case of validation error).","","","","","","URL"
"25.8.1.5101","tid",0,0,"","","System","
Returns id of the thread, in which the current [Block](/development/architecture/#block) is processed.
    ","tid()","","Returns the current thread id. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT tid();
```

```response title=Response
┌─tid()─┐
│  3878 │
└───────┘
```

","20.12","Introspection"
"25.8.1.5101","subtractSeconds",0,0,"","","System","
Subtracts a specified number of seconds from a date, a date with time or a string-encoded date or date with time.
    ","subtractSeconds(datetime, num)","- `datetime` — Date or date with time to subtract specified number of seconds from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of seconds to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` seconds [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64(3)`](/sql-reference/data-types/datetime64)","**Subtract seconds from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractSeconds(date, 60) AS subtract_seconds_with_date,
    subtractSeconds(date_time, 60) AS subtract_seconds_with_date_time,
    subtractSeconds(date_time_string, 60) AS subtract_seconds_with_date_time_string
```

```response title=Response
┌─subtract_seconds_with_date─┬─subtract_seconds_with_date_time─┬─subtract_seconds_with_date_time_string─┐
│        2023-12-31 23:59:00 │             2023-12-31 23:59:00 │                2023-12-31 23:59:00.000 │
└────────────────────────────┴─────────────────────────────────┴────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 second)
```

```response title=Response
┌─minus(CAST('⋯Second(10))─┐
│      1998-06-15 23:59:50 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","multiSearchAllPositionsCaseInsensitive",0,0,"","","System","","","","","","",""
"25.8.1.5101","base32Encode",0,0,"","","System","
Encodes a string using [Base32](https://datatracker.ietf.org/doc/html/rfc4648#section-6).
","base32Encode(plaintext)","- `plaintext` — Plaintext to encode. [`String`](/sql-reference/data-types/string)
","Returns a string containing the encoded value of the argument. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)","**Usage example**

```sql title=Query
SELECT base32Encode('Encoded')
```

```response title=Response
┌─base32Encode('Encoded')─┐
│ IVXGG33EMVSA====        │
└─────────────────────────┘
```

","25.6","String"
"25.8.1.5101","randConstant",0,0,"","","System","
Generates a single random value that remains constant across all rows in the current query execution.

This function:
- Returns the same random value for every row within a single query
- Produces different values across separate query executions

It is useful for applying consistent random seeds or identifiers across all rows in a dataset
    ","randConstant([x])","- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a column of type `UInt32` containing the same random value in each row. [`UInt32`](/sql-reference/data-types/int-uint)","**Basic usage**

```sql title=Query
SELECT randConstant() AS random_value;
```

```response title=Response
| random_value |
|--------------|
| 1234567890   |
```

**Usage with parameter**

```sql title=Query
SELECT randConstant(10) AS random_value;
```

```response title=Response
| random_value |
|--------------|
| 9876543210   |
```

","1.1","Random Number"
"25.8.1.5101","timezoneOffset",0,0,"","","System","
Returns the timezone offset in seconds from [UTC](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
The function takes daylight saving time and historical timezone changes at the specified date and time into account.
    ","timeZoneOffset(datetime)","- `datetime` — `DateTime` value to get the timezone offset for. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the offset from UTC in seconds [`Int32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toDateTime('2021-04-21 10:20:30', 'America/New_York') AS Time,
toTypeName(Time) AS Type,
timeZoneOffset(Time) AS Offset_in_seconds,
(Offset_in_seconds / 3600) AS Offset_in_hours;
```

```response title=Response
┌────────────────Time─┬─Type─────────────────────────┬─Offset_in_seconds─┬─Offset_in_hours─┐
│ 2021-04-21 10:20:30 │ DateTime('America/New_York') │            -14400 │              -4 │
└─────────────────────┴──────────────────────────────┴───────────────────┴─────────────────┘
```

","21.6","Dates and Times"
"25.8.1.5101","transform",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayLevenshteinDistanceWeighted",0,0,"","","System","
Calculates Levenshtein distance for two arrays with custom weights for each element.
The number of elements for the array and its weights should match.
    ","arrayLevenshteinDistanceWeighted(from, to, from_weights, to_weights)","- `from` — first array. [`Array(T)`](/sql-reference/data-types/array). - `to` — second array. [`Array(T)`](/sql-reference/data-types/array). - `from_weights` — weights for the first array. [`Array((U)Int*|Float*)`](/sql-reference/data-types/array)
- `to_weights` — weights for the second array. [`Array((U)Int*|Float*)`](/sql-reference/data-types/array)
","Levenshtein distance between the first and the second arrays with custom weights for each element [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT arrayLevenshteinDistanceWeighted(['A', 'B', 'C'], ['A', 'K', 'L'], [1.0, 2, 3], [3.0, 4, 5])
```

```response title=Response
14
```

","25.4","Arrays"
"25.8.1.5101","BLAKE3",0,0,"","","System","
    Calculates BLAKE3 hash string and returns the resulting set of bytes as FixedString.
    This cryptographic hash-function is integrated into ClickHouse with BLAKE3 Rust library.
    The function is rather fast and shows approximately two times faster performance compared to SHA-2, while generating hashes of the same length as SHA-256.
    It returns a BLAKE3 hash as a byte array with type FixedString(32).
    ","SELECT BLAKE3(message)","- `message` — The input [String](../../sql-reference/data-types/string.md). ","Returns the 32-byte BLAKE3 hash of the input string as a fixed-length string. [`FixedString(32)`](/sql-reference/data-types/fixedstring)","**hash**

```sql title=Query
SELECT hex(BLAKE3('ABC'))
```

```response title=Response

```

","","Hash"
"25.8.1.5101","toMinute",0,0,"","","System","
Returns the minute component (0-59) of a `Date` or `DateTime` value.
    ","toMinute(datetime)","- `datetime` — Date or date with time to get the minute from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the minute of the hour (0 - 59) of the given `Date` or `DateTime` value [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toMinute(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toMinute(toDateTime('2023-04-21 10:20:30'))─┐
│                                          20 │
└─────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","atan",0,1,"","","System","
Returns the arc tangent of the argument.
","atan(x)","- `x` — The value for which to find arc tangent of. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the arc tangent of `x`. [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT atan(1);
```

```response title=Response
0.7853981633974483
```

","1.1","Mathematical"
"25.8.1.5101","arrayLevenshteinDistance",0,0,"","","System","Calculates the Levenshtein distance for two arrays.","arrayLevenshteinDistance(from, to)","- `from` — The first array. [`Array(T)`](/sql-reference/data-types/array). - `to` — The second array. [`Array(T)`](/sql-reference/data-types/array). ","Levenshtein distance between the first and the second arrays. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT arrayLevenshteinDistance([1, 2, 4], [1, 2, 3])
```

```response title=Response
1
```

","25.4","Arrays"
"25.8.1.5101","ifNotFinite",0,0,"","","System","
Checks whether a floating point value is finite.

You can get a similar result by using the [ternary operator](/sql-reference/functions/conditional-functions#if): `isFinite(x) ? x : y`.
    ","ifNotFinite(x,y)","- `x` — Value to check if infinite. [`Float*`](/sql-reference/data-types/float)
- `y` — Fallback value. [`Float*`](/sql-reference/data-types/float)
","- `x` if `x` is finite.
- `y` if `x` is not finite.","**Usage example**

```sql title=Query
SELECT 1/0 AS infimum, ifNotFinite(infimum,42)
```

```response title=Response
inf  42
```

","20.3","Arithmetic"
"25.8.1.5101","bitmapSubsetInRange",0,0,"","","System","Returns a subset of the bitmap, containing only the set bits in the specified range [start, end). Uses 1-based indexing.","bitmapSubsetInRange(bitmap, start, end)","- `bitmap` — Bitmap to extract the subset from. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `start` — Start of the range (inclusive). [`UInt*`](/sql-reference/data-types/int-uint) - `end` — End of the range (exclusive). [`UInt*`](/sql-reference/data-types/int-uint) ","Returns a bitmap containing only the set bits in the specified range [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapSubsetInRange(bitmapBuild([1, 2, 3, 4, 5]), 2, 5)) AS res;
```

```response title=Response
┌─res───────┐
│ [2, 3, 4] │
└───────────┘
```

","20.1","Bitmap"
"25.8.1.5101","nullIf",0,1,"","","System","
Returns `NULL` if both arguments are equal.
    ","nullIf(x, y)","- `x` — The first value. [`Any`](/sql-reference/data-types)
- `y` — The second value. [`Any`](/sql-reference/data-types)
","Returns `NULL` if both arguments are equal, otherwise returns the first argument. [`NULL`](/sql-reference/syntax#null) or [`Nullable(x)`](/sql-reference/data-types/nullable)","**Usage example**

```sql title=Query
SELECT nullIf(1, 1), nullIf(1, 2);
```

```response title=Response
┌─nullIf(1, 1)─┬─nullIf(1, 2)─┐
│         ᴺᵁᴸᴸ │            1 │
└──────────────┴──────────────┘
```

","1.1","Null"
"25.8.1.5101","toDecimal256OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiMatchAny",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTime64OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","extractKeyValuePairsWithEscaping",0,0,"","","System","Same as `extractKeyValuePairs` but with escaping support.

            Escape sequences supported: `\x`, `\N`, `\a`, `\b`, `\e`, `\f`, `\n`, `\r`, `\t`, `\v` and `\0`.
            Non standard escape sequences are returned as it is (including the backslash) unless they are one of the following:
            `\\`, `'`, `""`, `backtick`, `/`, `=` or ASCII control characters (c <= 31).

            This function will satisfy the use case where pre-escaping and post-escaping are not suitable. For instance, consider the following
            input string: `a: ""aaaa\""bbb""`. The expected output is: `a: aaaa\""bbbb`.
            - Pre-escaping: Pre-escaping it will output: `a: ""aaaa""bbb""` and `extractKeyValuePairs` will then output: `a: aaaa`
            - Post-escaping: `extractKeyValuePairs` will output `a: aaaa\` and post-escaping will keep it as it is.

            Leading escape sequences will be skipped in keys and will be considered invalid for values.

            **Escape sequences with escape sequence support turned on**
            ```sql
            arthur :) select extractKeyValuePairsWithEscaping('age:a\\x0A\\n\\0') as kv

            SELECT extractKeyValuePairsWithEscaping('age:a\\x0A\\n\\0') AS kv

            Query id: 44c114f0-5658-4c75-ab87-4574de3a1645

            ┌─kv───────────────┐
            │ {'age':'a\n\n\0'} │
            └──────────────────┘
            ```","","","","","","Map"
"25.8.1.5101","parseDateTime64OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","snowflakeToDateTime64",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTimeOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","tupleMultiplyByNumber",0,0,"","","System","","","","","","",""
"25.8.1.5101","randomStringUTF8",0,0,"","","System","
Generates a random [UTF-8](https://en.wikipedia.org/wiki/UTF-8) string with the specified number of codepoints.
No codepoints from unassigned [planes](https://en.wikipedia.org/wiki/Plane_(Unicode)) (planes 4 to 13) are returned.
It is still possible that the client interacting with ClickHouse server is not able to display the produced UTF-8 string correctly.
    ","randomStringUTF8(length)","- `length` — Length of the string in code points. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a string filled with random UTF-8 codepoints. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT randomStringUTF8(13)
```

```response title=Response
┌─randomStringUTF8(13)─┐
│ 𘤗𙉝д兠庇󡅴󱱎󦐪􂕌𔊹𓰛       │
└──────────────────────┘
```

","20.5","Random Number"
"25.8.1.5101","max2",0,1,"","","System","
    Returns the bigger of two numeric values `x` and `y`.
    ","max2(x, y)","- `x` — First value [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `y` — Second value [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns the bigger value of `x` and `y`. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT max2(-1, 2)
```

```response title=Response
2
```

","21.11","Arithmetic"
"25.8.1.5101","mapFromArrays",0,0,"","","System","","","","","","",""
"25.8.1.5101","cutToFirstSignificantSubdomainCustomWithWWWRFC",0,0,"","","System","Similar to `cutToFirstSignificantSubdomainCustomWithWWW` but follows stricter rules according to RFC 3986.","","","","","","URL"
"25.8.1.5101","initialQueryStartTime",0,0,"","","System","Returns the start time of the initial current query.","initialQueryStartTime()","","Start time of the initial query.","**simple**

```sql title=Query
SELECT initialQueryStartTime()
```

```response title=Response
2025-01-28 11:38:04
```

","","Other"
"25.8.1.5101","parseDateTime",0,0,"","","System","","","","","","",""
"25.8.1.5101","empty",0,0,"","","System","
Checks whether the input array is empty.

An array is considered empty if it does not contain any elements.

:::note
Can be optimized by enabling the [`optimize_functions_to_subcolumns` setting](/operations/settings/settings#optimize_functions_to_subcolumns). With `optimize_functions_to_subcolumns = 1` the function reads only [size0](/sql-reference/data-types/array#array-size) subcolumn instead of reading and processing the whole array column. The query `SELECT empty(arr) FROM TABLE;` transforms to `SELECT arr.size0 = 0 FROM TABLE;`.
:::

The function also works for [strings](string-functions.md#empty) or [UUID](uuid-functions.md#empty).
    ","empty(arr)","- `arr` — Input array. [`Array(T)`](/sql-reference/data-types/array)
","Returns `1` for an empty array or `0` for a non-empty array [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT empty([]);
```

```response title=Response
1
```

","1.1","Arrays"
"25.8.1.5101","dotProduct",0,0,"","","System","","","","","","",""
"25.8.1.5101","emptyArrayUInt16",0,0,"","","System","Returns an empty UInt16 array","emptyArrayUInt16()","","An empty UInt16 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayUInt16
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","parseReadableSizeOrZero",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it returns `0`","parseReadableSizeOrZero(x)","- `x` — Readable size with ISO/IEC 80000-13 or decimal byte unit. [`String`](/sql-reference/data-types/string)
","Number of bytes, rounded up to the nearest integer, or 0 if unable to parse the input. [`UInt64`](/sql-reference/data-types/int-uint)","**basic**

```sql title=Query
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB', 'invalid']) AS readable_sizes, parseReadableSizeOrZero(readable_sizes) AS sizes;
```

```response title=Response
┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
│ invalid        │       0 │
└────────────────┴─────────┘
```

","","Other"
"25.8.1.5101","parseReadableSize",0,0,"","","System","Given a string containing a byte size and `B`, `KiB`, `KB`, `MiB`, `MB`, etc. as a unit (i.e. [ISO/IEC 80000-13](https://en.wikipedia.org/wiki/ISO/IEC_80000) or decimal byte unit), this function returns the corresponding number of bytes. If the function is unable to parse the input value, it throws an exception.","parseReadableSize(x)","- `x` — Readable size with ISO/IEC 80000-13 or decimal byte unit. [`String`](/sql-reference/data-types/string)
","Number of bytes, rounded up to the nearest integer [`UInt64`](/sql-reference/data-types/int-uint)","**basic**

```sql title=Query
SELECT arrayJoin(['1 B', '1 KiB', '3 MB', '5.314 KiB']) AS readable_sizes, parseReadableSize(readable_sizes) AS sizes;
```

```response title=Response
┌─readable_sizes─┬───sizes─┐
│ 1 B            │       1 │
│ 1 KiB          │    1024 │
│ 3 MB           │ 3000000 │
│ 5.314 KiB      │    5442 │
└────────────────┴─────────┘
```

","","Other"
"25.8.1.5101","parseTimeDelta",0,0,"","","System","","","","","","",""
"25.8.1.5101","toTime64OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","stem",0,0,"","","System","","","","","","",""
"25.8.1.5101","subtractMinutes",0,0,"","","System","
Subtracts a specified number of minutes from a date, a date with time or a string-encoded date or date with time.
    ","subtractMinutes(datetime, num)","- `datetime` — Date or date with time to subtract specified number of minutes from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of minutes to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` minutes [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64(3)`](/sql-reference/data-types/datetime64)","**Subtract minutes from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractMinutes(date, 30) AS subtract_minutes_with_date,
    subtractMinutes(date_time, 30) AS subtract_minutes_with_date_time,
    subtractMinutes(date_time_string, 30) AS subtract_minutes_with_date_time_string
```

```response title=Response
┌─subtract_minutes_with_date─┬─subtract_minutes_with_date_time─┬─subtract_minutes_with_date_time_string─┐
│        2023-12-31 23:30:00 │             2023-12-31 23:30:00 │                2023-12-31 23:30:00.000 │
└────────────────────────────┴─────────────────────────────────┴────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 minute)
```

```response title=Response
┌─minus(CAST('⋯Minute(10))─┐
│      1998-06-15 23:50:00 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","polygonsEqualsCartesian",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayProduct",0,0,"","","System","
Returns the product of elements in the source array.

If a lambda function `func` is specified, returns the product of elements of the lambda results.
    ","arrayProduct([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns the product of elements in the source array, or the product of elements of the lambda results if provided. [`Float64`](/sql-reference/data-types/float)","**Basic example**

```sql title=Query
SELECT arrayProduct([1, 2, 3, 4]);
```

```response title=Response
24
```

**Usage with lambda function**

```sql title=Query
SELECT arrayProduct(x, y -> x+y, [2, 2], [2, 2]) AS res;
```

```response title=Response
16
```

","21.1","Arrays"
"25.8.1.5101","polygonsIntersectionSpherical",0,0,"","","System","","","","","","",""
"25.8.1.5101","gccMurmurHash",0,0,"","","System","
Computes the 64-bit [MurmurHash2](https://github.com/aappleby/smhasher) hash of the input value using the same seed as used by [GCC](https://github.com/gcc-mirror/gcc/blob/41d6b10e96a1de98e90a7c0378437c3255814b16/libstdc%2B%2B-v3/include/bits/functional_hash.h#L191).

It is portable between Clang and GCC builds.
","gccMurmurHash(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the calculated hash value of the input arguments. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT
    gccMurmurHash(1, 2, 3) AS res1,
    gccMurmurHash(('a', [1, 2, 3], 4, (4, ['foo', 'bar'], 1, (1, 2)))) AS res2
```

```response title=Response
┌─────────────────res1─┬────────────────res2─┐
│ 12384823029245979431 │ 1188926775431157506 │
└──────────────────────┴─────────────────────┘
```

","20.1","Hash"
"25.8.1.5101","visibleWidth",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3PointDistRads",0,0,"","","System","","","","","","",""
"25.8.1.5101","polygonsUnionSpherical",0,0,"","","System","","","","","","",""
"25.8.1.5101","byteSize",0,0,"","","System","","","","","","",""
"25.8.1.5101","IPv4StringToNum",0,0,"","","System","","","","","","",""
"25.8.1.5101","positionUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","hasSubsequenceCaseInsensitiveUTF8",0,1,"","","System","","","","","","",""
"25.8.1.5101","pi",0,1,"","","System","
Returns pi (π).
","pi()","","Returns pi [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT pi();
```

```response title=Response
3.141592653589793
```

","1.1","Mathematical"
"25.8.1.5101","randCanonical",0,0,"","","System","
Returns a random distributed `Float64` number with uniform distribution between `0` (inclusive) and `1` (exclusive).
    ","randCanonical([x])","- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT randCanonical();
```

```response title=Response
0.345217890123456
```

","22.11","Random Number"
"25.8.1.5101","randPoisson",0,0,"","","System","
Returns a random Float64 number drawn from a [Poisson distribution](https://en.wikipedia.org/wiki/Poisson_distribution) distribution.
    ","randPoisson(n[, x])","- `n` — The mean number of occurrences. [`UInt64`](/sql-reference/data-types/int-uint)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified Poisson distribution. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT randPoisson(10) FROM numbers(5)
```

```response title=Response
┌─randPoisson(10)─┐
│               8 │
│               8 │
│               7 │
│              10 │
│               6 │
└─────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","nowInBlock",0,0,"","","System","
Returns the current date and time at the moment of processing of each block of data. In contrast to the function [`now`](#now), it is not a constant expression, and the returned value will be different in different blocks for long-running queries.

It makes sense to use this function to generate the current time in long-running `INSERT SELECT` queries.
    ","nowInBlock([timezone])","- `timezone` — Optional. Timezone name for the returned value. [`String`](/sql-reference/data-types/string)
","Returns the current date and time at the moment of processing of each block of data. [`DateTime`](/sql-reference/data-types/datetime)","**Difference with the now() function**

```sql title=Query
SELECT
    now(),
    nowInBlock(),
    sleep(1)
FROM numbers(3)
SETTINGS max_block_size = 1
FORMAT PrettyCompactMonoBlock
```

```response title=Response
┌───────────────now()─┬────────nowInBlock()─┬─sleep(1)─┐
│ 2022-08-21 19:41:19 │ 2022-08-21 19:41:19 │        0 │
│ 2022-08-21 19:41:19 │ 2022-08-21 19:41:20 │        0 │
│ 2022-08-21 19:41:19 │ 2022-08-21 19:41:21 │        0 │
└─────────────────────┴─────────────────────┴──────────┘
```

","22.8","Dates and Times"
"25.8.1.5101","randNegativeBinomial",0,0,"","","System","
Returns a random Float64 number drawn from a [negative binomial distribution](https://en.wikipedia.org/wiki/Negative_binomial_distribution).
    ","randNegativeBinomial(experiments, probability[, x])","- `experiments` — The number of experiments. [`UInt64`](/sql-reference/data-types/int-uint)
- `probability` — `The probability of failure in each experiment as a value between `0` and `1`. [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified negative binomial distribution [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT randNegativeBinomial(100, .75) FROM numbers(5)
```

```response title=Response
┌─randNegativeBinomial(100, 0.75)─┐
│                              33 │
│                              32 │
│                              39 │
│                              40 │
│                              50 │
└─────────────────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","toUnixTimestamp64Micro",0,0,"","","System","","","","","","",""
"25.8.1.5101","randBinomial",0,0,"","","System","
Returns a random Float64 number drawn from a [binomial distribution](https://en.wikipedia.org/wiki/Binomial_distribution).
    ","randBinomial(experiments, probability[, x])","- `experiments` — The number of experiments [`UInt64`](/sql-reference/data-types/int-uint)
- `probability` — The probability of success in each experiment as a value between `0` and `1` [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified binomial distribution. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT randBinomial(100, .75) FROM numbers(5)
```

```response title=Response
┌─randBinomial(100, 0.75)─┐
│                      74 │
│                      78 │
│                      76 │
│                      77 │
│                      80 │
└─────────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","randBernoulli",0,0,"","","System","
Returns a random Float64 number drawn from a [Bernoulli distribution](https://en.wikipedia.org/wiki/Bernoulli_distribution).
    ","randBernoulli(probability[, x])","- `probability` — The probability of success as a value between `0` and `1`. [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified Bernoulli distribution. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT randBernoulli(.75) FROM numbers(5)
```

```response title=Response
┌─randBernoulli(0.75)─┐
│                   1 │
│                   1 │
│                   0 │
│                   1 │
│                   1 │
└─────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","numericIndexedVectorPointwiseMultiply",0,0,"","","System","Performs pointwise multiplication between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant. The function returns a new NumericIndexedVector.","numericIndexedVectorPointwiseMultiply(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toInt32(x), [10, 20, 30]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toInt32(x), [10, 20, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseMultiply(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseMultiply(vec1, 2)) AS res2;
```

```response title=Response
┌─res1──────────┬─res2─────────────┐
│ {2:200,3:600} │ {1:20,2:40,3:60} │
└───────────────┴──────────────────┘
```

","25.7","Arithmetic"
"25.8.1.5101","toInt32OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","randStudentT",0,0,"","","System","
Returns a random Float64 number drawn from a [Student's t-distribution](https://en.wikipedia.org/wiki/Student%27s_t-distribution).
    ","randStudentT(degree_of_freedom[, x])","- `degree_of_freedom` — Degrees of freedom. [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified Student's t-distribution. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT randStudentT(10) FROM numbers(5)
```

```response title=Response
┌─────randStudentT(10)─┐
│   1.2217309938538725 │
│   1.7941971681200541 │
│ -0.28192176076784664 │
│   0.2508897721303792 │
│  -2.7858432909761186 │
└──────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","sipHash64",0,0,"","","System","
Produces a 64-bit [SipHash](https://en.wikipedia.org/wiki/SipHash) hash value.

This is a cryptographic hash function. It works at least three times faster than the [`MD5`](#md5) hash function.

The function [interprets](/sql-reference/functions/type-conversion-functions#reinterpretasstring) all the input parameters as strings and calculates the hash value for each of them.
It then combines the hashes using the following algorithm:

1. The first and the second hash value are concatenated to an array which is hashed.
2. The previously calculated hash value and the hash of the third input parameter are hashed in a similar way.
3. This calculation is repeated for all remaining hash values of the original input.

:::note
the calculated hash values may be equal for the same input values of different argument types.
This affects for example integer types of different size, named and unnamed `Tuple` with the same data, `Map` and the corresponding `Array(Tuple(key, value))` type with the same data.
:::
","sipHash64(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments. [`Any`](/sql-reference/data-types)
","Returns a computed hash value of the input arguments. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT sipHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS SipHash, toTypeName(SipHash) AS type;
```

```response title=Response
┌──────────────SipHash─┬─type───┐
│ 11400366955626497465 │ UInt64 │
└──────────────────────┴────────┘
```

","1.1","Hash"
"25.8.1.5101","catboostEvaluate",0,0,"","","System","","","","","","",""
"25.8.1.5101","randNormal",0,0,"","","System","
Returns a random Float64 number drawn from a [normal distribution](https://en.wikipedia.org/wiki/Normal_distribution).
    ","randNormal(mean, stddev[, x])","- `mean` — The mean value of distribution [`Float64`](/sql-reference/data-types/float)
- `stddev` — The standard deviation of the distribution [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified normal distribution. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT randNormal(10, 2) FROM numbers(5)
```

```response title=Response
┌──randNormal(10, 2)─┐
│ 13.389228911709653 │
│  8.622949707401295 │
│ 10.801887062682981 │
│ 4.5220192605895315 │
│ 10.901239123982567 │
└────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","arrayReverseFill",0,0,"","","System","
The `arrayReverseFill` function sequentially processes a source array from the last
element to the first, evaluating a lambda condition at each position using elements
from the source and condition arrays. When the condition evaluates to false at
position i, the function replaces that element with the element at position i+1
from the current state of the array. The last element is always preserved
regardless of any condition.
    ","arrayReverseFill(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array with elements of the source array replaced by the results of the lambda. [`Array(T)`](/sql-reference/data-types/array)","**Example with a single array**

```sql title=Query
SELECT arrayReverseFill(x -> not isNull(x), [1, null, 2, null]) AS res
```

```response title=Response
[1, 2, 2, NULL]
```

**Example with two arrays**

```sql title=Query
SELECT arrayReverseFill(x, y, z -> x > y AND x < z, [5, 3, 6, 2], [4, 7, 1, 3], [10, 2, 8, 5]) AS res;
```

```response title=Response
[5, 6, 6, 2]
```

","20.1","Arrays"
"25.8.1.5101","in",0,0,"","","System","","","","","","",""
"25.8.1.5101","xxh3",0,0,"","","System","Computes a [XXH3](https://github.com/Cyan4973/xxHash) 64-bit hash value.","xxh3(expr)","- `expr` — A list of expressions of any data type. [`Any`](/sql-reference/data-types)
","Returns the computed 64-bit `xxh3` hash value [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT xxh3('ClickHouse')
```

```response title=Response
18009318874338624809
```

","22.12","Hash"
"25.8.1.5101","trimBoth",0,0,"","","System","
Removes the specified characters from the start and end of a string.
By default, removes common whitespace (ASCII) characters.
","trimBoth(s[, trim_characters])","- `s` — String to trim. [`String`](/sql-reference/data-types/string)
- `trim_characters` — Optional. Characters to trim. If not specified, common whitespace characters are removed. [`String`](/sql-reference/data-types/string)
","Returns the string with specified characters trimmed from both ends. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT trimBoth('$$ClickHouse$$', '$')
```

```response title=Response
┌─trimBoth('$$⋯se$$', '$')─┐
│ ClickHouse               │
└──────────────────────────┘
```

","20.1","String"
"25.8.1.5101","normalizeQueryKeepNames",0,0,"","","System","","","","","","",""
"25.8.1.5101","getSubcolumn",0,0,"","","System","
Receives the expression or identifier and constant string with the name of subcolumn.

Returns requested subcolumn extracted from the expression.
","","","","**getSubcolumn**

```sql title=Query
SELECT getSubcolumn(array_col, 'size0'), getSubcolumn(tuple_col, 'elem_name')
```

```response title=Response

```

","","Other"
"25.8.1.5101","queryString",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDateTime64",0,0,"","","System","","","","","","",""
"25.8.1.5101","initializeAggregation",0,0,"","","System","","","","","","",""
"25.8.1.5101","yesterday",0,0,"","","System","
Accepts zero arguments and returns yesterday's date at one of the moments of query analysis.
    ","yesterday()","","Returns yesterday's date. [`Date`](/sql-reference/data-types/date)","**Get yesterday's date**

```sql title=Query
SELECT yesterday();
SELECT today() - 1;
```

```response title=Response
┌─yesterday()─┐
│  2025-06-09 │
└─────────────┘
┌─minus(today(), 1)─┐
│        2025-06-09 │
└───────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","wordShingleMinHashArgUTF8",0,0,"","","System","
Splits a UTF-8 string into parts (shingles) of `shinglesize` words each and returns the shingles with minimum and maximum word hashes, calculated by the [`wordShingleMinHashUTF8`](#wordShingleMinHashUTF8) function with the same input.
It is case sensitive.
","wordShingleMinHashArgUTF8(string[, shinglesize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two tuples with `hashnum` word shingles each. [`Tuple(Tuple(String))`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT wordShingleMinHashArgUTF8('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;
```

```response title=Response
┌─Tuple─────────────────────────────────────────────────────────────────┐
│ (('OLAP','database','analytical'),('online','oriented','processing')) │
└───────────────────────────────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","variantElement",0,0,"","","System","
Extracts a column with specified type from a `Variant` column.
","variantElement(variant, type_name, [, default_value])","- `variant` — Variant column - `type_name` — The name of the variant type to extract - `default_value` — The default value that will be used if variant doesn't have variant with specified type. Can be any type. Optional ","","**Example**

```sql title=Query
CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT v, variantElement(v, 'String'), variantElement(v, 'UInt64'), variantElement(v, 'Array(UInt64)') FROM test;
```

```response title=Response
┌─v─────────────┬─variantElement(v, 'String')─┬─variantElement(v, 'UInt64')─┬─variantElement(v, 'Array(UInt64)')─┐
│ ᴺᵁᴸᴸ          │ ᴺᵁᴸᴸ                        │                        ᴺᵁᴸᴸ │ []                                 │
│ 42            │ ᴺᵁᴸᴸ                        │                          42 │ []                                 │
│ Hello, World! │ Hello, World!               │                        ᴺᵁᴸᴸ │ []                                 │
│ [1,2,3]       │ ᴺᵁᴸᴸ                        │                        ᴺᵁᴸᴸ │ [1,2,3]                            │
└───────────────┴─────────────────────────────┴─────────────────────────────┴────────────────────────────────────┘
```

","","JSON"
"25.8.1.5101","asinh",0,0,"","","System","
Returns the inverse hyperbolic sine.
","asinh(x)","- `x` — Hyperbolic sine of angle. Values from the interval: `-∞ < x < +∞`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the angle, in radians. Values from the interval: `-∞ < asinh(x) < +∞`. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT asinh(0)
```

```response title=Response
0
```

","20.12","Mathematical"
"25.8.1.5101","randUniform",0,0,"","","System","
Returns a random Float64 number drawn uniformly from the interval $[\min, \max]$.
    ","randUniform(min, max[, x])","- `min` — Left boundary of the range (inclusive). [`Float64`](/sql-reference/data-types/float)
- `max` — Right boundary of the range (inclusive). [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random number drawn uniformly from the interval formed by `min` and `max`. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT randUniform(5.5, 10) FROM numbers(5)
```

```response title=Response
┌─randUniform(5.5, 10)─┐
│    8.094978491443102 │
│   7.3181248914450885 │
│    7.177741903868262 │
│    6.483347380953762 │
│    6.122286382885112 │
└──────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","randomFixedString",0,0,"","","System","
Generates a random fixed-size string with the specified number of character.
The returned characters are not necessarily ASCII characters, i.e. they may not be printable.
    ","randomFixedString(length)","- `length` — Length of the string in bytes. [`UInt*`](/sql-reference/data-types/int-uint)
","Returns a string filled with random bytes. [`FixedString`](/sql-reference/data-types/fixedstring)","**Usage example**

```sql title=Query
SELECT randomFixedString(13) AS rnd, toTypeName(rnd)
```

```response title=Response
┌─rnd──────┬─toTypeName(randomFixedString(13))─┐
│ j▒h㋖HɨZ'▒ │ FixedString(13)                 │
└──────────┴───────────────────────────────────┘
```

","20.5","Random Number"
"25.8.1.5101","globalNotNullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt64OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetUInt16",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UInt16 if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","parseDateTime64InJodaSyntaxOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","YYYYMMDDhhmmssToDateTime",0,1,"","","System","
Converts a number containing the year, month, day, hour, minute, and second to a `DateTime`.
This function is the opposite of function [`toYYYYMMDDhhmmss()`](/sql-reference/functions/date-time-functions#toYYYYMMDDhhmmss).
The output is undefined if the input does not encode a valid `DateTime` value.
    ","YYYYMMDDhhmmssToDateTime(YYYYMMDDhhmmss[, timezone])","- `YYYYMMDDhhmmss` — Number containing the year, month, day, hour, minute, and second. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `timezone` — Timezone name. [`String`](/sql-reference/data-types/string)
","Returns a `DateTime` value from the provided arguments [`DateTime`](/sql-reference/data-types/datetime)","**Example**

```sql title=Query
SELECT YYYYMMDDToDateTime(20230911131415);
```

```response title=Response
┌──────YYYYMMDDhhmmssToDateTime(20230911131415)─┐
│                           2023-09-11 13:14:15 │
└───────────────────────────────────────────────┘
```

","23.9","Dates and Times"
"25.8.1.5101","readWKTPolygon",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayShiftLeft",0,0,"","","System","
Shifts an array to the left by the specified number of elements.
New elements are filled with the provided argument or the default value of the array element type.
If the number of elements is negative, the array is shifted to the right.
    ","arrayShiftLeft(arr, n[, default])","- `arr` — The array for which to shift the elements.[`Array(T)`](/sql-reference/data-types/array). - `n` — Number of elements to shift.[`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint). - `default` — Optional. Default value for new elements. ","An array shifted to the left by the specified number of elements [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayShiftLeft([1,2,3,4,5,6], 2) as res;
```

```response title=Response
[3,4,5,6,0,0]
```

**Negative value of n**

```sql title=Query
SELECT arrayShiftLeft([1,2,3,4,5,6], -2) as res;
```

```response title=Response
[0,0,1,2,3,4]
```

**Using a default value**

```sql title=Query
SELECT arrayShiftLeft([1,2,3,4,5,6], 2, 42) as res;
```

```response title=Response
[3,4,5,6,42,42]
```

","23.8","Arrays"
"25.8.1.5101","netloc",0,0,"","","System","","","","","","",""
"25.8.1.5101","regionToDistrict",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpret",0,0,"","","System","","","","","","",""
"25.8.1.5101","appendTrailingCharIfAbsent",0,0,"","","System","
Appends character `c` to string `s` if `s` is non-empty and does not end with character `c`.
","appendTrailingCharIfAbsent(s, c)","- `s` — Input string. [`String`](/sql-reference/data-types/string)
- `c` — Character to append if absent. [`String`](/sql-reference/data-types/string)
","Returns string `s` with character `c` appended if `s` does not end with `c`. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT appendTrailingCharIfAbsent('https://example.com', '/');
```

```response title=Response
┌─appendTraili⋯.com', '/')─┐
│ https://example.com/     │
└──────────────────────────┘
```

","1.1","String"
"25.8.1.5101","negate",0,0,"","","System","Negates the argument `x`. The result is always signed.","negate(x)","- `x` — The value to negate. ","Returns -x from x","**Usage example**

```sql title=Query
SELECT negate(10)
```

```response title=Response
-10
```

","1.1","Arithmetic"
"25.8.1.5101","queryID",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsFixedString",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsString",0,0,"","","System","","","","","","",""
"25.8.1.5101","sipHash128ReferenceKeyed",0,0,"","","System","
Same as [`sipHash128Reference`](#sipHash128Reference) but additionally takes an explicit key argument instead of using a fixed key.
    ","sipHash128ReferenceKeyed((k0, k1), arg1[, arg2, ...])","- `(k0, k1)` — Tuple of two values representing the key [`Tuple(UInt64, UInt64)`](/sql-reference/data-types/tuple)
- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed 128-bit `SipHash` hash value of the input arguments. [`FixedString(16)`](/sql-reference/data-types/fixedstring)","**Usage example**

```sql title=Query
SELECT hex(sipHash128Reference('foo', '', 3));
```

```response title=Response
┌─hex(sipHash128Reference('foo', '', 3))─┐
│ 4D1BE1A22D7F5933C0873E1698426260       │
└────────────────────────────────────────┘
```

","23.2","Hash"
"25.8.1.5101","mapPartialSort",0,0,"","","System","The same as arrayReverseSort.","","","","**mapPartialSort**

```sql title=Query
SELECT mapPartialSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))
```

```response title=Response

```

","23.4","Map"
"25.8.1.5101","toLastDayOfMonth",0,0,"","","System","
Rounds up a date or date with time to the last day of the month.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toLastDayOfMonth(value)","- `value` — The date or date with time to round up to the last day of the month. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the date of the last day of the month for the given date or date with time. [`Date`](/sql-reference/data-types/date)","**Round up to the last day of the month**

```sql title=Query
SELECT toLastDayOfMonth(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toLastDayOfMonth(toDateTime('2023-04-21 10:20:30'))─┐
│                                          2023-04-30 │
└─────────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","randomPrintableASCII",0,0,"","","System","
Generates a random [ASCII](https://en.wikipedia.org/wiki/ASCII#Printable_characters) string with the specified number of characters.

If you pass `length < 0`, the behavior of the function is undefined.
    ","randomPrintableASCII(length[, x])","- `length` — String length in bytes. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a string with a random set of ASCII printable characters. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT number, randomPrintableASCII(30) AS str, length(str) FROM system.numbers LIMIT 3
```

```response title=Response
┌─number─┬─str────────────────────────────┬─length(randomPrintableASCII(30))─┐
│      0 │ SuiCOSTvC0csfABSw=UcSzp2.`rv8x │                               30 │
│      1 │ 1Ag NlJ &RCN:*>HVPG;PE-nO""SUFD │                               30 │
│      2 │ /""+<""with:=LjJ Vm!c&hI*m#XTfzz │                               30 │
└────────┴────────────────────────────────┴──────────────────────────────────┘
```

","20.1","Random Number"
"25.8.1.5101","notEquals",0,0,"","","System","Compares two values for inequality.","notEquals(a, b)
    -- a != b
    -- a <> b","- `a` — First value.<sup>[*](#comparison-rules)</sup> - `b` — Second value.<sup>[*](#comparison-rules)</sup> ","Returns `1` if `a` is not equal to `b`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT 1 != 2, 1 != 1;
```

```response title=Response
┌─notEquals(1, 2)─┬─notEquals(1, 1)─┐
│               1 │               0 │
└─────────────────┴─────────────────┘
```

","1.1","Comparison"
"25.8.1.5101","snowflakeToDateTime",0,0,"","","System","","","","","","",""
"25.8.1.5101","left",0,1,"","","System","
Returns a substring of string `s` with a specified `offset` starting from the left.
","left(s, offset)","- `s` — The string to calculate a substring from. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `offset` — The number of bytes of the offset. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns:
- For positive `offset`, a substring of `s` with `offset` many bytes, starting from the left of the string.
- For negative `offset`, a substring of `s` with `length(s) - |offset|` bytes, starting from the left of the string.
- An empty string if `length` is `0`.
     [`String`](/sql-reference/data-types/string)","**Positive offset**

```sql title=Query
SELECT left('Hello World', 5)
```

```response title=Response
Helllo
```

**Negative offset**

```sql title=Query
SELECT left('Hello World', -6)
```

```response title=Response
Hello
```

","22.1","String"
"25.8.1.5101","reinterpretAsDateTime",0,0,"","","System","","","","","","",""
"25.8.1.5101","toIntervalDay",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsFloat32",0,0,"","","System","","","","","","",""
"25.8.1.5101","toStartOfMillisecond",0,0,"","","System","
Rounds down a date with time to the start of the milliseconds.
    ","toStartOfMillisecond(datetime, [timezone])","- `datetime` — Date and time. [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone for the returned value. If not specified, the function uses the timezone of the `value` parameter. [`String`](/sql-reference/data-types/string)
","Input value with sub-milliseconds. [`DateTime64`](/sql-reference/data-types/datetime64)","**Query without timezone**

```sql title=Query
WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64
SELECT toStartOfMillisecond(dt64);
```

```response title=Response
┌────toStartOfMillisecond(dt64)─┐
│ 2020-01-01 10:20:30.999000000 │
└───────────────────────────────┘
```

**Query with timezone**

```sql title=Query
WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64
SELECT toStartOfMillisecond(dt64, 'Asia/Istanbul');
```

```response title=Response
┌─toStartOfMillisecond(dt64, 'Asia/Istanbul')─┐
│               2020-01-01 12:20:30.999000000 │
└─────────────────────────────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","reinterpretAsInt64",0,0,"","","System","","","","","","",""
"25.8.1.5101","toTimeWithFixedDate",0,0,"","","System","
Extracts the time component of a date or date with time.
The returned result is an offset to a fixed point in time, currently `1970-01-02`,
but the exact point in time is an implementation detail which may change in future.

`toTime` should therefore not be used standalone.
The main purpose of the function is to calculate the time difference between two dates or dates with time, e.g., `toTime(dt1) - toTime(dt2)`.
    ","toTime(date[, timezone])","- `date` — Date to convert to a time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone for the returned value. [`String`](/sql-reference/data-types/string)
","Returns the time component of a date or date with time in the form of an offset to a fixed point in time (selected as 1970-01-02, currently). [`DateTime`](/sql-reference/data-types/datetime)","**Calculate the time difference between two dates**

```sql title=Query
SELECT toTime('2025-06-15 12:00:00'::DateTime) - toTime('2024-05-10 11:00:00'::DateTime) AS result, toTypeName(result)
```

```response title=Response
┌─result─┬─toTypeName(result)─┐
│   3600 │ Int32              │
└────────┴────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","reinterpretAsInt16",0,0,"","","System","","","","","","",""
"25.8.1.5101","normalizedQueryHashKeepNames",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt256OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","tupleModulo",0,0,"","","System","","","","","","",""
"25.8.1.5101","toStringCutToZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt8OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","not",0,1,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsInt8",0,0,"","","System","","","","","","",""
"25.8.1.5101","fromUnixTimestamp",0,0,"","","System","
This function converts a Unix timestamp to a calendar date and a time of a day.

It can be called in two ways:

- When given a single argument of type [`Integer`](../data-types/int-uint.md), it returns a value of type [`DateTime`](../data-types/datetime.md), i.e. behaves like [`toDateTime`](../../sql-reference/functions/type-conversion-functions.md#todatetime).
- When given two or three arguments where the first argument is a value of type [`Integer`](../data-types/int-uint.md), [`Date`](../data-types/date.md), [`Date32`](../data-types/date32.md), [`DateTime`](../data-types/datetime.md) or [`DateTime64`](../data-types/datetime64.md), the second argument is a constant format string and the third argument is an optional constant time zone string, the function returns a value of type [`String`](../data-types/string.md), i.e. it behaves like [`formatDateTime`](#formatDateTime).
  In this case, [MySQL's datetime format style](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-functions.html#function_date-format) is used.
    ","fromUnixTimestamp(timestamp)
fromUnixTimestamp(timestamp[, format[, timezone]])","- `timestamp` — Unix timestamp or date/date with time value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `format` — Optional. Constant format string for output formatting. [`String`](/sql-reference/data-types/string)
- `timezone` — Optional. Constant time zone string. [`String`](/sql-reference/data-types/string)
","Returns `DateTime` of the timestamp when called with one argument, or a String  when called with two or three arguments. [`DateTime`](/sql-reference/data-types/datetime) or [`String`](/sql-reference/data-types/string)","**Convert Unix timestamp to DateTime**

```sql title=Query
SELECT fromUnixTimestamp(423543535)
```

```response title=Response
┌─fromUnixTimestamp(423543535)─┐
│          1983-06-04 10:58:55 │
└──────────────────────────────┘
```

**Convert Unix timestamp with format**

```sql title=Query
SELECT fromUnixTimestamp(1234334543, '%Y-%m-%d %R:%S') AS DateTime
```

```response title=Response
┌─DateTime────────────┐
│ 2009-02-11 14:42:23 │
└─────────────────────┘
```

","20.8","Dates and Times"
"25.8.1.5101","LinfNorm",0,0,"","","System","
Calculates the maximum of absolute values of a vector.
    ","LinfNorm(vector)","- `vector` — Vector or tuple of numeric values. [`Array(T)`](/sql-reference/data-types/array) or [`Tuple(T)`](/sql-reference/data-types/tuple)
","Returns the Linf-norm or the maximum absolute value. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT LinfNorm((1, -2))
```

```response title=Response
┌─LinfNorm((1, -2))─┐
│                 2 │
└───────────────────┘
```

","21.11","Distance"
"25.8.1.5101","reinterpretAsUInt8",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt8",0,0,"","","System","","","","","","",""
"25.8.1.5101","range",0,0,"","","System","
Returns an array of numbers from `start` to `end - 1` by `step`.

The supported types are:
- `UInt8/16/32/64`
- `Int8/16/32/64]`

- All arguments `start`, `end`, `step` must be one of the above supported types. Elements of the returned array will be a super type of the arguments.
- An exception is thrown if the function returns an array with a total length more than the number of elements specified by setting [`function_range_max_elements_in_block`](../../operations/settings/settings.md#function_range_max_elements_in_block).
- Returns `NULL` if any argument has Nullable(nothing) type. An exception is thrown if any argument has `NULL` value (Nullable(T) type).
    ","range([start, ] end [, step])","- `start` — Optional. The first element of the array. Required if `step` is used. Default value: `0`. - `end` — Required. The number before which the array is constructed. - `step` — Optional. Determines the incremental step between each element in the array. Default value: `1`. ","Array of numbers from `start` to `end - 1` by `step`. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT range(5), range(1, 5), range(1, 5, 2), range(-1, 5, 2);
```

```response title=Response
┌─range(5)────┬─range(1, 5)─┬─range(1, 5, 2)─┬─range(-1, 5, 2)─┐
│ [0,1,2,3,4] │ [1,2,3,4]   │ [1,3]          │ [-1,1,3]        │
└─────────────┴─────────────┴────────────────┴─────────────────┘
```

","1.1","Arrays"
"25.8.1.5101","kafkaMurmurHash",0,0,"","","System","
Calculates the 32-bit [MurmurHash2](https://github.com/aappleby/smhasher) hash of the input value using the same seed as used by [Kafka](https://github.com/apache/kafka/blob/461c5cfe056db0951d9b74f5adc45973670404d7/clients/src/main/java/org/apache/kafka/common/utils/Utils.java#L482) and without the highest bit to be compatible with [Default Partitioner](https://github.com/apache/kafka/blob/139f7709bd3f5926901a21e55043388728ccca78/clients/src/main/java/org/apache/kafka/clients/producer/internals/BuiltInPartitioner.java#L328).
","kafkaMurmurHash(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of parameters for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the calculated hash value of the input arguments. [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT
    kafkaMurmurHash('foobar') AS res1,
    kafkaMurmurHash(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS res2
```

```response title=Response
┌───────res1─┬─────res2─┐
│ 1357151166 │ 85479775 │
└────────────┴──────────┘
```

","23.4","Hash"
"25.8.1.5101","notIn",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetUInt8OrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the UInt8 if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","arrayIntersect",0,0,"","","System","Takes multiple arrays and returns an array with elements which are present in all source arrays. The result contains only unique values.","arrayIntersect(arr, arr1, ..., arrN)","- `arrN` — N arrays from which to make the new array. [`Array(T)`](/sql-reference/data-types/array). ","Returns an array with distinct elements that are present in all N arrays [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT
arrayIntersect([1, 2], [1, 3], [2, 3]) AS empty_intersection,
arrayIntersect([1, 2], [1, 3], [1, 4]) AS non_empty_intersection
```

```response title=Response
┌─non_empty_intersection─┬─empty_intersection─┐
│ []                     │ [1]                │
└────────────────────────┴────────────────────┘
```

","1.1","Arrays"
"25.8.1.5101","subtractDays",0,0,"","","System","
Subtracts a specified number of days from a date, a date with time or a string-encoded date or date with time.
    ","subtractDays(datetime, num)","- `datetime` — Date or date with time to subtract specified number of days from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of days to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` days [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract days from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractDays(date, 31) AS subtract_days_with_date,
    subtractDays(date_time, 31) AS subtract_days_with_date_time,
    subtractDays(date_time_string, 31) AS subtract_days_with_date_time_string
```

```response title=Response
┌─subtract_days_with_date─┬─subtract_days_with_date_time─┬─subtract_days_with_date_time_string─┐
│              2023-12-01 │          2023-12-01 00:00:00 │             2023-12-01 00:00:00.000 │
└─────────────────────────┴──────────────────────────────┴─────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 day)
```

```response title=Response
┌─minus(CAST('⋯valDay(10))─┐
│               1998-06-06 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","ngramSimHashCaseInsensitive",0,0,"","","System","
Splits a ASCII string into n-grams of `ngramsize` symbols and returns the n-gram `simhash`.
It is case insensitive.

Can be used for detection of semi-duplicate strings with [`bitHammingDistance`](/sql-reference/functions/bit-functions#bitHammingDistance).
The smaller the [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) of the calculated `simhashes` of two strings, the more likely these strings are the same.
","ngramSimHashCaseInsensitive(string[, ngramsize])","- `string` — String for which to compute the case insensitive `simhash`. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
","Hash value. [UInt64](../data-types/int-uint.md). [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT ngramSimHashCaseInsensitive('ClickHouse') AS Hash;
```

```response title=Response
┌──────Hash─┐
│ 562180645 │
└───────────┘
```

","21.1","Hash"
"25.8.1.5101","repeat",0,1,"","","System","
Concatenates a string as many times with itself as specified.

","repeat(s, n)","- `s` — The string to repeat. [`String`](/sql-reference/data-types/string)
- `n` — The number of times to repeat the string. [`(U)Int*`](/sql-reference/data-types/int-uint)
","A string containing string `s` repeated `n` times. If `n` <= 0, the function returns the empty string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT repeat('abc', 10)
```

```response title=Response
┌─repeat('abc', 10)──────────────┐
│ abcabcabcabcabcabcabcabcabcabc │
└────────────────────────────────┘
```

","20.1","String"
"25.8.1.5101","formatRow",0,0,"","","System","","","","","","",""
"25.8.1.5101","detectLanguage",0,0,"","","System","","","","","","",""
"25.8.1.5101","tupleElement",0,0,"","","System","","","","","","",""
"25.8.1.5101","roundAge",0,0,"","","System","
Takes a number representing a human age, compares it to standard age ranges, and returns either the highest or lowest value of the range the number falls within.

- Returns `0`, for `age < 1`.
- Returns `17`, for `1 ≤ age ≤ 17`.
- Returns `18`, for `18 ≤ age ≤ 24`.
- Returns `25`, for `25 ≤ age ≤ 34`.
- Returns `35`, for `35 ≤ age ≤ 44`.
- Returns `45`, for `45 ≤ age ≤ 54`.
- Returns `55`, for `age ≥ 55`.
","roundAge(num)","- `age` — A number representing an age in years. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns either the highest or lowest age of the range `age` falls within. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT *, roundAge(*) FROM system.numbers WHERE number IN (0, 5, 20, 31, 37, 54, 72);
```

```response title=Response
┌─number─┬─roundAge(number)─┐
│      0 │                0 │
│      5 │               17 │
│     20 │               18 │
│     31 │               25 │
│     37 │               35 │
│     54 │               45 │
│     72 │               55 │
└────────┴──────────────────┘
```

","1.1","Rounding"
"25.8.1.5101","SHA224",0,0,"","","System","Calculates the SHA224 hash of the given string.","SELECT SHA224(s);","- `s` — The input [String](../../sql-reference/data-types/string.md). ","Returns the SHA224 hash of the given input string as a fixed-length string. [`FixedString(28)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT HEX(SHA224('abc'));
```

```response title=Response
┌─hex(SHA224('abc'))───────────────────────────────────────┐
│ 23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7 │
└──────────────────────────────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","toDecimal32OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","partitionId",0,0,"","","System","","","","","","",""
"25.8.1.5101","mapSubtract",0,0,"","","System","","","","","","",""
"25.8.1.5101","roundToExp2",0,0,"","","System","
Rounds a number down to the nearest (whole non-negative) power of two.
If the number is less than one, it returns `0`.
","roundToExp2(num)","- `num` — A number to round. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `num` rounded down to the nearest (whole non-negative) power of two, otherwise `0` for `num < 1`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT *, roundToExp2(*) FROM system.numbers WHERE number IN (0, 2, 5, 10, 19, 50)
```

```response title=Response
┌─number─┬─roundToExp2(number)─┐
│      0 │                   0 │
│      2 │                   2 │
│      5 │                   4 │
│     10 │                   8 │
│     19 │                  16 │
│     50 │                  32 │
└────────┴─────────────────────┘
```

","1.1","Rounding"
"25.8.1.5101","wordShingleMinHashCaseInsensitiveUTF8",0,0,"","","System","
Splits a UTF-8 string into parts (shingles) of `shinglesize` words, calculates hash values for each word shingle and returns a tuple with these hashes.
Uses `hashnum` minimum hashes to calculate the minimum hash and `hashnum` maximum hashes to calculate the maximum hash.
It is case insensitive.

Can be used to detect semi-duplicate strings with [`tupleHammingDistance`](../functions/tuple-functions.md/#tuplehammingdistance).
For two strings, if the returned hashes are the same for both strings, then those strings are the same.
","wordShingleMinHashCaseInsensitiveUTF8(string[, shinglesize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two hashes — the minimum and the maximum. [`Tuple(UInt64, UInt64)`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT wordShingleMinHashCaseInsensitiveUTF8('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).') AS Tuple;
```

```response title=Response
┌─Tuple─────────────────────────────────────┐
│ (3065874883688416519,1634050779997673240) │
└───────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","s2CapUnion",0,0,"","","System","","","","","","",""
"25.8.1.5101","firstLine",0,0,"","","System","
Returns the first line of a multi-line string.
","firstLine(s)","- `s` — Input string. [`String`](/sql-reference/data-types/string)
","Returns the first line of the input string or the whole string if there are no line separators. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT firstLine('foo\\nbar\\nbaz')
```

```response title=Response
┌─firstLine('foo\nbar\nbaz')─┐
│ foo                        │
└────────────────────────────┘
```

","23.7","String"
"25.8.1.5101","currentProfiles",0,0,"","","System","","","","","","",""
"25.8.1.5101","CAST",0,1,"","","System","","","","","","",""
"25.8.1.5101","mapUpdate",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsUInt256",0,0,"","","System","","","","","","",""
"25.8.1.5101","ngramDistanceUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","s2RectUnion",0,0,"","","System","","","","","","",""
"25.8.1.5101","dateTimeToUUIDv7",0,0,"","","System","Converts a [DateTime](../data-types/datetime.md) value to the first [UUIDv7](https://en.wikipedia.org/wiki/UUID#Version_7) at the giving time.","dateTimeToUUIDv7(value)","- `value` — Date with time. [`DateTime`](/sql-reference/data-types/datetime)
","Input value converted to [`UUID`](/sql-reference/data-types/uuid)","**simple**

```sql title=Query
SELECT dateTimeToUUIDv7(toDateTime('2021-08-15 18:57:56', 'Asia/Shanghai'))
```

```response title=Response
6832626392367104000
```

","25.8","UUID"
"25.8.1.5101","filesystemAvailable",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsDate",0,0,"","","System","","","","","","",""
"25.8.1.5101","s2ToGeo",0,0,"","","System","","","","","","",""
"25.8.1.5101","toMonday",0,0,"","","System","
Rounds down a date or date with time to the Monday of the same week. Returns the date.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toMonday(value)","- `value` — Date or date with time to round down to the Monday of the week. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the date of the Monday of the same week for the given date or date with time. [`Date`](/sql-reference/data-types/date)","**Round down to the Monday of the week**

```sql title=Query
SELECT
toMonday(toDateTime('2023-04-21 10:20:30')), -- A Friday
toMonday(toDate('2023-04-24'));              -- Already a Monday
```

```response title=Response
┌─toMonday(toDateTime('2023-04-21 10:20:30'))─┬─toMonday(toDate('2023-04-24'))─┐
│                                  2023-04-17 │                     2023-04-24 │
└─────────────────────────────────────────────┴────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","toColumnTypeName",0,0,"","","System","","","","","","",""
"25.8.1.5101","overlayUTF8",0,0,"","","System","
Replace part of the string `s` with another string `replace`, starting at the 1-based index `offset`.
Assumes that the string contains valid UTF-8 encoded text.
If this assumption is violated, no exception is thrown and the result is undefined.
","overlayUTF8(s, replace, offset[, length])","- `s` — The input string. [`String`](/sql-reference/data-types/string)
- `replace` — The replacement string. [`const String`](/sql-reference/data-types/string)
- `offset` — An integer type `Int` (1-based). If `offset` is negative, it is counted from the end of the input string `s`. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `length` — Optional. Specifies the length of the snippet within the input string `s` to be replaced. If `length` is not specified, the number of characters removed from `s` equals the length of `replace`, otherwise `length` characters are removed. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a string with replacement. [`String`](/sql-reference/data-types/string)","**UTF-8 replacement**

```sql title=Query
SELECT overlayUTF8('Mein Vater ist aus Österreich.', 'der Türkei', 20) AS res;
```

```response title=Response
┌─res───────────────────────────┐
│ Mein Vater ist aus der Türkei.│
└───────────────────────────────┘
```

","24.9","String"
"25.8.1.5101","positiveModuloOrNull",0,1,"","","System","
Calculates the remainder when dividing `a` by `b`. Similar to function `positiveModulo` except that `positiveModuloOrNull` will return NULL
if the right argument is 0.
    ","positiveModuloOrNull(x, y)","- `x` — The dividend. [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float). - `x` — The divisor (modulus). [`(U)Int*`](/sql-reference/data-types/int-uint)/[`Float32/64`](/sql-reference/data-types/float). ","Returns the difference between `x` and the nearest integer not greater than
`x` divisible by `y`, `null` when the divisor is zero.","**positiveModuloOrNull**

```sql title=Query
SELECT positiveModuloOrNull(5, 0)
```

```response title=Response
\N
```

","25.5","Arithmetic"
"25.8.1.5101","sipHash128Reference",0,0,"","","System","
Like [`sipHash128`](/sql-reference/functions/hash-functions#siphash128) but implements the 128-bit algorithm from the original authors of SipHash.
    ","sipHash128Reference(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed 128-bit `SipHash` hash value of the input arguments. [`FixedString(16)`](/sql-reference/data-types/fixedstring)","**Usage example**

```sql title=Query
SELECT hex(sipHash128Reference('foo', '', 3));
```

```response title=Response
┌─hex(sipHash128Reference('foo', '', 3))─┐
│ 4D1BE1A22D7F5933C0873E1698426260       │
└────────────────────────────────────────┘
```

","23.2","Hash"
"25.8.1.5101","seriesOutliersDetectTukey",0,0,"","","System","
Detects outliers in series data using [Tukey Fences](https://en.wikipedia.org/wiki/Outlier#Tukey%27s_fences).

**Syntax**

```sql
seriesOutliersDetectTukey(series);
seriesOutliersDetectTukey(series, min_percentile, max_percentile, k);
```

**Arguments**

- `series` - An array of numeric values.
- `min_quantile` - The minimum quantile to be used to calculate inter-quantile range [(IQR)](https://en.wikipedia.org/wiki/Interquartile_range). The value must be in range [0.02,0.98]. The default is 0.25.
- `max_quantile` - The maximum quantile to be used to calculate inter-quantile range (IQR). The value must be in range [0.02, 0.98]. The default is 0.75.
- `k` - Non-negative constant value to detect mild or stronger outliers. The default value is 1.5

At least four data points are required in `series` to detect outliers.

**Returned value**

- Returns an array of the same length as the input array where each value represents score of possible anomaly of corresponding element in the series. A non-zero score indicates a possible anomaly.

Type: [Array](../../sql-reference/data-types/array.md).

**Examples**

Query:

```sql
SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4, 5, 12, 45, 12, 3, 3, 4, 5, 6]) AS print_0;
```

Result:

```text
┌───────────print_0─────────────────┐
│[0,0,0,0,0,0,0,0,0,27,0,0,0,0,0,0] │
└───────────────────────────────────┘
```

Query:

```sql
SELECT seriesOutliersDetectTukey([-3, 2, 15, 3, 5, 6, 4.50, 5, 12, 45, 12, 3.40, 3, 4, 5, 6], 0.2, 0.8, 1.5) AS print_0;
```

Result:

```text
┌─print_0──────────────────────────────┐
│ [0,0,0,0,0,0,0,0,0,19.5,0,0,0,0,0,0] │
└──────────────────────────────────────┘
```","","","","","","Time Series"
"25.8.1.5101","concatWithSeparatorAssumeInjective",0,0,"","","System","
Like [`concatWithSeparator`](#concatWithSeparator) but assumes that `concatWithSeparator(sep[,exp1, exp2, ... ]) → result` is injective.
A function is called injective if it returns different results for different arguments.

Can be used for optimization of `GROUP BY`.
","concatWithSeparatorAssumeInjective(sep[, exp1, exp2, ... ])","- `sep` — The separator to use. [`const String`](/sql-reference/data-types/string) or [`const FixedString`](/sql-reference/data-types/fixedstring)
- `exp1, exp2, ...` — Expression to be concatenated. Arguments which are not of type `String` or `FixedString` are converted to strings using their default serialization. As this decreases performance, it is not recommended to use non-String/FixedString arguments. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
","Returns the String created by concatenating the arguments. If any of the argument values is `NULL`, the function returns `NULL`. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
CREATE TABLE user_data (
user_id UInt32,
first_name String,
last_name String,
score UInt32
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO user_data VALUES
(1, 'John', 'Doe', 100),
(2, 'Jane', 'Smith', 150),
(3, 'John', 'Wilson', 120),
(4, 'Jane', 'Smith', 90);

SELECT
    concatWithSeparatorAssumeInjective('-', first_name, last_name) as full_name,
    sum(score) as total_score
FROM user_data
GROUP BY concatWithSeparatorAssumeInjective('-', first_name, last_name);
```

```response title=Response
┌─full_name───┬─total_score─┐
│ Jane-Smith  │         240 │
│ John-Doe    │         100 │
│ John-Wilson │         120 │
└─────────────┴─────────────┘
```

","22.12","String"
"25.8.1.5101","financialInternalRateOfReturnExtended",0,0,"","","System","
Calculates the Extended Internal Rate of Return (XIRR) for a series of cash flows occurring at irregular intervals. XIRR is the discount rate at which the net present value (NPV) of all cash flows equals zero.

XIRR attempts to solve the following equation (example for `ACT_365F`):

$$
\sum_{i=0}^n \frac{cashflow_i}{(1 + rate)^{(date_i - date_0)/365}} = 0
$$

Arrays should be sorted by date in ascending order. Dates need to be unique.
    ","financialInternalRateOfReturnExtended(cashflow, date [, guess, daycount])","- `cashflow` — An array of cash flows corresponding to the dates in second param. [`Array(Int8/16/32/64)`](/sql-reference/data-types/array) or [`Array(Float*)`](/sql-reference/data-types/array)
- `date` — A sorted array of unique dates corresponding to the cash flows. [`Array(Date)`](/sql-reference/data-types/array) or [`Array(Date32)`](/sql-reference/data-types/array)
- `[, guess]` — Optional. Initial guess (constant value) for the XIRR calculation. [`Float*`](/sql-reference/data-types/float)
- `[, daycount]` — 
Optional day count convention (default 'ACT_365F'). Supported values:
- 'ACT_365F' - Actual/365 Fixed: Uses actual number of days between dates divided by 365
- 'ACT_365_25' - Actual/365.25: Uses actual number of days between dates divided by 365.25
             [`String`](/sql-reference/data-types/string)
","Returns the XIRR value. If the calculation cannot be performed, it returns NaN. [`Float64`](/sql-reference/data-types/float)","**simple_example**

```sql title=Query
SELECT financialInternalRateOfReturnExtended([-10000, 5750, 4250, 3250], [toDate('2020-01-01'), toDate('2020-03-01'), toDate('2020-10-30'), toDate('2021-02-15')])
```

```response title=Response
0.6342972615260243
```

**simple_example_with_guess**

```sql title=Query
SELECT financialInternalRateOfReturnExtended([-10000, 5750, 4250, 3250], [toDate('2020-01-01'), toDate('2020-03-01'), toDate('2020-10-30'), toDate('2021-02-15')], 0.5)
```

```response title=Response
0.6342972615260243
```

**simple_example_daycount**

```sql title=Query
SELECT round(financialInternalRateOfReturnExtended([100000, -110000], [toDate('2020-01-01'), toDate('2021-01-01')], 0.1, 'ACT_365_25'), 6) AS xirr_365_25
```

```response title=Response
0.099785
```

","25.7","Financial"
"25.8.1.5101","cutWWW",0,0,"","","System","","","","","","",""
"25.8.1.5101","buildId",0,0,"","","System","","","","","","",""
"25.8.1.5101","ngramMinHashCaseInsensitive",0,0,"","","System","
Splits a ASCII string into n-grams of `ngramsize` symbols and calculates hash values for each n-gram and returns a tuple with these hashes
Uses `hashnum` minimum hashes to calculate the minimum hash and `hashnum` maximum hashes to calculate the maximum hash.
It is case insensitive.

Can be used to detect semi-duplicate strings with [`tupleHammingDistance`](../functions/tuple-functions.md/#tuplehammingdistance).
For two strings, if the returned hashes are the same for both strings, then those strings are the same.
","ngramMinHashCaseInsensitive(string[, ngramsize, hashnum])","- `string` — String. [String](../data-types/string.md). - `ngramsize` — The size of an n-gram. Optional. Possible values: any number from `1` to `25`. Default value: `3`. [UInt8](../data-types/int-uint.md). - `hashnum` — The number of minimum and maximum hashes used to calculate the result. Optional. Possible values: any number from `1` to `25`. Default value: `6`. [UInt8](../data-types/int-uint.md). ","Tuple with two hashes — the minimum and the maximum. [Tuple](../data-types/tuple.md)([UInt64](../data-types/int-uint.md), [UInt64](../data-types/int-uint.md)). [`Tuple`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT ngramMinHashCaseInsensitive('ClickHouse') AS Tuple;
```

```response title=Response
┌─Tuple──────────────────────────────────────┐
│ (2106263556442004574,13203602793651726206) │
└────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","randFisherF",0,0,"","","System","
Returns a random Float64 number drawn from an [F-distribution](https://en.wikipedia.org/wiki/F-distribution).
    ","randFisherF(d1, d2[, x])","- `d1` — d1 degree of freedom in `X = (S1 / d1) / (S2 / d2)`. [`Float64`](/sql-reference/data-types/float)
- `d2` — d2 degree of freedom in `X = (S1 / d1) / (S2 / d2)`. [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified F-distribution [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT randFisherF(10, 3) FROM numbers(5)
```

```response title=Response
┌─randFisherF(10, 20)─┐
│  0.7204609609506184 │
│  0.9926258472572916 │
│  1.4010752726735863 │
│ 0.34928401507025556 │
│  1.8216216009473598 │
└─────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","firstSignificantSubdomainCustomRFC",0,0,"","","System","","","","","","",""
"25.8.1.5101","serverUUID",0,0,"","","System","","","","","","",""
"25.8.1.5101","hostName",0,0,"","","System","","","","","","",""
"25.8.1.5101","L2SquaredNorm",0,0,"","","System","
Calculates the square root of the sum of the squares of the vector values (the [`L2Norm`](#L2Norm)) squared.
    ","L2SquaredNorm(vector)","- `vector` — Vector or tuple of numeric values. [`Array(T)`](/sql-reference/data-types/array) or [`Tuple(T)`](/sql-reference/data-types/tuple)
","Returns the L2-norm squared. [`UInt*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)","**Basic usage**

```sql title=Query
SELECT L2SquaredNorm((1, 2))
```

```response title=Response
┌─L2SquaredNorm((1, 2))─┐
│                     5 │
└───────────────────────┘
```

","22.7","Distance"
"25.8.1.5101","mapPartialReverseSort",0,0,"","","System","The same as arrayPartialReverseSort.","","","","**mapPartialReverseSort**

```sql title=Query
SELECT mapPartialReverseSort((k, v) -> v, 2, map('k1', 3, 'k2', 1, 'k3', 2))
```

```response title=Response

```

","23.4","Map"
"25.8.1.5101","toJSONString",0,0,"","","System","","","","","","",""
"25.8.1.5101","uptime",0,0,"","","System","","","","","","",""
"25.8.1.5101","extractURLParameter",0,0,"","","System","","","","","","",""
"25.8.1.5101","zookeeperSessionUptime",0,0,"","","System","","","","","","",""
"25.8.1.5101","displayName",0,0,"","","System","
Returns the value of `display_name` from config or server FQDN if not set.

[example:displayName]
","","","","**displayName**

```sql title=Query
SELECT displayName();
```

```response title=Response

```

","","Other"
"25.8.1.5101","sigmoid",0,0,"","","System","","","","","","",""
"25.8.1.5101","sign",0,1,"","","System","
Returns the sign of a real number.
","sign(x)","- `x` — Values from -∞ to +∞. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Decimal*`](/sql-reference/data-types/decimal) or [`Float*`](/sql-reference/data-types/float)
","Returns `-1` for `x < 0`, `0` for `x = 0`, `1` for `x > 0`. [`Int8`](/sql-reference/data-types/int-uint)","**Sign for zero**

```sql title=Query
SELECT sign(0)
```

```response title=Response
0
```

**Sign for positive**

```sql title=Query
SELECT sign(1)
```

```response title=Response
1
```

**Sign for negative**

```sql title=Query
SELECT sign(-1)
```

```response title=Response
-1
```

","21.2","Mathematical"
"25.8.1.5101","sleepEachRow",0,0,"","","System","","","","","","",""
"25.8.1.5101","sleep",0,0,"","","System","","","","","","",""
"25.8.1.5101","fragment",0,0,"","","System","","","","","","",""
"25.8.1.5101","polygonsSymDifferenceSpherical",0,0,"","","System","","","","","","",""
"25.8.1.5101","intExp2",0,0,"","","System","
Like [exp2](#exp2) but returns a `UInt64` number.
","intExp2(x)","- `x` — The exponent. [`Int*`](/sql-reference/data-types/int-uint) or [`UInt*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns 2^x. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT intExp2(3);
```

```response title=Response
8
```

","1.1","Mathematical"
"25.8.1.5101","toYearNumSinceEpoch",0,0,"","","System","Returns amount of years passed from year 1970","toYearNumSinceEpoch(date)","- `date` — A date or date with time to convert. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Positive integer","**Example**

```sql title=Query
SELECT toYearNumSinceEpoch(toDate('2024-10-01'))
```

```response title=Response
54
```

","25.3","Dates and Times"
"25.8.1.5101","runningDifference",0,0,"","","System","","","","","","",""
"25.8.1.5101","getServerPort",0,0,"","","System","","","","","","",""
"25.8.1.5101","formatQuery",0,0,"","","System","Returns a formatted, possibly multi-line, version of the given SQL query. Throws in case of a parsing error.
[example:multiline]","formatQuery(query)","- `query` — The SQL query to be formatted. [String](../../sql-reference/data-types/string.md) ","The formatted query [`String`](/sql-reference/data-types/string)","**multiline**

```sql title=Query
SELECT formatQuery('select a,    b FRom tab WHERE a > 3 and  b < 3');
```

```response title=Response
SELECT
    a,
    b
FROM tab
WHERE (a > 3) AND (b < 3)
```

","","Other"
"25.8.1.5101","parseDateTimeInJodaSyntax",0,0,"","","System","","","","","","",""
"25.8.1.5101","rowNumberInBlock",0,0,"","","System","","","","","","",""
"25.8.1.5101","splitByString",0,0,"","","System","
Splits a string with a constant `separator` consisting of multiple characters into an array of substrings.
If the string `separator` is empty, it will split the string `s` into an array of single characters.

Empty substrings may be selected when:
- A non-empty separator occurs at the beginning or end of the string
- There are multiple consecutive non-empty separators
- The original string `s` is empty while the separator is not empty

:::note
Setting [`splitby_max_substrings_includes_remaining_string`](../../operations/settings/settings.md#splitby_max_substrings_includes_remaining_string) (default: `0`) controls if the remaining string is included in the last element of the result array when argument `max_substrings > 0`.
:::
","splitByString(separator, s[, max_substrings])","- `separator` — The separator. [`String`](/sql-reference/data-types/string)
- `s` — The string to split. [`String`](/sql-reference/data-types/string)
- `max_substrings` — Optional. When `max_substrings > 0`, the returned substrings will be no more than `max_substrings`, otherwise the function will return as many substrings as possible. Default value: `0`. [`Int64`](/sql-reference/data-types/int-uint)
","Returns an array of selected substrings of `s` [`Array(String)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT splitByString(', ', '1, 2 3, 4,5, abcde');
```

```response title=Response
┌─splitByStrin⋯4,5, abcde')─┐
│ ['1','2 3','4,5','abcde'] │
└───────────────────────────┘
```

**Empty separator**

```sql title=Query
SELECT splitByString('', 'abcde');
```

```response title=Response
┌─splitByString('', 'abcde')─┐
│ ['a','b','c','d','e']      │
└────────────────────────────┘
```

","1.1","String Splitting"
"25.8.1.5101","polygonConvexHullCartesian",0,0,"","","System","","","","","","",""
"25.8.1.5101","murmurHash3_32",0,0,"","","System","
Produces a [MurmurHash3](https://github.com/aappleby/smhasher) hash value.

:::note
The calculated hash values may be equal for the same input values of different argument types.
This affects for example integer types of different size, named and unnamed `Tuple` with the same data, `Map` and the corresponding `Array(Tuple(key, value))` type with the same data.
:::
","murmurHash3_32(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed hash value of the input arguments. [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT murmurHash3_32(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash3, toTypeName(MurmurHash3) AS type;
```

```response title=Response
┌─MurmurHash3─┬─type───┐
│     2152717 │ UInt32 │
└─────────────┴────────┘
```

","18.10","Hash"
"25.8.1.5101","numericIndexedVectorAllValueSum",0,0,"","","System","Returns sum of all the value in NumericIndexedVector.","numericIndexedVectorAllValueSum(numericIndexedVector)","- `numericIndexedVector` — A NumericIndexedVector object. ","Numeric value which type is Float64","****

```sql title=Query
SELECT numericIndexedVectorAllValueSum(numericIndexedVectorBuild(mapFromArrays([1, 2, 3], [10, 20, 30]))) AS res;
```

```response title=Response
┌─res─┐
│  60 │
└─────┘
```

","25.7","Arithmetic"
"25.8.1.5101","arrayElementOrNull",0,0,"","","System","
Gets the element of the provided array with index `n` where `n` can be any integer type.
If the index falls outside of the bounds of an array, `NULL` is returned instead of a default value.

:::note
Arrays in ClickHouse are one-indexed.
:::

Negative indexes are supported. In this case, it selects the corresponding element numbered from the end. For example, `arr[-1]` is the last item in the array.
","arrayElementOrNull(arrays)","- `arrays` — Arbitrary number of array arguments. [`Array`](/sql-reference/data-types/array)
","Returns a single combined array from the provided array arguments. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayElementOrNull(arr, 2) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
2
```

**Negative indexing**

```sql title=Query
SELECT arrayElementOrNull(arr, -1) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
3
```

**Index out of array bounds**

```sql title=Query
SELECT arrayElementOrNull(arr, 4) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
NULL
```

","1.1","Arrays"
"25.8.1.5101","toInt16OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toWeek",0,0,"","","System","
This function returns the week number for date or datetime. The two-argument form of `toWeek()` enables you to specify whether the week starts
on Sunday or Monday and whether the return value should be in the range from `0` to `53` or from `1` to `53`.

[`toISOWeek()`](#toWeek) is a compatibility function that is equivalent to `toWeek(date,3)`.

The following table describes how the mode argument works.

| Mode | First day of week | Range | Week 1 is the first week ...    |
|------|-------------------|-------|---------------------------------|
| 0    | Sunday            | 0-53  | with a Sunday in this year      |
| 1    | Monday            | 0-53  | with 4 or more days this year   |
| 2    | Sunday            | 1-53  | with a Sunday in this year      |
| 3    | Monday            | 1-53  | with 4 or more days this year   |
| 4    | Sunday            | 0-53  | with 4 or more days this year   |
| 5    | Monday            | 0-53  | with a Monday in this year      |
| 6    | Sunday            | 1-53  | with 4 or more days this year   |
| 7    | Monday            | 1-53  | with a Monday in this year      |
| 8    | Sunday            | 1-53  | contains January 1              |
| 9    | Monday            | 1-53  | contains January 1              |

For mode values with a meaning of ""with 4 or more days this year,"" weeks are numbered according to ISO 8601:1988:

- If the week containing January 1 has 4 or more days in the new year, it is week 1.
- Otherwise, it is the last week of the previous year, and the next week is week 1.

For mode values with a meaning of ""contains January 1"", the week contains January 1 is week 1.
It does not matter how many days in the new year the week contained, even if it contained only one day.
I.e. if the last week of December contains January 1 of the next year, it will be week 1 of the next year.

The first argument can also be specified as [`String`](../data-types/string.md) in a format supported by [`parseDateTime64BestEffort()`](type-conversion-functions.md#parsedatetime64besteffort). Support for string arguments exists only for reasons of compatibility with MySQL which is expected by certain 3rd party tools. As string argument support may in future be made dependent on new MySQL-compatibility settings and because string parsing is generally slow, it is recommended to not use it.
    ","toWeek(datetime[, mode[, time_zone]])","- `datetime` — Date or date with time to get the week number from. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime)
- `mode` — Optional. A mode `0` to `9` determines the first day of the week and the range of the week number. Default `0`. - `time_zone` — Optional. Time zone. [`String`](/sql-reference/data-types/string)
","Returns the week number according to the specified mode. [`UInt32`](/sql-reference/data-types/int-uint)","**Get week numbers with different modes**

```sql title=Query
SELECT toDate('2016-12-27') AS date, toWeek(date) AS week0, toWeek(date,1) AS week1, toWeek(date,9) AS week9
```

```response title=Response
┌───────date─┬─week0─┬─week1─┬─week9─┐
│ 2016-12-27 │    52 │    52 │     1 │
└────────────┴───────┴───────┴───────┘
```

","20.1","Dates and Times"
"25.8.1.5101","reinterpretAsUInt32",0,0,"","","System","","","","","","",""
"25.8.1.5101","base64URLDecode",0,0,"","","System","
Decodes a string from [Base64](https://en.wikipedia.org/wiki/Base64) representation using URL-safe alphabet, according to RFC 4648.
Throws an exception in case of error.
","base64URLDecode(encoded)","- `encoded` — String column or constant to encode. If the string is not valid Base64-encoded, an exception is thrown. [`String`](/sql-reference/data-types/string)
","Returns a string containing the decoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT base64URLDecode('aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ')
```

```response title=Response
┌─base64URLDecode('aHR0cHM6Ly9jbGlja2hvdXNlLmNvbQ')─┐
│ https://clickhouse.com                            │
└───────────────────────────────────────────────────┘
```

","24.6","String"
"25.8.1.5101","arrayDotProduct",0,0,"","","System","
Returns the dot product of two arrays.

:::note
The sizes of the two vectors must be equal. Arrays and Tuples may also contain mixed element types.
:::
","arrayDotProduct(v1, v2)","- `v1` — First vector. [`Array((U)Int* | Float* | Decimal)`](/sql-reference/data-types/array) or [`Tuple((U)Int* | Float* | Decimal)`](/sql-reference/data-types/tuple)
- `v2` — Second vector. [`Array((U)Int* | Float* | Decimal)`](/sql-reference/data-types/array) or [`Tuple((U)Int* | Float* | Decimal)`](/sql-reference/data-types/tuple)
","The dot product of the two vectors.

:::note
The return type is determined by the type of the arguments. If Arrays or Tuples contain mixed element types then the result type is the supertype.
:::

 [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)","**Array example**

```sql title=Query
SELECT arrayDotProduct([1, 2, 3], [4, 5, 6]) AS res, toTypeName(res);
```

```response title=Response
32    UInt16
```

**Tuple example**

```sql title=Query
SELECT dotProduct((1::UInt16, 2::UInt8, 3::Float32),(4::Int16, 5::Float32, 6::UInt8)) AS res, toTypeName(res);
```

```response title=Response
32    Float64
```

","23.5","Arrays"
"25.8.1.5101","punycodeEncode",0,0,"","","System","
Returns the [Punycode](https://en.wikipedia.org/wiki/Punycode) representation of a string.
The string must be UTF8-encoded, otherwise the behavior is undefined.
","punycodeEncode(s)","- `s` — Input value. [`String`](/sql-reference/data-types/string)
","Returns a Punycode representation of the input value. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT punycodeEncode('München')
```

```response title=Response
┌─punycodeEncode('München')─┐
│ Mnchen-3ya                │
└───────────────────────────┘
```

","24.1","String"
"25.8.1.5101","arrayElement",0,0,"","","System","
Gets the element of the provided array with index `n` where `n` can be any integer type.
If the index falls outside of the bounds of an array, it returns a default value (0 for numbers, an empty string for strings, etc.),
except for arguments of a non-constant array and a constant index 0. In this case there will be an error `Array indices are 1-based`.

:::note
Arrays in ClickHouse are one-indexed.
:::

Negative indexes are supported. In this case, the corresponding element is selected, numbered from the end. For example, `arr[-1]` is the last item in the array.

Operator `[n]` provides the same functionality.
    ","arrayElement(arr, n)","- `arr` — The array to search. [`Array(T)`](/sql-reference/data-types/array). - `n` — Position of the element to get. [`(U)Int*`](/sql-reference/data-types/int-uint). ","Returns a single combined array from the provided array arguments [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayElement(arr, 2) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
2
```

**Negative indexing**

```sql title=Query
SELECT arrayElement(arr, -1) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
3
```

**Using [n] notation**

```sql title=Query
SELECT arr[2] FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
2
```

**Index out of array bounds**

```sql title=Query
SELECT arrayElement(arr, 4) FROM (SELECT [1, 2, 3] AS arr)
```

```response title=Response
0
```

","1.1","Arrays"
"25.8.1.5101","RIPEMD160",0,0,"","","System","Calculates the RIPEMD-160 hash of the given string.","SELECT RIPEMD160(s);","- `s` — The input [String](../../sql-reference/data-types/string.md). ","Returns the RIPEMD160 hash of the given input string as a fixed-length string. [`FixedString(20)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'));
```

```response title=Response
┌─HEX(RIPEMD160('The quick brown fox jumps over the lazy dog'))─┐
│ 37F332F68DB77BD9D7EDD4969571AD671CF9DD3B                      │
└───────────────────────────────────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","sqidDecode",0,0,"","","System","
Transforms a [Sqid](https://sqids.org/) back into an array of numbers.","sqidDecode(number1, ...)","- `sqid` — A sqid ","An array of numbers [`Array(UInt64)`](/sql-reference/data-types/array)","**simple**

```sql title=Query
SELECT sqidDecode('gXHfJ1C6dN');
```

```response title=Response
┌─sqidDecode('gXHfJ1C6dN')─┐
│ [1,2,3,4,5]              │
└──────────────────────────┘
```

","","Encoding"
"25.8.1.5101","arrayReverseSplit",0,0,"","","System","Split a source array into multiple arrays. When `func(x[, y1, ..., yN])` returns something other than zero, the array will be split to the right of the element. The array will not be split after the last element.","arrayReverseSplit(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array of arrays. [`Array(Array(T))`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayReverseSplit((x, y) -> y, [1, 2, 3, 4, 5], [1, 0, 0, 1, 0]) AS res
```

```response title=Response
[[1], [2, 3, 4], [5]]
```

","20.1","Arrays"
"25.8.1.5101","transactionOldestSnapshot",0,0,"","","System","","","","","","",""
"25.8.1.5101","dumpColumnStructure",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiSearchFirstIndex",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayPopFront",0,0,"","","System","Removes the first item from the array.","arrayPopFront(arr)","- `arr` — The array for which to remove the first element from. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array identical to `arr` but without the first element of `arr` [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayPopFront([1, 2, 3]) AS res;
```

```response title=Response
[2, 3]
```

","1.1","Arrays"
"25.8.1.5101","subtractMilliseconds",0,0,"","","System","
Subtracts a specified number of milliseconds from a date with time or a string-encoded date with time.
    ","subtractMilliseconds(datetime, num)","- `datetime` — Date with time to subtract specified number of milliseconds from. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of milliseconds to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` milliseconds [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract milliseconds from different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractMilliseconds(date_time, 1000) AS subtract_milliseconds_with_date_time,
    subtractMilliseconds(date_time_string, 1000) AS subtract_milliseconds_with_date_time_string
```

```response title=Response
┌─subtract_milliseconds_with_date_time─┬─subtract_milliseconds_with_date_time_string─┐
│              2023-12-31 23:59:59.000 │                     2023-12-31 23:59:59.000 │
└──────────────────────────────────────┴─────────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::DateTime, INTERVAL 10 millisecond)
```

```response title=Response
┌─minus(CAST('⋯second(10))─┐
│  1998-06-15 23:59:59.990 │
└──────────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","ngramMinHashArg",0,0,"","","System","
Splits a ASCII string into n-grams of `ngramsize` symbols and returns the n-grams with minimum and maximum hashes, calculated by the [`ngramMinHash`](#ngramMinHash) function with the same input.
It is case sensitive.
","ngramMinHashArg(string[, ngramsize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `ngramsize` — Optional. The size of an n-gram, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two tuples with `hashnum` n-grams each. [`Tuple(String)`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT ngramMinHashArg('ClickHouse') AS Tuple;
```

```response title=Response
┌─Tuple─────────────────────────────────────────────────────────────────────────┐
│ (('ous','ick','lic','Hou','kHo','use'),('Hou','lic','ick','ous','ckH','Cli')) │
└───────────────────────────────────────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","snowflakeIDToDateTime",0,0,"","","System","Returns the timestamp component of a [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as a value of type [DateTime](../data-types/datetime.md).","snowflakeIDToDateTime(value[, epoch[, time_zone]])","- `value` — Snowflake ID. [UInt64](../data-types/int-uint.md) - `epoch` — Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. Optional. [UInt*](../data-types/int-uint.md) - `time_zone` — [Timezone](/operations/server-configuration-parameters/settings.md/#server_configuration_parameters-timezone). The function parses `time_string` according to the timezone. Optional. [String](../data-types/string.md) ","The timestamp component of `value` as a [`DateTime`](/sql-reference/data-types/datetime)","**simple**

```sql title=Query
SELECT snowflakeIDToDateTime(7204436857747984384)
```

```response title=Response
2024-06-06 10:59:58
```

","24.6","UUID"
"25.8.1.5101","protocol",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiSearchAllPositionsUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","divideOrNull",0,0,"","","System","
Same as `divide` but returns NULL when dividing by zero.
    ","divideOrNull(x, y)","- `x` — Dividend - `y` — Divisor ","The quotient of x and y, or NULL.","**Dividing by zero**

```sql title=Query
SELECT divideOrNull(25, 0)
```

```response title=Response
\N
```

","25.5","Arithmetic"
"25.8.1.5101","toYearWeek",0,0,"","","System","
Returns the year and week for a date. The year in the result may be different from the year in the date argument for the first and the last week of the year.

The mode argument works like the mode argument of [`toWeek()`](/sql-reference/functions/date-time-functions#toWeek).

Warning: The week number returned by `toYearWeek()` can be different from what the `toWeek()` returns. `toWeek()` always returns week number in the context of the given year, and in case `toWeek()` returns `0`, `toYearWeek()` returns the value corresponding to the last week of previous year. See `prev_yearWeek` in example below.

The first argument can also be specified as [`String`](../data-types/string.md) in a format supported by [`parseDateTime64BestEffort()`](type-conversion-functions.md#parsedatetime64besteffort). Support for string arguments exists only for reasons of compatibility with MySQL which is expected by certain 3rd party tools. As string argument support may in future be made dependent on new MySQL-compatibility settings and because string parsing is generally slow, it is recommended to not use it.
    ","toYearWeek(datetime[, mode[, timezone]])","- `datetime` — Date or date with time to get the year and week of. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime)
- `mode` — Optional. A mode `0` to `9` determines the first day of the week and the range of the week number. Default `0`. - `timezone` — Optional. Time zone. [`String`](/sql-reference/data-types/string)
","Returns year and week number as a combined integer value. [`UInt32`](/sql-reference/data-types/int-uint)","**Get year-week combinations with different modes**

```sql title=Query
SELECT toDate('2016-12-27') AS date, toYearWeek(date) AS yearWeek0, toYearWeek(date,1) AS yearWeek1, toYearWeek(date,9) AS yearWeek9, toYearWeek(toDate('2022-01-01')) AS prev_yearWeek
```

```response title=Response
┌───────date─┬─yearWeek0─┬─yearWeek1─┬─yearWeek9─┬─prev_yearWeek─┐
│ 2016-12-27 │    201652 │    201652 │    201701 │        202152 │
└────────────┴───────────┴───────────┴───────────┴───────────────┘
```

","20.1","Dates and Times"
"25.8.1.5101","toInt8",0,0,"","","System","","","","","","",""
"25.8.1.5101","numericIndexedVectorBuild",0,0,"","","System","Creates a NumericIndexedVector from a map. The map’s keys represent the vector's index and map's value represents the vector's value.","SELECT numericIndexedVectorBuild(map)","- `map` — A mapping from index to value. ","NumericIndexedVector object.","****

```sql title=Query
SELECT numericIndexedVectorBuild(mapFromArrays([1, 2, 3], [10, 20, 30])) AS res, toTypeName(res);
```

```response title=Response
┌─res─┬─toTypeName(res)────────────────────────────────────────────┐
│     │ AggregateFunction(groupNumericIndexedVector, UInt8, UInt8) │
└─────┴────────────────────────────────────────────────────────────┘
```

","25.7","Arithmetic"
"25.8.1.5101","s2RectContains",0,0,"","","System","","","","","","",""
"25.8.1.5101","equals",0,0,"","","System","Compares two values for equality.","equals(a, b)
        -- a = b
        -- a == b","- `a` — First value.<sup>[*](#comparison-rules)</sup> - `b` — Second value.<sup>[*](#comparison-rules)</sup> ","Returns `1` if `a` is equal to `b`, otherwise `0` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT 1 = 1, 1 = 2;
```

```response title=Response
┌─equals(1, 1)─┬─equals(1, 2)─┐
│            1 │            0 │
└──────────────┴──────────────┘
```

","1.1","Comparison"
"25.8.1.5101","simpleJSONExtractInt",0,0,"","","System","
Parses `Int64` from the value of the field named `field_name`.
If `field_name` is a string field, it tries to parse a number from the beginning of the string.
If the field does not exist, or it exists but does not contain a number, it returns `0`.
","simpleJSONExtractInt(json, field_name)","- `json` — The JSON in which the field is searched for. [`String`](/sql-reference/data-types/string)
- `field_name` — The name of the field to search for. [`const String`](/sql-reference/data-types/string)
","Returns the number parsed from the field if the field exists and contains a number, `0` otherwise [`Int64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
CREATE TABLE jsons
(
    `json` String
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":""not1number""}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractInt(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
0
-4
0
-3
5
```

","21.4","JSON"
"25.8.1.5101","toLastDayOfWeek",0,0,"","","System","
Rounds a date or date with time up to the nearest Saturday or Sunday.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toLastDayOfWeek(datetime[, mode[, timezone]])","- `datetime` — A date or date with time to convert. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `mode` — Determines the first day of the week as described in the `toWeek()` function. Default `0`. [`UInt8`](/sql-reference/data-types/int-uint)
- `timezone` — Optional. The timezone to use for the conversion. If not specified, the server's timezone is used. [`String`](/sql-reference/data-types/string)
","Returns the date of the nearest Saturday or Sunday, on or after the given date, depending on the mode [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Round up to the nearest Saturday or Sunday**

```sql title=Query
SELECT
    toLastDayOfWeek(toDateTime('2023-04-21 10:20:30')), /* a Friday */
    toLastDayOfWeek(toDateTime('2023-04-21 10:20:30'), 1), /* a Friday */
    toLastDayOfWeek(toDate('2023-04-23')), /* a Sunday */
    toLastDayOfWeek(toDate('2023-04-23'), 1) /* a Sunday */
FORMAT Vertical
```

```response title=Response
Row 1:
──────
toLastDayOfWeek(toDateTime('2023-04-21 10:20:30')):      2023-04-23
toLastDayOfWeek(toDateTime('2023-04-21 10:20:30'), 1):   2023-04-22
toLastDayOfWeek(toDate('2023-04-23')):                   2023-04-23
toLastDayOfWeek(toDate('2023-04-23'), 1):                2023-04-23
```

","23.5","Dates and Times"
"25.8.1.5101","synonyms",0,1,"","","System","","","","","","",""
"25.8.1.5101","isConstant",0,0,"","","System","","","","","","",""
"25.8.1.5101","ULIDStringToDateTime",0,0,"","","System","
This function extracts the timestamp from a ULID and returns it as a DateTime64(3) typed value.
The function expects the ULID to be provided as the first argument, which can be either a String or a FixedString(26) data type.
An optional second argument can be passed to specify a timezone for the timestamp.
","","","","**ulid**

```sql title=Query
SELECT ULIDStringToDateTime(generateULID())
```

```response title=Response

```

**timezone**

```sql title=Query
SELECT ULIDStringToDateTime(generateULID(), 'Asia/Istanbul')
```

```response title=Response

```

","","ULID"
"25.8.1.5101","addNanoseconds",0,0,"","","System","
Adds a specified number of nanoseconds to a date with time or a string-encoded date with time.
    ","addNanoseconds(datetime, num)","- `datetime` — Date with time to add specified number of nanoseconds to. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of nanoseconds to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` nanoseconds [`DateTime64`](/sql-reference/data-types/datetime64)","**Add nanoseconds to different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addNanoseconds(date_time, 1000) AS add_nanoseconds_with_date_time,
    addNanoseconds(date_time_string, 1000) AS add_nanoseconds_with_date_time_string
```

```response title=Response
┌─add_nanoseconds_with_date_time─┬─add_nanoseconds_with_date_time_string─┐
│  2024-01-01 00:00:00.000001000 │         2024-01-01 00:00:00.000001000 │
└────────────────────────────────┴───────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::DateTime, INTERVAL 1000 nanosecond)
```

```response title=Response
┌─plus(CAST('199⋯osecond(1000))─┐
│ 1998-06-16 00:00:00.000001000 │
└───────────────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","timestamp",0,1,"","","System","
Converts the first argument `expr` to type [`DateTime64(6)`](/sql-reference/data-types/datetime64).
If a second argument `expr_time` is provided, it adds the specified time to the converted value.
    ","timestamp(expr[, expr_time])","- `expr` — Date or date with time. [`String`](/sql-reference/data-types/string)
- `expr_time` — Optional. Time to add to the converted value. [`String`](/sql-reference/data-types/string)
","Returns the converted value of `expr`, or `expr` with added time [`DateTime64(6)`](/sql-reference/data-types/datetime64)","**Convert date string to DateTime64(6)**

```sql title=Query
SELECT timestamp('2023-12-31') AS ts;
```

```response title=Response
┌─────────────────────────ts─┐
│ 2023-12-31 00:00:00.000000 │
└────────────────────────────┘
```

**Add time to date string**

```sql title=Query
SELECT timestamp('2023-12-31 12:00:00', '12:00:00.11') AS ts;
```

```response title=Response
┌─────────────────────────ts─┐
│ 2024-01-01 00:00:00.110000 │
└────────────────────────────┘
```

","23.9","Dates and Times"
"25.8.1.5101","parseDateTime64",0,0,"","","System","","","","","","",""
"25.8.1.5101","reinterpretAsInt256",0,0,"","","System","","","","","","",""
"25.8.1.5101","abs",0,1,"","","System","Calculates the absolute value of `x`. Has no effect if `x` is of an unsigned type. If `x` is of a signed type, it returns an unsigned number.","abs(x)","- `x` — Value to get the absolute value of ","The absolute value of `x`","**Usage example**

```sql title=Query
SELECT abs(-0.5)
```

```response title=Response
0.5
```

","1.1","Arithmetic"
"25.8.1.5101","toValidUTF8",0,0,"","","System","
Converts a string to valid UTF-8 encoding by replacing any invalid UTF-8 characters with the replacement character `�` (U+FFFD).
When multiple consecutive invalid characters are found, they are collapsed into a single replacement character.
","toValidUTF8(s)","- `s` — Any set of bytes represented as the String data type object. [`String`](/sql-reference/data-types/string)
","Returns a valid UTF-8 string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT toValidUTF8('\\x61\\xF0\\x80\\x80\\x80b')
```

```response title=Response
c
┌─toValidUTF8('a����b')─┐
│ a�b                   │
└───────────────────────┘
```

","20.1","String"
"25.8.1.5101","arrayEnumerateUniq",0,0,"","","System","
Returns an array the same size as the source array, indicating for each element what its position is among elements with the same value.

This function is useful when using `ARRAY JOIN` and aggregation of array elements.

The function can take multiple arrays of the same size as arguments. In this case, uniqueness is considered for tuples of elements in the same positions in all the arrays.
","arrayEnumerateUniq(arr1[, arr2, ... , arrN])","- `arr1` — First array to process. [`Array(T)`](/sql-reference/data-types/array)
- `arr2, ...` — Optional. Additional arrays of the same size for tuple uniqueness. [`Array(UInt32)`](/sql-reference/data-types/array)
","Returns an array where each element is the position among elements with the same value or tuple. [`Array(T)`](/sql-reference/data-types/array)","**Basic usage**

```sql title=Query
SELECT arrayEnumerateUniq([10, 20, 10, 30]);
```

```response title=Response
[1, 1, 2, 1]
```

**Multiple arrays**

```sql title=Query
SELECT arrayEnumerateUniq([1, 1, 1, 2, 2, 2], [1, 1, 2, 1, 1, 2]);
```

```response title=Response
[1,2,1,1,2,1]
```

**ARRAY JOIN aggregation**

```sql title=Query
-- Each goal ID has a calculation of the number of conversions (each element in the Goals nested data structure is a goal that was reached, which we refer to as a conversion)
-- and the number of sessions. Without ARRAY JOIN, we would have counted the number of sessions as sum(Sign). But in this particular case,
-- the rows were multiplied by the nested Goals structure, so in order to count each session one time after this, we apply a condition to the
-- value of the arrayEnumerateUniq(Goals.ID) function.

SELECT
    Goals.ID AS GoalID,
    sum(Sign) AS Reaches,
    sumIf(Sign, num = 1) AS Visits
FROM test.visits
ARRAY JOIN
    Goals,
    arrayEnumerateUniq(Goals.ID) AS num
WHERE CounterID = 160656
GROUP BY GoalID
ORDER BY Reaches DESC
LIMIT 10
```

```response title=Response
┌──GoalID─┬─Reaches─┬─Visits─┐
│   53225 │    3214 │   1097 │
│ 2825062 │    3188 │   1097 │
│   56600 │    2803 │    488 │
│ 1989037 │    2401 │    365 │
│ 2830064 │    2396 │    910 │
│ 1113562 │    2372 │    373 │
│ 3270895 │    2262 │    812 │
│ 1084657 │    2262 │    345 │
│   56599 │    2260 │    799 │
│ 3271094 │    2256 │    812 │
└─────────┴─────────┴────────┘
```

","1.1","Arrays"
"25.8.1.5101","toDayOfWeek",0,0,"","","System","
Returns the number of the day within the week of a `Date` or `DateTime` value.

The two-argument form of `toDayOfWeek()` enables you to specify whether the week starts on Monday or Sunday,
and whether the return value should be in the range from 0 to 6 or 1 to 7.

| Mode | First day of week | Range                                          |
|------|-------------------|------------------------------------------------|
| 0    | Monday            | 1-7: Monday = 1, Tuesday = 2, ..., Sunday = 7  |
| 1    | Monday            | 0-6: Monday = 0, Tuesday = 1, ..., Sunday = 6  |
| 2    | Sunday            | 0-6: Sunday = 0, Monday = 1, ..., Saturday = 6 |
| 3    | Sunday            | 1-7: Sunday = 1, Monday = 2, ..., Saturday = 7 |
        ","toDayOfWeek(datetime[, mode[, timezone]])","- `datetime` — Date or date with time to get the day of week from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `mode` — Optional. Integer specifying the week mode (0-3). Defaults to 0 if omitted. [`UInt8`](/sql-reference/data-types/int-uint)
- `timezone` — Optional. Timezone to use for the conversion. [`String`](/sql-reference/data-types/string)
","Returns the day of the week for the given `Date` or `DateTime` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
-- The following date is April 21, 2023, which was a Friday:
SELECT
    toDayOfWeek(toDateTime('2023-04-21')),
    toDayOfWeek(toDateTime('2023-04-21'), 1)
```

```response title=Response
┌─toDayOfWeek(toDateTime('2023-04-21'))─┬─toDayOfWeek(toDateTime('2023-04-21'), 1)─┐
│                                     5 │                                        4 │
└───────────────────────────────────────┴──────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","randChiSquared",0,0,"","","System","
Returns a random Float64 number drawn from a [chi-square distribution](https://en.wikipedia.org/wiki/Chi-squared_distribution).
    ","randChiSquared(degree_of_freedom[, x])","- `degree_of_freedom` — Degrees of freedom. [`Float64`](/sql-reference/data-types/float)
- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random Float64 number drawn from the specified chi-square distribution. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT randChiSquared(10) FROM numbers(5)
```

```response title=Response
┌─randChiSquared(10)─┐
│ 10.015463656521543 │
│  9.621799919882768 │
│   2.71785015634699 │
│ 11.128188665931908 │
│  4.902063104425469 │
└────────────────────┘
```

","22.10","Random Number"
"25.8.1.5101","toStartOfYear",0,0,"","","System","
Rounds down a date or date with time to the first day of the year. Returns the date as a `Date` object.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfYear(value)","- `value` — The date or date with time to round down. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the first day of the year for the given date/time [`Date`](/sql-reference/data-types/date)","**Round down to the first day of the year**

```sql title=Query
SELECT toStartOfYear(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toStartOfYear(toDateTime('2023-04-21 10:20:30'))─┐
│                                       2023-01-01 │
└──────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","demangle",0,0,"","","System","
Converts a symbol to a C++ function name.
The symbol is usually returned by function [`addressToSymbol`](../../sql-reference/functions/introspection.md#addresstosymbol).
    ","demangle(symbol)","- `symbol` — Symbol from an object file. [`String`](/sql-reference/data-types/string)
","Returns the name of the C++ function, or an empty string if the symbol is not valid. [`String`](/sql-reference/data-types/string)","**Selecting the first string from the `trace_log` system table**

```sql title=Query
SELECT * FROM system.trace_log LIMIT 1 \G;
```

```response title=Response
-- The `trace` field contains the stack trace at the moment of sampling.
Row 1:
──────
event_date:    2019-11-20
event_time:    2019-11-20 16:57:59
revision:      54429
timer_type:    Real
thread_number: 48
query_id:      724028bf-f550-45aa-910d-2af6212b94ac
trace:         [94138803686098,94138815010911,94138815096522,94138815101224,94138815102091,94138814222988,94138806823642,94138814457211,94138806823642,94138814457211,94138806823642,94138806795179,94138806796144,94138753770094,94138753771646,94138753760572,94138852407232,140399185266395,140399178045583]
```

**Getting a function name for a single address**

```sql title=Query
SET allow_introspection_functions=1;
SELECT demangle(addressToSymbol(94138803686098)) \G;
```

```response title=Response
Row 1:
──────
demangle(addressToSymbol(94138803686098)): DB::IAggregateFunctionHelper<DB::AggregateFunctionSum<unsigned long, unsigned long, DB::AggregateFunctionSumData<unsigned long> > >::addBatchSinglePlace(unsigned long, char*, DB::IColumn const**, DB::Arena*) const
```

**Applying the function to the whole stack trace**

```sql title=Query
SET allow_introspection_functions=1;

-- The arrayMap function allows to process each individual element of the trace array by the demangle function.
-- The result of this processing is shown in the trace_functions column of output.

SELECT
    arrayStringConcat(arrayMap(x -> demangle(addressToSymbol(x)), trace), '\n') AS trace_functions
FROM system.trace_log
LIMIT 1
\G
```

```response title=Response
Row 1:
──────
trace_functions: DB::IAggregateFunctionHelper<DB::AggregateFunctionSum<unsigned long, unsigned long, DB::AggregateFunctionSumData<unsigned long> > >::addBatchSinglePlace(unsigned long, char*, DB::IColumn const**, DB::Arena*) const
DB::Aggregator::executeWithoutKeyImpl(char*&, unsigned long, DB::Aggregator::AggregateFunctionInstruction*, DB::Arena*) const
DB::Aggregator::executeOnBlock(std::vector<COW<DB::IColumn>::immutable_ptr<DB::IColumn>, std::allocator<COW<DB::IColumn>::immutable_ptr<DB::IColumn> > >, unsigned long, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, bool&)
DB::Aggregator::executeOnBlock(DB::Block const&, DB::AggregatedDataVariants&, std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >&, std::vector<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> >, std::allocator<std::vector<DB::IColumn const*, std::allocator<DB::IColumn const*> > > >&, bool&)
DB::Aggregator::execute(std::shared_ptr<DB::IBlockInputStream> const&, DB::AggregatedDataVariants&)
DB::AggregatingBlockInputStream::readImpl()
DB::IBlockInputStream::read()
DB::ExpressionBlockInputStream::readImpl()
DB::IBlockInputStream::read()
DB::ExpressionBlockInputStream::readImpl()
DB::IBlockInputStream::read()
DB::AsynchronousBlockInputStream::calculate()
std::_Function_handler<void (), DB::AsynchronousBlockInputStream::next()::{lambda()#1}>::_M_invoke(std::_Any_data const&)
ThreadPoolImpl<ThreadFromGlobalPool>::worker(std::_List_iterator<ThreadFromGlobalPool>)
ThreadFromGlobalPool::ThreadFromGlobalPool<ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}>(ThreadPoolImpl<ThreadFromGlobalPool>::scheduleImpl<void>(std::function<void ()>, int, std::optional<unsigned long>)::{lambda()#3}&&)::{lambda()#1}::operator()() const
ThreadPoolImpl<std::thread>::worker(std::_List_iterator<std::thread>)
execute_native_thread_routine
start_thread
clone
```

","20.1","Introspection"
"25.8.1.5101","bin",0,1,"","","System","
Returns a string containing the argument's binary representation according
to the following logic for different types:

| Type                       | Description                                                                                                                                                                                                                                                           |
|----------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `(U)Int*`                  | Prints bin digits from the most significant to least significant (big-endian or ""human-readable"" order). It starts with the most significant non-zero byte (leading zero bytes are omitted) but always prints eight digits of every byte if the leading digit is zero.|
| `Date` and `DateTime`      | Formatted as corresponding integers (the number of days since epoch for Date and the value of unix timestamp for DateTime).                                                                                                                                           |
| `String` and `FixedString` | All bytes are simply encoded as eight binary numbers. Zero bytes are not omitted.                                                                                                                                                                                     |
| `Float*` and `Decimal`     | Encoded as their representation in memory. As we support little-endian architecture, they are encoded in little-endian. Zero leading/trailing bytes are not omitted.                                                                                                  |
| `UUID`                     | Encoded as big-endian order string.                                                                                                                                                                                                                                   |
    ","bin(arg)","- `arg` — A value to convert to binary. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring) or [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal) or [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime)
","Returns a string with the binary representation of the argument. [`String`](/sql-reference/data-types/string)","**Simple integer**

```sql title=Query
SELECT bin(14)
```

```response title=Response
┌─bin(14)──┐
│ 00001110 │
└──────────┘
```

**Float32 numbers**

```sql title=Query
SELECT bin(toFloat32(number)) AS bin_presentation FROM numbers(15, 2)
```

```response title=Response
┌─bin_presentation─────────────────┐
│ 00000000000000000111000001000001 │
│ 00000000000000001000000001000001 │
└──────────────────────────────────┘
```

**Float64 numbers**

```sql title=Query
SELECT bin(toFloat64(number)) AS bin_presentation FROM numbers(15, 2)
```

```response title=Response
┌─bin_presentation─────────────────────────────────────────────────┐
│ 0000000000000000000000000000000000000000000000000010111001000000 │
│ 0000000000000000000000000000000000000000000000000011000001000000 │
└──────────────────────────────────────────────────────────────────┘
```

**UUID conversion**

```sql title=Query
SELECT bin(toUUID('61f0c404-5cb3-11e7-907b-a6006ad3dba0')) AS bin_uuid
```

```response title=Response
┌─bin_uuid─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
│ 01100001111100001100010000000100010111001011001100010001111001111001000001111011101001100000000001101010110100111101101110100000 │
└──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
```

","21.8","Encoding"
"25.8.1.5101","toDayOfYear",0,0,"","","System","
Returns the number of the day within the year (1-366) of a `Date` or `DateTime` value.
        ","toDayOfYear(datetime)","- `datetime` — Date or date with time to get the day of year from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the day of the year of the given Date or DateTime [`UInt16`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toDayOfYear(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toDayOfYear(toDateTime('2023-04-21 10:20:30'))─┐
│                                            111 │
└────────────────────────────────────────────────┘
```

","18.4","Dates and Times"
"25.8.1.5101","dictGet",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the attribute's data type if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","toLowCardinality",0,0,"","","System","","","","","","",""
"25.8.1.5101","cbrt",0,0,"","","System","
Returns the cubic root of the argument.
","cbrt(x)","- `x` — The value for which to find the cubic root of. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the cubic root of `x`. [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT cbrt(8);
```

```response title=Response
2
```

","1.1","Mathematical"
"25.8.1.5101","polygonsIntersectCartesian",0,0,"","","System","
        Returns true if the two [`Polygon`](sql-reference/data-types/geo#polygon) or [`MultiPolygon`](sql-reference/data-types/geo#multipolygon) intersect (share any common area or boundary).
    ","polygonsIntersectCartesian(polygon1, polygon2)","- `polygon1` — A value of type [`Polygon`](/sql-reference/data-types/geo#polygon) or [`MultiPolygon`](/sql-reference/data-types/geo#multipolygon). - `polygon2` — A value of type [`Polygon`](/sql-reference/data-types/geo#polygon) or [`MultiPolygon`](/sql-reference/data-types/geo#multipolygon). ","Returns true (1) if the two polygons intersect. [`Bool`](/sql-reference/data-types/boolean).","**Usage example**

```sql title=Query
SELECT polygonsIntersectCartesian([[[(2., 2.), (2., 3.), (3., 3.), (3., 2.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]])
```

```response title=Response
┌─polygonsIntersectCartesian()─┐
                │ 1 │
                └───────────────────┘
```

","25.6","Geo"
"25.8.1.5101","mapSort",0,0,"","","System","The same as arraySort.","","","","**mapSort**

```sql title=Query
SELECT mapSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))
```

```response title=Response

```

","23.4","Map"
"25.8.1.5101","h3CellAreaRads2",0,0,"","","System","","","","","","",""
"25.8.1.5101","toStartOfDay",0,0,"","","System","
Rounds down a date with time to the start of the day.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfDay(datetime)","- `datetime` — A date or date with time to round. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime)
","Returns the date with time rounded down to the start of the day. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Round down to the start of the day**

```sql title=Query
SELECT toStartOfDay(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toStartOfDay(toDateTime('2023-04-21 10:20:30'))─┐
│                             2023-04-21 00:00:00 │
└─────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","readWKBPoint",0,0,"","","System","
    Parses a Well-Known Binary (WKB) representation of a Point geometry and returns it in the internal ClickHouse format.
    ","readWKBPoint(wkt_string)","- `wkb_string` — The input WKB string representing a Point geometry. ","The function returns a ClickHouse internal representation of the point geometry.","**first call**

```sql title=Query
SELECT readWKBPoint(unhex('010100000000000000000000000000000000000000'));
```

```response title=Response
┌─readWKBPoint(unhex'010100000000000000000000000...'))─┐
    │ (0,0)                                                │
    └──────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.8.1.5101","arrayAUCPR",0,0,"","","System","
Calculates the area under the precision-recall (PR) curve.
A precision-recall curve is created by plotting precision on the y-axis and recall on the x-axis across all thresholds.
The resulting value ranges from 0 to 1, with a higher value indicating better model performance.
The PR AUC is particularly useful for imbalanced datasets, providing a clearer comparison of performance compared to ROC AUC on those cases.
For more details, please see [here](https://developers.google.com/machine-learning/glossary#pr-auc-area-under-the-pr-curve), [here](https://developers.google.com/machine-learning/crash-course/classification/roc-and-auc#expandable-1) and [here](https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve).
","arrayAUCPR(scores, labels[, partial_offsets])","- `cores` — Scores prediction model gives. [`Array((U)Int*)`](/sql-reference/data-types/array) or [`Array(Float*)`](/sql-reference/data-types/array)
- `labels` — Labels of samples, usually 1 for positive sample and 0 for negative sample. [`Array((U)Int*)`](/sql-reference/data-types/array) or [`Array(Enum)`](/sql-reference/data-types/array)
- `partial_offsets` — 
- Optional. An [`Array(T)`](/sql-reference/data-types/array) of three non-negative integers for calculating a partial area under the PR curve (equivalent to a vertical band of the PR space) instead of the whole AUC. This option is useful for distributed computation of the PR AUC. The array must contain the following elements [`higher_partitions_tp`, `higher_partitions_fp`, `total_positives`].
    - `higher_partitions_tp`: The number of positive labels in the higher-scored partitions.
    - `higher_partitions_fp`: The number of negative labels in the higher-scored partitions.
    - `total_positives`: The total number of positive samples in the entire dataset.

::::note
When `arr_partial_offsets` is used, the `arr_scores` and `arr_labels` should be only a partition of the entire dataset, containing an interval of scores.
The dataset should be divided into contiguous partitions, where each partition contains the subset of the data whose scores fall within a specific range.
For example:
- One partition could contain all scores in the range [0, 0.5).
- Another partition could contain scores in the range [0.5, 1.0].
::::
 ","Returns area under the precision-recall (PR) curve. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT arrayAUCPR([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1]);
```

```response title=Response
┌─arrayAUCPR([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1])─┐
│                              0.8333333333333333 │
└─────────────────────────────────────────────────┘
```

","20.4","Arrays"
"25.8.1.5101","SHA1",0,0,"","","System","Calculates the SHA1 hash of the given string.","SELECT SHA1(s);","- `s` — The input [String](../../sql-reference/data-types/string.md). ","Returns the SHA1 hash of the given input string as a fixed-length string. [`FixedString(20)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT HEX(SHA1('abc'));
```

```response title=Response
┌─hex(SHA1('abc'))─────────────────────────┐
│ A9993E364706816ABA3E25717850C26C9CD0D89D │
└──────────────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","toModifiedJulianDay",0,0,"","","System","
Converts a [Proleptic Gregorian calendar](https://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar) date in text form `YYYY-MM-DD` to a [Modified Julian Day](https://en.wikipedia.org/wiki/Julian_day#Variants) number in `Int32`. This function supports date from `0000-01-01` to `9999-12-31`. It raises an exception if the argument cannot be parsed as a date, or the date is invalid.
    ","toModifiedJulianDay(date)","- `date` — The date in String form. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
","Returns Modified Julian Day number. [`Int32`](/sql-reference/data-types/int-uint)","**Convert date to Modified Julian Day**

```sql title=Query
SELECT toModifiedJulianDay('2020-01-01')
```

```response title=Response
┌─toModifiedJulianDay('2020-01-01')─┐
│                             58849 │
└───────────────────────────────────┘
```

","21.1","Dates and Times"
"25.8.1.5101","farmHash64",0,0,"","","System","
Produces a 64-bit [FarmHash](https://github.com/google/farmhash) using the `Hash64` method.

:::tip
[`farmFingerprint64`](#farmFingerprint64) is preferred for a stable and portable value.
:::

:::note
The calculated hash values may be equal for the same input values of different argument types.
This affects for example integer types of different size, named and unnamed `Tuple` with the same data, `Map` and the corresponding `Array(Tuple(key, value))` type with the same data.
:::
","farmHash64(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed hash value of the input arguments. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT farmHash64(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS FarmHash, toTypeName(FarmHash) AS type;
```

```response title=Response
┌─────────────FarmHash─┬─type───┐
│ 18125596431186471178 │ UInt64 │
└──────────────────────┴────────┘
```

","1.1","Hash"
"25.8.1.5101","snowflakeIDToDateTime64",0,0,"","","System","Returns the timestamp component of a [Snowflake ID](https://en.wikipedia.org/wiki/Snowflake_ID) as a value of type [DateTime64](../data-types/datetime64.md).","snowflakeIDToDateTime64(value[, epoch[, time_zone]])","- `value` — Snowflake ID. [`UInt64`](/sql-reference/data-types/int-uint)
- `epoch` — Optional. Epoch of the Snowflake ID in milliseconds since 1970-01-01. Defaults to 0 (1970-01-01). For the Twitter/X epoch (2015-01-01), provide 1288834974657. [`UInt*`](/sql-reference/data-types/int-uint)
- `time_zone` — Optional. A [timezone](/operations/server-configuration-parameters/settings.md/#server_configuration_parameters-timezone). The function parses `time_string` according to the timezone. [`String`](/sql-reference/data-types/string)
","Returns the timestamp component of `value` as a [`DateTime64`](/sql-reference/data-types/datetime64)","**simple**

```sql title=Query
SELECT snowflakeIDToDateTime64(7204436857747984384)
```

```response title=Response
2024-06-06 10:59:58
```

","24.6","UUID"
"25.8.1.5101","toMonth",0,0,"","","System","
Returns the month component (1-12) of a `Date` or `DateTime` value.
    ","toMonth(datetime)","- `datetime` — Date or date with time to get the month from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the month of the given date/time [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toMonth(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toMonth(toDateTime('2023-04-21 10:20:30'))─┐
│                                          4 │
└────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","greatest",0,1,"","","System","
Returns the greatest value among the arguments.

- For arrays, returns the lexicographically greatest array.
- For DateTime types, the result type is promoted to the largest type (e.g., DateTime64 if mixed with DateTime32).
    ","greatest(x1[, x2, ..., xN])","- `x1[, x2, ..., xN]` — One or multiple values to compare. All arguments must be of comparable types. ","The greatest value among the arguments, promoted to the largest compatible type.","**Numeric types**

```sql title=Query
SELECT greatest(1, 2, toUInt8(3), 3.) AS result, toTypeName(result) AS type;
-- The type returned is a Float64 as the UInt8 must be promoted to 64 bit for the comparison.
```

```response title=Response
┌─result─┬─type────┐
│      3 │ Float64 │
└────────┴─────────┘
```

**Arrays**

```sql title=Query
SELECT greatest(['hello'], ['there'], ['world']);
```

```response title=Response
┌─greatest(['hello'], ['there'], ['world'])─┐
│ ['world']                                 │
└───────────────────────────────────────────┘
```

**DateTime types**

```sql title=Query
SELECT greatest(toDateTime32(now() + toIntervalDay(1)), toDateTime64(now(), 3));
-- The type returned is a DateTime64 as the DateTime32 must be promoted to 64 bit for the comparison.
```

```response title=Response
┌─greatest(toD⋯(now(), 3))─┐
│  2025-05-28 15:50:53.000 │
└──────────────────────────┘
```

","1.1","Conditional"
"25.8.1.5101","financialInternalRateOfReturn",0,0,"","","System","
Calculates the Internal Rate of Return (IRR) for a series of cash flows occurring at regular intervals.
IRR is the discount rate at which the Net Present Value (NPV) equals zero.

IRR attempts to solve the following equation:

$$
\sum_{i=0}^n \frac{cashflow_i}{(1 + irr)^i} = 0
$$
    ","financialInternalRateOfReturn(cashflows[, guess])","- `cashflows` — Array of cash flows. Each value represents a payment (negative value) or income (positive value). [`Array(Int8/16/32/64)`](/sql-reference/data-types/array) or [`Array(Float*)`](/sql-reference/data-types/array)
- `[, guess]` — Optional initial guess (constant value) for the internal rate of return (default 0.1). [`Float*`](/sql-reference/data-types/float)
","Returns the internal rate of return or `NaN` if the calculation cannot converge, input array is empty or has only one element, all cash flows are zero, or other calculation errors occur. [`Float64`](/sql-reference/data-types/float)","**simple_example**

```sql title=Query
SELECT financialInternalRateOfReturn([-100, 39, 59, 55, 20])
```

```response title=Response
0.2809484211599611
```

**simple_example_with_guess**

```sql title=Query
SELECT financialInternalRateOfReturn([-100, 39, 59, 55, 20], 0.1)
```

```response title=Response
0.2809484211599611
```

","25.7","Financial"
"25.8.1.5101","toRelativeMinuteNum",0,0,"","","System","
Converts a date or date with time to the number of minutes elapsed since a certain fixed point in the past.
The exact point in time is an implementation detail, and therefore this function is not intended to be used standalone.
The main purpose of the function is to calculate the difference in minutes between two dates or dates with time, e.g., `toRelativeMinuteNum(dt1) - toRelativeMinuteNum(dt2)`.
    ","toRelativeMinuteNum(date)","- `date` — Date or date with time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the number of minutes from a fixed reference point in the past. [`UInt32`](/sql-reference/data-types/int-uint)","**Get relative minute numbers**

```sql title=Query
SELECT toRelativeMinuteNum(toDateTime('2023-01-01 00:30:00')) - toRelativeMinuteNum(toDateTime('2023-01-01 00:00:00')) AS minutes_difference
```

```response title=Response
┌─minutes_difference─┐
│                 30 │
└────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","hypot",0,1,"","","System","
Returns the length of the hypotenuse of a right-angle triangle.
Hypot avoids problems that occur when squaring very large or very small numbers.
","hypot(x, y)","- `x` — The first cathetus of a right-angle triangle. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
- `y` — The second cathetus of a right-angle triangle. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the length of the hypotenuse of a right-angle triangle. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT hypot(1, 1)
```

```response title=Response
1.4142135623730951
```

","20.12","Mathematical"
"25.8.1.5101","initcap",0,1,"","","System","
Converts the first letter of each word to upper case and the rest to lower case.
Words are sequences of alphanumeric characters separated by non-alphanumeric characters.

:::note
Because `initcap` converts only the first letter of each word to upper case you may observe unexpected behaviour for words containing apostrophes or capital letters.
This is a known behaviour and there are no plans to fix it currently.
:::
","initcap(s)","- `s` — Input string. [`String`](/sql-reference/data-types/string)
","Returns `s` with the first letter of each word converted to upper case. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT initcap('building for fast')
```

```response title=Response
┌─initcap('building for fast')─┐
│ Building For Fast            │
└──────────────────────────────┘
```

**Example of known behavior for words containing apostrophes or capital letters**

```sql title=Query
SELECT initcap('John''s cat won''t eat.');
```

```response title=Response
┌─initcap('Joh⋯n\'t eat.')─┐
│ John'S Cat Won'T Eat.    │
└──────────────────────────┘
```

","23.7","String"
"25.8.1.5101","dictGetDateTimeOrDefault",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 4 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;
-- default values returned if the dictionary does not contain a row with the key value;

Returned value: value of the dictionary attribute parsed in the DateTime if key is found, otherwise default value.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","file",0,0,"","","System","","","","","","",""
"25.8.1.5101","toRelativeMonthNum",0,0,"","","System","
Converts a date or date with time to the number of months elapsed since a certain fixed point in the past.
The exact point in time is an implementation detail, and therefore this function is not intended to be used standalone.
The main purpose of the function is to calculate the difference in months between two dates or dates with time, e.g., `toRelativeMonthNum(dt1) - toRelativeMonthNum(dt2)`.
    ","toRelativeMonthNum(date)","- `date` — Date or date with time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the number of months from a fixed reference point in the past. [`UInt32`](/sql-reference/data-types/int-uint)","**Get relative month numbers**

```sql title=Query
SELECT toRelativeMonthNum(toDate('2023-04-01')) - toRelativeMonthNum(toDate('2023-01-01')) AS months_difference
```

```response title=Response
┌─months_difference─┐
│                 3 │
└───────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","multiFuzzyMatchAny",0,0,"","","System","","","","","","",""
"25.8.1.5101","toDecimal256",0,0,"","","System","","","","","","",""
"25.8.1.5101","asin",0,1,"","","System","
Calculates the arcsine of the argument.

Takes arbitrary numeric type, which includes floating point and integer numbers, as well as big integers and decimals and returns Float64.

For arguments in range [-1, 1] it returns the value in range of [-pi() / 2, pi() / 2].

It represents an inverse function to function 'sin' on this range:
[example:inverse]

It always returns Float64, even if the argument has Float32 type:
[example:float32]

For arguments outside of this range, it returns nan:
[example:nan]

Every self-respectful data scientist knows how to apply arcsine to improve ads click-through rate with ClickHouse.
For more details, see [https://en.wikipedia.org/wiki/Inverse_trigonometric_functions].
","","","","**inverse**

```sql title=Query
SELECT asin(1.0) = pi() / 2, sin(asin(1)), asin(sin(1))
```

```response title=Response

```

**float32**

```sql title=Query
SELECT toTypeName(asin(1.0::Float32))
```

```response title=Response

```

**nan**

```sql title=Query
SELECT asin(1.1), asin(-2), asin(inf), asin(nan)
```

```response title=Response

```

","","Mathematical"
"25.8.1.5101","cutFragment",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3Line",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiSearchFirstPositionCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","tokens",0,0,"","","System","
Splits a string into tokens using the given tokenizer.
The default tokenizer uses non-alphanumeric ASCII characters as separators.

In case of the `split` tokenizer, if the tokens do not form a [prefix code](https://en.wikipedia.org/wiki/Prefix_code), you likely want that the matching prefers longer separators first.
To do so, pass the separators in order of descending length.
For example, with separators = `['%21', '%']` string `%21abc` would be tokenized as `['abc']`, whereas separators = `['%', '%21']` would tokenize to `['21ac']` (which is likely not what you wanted).
","tokens(value[, tokenizer[, ngrams[, separators]]])","- `value` — The input string. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `tokenizer` — The tokenizer to use. Valid arguments are `default`, `ngram`, `split`, and `no_op`. Optional, if not set explicitly, defaults to `default`. [`const String`](/sql-reference/data-types/string)
- `ngrams` — Only relevant if argument `tokenizer` is `ngram`: An optional parameter which defines the length of the ngrams. If not set explicitly, defaults to `3`. [`const UInt8`](/sql-reference/data-types/int-uint)
- `separators` — Only relevant if argument `tokenizer` is `split`: An optional parameter which defines the separator strings. If not set explicitly, defaults to `[' ']`. [`const Array(String)`](/sql-reference/data-types/array)
","Returns the resulting array of tokens from input string. [`Array`](/sql-reference/data-types/array)","**Default tokenizer**

```sql title=Query
SELECT tokens('test1,;\\\\ test2,;\\\\ test3,;\\\\   test4') AS tokens;
```

```response title=Response
['test1','test2','test3','test4']
```

**Ngram tokenizer**

```sql title=Query
SELECT tokens('abc def', 'ngram', 3) AS tokens;
```

```response title=Response
['abc','bc ','c d',' de','def']
```

","21.11","String Splitting"
"25.8.1.5101","emptyArrayFloat64",0,0,"","","System","Returns an empty Float64 array","emptyArrayFloat64()","","An empty Float64 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayFloat64
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","multiSearchAnyUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","mapConcat",0,0,"","","System","The same as arrayConcat.","","","","**mapConcat**

```sql title=Query
SELECT mapConcat(map('k1', 'v1'), map('k2', 'v2'))
```

```response title=Response

```

","23.4","Map"
"25.8.1.5101","subtractNanoseconds",0,0,"","","System","
Subtracts a specified number of nanoseconds from a date with time or a string-encoded date with time.
    ","subtractNanoseconds(datetime, num)","- `datetime` — Date with time to subtract specified number of nanoseconds from. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of nanoseconds to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` nanoseconds [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract nanoseconds from different date time types**

```sql title=Query
WITH
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractNanoseconds(date_time, 1000) AS subtract_nanoseconds_with_date_time,
    subtractNanoseconds(date_time_string, 1000) AS subtract_nanoseconds_with_date_time_string
```

```response title=Response
┌─subtract_nanoseconds_with_date_time─┬─subtract_nanoseconds_with_date_time_string─┐
│       2023-12-31 23:59:59.999999000 │              2023-12-31 23:59:59.999999000 │
└─────────────────────────────────────┴────────────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::DateTime, INTERVAL 10 nanosecond)
```

```response title=Response
┌─minus(CAST('19⋯anosecond(10))─┐
│ 1998-06-15 23:59:59.999999990 │
└───────────────────────────────┘
```

","20.1","Dates and Times"
"25.8.1.5101","queryStringAndFragment",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt32OrDefault",0,0,"","","System","","","","","","",""
"25.8.1.5101","emptyArrayFloat32",0,0,"","","System","Returns an empty Float32 array","emptyArrayFloat32()","","An empty Float32 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayFloat32
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","multiFuzzyMatchAllIndices",0,0,"","","System","","","","","","",""
"25.8.1.5101","emptyArrayInt32",0,0,"","","System","Returns an empty Int32 array","emptyArrayInt32()","","An empty Int32 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayInt32
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","getMaxTableNameLengthForDatabase",0,0,"","","System","Returns the maximum table name length in a specified database.","getMaxTableNameLengthForDatabase(database_name)","- `database_name` — The name of the specified database. [`String`](/sql-reference/data-types/string)
","Returns the length of the maximum table name, an Integer","**typical**

```sql title=Query
SELECT getMaxTableNameLengthForDatabase('default');
```

```response title=Response
┌─getMaxTableNameLengthForDatabase('default')─┐
            │                                         206 │
            └─────────────────────────────────────────────┘
```

","","Other"
"25.8.1.5101","parseDateTime64InJodaSyntaxOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","polygonPerimeterSpherical",0,0,"","","System","","","","","","",""
"25.8.1.5101","polygonsIntersectionCartesian",0,0,"","","System","","","","","","",""
"25.8.1.5101","wkt",0,0,"","","System","","","","","","",""
"25.8.1.5101","soundex",0,1,"","","System","
Returns the [Soundex code](https://en.wikipedia.org/wiki/Soundex) of a string.
","soundex(s)","- `s` — Input string. [`String`](/sql-reference/data-types/string)
","Returns the Soundex code of the input string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT soundex('aksel')
```

```response title=Response
┌─soundex('aksel')─┐
│ A240             │
└──────────────────┘
```

","23.4","String"
"25.8.1.5101","bitmapHasAny",0,0,"","","System","Checks if the first bitmap contains any set bits of the second bitmap.","bitmapHasAny(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns `1` if any bits of the second bitmap are present in the first bitmap, otherwise `0` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapHasAny(bitmapBuild([1, 2, 3]), bitmapBuild([3, 4, 5])) AS res;
```

```response title=Response
┌─res─┐
│  1  │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","generateSnowflakeID",0,0,"","","System","Generates a Snowflake ID. The generated Snowflake ID contains the current Unix timestamp in milliseconds (41 + 1 top zero bits), followed by a machine id (10 bits), and a counter (12 bits) to distinguish IDs within a millisecond. For any given timestamp (unix_ts_ms), the counter starts at 0 and is incremented by 1 for each new Snowflake ID until the timestamp changes. In case the counter overflows, the timestamp field is incremented by 1 and the counter is reset to 0. Function generateSnowflakeID guarantees that the counter field within a timestamp increments monotonically across all function invocations in concurrently running threads and queries.","generateSnowflakeID([expression, [machine_id]])","- `expression` — Optional. The expression is used to bypass common subexpression elimination if the function is called multiple times in a query but otherwise ignored. - `machine_id` — Optional. A machine ID, the lowest 10 bits are used. ","Returns the Snowflake ID. [`UInt64`](/sql-reference/data-types/int-uint)","**no_arguments**

```sql title=Query
SELECT generateSnowflakeID()
```

```response title=Response
7201148511606784000
```

**with_machine_id**

```sql title=Query
SELECT generateSnowflakeID(1)
```

```response title=Response
7201148511606784001
```

**with_expression_and_machine_id**

```sql title=Query
SELECT generateSnowflakeID('some_expression', 1)
```

```response title=Response
7201148511606784002
```

","24.6","UUID"
"25.8.1.5101","array",0,0,"","","System","
Creates an array from the function arguments.

The arguments should be constants and have types that share a common supertype.
At least one argument must be passed, because otherwise it isn't clear which type of array to create.
This means that you can't use this function to create an empty array. To do so, use the `emptyArray*` function.

Use the `[ ]` operator for the same functionality.
    ","array(x1 [, x2, ..., xN])","- `x1` — Constant value of any type T. If only this argument is provided, the array will be of type T. - `[, x2, ..., xN]` — Additional N constant values sharing a common supertype with `x1` ","Returns an array, where 'T' is the smallest common type out of the passed arguments. [`Array(T)`](/sql-reference/data-types/array)","**Valid usage**

```sql title=Query
SELECT array(toInt32(1), toUInt16(2), toInt8(3)) AS a, toTypeName(a)
```

```response title=Response
┌─a───────┬─toTypeName(a)─┐
│ [1,2,3] │ Array(Int32)  │
└─────────┴───────────────┘
```

**Invalid usage**

```sql title=Query
SELECT array(toInt32(5), toDateTime('1998-06-16'), toInt8(5)) AS a, toTypeName(a)
```

```response title=Response
Received exception from server (version 25.4.3):
Code: 386. DB::Exception: Received from localhost:9000. DB::Exception:
There is no supertype for types Int32, DateTime, Int8 ...
```

","1.1","Arrays"
"25.8.1.5101","simpleJSONExtractString",0,0,"","","System","
Parses `String` in double quotes from the value of the field named `field_name`.

**Implementation details**

There is currently no support for code points in the format `\uXXXX\uYYYY` that are not from the basic multilingual plane (they are converted to CESU-8 instead of UTF-8).
","simpleJSONExtractString(json, field_name)","- `json` — The JSON in which the field is searched for. [`String`](/sql-reference/data-types/string)
- `field_name` — The name of the field to search for. [`const String`](/sql-reference/data-types/string)
","Returns the unescaped value of a field as a string, including separators. An empty string is returned if the field doesn't contain a double quoted string, if unescaping fails or if the field doesn't exist [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
CREATE TABLE jsons
(
    `json` String
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO jsons VALUES ('{""foo"":""\\n\\u0000""}');
INSERT INTO jsons VALUES ('{""foo"":""\\u263""}');
INSERT INTO jsons VALUES ('{""foo"":""\\u263a""}');
INSERT INTO jsons VALUES ('{""foo"":""hello}');

SELECT simpleJSONExtractString(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
\n\0

☺
```

","21.4","JSON"
"25.8.1.5101","toUInt128",0,0,"","","System","","","","","","",""
"25.8.1.5101","emptyArrayUInt64",0,0,"","","System","Returns an empty UInt64 array","emptyArrayUInt64()","","An empty UInt64 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayUInt64
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","mapKeys",0,0,"","","System","Returns an array with the keys of map.","","","","**mapKeys**

```sql title=Query
SELECT mapKeys(map('k1', 'v1', 'k2', 'v2'))
```

```response title=Response

```

","21.2","Map"
"25.8.1.5101","arrayEnumerate",0,0,"","","System","
Returns the array `[1, 2, 3, ..., length (arr)]`

This function is normally used with the [`ARRAY JOIN`](/sql-reference/statements/select/array-join) clause. It allows counting something just
once for each array after applying `ARRAY JOIN`.
This function can also be used in higher-order functions. For example, you can use it to get array indexes for elements that match a condition.
","arrayEnumerate(arr)","- `arr` — The array to enumerate. [`Array`](/sql-reference/data-types/array)
","Returns the array `[1, 2, 3, ..., length (arr)]`. [`Array(UInt32)`](/sql-reference/data-types/array)","**Basic example with ARRAY JOIN**

```sql title=Query
CREATE TABLE test
(
    `id` UInt8,
    `tag` Array(String),
    `version` Array(String)
)
ENGINE = MergeTree
ORDER BY id;

INSERT INTO test VALUES (1, ['release-stable', 'dev', 'security'], ['2.4.0', '2.6.0-alpha', '2.4.0-sec1']);

SELECT
    id,
    tag,
    version,
    seq
FROM test
ARRAY JOIN
    tag,
    version,
    arrayEnumerate(tag) AS seq
```

```response title=Response
┌─id─┬─tag────────────┬─version─────┬─seq─┐
│  1 │ release-stable │ 2.4.0       │   1 │
│  1 │ dev            │ 2.6.0-alpha │   2 │
│  1 │ security       │ 2.4.0-sec1  │   3 │
└────┴────────────────┴─────────────┴─────┘
```

","1.1","Arrays"
"25.8.1.5101","tupleNegate",0,0,"","","System","","","","","","",""
"25.8.1.5101","toRelativeQuarterNum",0,0,"","","System","
Converts a date or date with time to the number of quarters elapsed since a certain fixed point in the past.
The exact point in time is an implementation detail, and therefore this function is not intended to be used standalone.
The main purpose of the function is to calculate the difference in quarters between two dates or dates with time, e.g., `toRelativeQuarterNum(dt1) - toRelativeQuarterNum(dt2)`.
    ","toRelativeQuarterNum(date)","- `date` — Date or date with time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the number of quarters from a fixed reference point in the past. [`UInt32`](/sql-reference/data-types/int-uint)","**Get relative quarter numbers**

```sql title=Query
SELECT toRelativeQuarterNum(toDate('2023-04-01')) - toRelativeQuarterNum(toDate('2023-01-01')) AS quarters_difference
```

```response title=Response
┌─quarters_difference─┐
│                   1 │
└─────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","widthBucket",0,0,"","","System","
Returns the number of the bucket in which `operand` falls in a histogram having `count` equal-width buckets spanning the range `low` to `high`. Returns `0` if `operand < low`, and returns `count+1` if `operand >= high`.

`operand`, `low`, `high` can be any native number type. `count` can only be unsigned native integer and its value cannot be zero.

**Syntax**

```sql
widthBucket(operand, low, high, count)
```

There is also a case insensitive alias called `WIDTH_BUCKET` to provide compatibility with other databases.

**Example**

Query:
[example:simple]

Result:

```text
┌─widthBucket(10.15, -8.6, 23, 18)─┐
│                               11 │
└──────────────────────────────────┘
```
","","","","**simple**

```sql title=Query
SELECT widthBucket(10.15, -8.6, 23, 18)
```

```response title=Response

```

","","Mathematical"
"25.8.1.5101","logTrace",0,0,"","","System","
Emits a trace log message to the server log for each [Block](/development/architecture/#block).
    ","logTrace(message)","- `message` — Message that is emitted to the server log. [`const String`](/sql-reference/data-types/string)
","Returns `0` always. [`UInt8`](/sql-reference/data-types/int-uint)","**Basic example**

```sql title=Query
SELECT logTrace('logTrace message');
```

```response title=Response
┌─logTrace('logTrace message')─┐
│                            0 │
└──────────────────────────────┘
```

","20.12","Introspection"
"25.8.1.5101","minus",0,0,"","","System","
Calculates the difference of two values `a` and `b`. The result is always signed.
Similar to plus, it is possible to subtract an integer from a date or date with time.
Additionally, subtraction between date with time is supported, resulting in the time difference between them.
    ","minus(x, y)","- `x` — Minuend. - `y` — Subtrahend. ","x minus y","**Subtracting two numbers**

```sql title=Query
SELECT minus(10, 5)
```

```response title=Response
5
```

**Subtracting an integer and a date**

```sql title=Query
SELECT minus(toDate('2025-01-01'),5)
```

```response title=Response
2024-12-27
```

","1.1","Arithmetic"
"25.8.1.5101","toIntervalWeek",0,0,"","","System","","","","","","",""
"25.8.1.5101","replaceAll",0,0,"","","System","
Replaces all occurrences of the substring `pattern` in `haystack` by the `replacement` string.
","replaceAll(haystack, pattern, replacement)","- `haystack` — The input string to search in. [`String`](/sql-reference/data-types/string)
- `pattern` — The substring to find and replace. [`const String`](/sql-reference/data-types/string)
- `replacement` — The string to replace the pattern with. [`const String`](/sql-reference/data-types/string)
","Returns a string with all occurrences of pattern replaced. [`String`](/sql-reference/data-types/string)","**Replace all occurrences**

```sql title=Query
SELECT replaceAll('Hello, Hello world', 'Hello', 'Hi') AS res;
```

```response title=Response
┌─res──────────┐
│ Hi, Hi world │
└──────────────┘
```

","1.1","String Replacement"
"25.8.1.5101","toUnixTimestamp64Second",0,0,"","","System","","","","","","",""
"25.8.1.5101","toRelativeSecondNum",0,0,"","","System","
Converts a date or date with time to the number of seconds elapsed since a certain fixed point in the past.
The exact point in time is an implementation detail, and therefore this function is not intended to be used standalone.
The main purpose of the function is to calculate the difference in seconds between two dates or dates with time, e.g., `toRelativeSecondNum(dt1) - toRelativeSecondNum(dt2)`.
    ","toRelativeSecondNum(date)","- `date` — Date or date with time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the number of seconds from a fixed reference point in the past. [`UInt32`](/sql-reference/data-types/int-uint)","**Get relative second numbers**

```sql title=Query
SELECT toRelativeSecondNum(toDateTime('2023-01-01 00:01:00')) - toRelativeSecondNum(toDateTime('2023-01-01 00:00:00')) AS seconds_difference
```

```response title=Response
┌─seconds_difference─┐
│                 60 │
└────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","bitmapToArray",0,0,"","","System","Converts a bitmap to an array of unsigned integers. It is the opposite of function [`bitmapBuild`](/sql-reference/functions/bitmap-functions#bitmapBuild).","bitmapToArray(bitmap)","- `bitmap` — Bitmap to convert. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns an array of unsigned integers contained in the bitmap [`Array(UInt*)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapBuild([1, 2, 3, 4, 5])) AS res;
```

```response title=Response
┌─res─────────────┐
│ [1, 2, 3, 4, 5] │
└─────────────────┘
```

","20.1","Bitmap"
"25.8.1.5101","arrayMax",0,0,"","","System","
Returns the maximum element in the source array.

If a lambda function `func` is specified, returns the maximum element of the lambda results.
    ","arrayMax([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns the maximum element in the source array, or the maximum element of the lambda results if provided.","**Basic example**

```sql title=Query
SELECT arrayMax([5, 3, 2, 7]);
```

```response title=Response
7
```

**Usage with lambda function**

```sql title=Query
SELECT arrayMax(x, y -> x/y, [4, 8, 12, 16], [1, 2, 1, 2]);
```

```response title=Response
12
```

","21.1","Arrays"
"25.8.1.5101","toRelativeYearNum",0,0,"","","System","
Converts a date or date with time to the number of years elapsed since a certain fixed point in the past.
The exact point in time is an implementation detail, and therefore this function is not intended to be used
standalone. The main purpose of the function is to calculate the difference in years between two dates or dates with time, e.g., `toRelativeYearNum(dt1) - toRelativeYearNum(dt2)`.
    ","toRelativeYearNum(date)","- `date` — Date or date with time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the number of years from a fixed reference point in the past. [`UInt16`](/sql-reference/data-types/int-uint)","**Get relative year numbers**

```sql title=Query
SELECT toRelativeYearNum('2010-10-01'::DateTime) - toRelativeYearNum('2000-01-01'::DateTime)
```

```response title=Response
┌─minus(toRela⋯ateTime')))─┐
│                       10 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","LpNormalize",0,0,"","","System","
Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in `Lp` space (using [p-norm](https://en.wikipedia.org/wiki/Norm_(mathematics)#p-norm)).
        ","LpNormalize(tuple, p)","- `tuple` — A tuple of numeric values. [`Tuple(T)`](/sql-reference/data-types/tuple)
- `p` — The power. Possible values are any number in the range range from `[1; inf)`. [`UInt*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the unit vector. [`Tuple(Float64)`](/sql-reference/data-types/tuple)","**Basic usage**

```sql title=Query
SELECT LpNormalize((3, 4), 5)
```

```response title=Response
┌─LpNormalize((3, 4), 5)──────────────────┐
│ (0.7187302630182624,0.9583070173576831) │
└─────────────────────────────────────────┘
```

","21.11","Distance"
"25.8.1.5101","toYYYYMMDD",0,0,"","","System","
Converts a date or date with time to a `UInt32` number containing the year and month number (YYYY * 10000 + MM * 100 + DD). Accepts a second optional timezone argument. If provided, the timezone must be a string constant.
    ","toYYYYMMDD(datetime[, timezone])","- `datetime` — A date or date with time to convert. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone for the conversion. If provided, the timezone must be a string constant. [`String`](/sql-reference/data-types/string)
","Returns a `UInt32` number containing the year, month and day (YYYY * 10000 + MM * 100 + DD). [`UInt32`](/sql-reference/data-types/int-uint)","**Convert current date to YYYYMMDD format**

```sql title=Query
SELECT toYYYYMMDD(now(), 'US/Eastern')
```

```response title=Response
┌─toYYYYMMDD(now(), 'US/Eastern')─┐
│                        20230302 │
└─────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","toStartOfFifteenMinutes",0,0,"","","System","
Rounds down the date with time to the start of the fifteen-minute interval.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfFifteenMinutes(datetime)","- `datetime` — A date or date with time to round. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the date with time rounded to the start of the nearest fifteen-minute interval [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Example**

```sql title=Query
SELECT
    toStartOfFifteenMinutes(toDateTime('2023-04-21 10:17:00')),
    toStartOfFifteenMinutes(toDateTime('2023-04-21 10:20:00')),
    toStartOfFifteenMinutes(toDateTime('2023-04-21 10:23:00'))
FORMAT Vertical
```

```response title=Response
Row 1:
──────
toStartOfFifteenMinutes(toDateTime('2023-04-21 10:17:00')): 2023-04-21 10:15:00
toStartOfFifteenMinutes(toDateTime('2023-04-21 10:20:00')): 2023-04-21 10:15:00
toStartOfFifteenMinutes(toDateTime('2023-04-21 10:23:00')): 2023-04-21 10:15:00
```

","1.1","Dates and Times"
"25.8.1.5101","toRelativeWeekNum",0,0,"","","System","
Converts a date or date with time to the number of weeks elapsed since a certain fixed point in the past.
The exact point in time is an implementation detail, and therefore this function is not intended to be used standalone.
The main purpose of the function is to calculate the difference in weeks between two dates or dates with time, e.g., `toRelativeWeekNum(dt1) - toRelativeWeekNum(dt2)`.
    ","toRelativeWeekNum(date)","- `date` — Date or date with time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the number of weeks from a fixed reference point in the past. [`UInt32`](/sql-reference/data-types/int-uint)","**Get relative week numbers**

```sql title=Query
SELECT toRelativeWeekNum(toDate('2023-01-08')) - toRelativeWeekNum(toDate('2023-01-01')) AS weeks_difference
```

```response title=Response
┌─weeks_difference─┐
│                1 │
└──────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","wordShingleMinHashArg",0,0,"","","System","
Splits a ASCII string into parts (shingles) of `shinglesize` words each and returns the shingles with minimum and maximum word hashes, calculated by the wordShingleMinHash function with the same input.
It is case sensitive.
","wordShingleMinHashArg(string[, shinglesize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two tuples with `hashnum` word shingles each. [`Tuple(Tuple(String))`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT wordShingleMinHashArg('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;
```

```response title=Response
┌─Tuple─────────────────────────────────────────────────────────────────┐
│ (('OLAP','database','analytical'),('online','oriented','processing')) │
└───────────────────────────────────────────────────────────────────────┘
```

","1.1","Hash"
"25.8.1.5101","arrayROCAUC",0,0,"","","System","
Calculates the area under the receiver operating characteristic (ROC) curve.
A ROC curve is created by plotting True Positive Rate (TPR) on the y-axis and False Positive Rate (FPR) on the x-axis across all thresholds.
The resulting value ranges from zero to one, with a higher value indicating better model performance.

The ROC AUC (also known as simply AUC) is a concept in machine learning.
For more details, please see [here](https://developers.google.com/machine-learning/glossary#pr-auc-area-under-the-pr-curve), [here](https://developers.google.com/machine-learning/crash-course/classification/roc-and-auc#expandable-1) and [here](https://en.wikipedia.org/wiki/Receiver_operating_characteristic#Area_under_the_curve).
","arrayROCAUC(scores, labels[, scale[, partial_offsets]])","- `scores` — Scores prediction model gives. [`Array((U)Int*)`](/sql-reference/data-types/array) or [`Array(Float*)`](/sql-reference/data-types/array)
- `labels` — Labels of samples, usually 1 for positive sample and 0 for negative sample. [`Array((U)Int*)`](/sql-reference/data-types/array) or [`Enum`](/sql-reference/data-types/enum)
- `scale` — Optional. Decides whether to return the normalized area. If false, returns the area under the TP (true positives) x FP (false positives) curve instead. Default value: true. [`Bool`](/sql-reference/data-types/boolean)
- `partial_offsets` — 
- An array of four non-negative integers for calculating a partial area under the ROC curve (equivalent to a vertical band of the ROC space) instead of the whole AUC. This option is useful for distributed computation of the ROC AUC. The array must contain the following elements [`higher_partitions_tp`, `higher_partitions_fp`, `total_positives`, `total_negatives`]. [Array](/sql-reference/data-types/array) of non-negative [Integers](../data-types/int-uint.md). Optional.
    - `higher_partitions_tp`: The number of positive labels in the higher-scored partitions.
    - `higher_partitions_fp`: The number of negative labels in the higher-scored partitions.
    - `total_positives`: The total number of positive samples in the entire dataset.
    - `total_negatives`: The total number of negative samples in the entire dataset.

::::note
When `arr_partial_offsets` is used, the `arr_scores` and `arr_labels` should be only a partition of the entire dataset, containing an interval of scores.
The dataset should be divided into contiguous partitions, where each partition contains the subset of the data whose scores fall within a specific range.
For example:
- One partition could contain all scores in the range [0, 0.5).
- Another partition could contain scores in the range [0.5, 1.0].
::::
 ","Returns area under the receiver operating characteristic (ROC) curve. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT arrayROCAUC([0.1, 0.4, 0.35, 0.8], [0, 0, 1, 1]);
```

```response title=Response
0.75
```

","20.4","Arrays"
"25.8.1.5101","toStartOfFiveMinutes",0,0,"","","System","
Rounds down a date with time to the start of the nearest five-minute interval.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfFiveMinutes(datetime)","- `datetime` — A date with time to round. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the date with time rounded to the start of the nearest five-minute interval [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Example**

```sql title=Query
SELECT
    toStartOfFiveMinutes(toDateTime('2023-04-21 10:17:00')),
    toStartOfFiveMinutes(toDateTime('2023-04-21 10:20:00')),
    toStartOfFiveMinutes(toDateTime('2023-04-21 10:23:00'))
FORMAT Vertical
```

```response title=Response
Row 1:
──────
toStartOfFiveMinutes(toDateTime('2023-04-21 10:17:00')): 2023-04-21 10:15:00
toStartOfFiveMinutes(toDateTime('2023-04-21 10:20:00')): 2023-04-21 10:20:00
toStartOfFiveMinutes(toDateTime('2023-04-21 10:23:00')): 2023-04-21 10:20:00
```

","22.6","Dates and Times"
"25.8.1.5101","sparseGrams",0,0,"","","System","
Finds all substrings of a given string that have a length of at least `n`,
where the hashes of the (n-1)-grams at the borders of the substring
are strictly greater than those of any (n-1)-gram inside the substring.
Uses `CRC32` as a hash function.
","sparseGrams(s[, min_ngram_length, max_ngram_length])","- `s` — An input string. [`String`](/sql-reference/data-types/string)
- `min_ngram_length` — Optional. The minimum length of extracted ngram. The default and minimal value is 3. [`UInt*`](/sql-reference/data-types/int-uint)
- `max_ngram_length` — Optional. The maximum length of extracted ngram. The default value is 100. Should be not less than `min_ngram_length`. [`UInt*`](/sql-reference/data-types/int-uint)
","Returns an array of selected substrings. [`Array(String)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT sparseGrams('alice', 3)
```

```response title=Response
┌─sparseGrams('alice', 3)────────────┐
│ ['ali','lic','lice','ice']         │
└────────────────────────────────────┘
```

","25.5","String"
"25.8.1.5101","IPv4ToIPv6",0,0,"","","System","","","","","","",""
"25.8.1.5101","toStartOfMicrosecond",0,0,"","","System","
Rounds down a date with time to the start of the microseconds.
    ","toStartOfMicrosecond(datetime, [timezone])","- `datetime` — Date and time. [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone for the returned value. If not specified, the function uses the timezone of the `value` parameter. [`String`](/sql-reference/data-types/string)
","Input value with sub-microseconds [`DateTime64`](/sql-reference/data-types/datetime64)","**Query without timezone**

```sql title=Query
WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64
SELECT toStartOfMicrosecond(dt64);
```

```response title=Response
┌────toStartOfMicrosecond(dt64)─┐
│ 2020-01-01 10:20:30.999999000 │
└───────────────────────────────┘
```

**Query with timezone**

```sql title=Query
WITH toDateTime64('2020-01-01 10:20:30.999999999', 9) AS dt64
SELECT toStartOfMicrosecond(dt64, 'Asia/Istanbul');
```

```response title=Response
┌─toStartOfMicrosecond(dt64, 'Asia/Istanbul')─┐
│               2020-01-01 12:20:30.999999000 │
└─────────────────────────────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","reinterpretAsUInt128",0,0,"","","System","","","","","","",""
"25.8.1.5101","toInt8OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","regionToPopulation",0,0,"","","System","","","","","","",""
"25.8.1.5101","format",0,0,"","","System","
Format the `pattern` string with the values (strings, integers, etc.) listed in the arguments, similar to formatting in Python.
The pattern string can contain replacement fields surrounded by curly braces `{}`.
Anything not contained in braces is considered literal text and copied verbatim into the output.
Literal brace character can be escaped by two braces: `{{` and `}}`.
Field names can be numbers (starting from zero) or empty (then they are implicitly given monotonically increasing numbers).
","format(pattern, s0[, s1, ...])","- `pattern` — The format string containing placeholders. [`String`](/sql-reference/data-types/string)
- `s0[, s1, ...]` — One or more values to substitute into the pattern. [`Any`](/sql-reference/data-types)
","Returns a formatted string. [`String`](/sql-reference/data-types/string)","**Numbered placeholders**

```sql title=Query
SELECT format('{1} {0} {1}', 'World', 'Hello')
```

```response title=Response
┌─format('{1} {0} {1}', 'World', 'Hello')─┐
│ Hello World Hello                       │
└─────────────────────────────────────────┘
```

**Implicit numbering**

```sql title=Query
SELECT format('{} {}', 'Hello', 'World')
```

```response title=Response
┌─format('{} {}', 'Hello', 'World')─┐
│ Hello World                       │
└───────────────────────────────────┘
```

","20.1","String Replacement"
"25.8.1.5101","toStartOfISOYear",0,0,"","","System","
Rounds down a date or date with time to the first day of the ISO year, which can be different than a regular year. See [ISO week date](https://en.wikipedia.org/wiki/ISO_week_date).

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfISOYear(value)","- `value` — The date or date with time to round down to the first day of the ISO year. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the first day of the ISO year for the given date or date with time. [`Date`](/sql-reference/data-types/date)","**Round down to the first day of the ISO year**

```sql title=Query
SELECT toStartOfISOYear(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toStartOfISOYear(toDateTime('2023-04-21 10:20:30'))─┐
│                                          2023-01-02 │
└─────────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","arrayDistinct",0,0,"","","System","Returns an array containing only the distinct elements of an array.","arrayDistinct(arr)","- `arr` — Array for which to extract distinct elements. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array containing the distinct elements [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayDistinct([1, 2, 2, 3, 1]);
```

```response title=Response
[1,2,3]
```

","1.1","Arrays"
"25.8.1.5101","byteSwap",0,1,"","","System","
Reverses the bytes of an integer, i.e. changes its [endianness](https://en.wikipedia.org/wiki/Endianness).

The below example can be worked out in the following manner:

1. Convert the base-10 integer to its equivalent hexadecimal format in big-endian format, i.e. 3351772109 -> C7 C7 FB CD (4 bytes)
2. Reverse the bytes, i.e. C7 C7 FB CD -> CD FB C7 C7
3. Convert the result back to an integer assuming big-endian, i.e. CD FB C7 C7 -> 3455829959
One use case of this function is reversing IPv4s:

```result
┌─toIPv4(byteSwap(toUInt32(toIPv4('205.251.199.199'))))─┐
│ 199.199.251.205                                       │
└───────────────────────────────────────────────────────┘
```
    ","byteSwap(x)","- `x` — An integer value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns `x` with bytes reversed. [`(U)Int*`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT byteSwap(3351772109)
```

```response title=Response
3455829959
```

**8-bit**

```sql title=Query
SELECT byteSwap(54)
```

```response title=Response
54
```

**16-bit**

```sql title=Query
SELECT byteSwap(4135)
```

```response title=Response
10000
```

**32-bit**

```sql title=Query
SELECT byteSwap(3351772109)
```

```response title=Response
3455829959
```

**64-bit**

```sql title=Query
SELECT byteSwap(123294967295)
```

```response title=Response
18439412204227788800
```

","23.10","Arithmetic"
"25.8.1.5101","arrayCount",0,0,"","","System","
Returns the number of elements for which `func(arr1[i], ..., arrN[i])` returns true.
If `func` is not specified, it returns the number of non-zero elements in the array.

`arrayCount` is a [higher-order function](/sql-reference/functions/overview#higher-order-functions).
    ","arrayCount([func, ] arr1, ...)","- `func` — Optional. Function to apply to each element of the array(s). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `arr1, ..., arrN` — N arrays. [`Array(T)`](/sql-reference/data-types/array)
","Returns the number of elements for which `func` returns true. Otherwise, returns the number of non-zero elements in the array. [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT arrayCount(x -> (x % 2), groupArray(number)) FROM numbers(10)
```

```response title=Response
5
```

","1.1","Arrays"
"25.8.1.5101","hasColumnInTable",0,0,"","","System","","","","","","",""
"25.8.1.5101","toRelativeHourNum",0,0,"","","System","
Converts a date or date with time to the number of hours elapsed since a certain fixed point in the past.
The exact point in time is an implementation detail, and therefore this function is not intended to be used standalone.
The main purpose of the function is to calculate the difference in hours between two dates or dates with time, e.g., `toRelativeHourNum(dt1) - toRelativeHourNum(dt2)`.
    ","toRelativeHourNum(date)","- `date` — Date or date with time. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the number of hours from a fixed reference point in the past. [`UInt32`](/sql-reference/data-types/int-uint)","**Get relative hour numbers**

```sql title=Query
SELECT toRelativeHourNum(toDateTime('2023-01-01 12:00:00')) - toRelativeHourNum(toDateTime('2023-01-01 00:00:00')) AS hours_difference
```

```response title=Response
┌─hours_difference─┐
│               12 │
└──────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","CRC64",0,1,"","","System","
Calculates the CRC64 checksum of a string using the CRC-64-ECMA polynomial.
","CRC64(s)","- `s` — String to calculate CRC64 for. [`String`](/sql-reference/data-types/string)
","Returns the CRC64 checksum of the string. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT CRC64('ClickHouse');
```

```response title=Response
┌──CRC64('ClickHouse')─┐
│ 12126588151325169346 │
└──────────────────────┘
```

","20.1","String"
"25.8.1.5101","bitNot",0,0,"","","System","Performs the bitwise NOT operation.","bitNot(a)","- `a` — Value for which to apply bitwise NOT operation. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`String`](/sql-reference/data-types/string)
","Returns the result of `~a` i.e `a` with bits flipped.","**Usage example**

```sql title=Query
SELECT
    CAST('5', 'UInt8') AS original,
    bin(original) AS original_binary,
    bitNot(original) AS result,
    bin(bitNot(original)) AS result_binary;
```

```response title=Response
┌─original─┬─original_binary─┬─result─┬─result_binary─┐
│        5 │ 00000101        │    250 │ 11111010      │
└──────────┴─────────────────┴────────┴───────────────┘
```

","1.1","Bit"
"25.8.1.5101","joinGet",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiSearchAnyCaseInsensitiveUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","upperUTF8",0,0,"","","System","
Converts a string to uppercase, assuming that the string contains valid UTF-8 encoded text.
If this assumption is violated, no exception is thrown and the result is undefined.

:::note
This function doesn't detect the language, e.g. for Turkish the result might not be exactly correct (i/İ vs. i/I).
If the length of the UTF-8 byte sequence is different for upper and lower case of a code point (such as `ẞ` and `ß`), the result may be incorrect for that code point.
:::
","upperUTF8(s)","- `s` — A string type. [`String`](/sql-reference/data-types/string)
","A String data type value. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT upperUTF8('München') AS Upperutf8
```

```response title=Response
┌─Upperutf8─┐
│ MÜNCHEN   │
└───────────┘
```

","1.1","String"
"25.8.1.5101","validateNestedArraySizes",0,0,"","","System","","","","","","",""
"25.8.1.5101","toStartOfInterval",0,0,"","","System","
This function generalizes other `toStartOf*()` functions with `toStartOfInterval(date_or_date_with_time, INTERVAL x unit [, time_zone])` syntax.

For example,
- `toStartOfInterval(t, INTERVAL 1 YEAR)` returns the same as `toStartOfYear(t)`,
- `toStartOfInterval(t, INTERVAL 1 MONTH)` returns the same as `toStartOfMonth(t)`,
- `toStartOfInterval(t, INTERVAL 1 DAY)` returns the same as `toStartOfDay(t)`,
- `toStartOfInterval(t, INTERVAL 15 MINUTE)` returns the same as `toStartOfFifteenMinutes(t)`.

The calculation is performed relative to specific points in time:

| Interval    | Start                  |
|-------------|------------------------|
| YEAR        | year 0                 |
| QUARTER     | 1900 Q1                |
| MONTH       | 1900 January           |
| WEEK        | 1970, 1st week (01-05) |
| DAY         | 1970-01-01             |
| HOUR        | (*)                    |
| MINUTE      | 1970-01-01 00:00:00    |
| SECOND      | 1970-01-01 00:00:00    |
| MILLISECOND | 1970-01-01 00:00:00    |
| MICROSECOND | 1970-01-01 00:00:00    |
| NANOSECOND  | 1970-01-01 00:00:00    |
(*) hour intervals are special: the calculation is always performed relative to 00:00:00 (midnight) of the current day. As a result, only
hour values between 1 and 23 are useful.

If unit `WEEK` was specified, `toStartOfInterval` assumes that weeks start on Monday. Note that this behavior is different from that of function `toStartOfWeek` in which weeks start by default on Sunday.

The second overload emulates TimescaleDB's `time_bucket()` function, respectively PostgreSQL's `date_bin()` function.
        ","toStartOfInterval(value, INTERVAL x unit[, time_zone])
toStartOfInterval(value, INTERVAL x unit[, origin[, time_zone]])","- `value` — Date or date with time value to round down. [`Date`](/sql-reference/data-types/date) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `x` — Interval length number. - `unit` — Interval unit: YEAR, QUARTER, MONTH, WEEK, DAY, HOUR, MINUTE, SECOND, MILLISECOND, MICROSECOND, NANOSECOND. - `time_zone` — Optional. Time zone name as a string. - `origin` — Optional. Origin point for calculation (second overload only). ","Returns the start of the interval containing the input value. [`DateTime`](/sql-reference/data-types/datetime)","**Basic interval rounding**

```sql title=Query
SELECT toStartOfInterval(toDateTime('2023-01-15 14:30:00'), INTERVAL 1 MONTH)
```

```response title=Response
┌─toStartOfInt⋯alMonth(1))─┐
│               2023-01-01 │
└──────────────────────────┘
```

**Using origin point**

```sql title=Query
SELECT toStartOfInterval(toDateTime('2023-01-01 14:45:00'), INTERVAL 1 MINUTE, toDateTime('2023-01-01 14:35:30'))
```

```response title=Response
┌─toStartOfInt⋯14:35:30'))─┐
│      2023-01-01 14:44:30 │
└──────────────────────────┘
```

","20.1","Dates and Times"
"25.8.1.5101","JSONExtractRawCaseInsensitive",0,0,"","","System","
Returns part of the JSON as an unparsed string using case-insensitive key matching. This function is similar to [`JSONExtractRaw`](#jsonextractraw).
        ","JSONExtractRawCaseInsensitive(json [, indices_or_keys]...)","- `json` — JSON string to parse [`String`](/sql-reference/data-types/string)
- `indices_or_keys` — Optional. Indices or keys to navigate to the field. Keys use case-insensitive matching [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns the raw JSON string of the extracted element. [`String`](/sql-reference/data-types/string)","**object**

```sql title=Query
SELECT JSONExtractRawCaseInsensitive('{""Object"": {""key"": ""value""}}', 'OBJECT')
```

```response title=Response
{""key"":""value""}
```

","25.8","JSON"
"25.8.1.5101","toStartOfMonth",0,0,"","","System","
Rounds down a date or date with time to the first day of the month.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfMonth(value)","- `value` — The date or date with time to round down to the first day of the month. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the first day of the month for the given date or date with time. [`Date`](/sql-reference/data-types/date)","**Round down to the first day of the month**

```sql title=Query
SELECT toStartOfMonth(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toStartOfMonth(toDateTime('2023-04-21 10:20:30'))─┐
│                                        2023-04-01 │
└───────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","structureToCapnProtoSchema",0,0,"","","System","
Function that converts ClickHouse table structure to CapnProto format schema
","","","","**random**

```sql title=Query
SELECT structureToCapnProtoSchema('s String, x UInt32', 'MessageName') format TSVRaw
```

```response title=Response
struct MessageName
{
    s @0 : Data;
    x @1 : UInt32;
}
```

","","Other"
"25.8.1.5101","variantType",0,0,"","","System","
Returns the variant type name for each row of `Variant` column. If row contains NULL, it returns 'None' for it.
","variantType(variant)","- `variant` — Variant column ","","**Example**

```sql title=Query
CREATE TABLE test (v Variant(UInt64, String, Array(UInt64))) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT variantType(v) FROM test;
```

```response title=Response
┌─variantType(v)─┐
│ None           │
│ UInt64         │
│ String         │
│ Array(UInt64)  │
└────────────────┘
```

","","JSON"
"25.8.1.5101","mapExtractKeyLike",0,0,"","","System","Returns a map with elements which key matches the specified pattern.","","","","**mapExtractKeyLike**

```sql title=Query
SELECT mapExtractKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')
```

```response title=Response

```

","23.4","Map"
"25.8.1.5101","toUnixTimestamp",0,0,"","","System","
Converts a `String`, `Date`, or `DateTime` to a Unix timestamp (seconds since `1970-01-01 00:00:00 UTC`) as `UInt32`.
    ","toUnixTimestamp(date, [timezone])","- `date` — Value to convert. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `timezone` — Optional.Timezone to use for conversion. If not specified, the server's timezone is used. [`String`](/sql-reference/data-types/string)
","Returns the Unix timestamp as [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT
'2017-11-05 08:07:47' AS dt_str,
toUnixTimestamp(dt_str) AS from_str,
toUnixTimestamp(dt_str, 'Asia/Tokyo') AS from_str_tokyo,
toUnixTimestamp(toDateTime(dt_str)) AS from_datetime,
toUnixTimestamp(toDateTime64(dt_str, 0)) AS from_datetime64,
toUnixTimestamp(toDate(dt_str)) AS from_date,
toUnixTimestamp(toDate32(dt_str)) AS from_date32
FORMAT Vertical;
```

```response title=Response
Row 1:
──────
dt_str:          2017-11-05 08:07:47
from_str:        1509869267
from_str_tokyo:  1509836867
from_datetime:   1509869267
from_datetime64: 1509869267
from_date:       1509840000
from_date32:     1509840000
```

","1.1","Dates and Times"
"25.8.1.5101","clamp",0,0,"","","System","
Restricts a value to be within the specified minimum and maximum bounds.

If the value is less than the minimum, returns the minimum. If the value is greater than the maximum, returns the maximum. Otherwise, returns the value itself.

All arguments must be of comparable types. The result type is the largest compatible type among all arguments.
    ","clamp(value, min, max)","- `value` — The value to clamp. - `min` — The minimum bound. - `max` — The maximum bound. ","Returns the value, restricted to the [min, max] range.","**Basic usage**

```sql title=Query
SELECT clamp(5, 1, 10) AS result;
```

```response title=Response
┌─result─┐
│      5 │
└────────┘
```

**Value below minimum**

```sql title=Query
SELECT clamp(-3, 0, 7) AS result;
```

```response title=Response
┌─result─┐
│      0 │
└────────┘
```

**Value above maximum**

```sql title=Query
SELECT clamp(15, 0, 7) AS result;
```

```response title=Response
┌─result─┐
│      7 │
└────────┘
```

","24.5","Conditional"
"25.8.1.5101","h3GetRes0Indexes",0,0,"","","System","","","","","","",""
"25.8.1.5101","tupleIntDivByNumber",0,0,"","","System","","","","","","",""
"25.8.1.5101","mapContainsValueLike",0,0,"","","System","Checks whether map contains value LIKE specified pattern.","","","","**mapContainsValueLike**

```sql title=Query
SELECT mapContainsValueLike(map(1, 'v1-1', '2, 'v2-2'), 'v1%')
```

```response title=Response

```

","25.5","Map"
"25.8.1.5101","tanh",0,1,"","","System","
Returns the hyperbolic tangent.
","tanh(x)","- `x` — The angle in radians. Values from the interval: -∞ < x < +∞. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns values from the interval: -1 < tanh(x) < 1 [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT tanh(0)
```

```response title=Response
0
```

","20.1","Mathematical"
"25.8.1.5101","s2RectIntersection",0,0,"","","System","","","","","","",""
"25.8.1.5101","timeDiff",0,1,"","","System","
Returns the count of the specified `unit` boundaries crossed between the `startdate` and the `enddate`.
The difference is calculated using relative units. For example, the difference between 2021-12-29 and 2022-01-01 is 3 days for unit day
(see [`toRelativeDayNum`](#toRelativeDayNum)), 1 month for unit month (see [`toRelativeMonthNum`](#toRelativeMonthNum)) and 1 year for unit year
(see [`toRelativeYearNum`](#toRelativeYearNum)).

If the unit `week` was specified, then `timeDiff` assumes that weeks start on Monday.
Note that this behavior is different from that of function `toWeek()` in which weeks start by default on Sunday.

For an alternative to [`timeDiff`](#timeDiff), see function [`age`](#age).
    ","date_diff(unit, startdate, enddate, [timezone])","- `unit` — The type of interval for result.

| Unit        | Possible values                           |
|-------------|-------------------------------------------|
| nanosecond  | `nanosecond`, `nanoseconds`, `ns`         |
| microsecond | `microsecond`, `microseconds`, `us`, `u`  |
| millisecond | `millisecond`, `milliseconds`, `ms`       |
| second      | `second`, `seconds`, `ss`, `s`            |
| minute      | `minute`, `minutes`, `mi`, `n`            |
| hour        | `hour`, `hours`, `hh`, `h`                |
| day         | `day`, `days`, `dd`, `d`                  |
| week        | `week`, `weeks`, `wk`, `ww`               |
| month       | `month`, `months`, `mm`, `m`              |
| quarter     | `quarter`, `quarters`, `qq`, `q`          |
| year        | `year`, `years`, `yyyy`, `yy`             |
 - `startdate` — The first time value to subtract (the subtrahend). [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `enddate` — The second time value to subtract from (the minuend). [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone name. If specified, it is applied to both `startdate` and `enddate`. If not specified, timezones of `startdate` and `enddate` are used. If they are not the same, the result is unspecified. [`String`](/sql-reference/data-types/string)
","Returns the difference between `enddate` and `startdate` expressed in `unit`. [`Int64`](/sql-reference/data-types/int-uint)","**Calculate date difference in hours**

```sql title=Query
SELECT timeDiff('hour', toDateTime('2018-01-01 22:00:00'), toDateTime('2018-01-02 23:00:00')) AS res
```

```response title=Response
┌─res─┐
│  25 │
└─────┘
```

**Calculate date difference in different units**

```sql title=Query
SELECT
    toDate('2022-01-01') AS e,
    toDate('2021-12-29') AS s,
    timeDiff('day', s, e) AS day_diff,
    timeDiff('month', s, e) AS month_diff,
    timeDiff('year', s, e) AS year_diff
```

```response title=Response
┌──────────e─┬──────────s─┬─day_diff─┬─month_diff─┬─year_diff─┐
│ 2022-01-01 │ 2021-12-29 │        3 │          1 │         1 │
└────────────┴────────────┴──────────┴────────────┴───────────┘
```

","23.4","Dates and Times"
"25.8.1.5101","mapContainsKeyLike",0,0,"","","System","Checks whether map contains key LIKE specified pattern.","","","","**mapContainsKeyLike**

```sql title=Query
SELECT mapContainsKeyLike(map('k1-1', 1, 'k2-1', 2), 'k1%')
```

```response title=Response

```

","23.4","Map"
"25.8.1.5101","runningAccumulate",0,0,"","","System","","","","","","",""
"25.8.1.5101","exp2",0,0,"","","System","
Returns 2 to the power of the given argument.
","exp2(x)","- `x` — The exponent. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns 2^x [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT exp2(3);
```

```response title=Response
8
```

","1.1","Mathematical"
"25.8.1.5101","L2Distance",0,0,"","","System","
Calculates the distance between two points (the values of the vectors are the coordinates) in Euclidean space ([Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance)).
    ","L2Distance(vector1, vector2)","- `vector1` — First vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
- `vector2` — Second vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
","Returns the 2-norm distance. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT L2Distance((1, 2), (2, 3))
```

```response title=Response
┌─L2Distance((1, 2), (2, 3))─┐
│         1.4142135623730951 │
└────────────────────────────┘
```

","21.11","Distance"
"25.8.1.5101","decodeURLFormComponent",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitmapHasAll",0,0,"","","System","Checks if the first bitmap contains all set bits of the second bitmap.","bitmapHasAll(bitmap1, bitmap2)","- `bitmap1` — First bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `bitmap2` — Second bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). ","Returns `1` if all set bits of the second bitmap are present in the first bitmap, otherwise `0` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bitmapHasAll(bitmapBuild([1, 2, 3]), bitmapBuild([2, 3])) AS res;
```

```response title=Response
┌─res─┐
│  1  │
└─────┘
```

","20.1","Bitmap"
"25.8.1.5101","base58Decode",0,0,"","","System","
Decodes a [Base58](https://datatracker.ietf.org/doc/html/draft-msporny-base58-03#section-3) string.
If the string is not valid Base58-encoded, an exception is thrown.
","base58Decode(encoded)","- `encoded` — String column or constant to decode. [`String`](/sql-reference/data-types/string)
","Returns a string containing the decoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT base58Decode('JxF12TrwUP45BMd');
```

```response title=Response
┌─base58Decode⋯rwUP45BMd')─┐
│ Hello World              │
└──────────────────────────┘
```

","22.7","String"
"25.8.1.5101","timeSeriesIdToTags",0,0,"","","System","Finds tags associated with the specified identifier of a time series.","timeSeriesIdToTags(id)","- `id` — Identifier of a time series. [`UInt64`](/sql-reference/data-types/int-uint) or [`UInt128`](/sql-reference/data-types/int-uint) or [`UUID`](/sql-reference/data-types/uuid) or [`FixedString(16)`](/sql-reference/data-types/fixedstring)
","Returns an array of pairs (tag_name, tag_value). [`Array(Tuple(String, String))`](/sql-reference/data-types/array)","**Example**

```sql title=Query
SELECT timeSeriesStoreTags(8374283493092, [('region', 'eu'), ('env', 'dev')], '__name__', 'http_requests_count') AS id, timeSeriesIdToTags(id)
```

```response title=Response
8374283493092    [('__name__', ''http_requests_count''), ('env', 'dev'), ('region', 'eu')]
```

","25.8","Time Series"
"25.8.1.5101","mapReverseSort",0,0,"","","System","The same as arrayReverseSort.","","","","**mapReverseSort**

```sql title=Query
SELECT mapReverseSort((k, v) -> v, map('k1', 3, 'k2', 1, 'k3', 2))
```

```response title=Response

```

","23.4","Map"
"25.8.1.5101","h3EdgeLengthKm",0,0,"","","System","
Calculates the average length of an [H3](https://h3geo.org/docs/core-library/h3Indexing/) hexagon edge in kilometers.
    ","h3EdgeLengthKm(resolution)","- `resolution` — Index resolution with range `[0, 15]`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the average length of an [H3](#h3-index) hexagon edge in kilometers. [`Float64`](/sql-reference/data-types/float)","**Get edge length for maximum resolution**

```sql title=Query
SELECT h3EdgeLengthKm(15) AS edgeLengthKm
```

```response title=Response
┌─edgeLengthKm─┐
│  0.000509713 │
└──────────────┘
```

","20.1","Geo"
"25.8.1.5101","parseDateTime64BestEffortUSOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","moduloLegacy",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3kRing",0,0,"","","System","
Lists all the [H3](#H3-index) hexagons in the radius of `k` from the given hexagon in random order.
    ","h3kRing(h3index, k)","- `h3index` — H3 index of the origin hexagon. [`UInt64`](/sql-reference/data-types/int-uint)
- `k` — Radius [`UInt*`](/sql-reference/data-types/int-uint)
","Returns an array of H3 indexes that are within `k` rings of the origin hexagon. [`Array(UInt64)`](/sql-reference/data-types/array)","**Get all hexagons within 1 ring of the origin**

```sql title=Query
SELECT arrayJoin(h3kRing(644325529233966508, 1)) AS h3index
```

```response title=Response
┌────────────h3index─┐
│ 644325529233966508 │
│ 644325529233966497 │
│ 644325529233966510 │
│ 644325529233966504 │
│ 644325529233966509 │
│ 644325529233966355 │
│ 644325529233966354 │
└────────────────────┘
```

","20.1","Geo"
"25.8.1.5101","dictGetOrNull",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the attribute's data type if key is found, otherwise NULL.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","arrayShingles",0,0,"","","System","Generates an array of shingles (similar to ngrams for strings), i.e. consecutive sub-arrays with a specified length of the input array.","arrayShingles(arr, l)","- `arr` — Array for which to generate an array of shingles. [`Array(T)`](/sql-reference/data-types/array)
- `l` — The length of each shingle. [`(U)Int*`](/sql-reference/data-types/int-uint)
","An array of generated shingles [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayShingles([1, 2, 3, 4], 3) as res;
```

```response title=Response
[[1, 2, 3], [2, 3, 4]]
```

","24.1","Arrays"
"25.8.1.5101","inIgnoreSet",0,0,"","","System","","","","","","",""
"25.8.1.5101","dictGetUUID",0,0,"","","System","
Retrieves values from a dictionary.

Accepts 3 parameters:
-- name of the dictionary;
-- name of the column of the dictionary or tuple of column names;
-- key value - expression returning dictionary key-type value or tuple-type value - depending on the dictionary configuration;

Returned value: value of the dictionary attribute parsed in the UUID if key is found, otherwise <null_value> element specified in the dictionary configuration.

Throws an exception if cannot parse the value of the attribute or the value does not match the attribute data type.
","","","","","","Dictionary"
"25.8.1.5101","L1Distance",0,0,"","","System","
Calculates the distance between two points (the values of the vectors are the coordinates) in `L1` space (1-norm ([taxicab geometry](https://en.wikipedia.org/wiki/Taxicab_geometry) distance)).
    ","L1Distance(vector1, vector2)","- `vector1` — First vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
- `vector2` — Second vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
","Returns the 1-norm distance. [`UInt32`](/sql-reference/data-types/int-uint) or [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT L1Distance((1, 2), (2, 3))
```

```response title=Response
┌─L1Distance((1, 2), (2, 3))─┐
│                          2 │
└────────────────────────────┘
```

","21.11","Distance"
"25.8.1.5101","mapContainsKey",0,0,"","","System","Checks whether the map has the specified key.","","","","**mapContainsKey**

```sql title=Query
SELECT mapContainsKey(map('k1', 'v1', 'k2', 'v2'), 'k1')
```

```response title=Response

```

","25.5","Map"
"25.8.1.5101","notNullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.8.1.5101","mapValues",0,0,"","","System","Returns an array with the values of map.","","","","**mapValues**

```sql title=Query
SELECT mapValues(map('k1', 'v1', 'k2', 'v2'))
```

```response title=Response

```

","21.2","Map"
"25.8.1.5101","match",0,0,"","","System","","","","","","",""
"25.8.1.5101","mortonDecode",0,0,"","","System","
Decodes a Morton encoding (ZCurve) into the corresponding unsigned integer tuple.

As with the `mortonEncode` function, this function has two modes of operation:
- **Simple**
- **Expanded**

**Simple mode**

Accepts a resulting tuple size as the first argument and the code as the second argument.

**Expanded mode**

Accepts a range mask (tuple) as the first argument and the code as the second argument.
Each number in the mask configures the amount of range shrink:

* `1` - no shrink
* `2` - 2x shrink
* `3` - 3x shrink
⋮
* Up to 8x shrink.

Range expansion can be beneficial when you need a similar distribution for
arguments with wildly different ranges (or cardinality). For example: 'IP Address' `(0...FFFFFFFF)`
and 'Country code' `(0...FF)`. As with the encode function, this is limited to
8 numbers at most.
    ","-- Simple mode
mortonDecode(tuple_size, code)

-- Expanded mode
mortonDecode(range_mask, code)","- `tuple_size` — Integer value no more than 8. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint)
- `range_mask` — For the expanded mode, the mask for each argument. The mask is a tuple of unsigned integers. Each number in the mask configures the amount of range shrink. [`Tuple(UInt8/16/32/64)`](/sql-reference/data-types/tuple)
- `code` — UInt64 code. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns a tuple of the specified size. [`Tuple(UInt64)`](/sql-reference/data-types/tuple)","**Simple mode**

```sql title=Query
SELECT mortonDecode(3, 53)
```

```response title=Response
[""1"", ""2"", ""3""]
```

**Single argument**

```sql title=Query
SELECT mortonDecode(1, 1)
```

```response title=Response
[""1""]
```

**Expanded mode, shrinking one argument**

```sql title=Query
SELECT mortonDecode(tuple(2), 32768)
```

```response title=Response
[""128""]
```

**Column usage**

```sql title=Query
-- First create the table and insert some data
CREATE TABLE morton_numbers(
    n1 UInt32,
    n2 UInt32,
    n3 UInt16,
    n4 UInt16,
    n5 UInt8,
    n6 UInt8,
    n7 UInt8,
    n8 UInt8
)
ENGINE=MergeTree()
ORDER BY n1;
INSERT INTO morton_numbers (*) values(1, 2, 3, 4, 5, 6, 7, 8);

-- Use column names instead of constants as function arguments
SELECT untuple(mortonDecode(8, mortonEncode(n1, n2, n3, n4, n5, n6, n7, n8))) FROM morton_numbers;
```

```response title=Response
1 2 3 4 5 6 7 8
```

","24.6","Encoding"
"25.8.1.5101","subBitmap",0,0,"","","System","Returns a subset of the bitmap, starting from position `offset`. The maximum cardinality of the returned bitmap is `cardinality_limit`.","subBitmap(bitmap, offset, cardinality_limit)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `offset` — Number of set bits to skip from the beginning (zero-based). [`UInt32`](/sql-reference/data-types/int-uint) - `cardinality_limit` — Maximum number of set bits to include in the subset. [`UInt32`](/sql-reference/data-types/int-uint) ","Returns a bitmap containing at most `limit` set bits, starting after skipping `offset` set bits in ascending order [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(subBitmap(bitmapBuild([1, 2, 3, 4, 5]), 2, 2)) AS res;
```

```response title=Response
┌─res────┐
│ [3, 4] │
└────────┘
```

","21.9","Bitmap"
"25.8.1.5101","decrypt",0,0,"","","System","","","","","","",""
"25.8.1.5101","base64Decode",0,0,"","","System","
Decodes a string from [Base64](https://en.wikipedia.org/wiki/Base64) representation, according to RFC 4648.
Throws an exception in case of error.

","base64Decode(encoded)","- `encoded` — String column or constant to decode. If the string is not valid Base64-encoded, an exception is thrown. [`String`](/sql-reference/data-types/string)
","Returns the decoded string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT base64Decode('Y2xpY2tob3VzZQ==')
```

```response title=Response
┌─base64Decode('Y2xpY2tob3VzZQ==')─┐
│ clickhouse                       │
└──────────────────────────────────┘
```

","18.16","String"
"25.8.1.5101","defaultValueOfArgumentType",0,0,"","","System","","","","","","",""
"25.8.1.5101","filesystemCapacity",0,0,"","","System","","","","","","",""
"25.8.1.5101","toSecond",0,0,"","","System","
Returns the second component (0-59) of a `Date` or `DateTime` value.
        ","toSecond(datetime)","- `datetime` — Date or date with time to get the second from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the second in the minute (0 - 59) of the given `Date` or `DateTime` value [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT toSecond(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toSecond(toDateTime('2023-04-21 10:20:30'))─┐
│                                          30 │
└─────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","arrayPopBack",0,0,"","","System","Removes the last element from the array.","arrayPopBack(arr)","- `arr` — The array for which to remove the last element from. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array identical to `arr` but without the last element of `arr` [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayPopBack([1, 2, 3]) AS res;
```

```response title=Response
[1, 2]
```

","1.1","Arrays"
"25.8.1.5101","arrayAvg",0,0,"","","System","
Returns the average of elements in the source array.

If a lambda function `func` is specified, returns the average of elements of the lambda results.
    ","arrayAvg([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns the average of elements in the source array, or the average of elements of the lambda results if provided. [`Float64`](/sql-reference/data-types/float)","**Basic example**

```sql title=Query
SELECT arrayAvg([1, 2, 3, 4]);
```

```response title=Response
2.5
```

**Usage with lambda function**

```sql title=Query
SELECT arrayAvg(x, y -> x*y, [2, 3], [2, 3]) AS res;
```

```response title=Response
6.5
```

","21.1","Arrays"
"25.8.1.5101","arrayLastOrNull",0,0,"","","System","
Returns the last element in the source array for which a lambda `func(x [, y1, y2, ... yN])` returns true, otherwise it returns `NULL`.
    ","arrayLastOrNull(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x [, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda). - `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array). - `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array). ","Returns the last element of the source array for which `λ` is not true, otherwise returns `NULL`.","**Usage example**

```sql title=Query
SELECT arrayLastOrNull(x, y -> x=y, ['a', 'b', 'c'], ['a', 'b', 'c'])
```

```response title=Response
c
```

**No match**

```sql title=Query
SELECT arrayLastOrNull(x, y -> x=y, [0, 1, 2], [3, 3, 3]) AS res, toTypeName(res)
```

```response title=Response
NULL Nullable(UInt8)
```

","1.1","Arrays"
"25.8.1.5101","mapExtractValueLike",0,0,"","","System","Returns a map with elements which value matches the specified pattern.","","","","**mapExtractValueLike**

```sql title=Query
SELECT mapExtractValueLike(map('k1-1', 'v1-1', 'k2-1', 'v2-1'), 'v1%')
```

```response title=Response

```

","25.5","Map"
"25.8.1.5101","isDynamicElementInSharedData",0,0,"","","System","
Returns true for rows in Dynamic column that are not separated into subcolumns and stored inside shared variant in binary form.
","isDynamicElementInSharedData(dynamic)","- `dynamic` — Dynamic column ","","**Example**

```sql title=Query
CREATE TABLE test (d Dynamic(max_types=2)) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, isDynamicElementInSharedData(d) FROM test;
```

```response title=Response
┌─d─────────────┬─isDynamicElementInSharedData(d)─┐
│ ᴺᵁᴸᴸ          │ false              │
│ 42            │ false              │
│ Hello, World! │ true               │
│ [1,2,3]       │ true               │
└───────────────┴────────────────────┘
```

","","JSON"
"25.8.1.5101","tcpPort",0,0,"","","System","","","","","","",""
"25.8.1.5101","encodeXMLComponent",0,0,"","","System","
Escapes characters to place string into XML text node or attribute.
","encodeXMLComponent(s)","- `s` — String to escape. [`String`](/sql-reference/data-types/string)
","Returns the escaped string. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT
    '<tag>Hello & ""World""</tag>' AS original,
    encodeXMLComponent('<tag>Hello & ""World""</tag>') AS xml_encoded;
```

```response title=Response
┌─original───────────────────┬─xml_encoded──────────────────────────────────────────┐
│ <tag>Hello & ""World""</tag> │ &lt;tag&gt;Hello &amp; &quot;World&quot;&lt;/tag&gt; │
└────────────────────────────┴──────────────────────────────────────────────────────┘
```

","21.1","String"
"25.8.1.5101","changeHour",0,0,"","","System","Changes the hour component of a date or date time.","changeHour(date_or_datetime, value);","- `date_or_datetime` — The value to change. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `value` — The new value. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns a value of the same type as `date_or_datetime` with modified hour component. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Usage example**

```sql title=Query
SELECT changeHour('2024-01-01 12:00:00'::DateTime, 5)
```

```response title=Response
2024-01-01 05:00:00
```

","24.7","Dates and Times"
"25.8.1.5101","wordShingleMinHashArgCaseInsensitive",0,0,"","","System","
Splits a ASCII string into parts (shingles) of `shinglesize` words each and returns the shingles with minimum and maximum word hashes, calculated by the [`wordShingleMinHashCaseInsensitive`](#wordShingleMinHashCaseInsensitive) function with the same input.
It is case insensitive.
","wordShingleMinHashArgCaseInsensitive(string[, shinglesize, hashnum])","- `string` — String for which to compute the hash. [`String`](/sql-reference/data-types/string)
- `shinglesize` — Optional. The size of a word shingle, any number from `1` to `25`. The default value is `3`. [`UInt8`](/sql-reference/data-types/int-uint)
- `hashnum` — Optional. The number of minimum and maximum hashes used to calculate the result, any number from `1` to `25`. The default value is `6`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns a tuple with two tuples with `hashnum` word shingles each. [`Tuple(Tuple(String))`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT wordShingleMinHashArgCaseInsensitive('ClickHouse® is a column-oriented database management system (DBMS) for online analytical processing of queries (OLAP).', 1, 3) AS Tuple;
```

```response title=Response
┌─Tuple──────────────────────────────────────────────────────────────────┐
│ (('queries','database','analytical'),('oriented','processing','DBMS')) │
└────────────────────────────────────────────────────────────────────────┘
```

","21.1","Hash"
"25.8.1.5101","subtractWeeks",0,0,"","","System","
Subtracts a specified number of weeks from a date, a date with time or a string-encoded date or date with time.
    ","subtractWeeks(datetime, num)","- `datetime` — Date or date with time to subtract specified number of weeks from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of weeks to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` weeks [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract weeks from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractWeeks(date, 1) AS subtract_weeks_with_date,
    subtractWeeks(date_time, 1) AS subtract_weeks_with_date_time,
    subtractWeeks(date_time_string, 1) AS subtract_weeks_with_date_time_string
```

```response title=Response
┌─subtract_weeks_with_date─┬─subtract_weeks_with_date_time─┬─subtract_weeks_with_date_time_string─┐
│               2023-12-25 │           2023-12-25 00:00:00 │              2023-12-25 00:00:00.000 │
└──────────────────────────┴───────────────────────────────┴──────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 week)
```

```response title=Response
┌─minus(CAST('⋯alWeek(10))─┐
│               1998-04-07 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","tupleConcat",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUUID",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayLast",0,0,"","","System","
Returns the last element in the source array for which a lambda `func(x [, y1, y2, ... yN])` returns true, otherwise it returns a default value.
    ","arrayLast(func(x[, y1, ..., yN]), source[, cond1, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda). - `source` — The source array to process. [`Array(T)`](/sql-reference/data-types/array). - `[, cond1, ... , condN]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array). ","Returns the last element of the source array for which `func` is true, otherwise returns the default value of `T`.","**Usage example**

```sql title=Query
SELECT arrayLast(x, y -> x=y, ['a', 'b', 'c'], ['a', 'b', 'c'])
```

```response title=Response
c
```

**No match**

```sql title=Query
SELECT arrayFirst(x, y -> x=y, [0, 1, 2], [3, 3, 3]) AS res, toTypeName(res)
```

```response title=Response
0 UInt8
```

","1.1","Arrays"
"25.8.1.5101","MD4",0,0,"","","System","Calculates the MD4 hash of the given string.","SELECT MD4(s);","- `s` — The input [String](../../sql-reference/data-types/string.md). ","Returns the MD4 hash of the given input string as a fixed-length string. [`FixedString(16)`](/sql-reference/data-types/fixedstring)","****

```sql title=Query
SELECT HEX(MD4('abc'));
```

```response title=Response
┌─hex(MD4('abc'))──────────────────┐
│ A448017AAF21D8525FC10AE87AA6729D │
└──────────────────────────────────┘
```

","","Hash"
"25.8.1.5101","moduloOrZero",0,0,"","","System","
Like modulo but returns zero when the divisor is zero, as opposed to an
exception with the modulo function.
    ","moduloOrZero(a, b)","- `a` — The dividend. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
- `b` — The divisor (modulus). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the remainder of a % b, or `0` when the divisor is `0`.","**Usage example**

```sql title=Query
SELECT moduloOrZero(5, 0)
```

```response title=Response
0
```

","20.3","Arithmetic"
"25.8.1.5101","s2CapContains",0,0,"","","System","","","","","","",""
"25.8.1.5101","defaultValueOfTypeName",0,0,"","","System","","","","","","",""
"25.8.1.5101","tuplePlus",0,0,"","","System","","","","","","",""
"25.8.1.5101","readWKTPoint",0,0,"","","System","","","","","","",""
"25.8.1.5101","firstSignificantSubdomain",0,0,"","","System","
Returns the ""first significant subdomain"".

The first significant subdomain is a second-level domain if it is 'com', 'net', 'org', or 'co'.
Otherwise, it is a third-level domain.

For example, firstSignificantSubdomain('https://news.clickhouse.com/') = 'clickhouse', firstSignificantSubdomain ('https://news.clickhouse.com.tr/') = 'clickhouse'.

The list of ""insignificant"" second-level domains and other implementation details may change in the future.
        ","","","","**firstSignificantSubdomain**

```sql title=Query
SELECT firstSignificantSubdomain('https://news.clickhouse.com/')
```

```response title=Response

```

","","URL"
"25.8.1.5101","h3HexAreaKm2",0,0,"","","System","
Returns average hexagon area in square kilometers at the given [H3](#h3-index) resolution.
    ","h3HexAreaKm2(resolution)","- `resolution` — Index resolution with range `[0, 15]`. [`UInt8`](/sql-reference/data-types/int-uint)
","Returns the average area of an H3 hexagon in square kilometers for the given resolution. [`Float64`](/sql-reference/data-types/float)","**Get hexagon area at resolution 13**

```sql title=Query
SELECT h3HexAreaKm2(13) AS area
```

```response title=Response
┌──────area─┐
│ 0.0000439 │
└───────────┘
```

","22.1","Geo"
"25.8.1.5101","now",0,1,"","","System","
Returns the current date and time at the moment of query analysis. The function is a constant expression.
    ","now([timezone])","- `timezone` — Optional. Timezone name for the returned value. [`String`](/sql-reference/data-types/string)
","Returns the current date and time. [`DateTime`](/sql-reference/data-types/datetime)","**Query without timezone**

```sql title=Query
SELECT now()
```

```response title=Response
┌───────────────now()─┐
│ 2020-10-17 07:42:09 │
└─────────────────────┘
```

**Query with specified timezone**

```sql title=Query
SELECT now('Asia/Istanbul')
```

```response title=Response
┌─now('Asia/Istanbul')─┐
│  2020-10-17 10:42:23 │
└──────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","arrayCumSumNonNegative",0,0,"","","System","Returns an array of the partial (running) sums of the elements in the source array, replacing any negative running sum with zero. If a lambda function is specified, the sum is computed from applying the lambda to the array elements at each position.","arrayCumSumNonNegative([func,] arr1[, arr2, ... , arrN])","- `func` — Optional. A lambda function to apply to the array elements at each position. [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `arr1` — The source array of numeric values. [`Array(T)`](/sql-reference/data-types/array)
- `[arr2, ..., arrN]` — Optional. Additional arrays of the same size, passed as arguments to the lambda function if specified. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array of the partial sums of the elements in the source array, with any negative running sum replaced by zero. The result type matches the input array's numeric type. [`Array(T)`](/sql-reference/data-types/array)","**Basic usage**

```sql title=Query
SELECT arrayCumSumNonNegative([1, 1, -4, 1]) AS res
```

```response title=Response
[1, 2, 0, 1]
```

**With lambda**

```sql title=Query
SELECT arrayCumSumNonNegative(x -> x * 2, [1, -2, 3]) AS res
```

```response title=Response
[2, 0, 6]
```

","18.12","Arrays"
"25.8.1.5101","detectCharset",0,0,"","","System","","","","","","",""
"25.8.1.5101","dynamicType",0,0,"","","System","
Returns the variant type name for each row of `Dynamic` column. If row contains NULL, it returns 'None' for it.
","dynamicType(dynamic)","- `dynamic` — Dynamic column ","","**Example**

```sql title=Query
CREATE TABLE test (d Dynamic) ENGINE = Memory;
INSERT INTO test VALUES (NULL), (42), ('Hello, World!'), ([1, 2, 3]);
SELECT d, dynamicType(d) FROM test;
```

```response title=Response
┌─d─────────────┬─dynamicType(d)─┐
│ ᴺᵁᴸᴸ          │ None           │
│ 42            │ Int64          │
│ Hello, World! │ String         │
│ [1,2,3]       │ Array(Int64)   │
└───────────────┴────────────────┘
```

","","JSON"
"25.8.1.5101","translateUTF8",0,0,"","","System","
Like [`translate`](#translate) but assumes `s`, `from` and `to` are UTF-8 encoded strings.
","translateUTF8(s, from, to)","- `s` — UTF-8 input string to translate. [`String`](/sql-reference/data-types/string)
- `from` — A constant UTF-8 string containing characters to replace. [`const String`](/sql-reference/data-types/string)
- `to` — A constant UTF-8 string containing replacement characters. [`const String`](/sql-reference/data-types/string)
","Returns a `String` data type value. [`String`](/sql-reference/data-types/string)","**UTF-8 character translation**

```sql title=Query
SELECT translateUTF8('Münchener Straße', 'üß', 'us') AS res;
```

```response title=Response
┌─res──────────────┐
│ Munchener Strase │
└──────────────────┘
```

","22.7","String Replacement"
"25.8.1.5101","emptyArrayInt8",0,0,"","","System","Returns an empty Int8 array","emptyArrayInt8()","","An empty Int8 array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayInt8
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","has",0,0,"","","System","Returns whether the array contains the specified element.","has(arr, x)","- `arr` — The source array. [`Array(T)`](/sql-reference/data-types/array)
- `x` — The value to search for in the array. ","Returns `1` if the array contains the specified element, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Basic usage**

```sql title=Query
SELECT has([1, 2, 3], 2)
```

```response title=Response
1
```

**Not found**

```sql title=Query
SELECT has([1, 2, 3], 4)
```

```response title=Response
0
```

","1.1","Arrays"
"25.8.1.5101","leftPad",0,0,"","","System","
Pads a string from the left with spaces or with a specified string (multiple times, if needed) until the resulting string reaches the specified `length`.
","leftPad(string, length[, pad_string])","- `string` — Input string that should be padded. [`String`](/sql-reference/data-types/string)
- `length` — The length of the resulting string. If the value is smaller than the input string length, then the input string is shortened to `length` characters. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `pad_string` — Optional. The string to pad the input string with. If not specified, then the input string is padded with spaces. [`String`](/sql-reference/data-types/string)
","Returns a left-padded string of the given length. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT leftPad('abc', 7, '*'), leftPad('def', 7)
```

```response title=Response
┌─leftPad('abc', 7, '*')─┬─leftPad('def', 7)─┐
│ ****abc                │     def           │
└────────────────────────┴───────────────────┘
```

","21.8","String"
"25.8.1.5101","tupleToNameValuePairs",0,0,"","","System","","","","","","",""
"25.8.1.5101","simpleJSONExtractRaw",0,0,"","","System","
Returns the value of the field named `field_name` as a `String`, including separators.
","simpleJSONExtractRaw(json, field_name)","- `json` — The JSON in which the field is searched for. [`String`](/sql-reference/data-types/string)
- `field_name` — The name of the field to search for. [`const String`](/sql-reference/data-types/string)
","Returns the value of the field as a string, including separators if the field exists, or an empty string otherwise [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
CREATE TABLE jsons
(
    `json` String
)
ENGINE = MergeTree
ORDER BY tuple();

INSERT INTO jsons VALUES ('{""foo"":""-4e3""}');
INSERT INTO jsons VALUES ('{""foo"":-3.4}');
INSERT INTO jsons VALUES ('{""foo"":5}');
INSERT INTO jsons VALUES ('{""foo"":{""def"":[1,2,3]}}');
INSERT INTO jsons VALUES ('{""baz"":2}');

SELECT simpleJSONExtractRaw(json, 'foo') FROM jsons ORDER BY json;
```

```response title=Response
""-4e3""
-3.4
5
{""def"":[1,2,3]}
```

","21.4","JSON"
"25.8.1.5101","accurateCastOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","length",0,1,"","","System","
Calculates the length of a string or array.

- For String or FixedString arguments: calculates the number of bytes in the string.
- For Array arguments: calculates the number of elements in the array.
- If applied to a FixedString argument, the function is a constant expression.

Please note that the number of bytes in a string is not the same as the number of
Unicode ""code points"" and it is not the same as the number of Unicode ""grapheme clusters""
(what we usually call ""characters"") and it is not the same as the visible string width.

It is ok to have ASCII NULL bytes in strings, and they will be counted as well.
    ","length(x)","- `x` — Value for which to calculate the number of bytes (for String/FixedString) or elements (for Array). [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring) or [`Array(T)`](/sql-reference/data-types/array)
","Returns the number of number of bytes in the String/FixedString `x` / the number of elements in array `x` [`UInt64`](/sql-reference/data-types/int-uint)","**String example**

```sql title=Query
SELECT length('Hello, world!')
```

```response title=Response
13
```

**Array example**

```sql title=Query
SELECT length(['Hello', 'world'])
```

```response title=Response
2
```

**constexpr example**

```sql title=Query
WITH 'hello' || toString(number) AS str
SELECT str,
isConstant(length(str)) AS str_length_is_constant,
isConstant(length(str::FixedString(6))) AS fixed_str_length_is_constant
FROM numbers(3)
```

```response title=Response
┌─str────┬─str_length_is_constant─┬─fixed_str_length_is_constant─┐
│ hello0 │                      0 │                            1 │
│ hello1 │                      0 │                            1 │
│ hello2 │                      0 │                            1 │
└────────┴────────────────────────┴──────────────────────────────┘
```

**unicode example**

```sql title=Query
SELECT 'ёлка' AS str1, length(str1), lengthUTF8(str1), normalizeUTF8NFKD(str1) AS str2, length(str2), lengthUTF8(str2)
```

```response title=Response
┌─str1─┬─length(str1)─┬─lengthUTF8(str1)─┬─str2─┬─length(str2)─┬─lengthUTF8(str2)─┐
│ ёлка │            8 │                4 │ ёлка │           10 │                5 │
└──────┴──────────────┴──────────────────┴──────┴──────────────┴──────────────────┘
```

**ascii_vs_utf8 example**

```sql title=Query
SELECT 'ábc' AS str, length(str), lengthUTF8(str)
```

```response title=Response
┌─str─┬─length(str)──┬─lengthUTF8(str)─┐
│ ábc │            4 │               3 │
└─────┴──────────────┴─────────────────┘
```

","1.1","Arrays"
"25.8.1.5101","h3ToGeo",0,0,"","","System","
Returns the centroid latitude and longitude corresponding to the provided [H3](https://h3geo.org/docs/core-library/h3Indexing/) index.

:::note
In ClickHouse v24.12 or older, `h3ToGeo()` accepts arguments in the order `(lon, lat)`. As per ClickHouse v25.1, the returned values are ordered `(lat, lon)`.
The previous behavior can be restored using setting `h3togeo_lon_lat_result_order = true`.
:::
    ","h3ToGeo(h3Index)","- `h3Index` — H3 index. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns a tuple consisting of two values `(lat, lon)` where `lat` is latitude and `lon` is longitude. [`Tuple(Float64, Float64)`](/sql-reference/data-types/tuple)","**Get coordinates from H3 index**

```sql title=Query
SELECT h3ToGeo(644325524701193974) AS coordinates
```

```response title=Response
┌─coordinates───────────────────────────┐
│ (55.71290243145668,37.79506616830252) │
└───────────────────────────────────────┘
```

","21.9","Geo"
"25.8.1.5101","arrayEnumerateDense",0,0,"","","System","Returns an array of the same size as the source array, indicating where each element first appears in the source array.","arrayEnumerateDense(arr)","- `arr` — The array to enumerate. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array of the same size as `arr`, indicating where each element first appears in the source array [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayEnumerateDense([10, 20, 10, 30])
```

```response title=Response
[1,2,1,3]
```

","18.12","Arrays"
"25.8.1.5101","parseDateTime64BestEffortOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","domainRFC",0,0,"","","System","Similar to `domain` but follows stricter rules to be compatible with RFC 3986 and less performant.","","","","","","URL"
"25.8.1.5101","bitmapSubsetLimit",0,0,"","","System","Returns a subset of a bitmap from position `range_start` with at most `cardinality_limit` set bits. Uses 1-based indexing.","bitmapSubsetLimit(bitmap, range_start, cardinality_limit)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `range_start` — Start of the range (inclusive). [`UInt32`](/sql-reference/data-types/int-uint) - `cardinality_limit` — Maximum cardinality of the subset. [`UInt32`](/sql-reference/data-types/int-uint) ","Returns a bitmap containing at most `cardinality_limit` set bits, starting from `range_start` [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapSubsetLimit(bitmapBuild([1, 5, 3, 2, 8]), 3, 2)) AS res;
```

```response title=Response
┌─res────┐
│ [5, 3] │
└────────┘
```

","20.1","Bitmap"
"25.8.1.5101","mapExists",0,0,"","","System","The same as arrayExists.","","","","**mapExists**

```sql title=Query
SELECT mapExists((k, v) -> v = 1, map('k1', 1, 'k2', 2))
```

```response title=Response

```

","23.4","Map"
"25.8.1.5101","endsWith",0,0,"","","System","
Checks whether a string ends with the provided suffix.
","endsWith(s, suffix)","- `s` — String to check. [`String`](/sql-reference/data-types/string)
- `suffix` — Suffix to check for. [`String`](/sql-reference/data-types/string)
","Returns `1` if `s` ends with `suffix`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT endsWith('ClickHouse', 'House');
```

```response title=Response
┌─endsWith('Cl⋯', 'House')─┐
│                        1 │
└──────────────────────────┘
```

","1.1","String"
"25.8.1.5101","rand64",0,0,"","","System","
Returns a random distributed `UInt64` number with uniform distribution.

Uses a linear congruential generator with an initial state obtained from the system, which means that while it appears random, it's not truly random and can be predictable if the initial state is known.
For scenarios where true randomness is crucial, consider using alternative methods like system-level calls or integrating with external libraries.
    ","rand64([x])","- `x` — Optional and ignored. The only purpose of the argument is to prevent common subexpression elimination when the same function call is used multiple times in a query. [`Any`](/sql-reference/data-types)
","Returns a random UInt64 number with uniform distribution. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT rand64();
```

```response title=Response
15030268859237645412
```

","1.1","Random Number"
"25.8.1.5101","arrayNormalizedGini",0,0,"","","System","Calculates the normalized Gini coefficient.","arrayNormalizedGini(predicted, label)","- `predicted` — The predicted value. [`Array(T)`](/sql-reference/data-types/array)
- `label` — The actual value. [`Array(T)`](/sql-reference/data-types/array)
","A tuple containing the Gini coefficients of the predicted values, the Gini coefficient of the normalized values, and the normalized Gini coefficient (= the ratio of the former two Gini coefficients) [`Tuple(Float64, Float64, Float64)`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT arrayNormalizedGini([0.9, 0.3, 0.8, 0.7],[6, 1, 0, 2]);
```

```response title=Response
(0.18055555555555558, 0.2638888888888889, 0.6842105263157896)
```

","25.1","Arrays"
"25.8.1.5101","rowNumberInAllBlocks",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiSearchFirstIndexCaseInsensitive",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONExtractFloat",0,0,"","","System","","","","","","",""
"25.8.1.5101","tuple",0,0,"","","System","
Returns a tuple by grouping input arguments.

For columns C1, C2, ... with the types T1, T2, ..., it returns a named Tuple(C1 T1, C2 T2, ...) type tuple containing these columns if their names are unique and can be treated as unquoted identifiers, otherwise a Tuple(T1, T2, ...) is returned. There is no cost to execute the function.
Tuples are normally used as intermediate values for an argument of IN operators, or for creating a list of formal parameters of lambda functions. Tuples can't be written to a table.

The function implements the operator `(x, y, ...)`.
","","","","**typical**

```sql title=Query
SELECT tuple(1, 2)
```

```response title=Response
(1,2)
```

","","Tuple"
"25.8.1.5101","atanh",0,0,"","","System","
Returns the inverse hyperbolic tangent.
","atanh(x)","- `x` — Hyperbolic tangent of angle. Values from the interval: -1 < x < 1. `(U)Int*`, `Float*` or `Decimal*`. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns the angle, in radians. Values from the interval: -∞ < atanh(x) < +∞ [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT atanh(0)
```

```response title=Response
0
```

","20.12","Mathematical"
"25.8.1.5101","kql_array_sort_desc",0,0,"","","System","","","","","","",""
"25.8.1.5101","bitmapTransform",0,0,"","","System","
Changes up to N bits in a bitmap by swapping specific bit values in `from_array` with corresponding ones in `to_array`.
    ","bitmapTransform(bitmap, from_array, to_array)","- `bitmap` — Bitmap object. [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction). - `from_array` — Array of original set bits to be replaced. [`Array(T)`](/sql-reference/data-types/array). - `to_array` — Array of new set bits to replace with. [`Array(T)`](/sql-reference/data-types/array). ","Returns a bitmap with elements transformed according to the given mapping [`AggregateFunction(groupBitmap, T)`](/sql-reference/data-types/aggregatefunction)","**Usage example**

```sql title=Query
SELECT bitmapToArray(bitmapTransform(bitmapBuild([1, 2, 3, 4, 5]), [2, 4], [20, 40])) AS res;
```

```response title=Response
┌─res───────────────┐
│ [1, 3, 5, 20, 40] │
└───────────────────┘
```

","20.1","Bitmap"
"25.8.1.5101","cutIPv6",0,0,"","","System","","","","","","",""
"25.8.1.5101","revision",0,1,"","","System","","","","","","",""
"25.8.1.5101","arrayShuffle",0,1,"","","System","
Returns an array of the same size as the original array containing the elements in shuffled order.
Elements are reordered in such a way that each possible permutation of those elements has equal probability of appearance.

:::note
This function will not materialize constants.
:::
    ","arrayShuffle(arr [, seed])","- `arr` — The array to shuffle. [`Array(T)`](/sql-reference/data-types/array)
- `seed (optional)` — Optional. The seed to be used with random number generation. If not provided a random one is used. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Array with elements shuffled [`Array(T)`](/sql-reference/data-types/array)","**Example without seed (unstable results)**

```sql title=Query
SELECT arrayShuffle([1, 2, 3, 4]);
```

```response title=Response
[1,4,2,3]
```

**Example without seed (stable results)**

```sql title=Query
SELECT arrayShuffle([1, 2, 3, 4], 41);
```

```response title=Response
[3,2,1,4]
```

","23.2","Arrays"
"25.8.1.5101","generateRandomStructure",0,0,"","","System","
Generates a random table structure.
This function takes 2 optional constant arguments:
the number of columns in the result structure (random by default) and random seed (random by default)
The maximum number of columns is 128.
The function returns a value of type String.
","","","","**random**

```sql title=Query
SELECT generateRandomStructure()
```

```response title=Response
c1 UInt32, c2 FixedString(25)
```

**with specified number of columns**

```sql title=Query
SELECT generateRandomStructure(3)
```

```response title=Response
c1 String, c2 Array(Int32), c3 LowCardinality(String)
```

**with specified seed**

```sql title=Query
SELECT generateRandomStructure(1, 42)
```

```response title=Response
c1 UInt128
```

","","Random Number"
"25.8.1.5101","isNullable",0,0,"","","System","
Checks whether the argument's data type is `Nullable` (i.e it allows `NULL` values).
    ","isNullable(x)","- `x` — A value of any data type. [`Any`](/sql-reference/data-types)
","Returns `1` if `x` is of a `Nullable` data type, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
CREATE TABLE tab (
    ordinary_col UInt32,
    nullable_col Nullable(UInt32)
)
ENGINE = MergeTree
ORDER BY tuple();
INSERT INTO tab (ordinary_col, nullable_col) VALUES (1,1), (2, 2), (3,3);
SELECT isNullable(ordinary_col), isNullable(nullable_col) FROM tab;
```

```response title=Response
┌───isNullable(ordinary_col)──┬───isNullable(nullable_col)──┐
│                           0 │                           1 │
│                           0 │                           1 │
│                           0 │                           1 │
└─────────────────────────────┴─────────────────────────────┘
```

","22.7","Null"
"25.8.1.5101","regexpExtract",0,0,"","","System","Extracts the first string in haystack that matches the regexp pattern and corresponds to the regex group index.","","","","","","String Search"
"25.8.1.5101","sqidEncode",0,0,"","","System","
Transforms numbers into a [Sqid](https://sqids.org/) which is a Youtube-like ID string.","sqidEncode(number1, ...)","- `number1, ...` — Arbitrarily many numbers. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint)
","A hash id [`String`](/sql-reference/data-types/string)","**simple**

```sql title=Query
SELECT sqidEncode(1, 2, 3, 4, 5);
```

```response title=Response
┌─sqidEncode(1, 2, 3, 4, 5)─┐
│ gXHfJ1C6dN                │
└───────────────────────────┘
```

","","Encoding"
"25.8.1.5101","fromUnixTimestampInJodaSyntax",0,0,"","","System","
This function converts a Unix timestamp to a calendar date and a time of a day.

It can be called in two ways:

When given a single argument of type [`Integer`](../data-types/int-uint.md), it returns a value of type [`DateTime`](../data-types/datetime.md), i.e. behaves like [`toDateTime`](../../sql-reference/functions/type-conversion-functions.md#todatetime).

When given two or three arguments where the first argument is a value of type [`Integer`](../data-types/int-uint.md), [`Date`](../data-types/date.md), [`Date32`](../data-types/date32.md), [`DateTime`](../data-types/datetime.md) or [`DateTime64`](../data-types/datetime64.md), the second argument is a constant format string and the third argument is an optional constant time zone string, the function returns a value of type [`String`](../data-types/string.md), i.e. it behaves like [`formatDateTimeInJodaSyntax`](#formatDateTimeInJodaSyntax). In this case, [Joda datetime format style](https://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html) is used.
    ","fromUnixTimestampInJodaSyntax(timestamp)
fromUnixTimestampInJodaSyntax(timestamp, format[, timezone])","- `timestamp` — Unix timestamp or date/time value. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `format` — Optional. Constant format string using Joda syntax for output formatting. [`String`](/sql-reference/data-types/string)
- `timezone` — Optional. Constant time zone string. [`String`](/sql-reference/data-types/string)
","Returns a date with time when called with one argument, or a String when called with two or three arguments.} [`DateTime`](/sql-reference/data-types/datetime) or [`String`](/sql-reference/data-types/string)","**Convert Unix timestamp with Joda format**

```sql title=Query
SELECT fromUnixTimestampInJodaSyntax(1234334543, 'yyyy-MM-dd HH:mm:ss', 'UTC') AS DateTime
```

```response title=Response
┌─DateTime────────────┐
│ 2009-02-11 06:42:23 │
└─────────────────────┘
```

","23.1","Dates and Times"
"25.8.1.5101","arrayFold",0,0,"","","System","Applies a lambda function to one or more equally-sized arrays and collects the result in an accumulator.","arrayFold(λ(acc, x1 [, x2, x3, ... xN]), arr1 [, arr2, arr3, ... arrN], acc)","- `λ(x, x1 [, x2, x3, ... xN])` — A lambda function `λ(acc, x1 [, x2, x3, ... xN]) → F(acc, x1 [, x2, x3, ... xN])` where `F` is an operation applied to `acc` and array values from `x` with the result of `acc` re-used. [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `arr1 [, arr2, arr3, ... arrN]` — N arrays over which to operate. [`Array(T)`](/sql-reference/data-types/array)
- `acc` — Accumulator value with the same type as the return type of the Lambda function. ","Returns the final `acc` value.","**Usage example**

```sql title=Query
SELECT arrayFold(acc,x -> acc + x*2, [1, 2, 3, 4], 3::Int64) AS res;
```

```response title=Response
23
```

**Fibonacci sequence**

```sql title=Query
SELECT arrayFold(acc, x -> (acc.2, acc.2 + acc.1),range(number),(1::Int64, 0::Int64)).1 AS fibonacci FROM numbers(1,10);
```

```response title=Response
┌─fibonacci─┐
│         0 │
│         1 │
│         1 │
│         2 │
│         3 │
│         5 │
│         8 │
│        13 │
│        21 │
│        34 │
└───────────┘
```

**Example using multiple arrays**

```sql title=Query
SELECT arrayFold(
(acc, x, y) -> acc + (x * y),
[1, 2, 3, 4],
[10, 20, 30, 40],
0::Int64
) AS res;
```

```response title=Response
300
```

","23.10","Arrays"
"25.8.1.5101","arrayMin",0,0,"","","System","
Returns the minimum element in the source array.

If a lambda function `func` is specified, returns the minimum element of the lambda results.
    ","arrayMin([func(x[, y1, ..., yN])], source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — Optional. A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `cond1_arr, ...` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns the minimum element in the source array, or the minimum element of the lambda results if provided.","**Basic example**

```sql title=Query
SELECT arrayMin([5, 3, 2, 7]);
```

```response title=Response
2
```

**Usage with lambda function**

```sql title=Query
SELECT arrayMin(x, y -> x/y, [4, 8, 12, 16], [1, 2, 1, 2]);
```

```response title=Response
4
```

","21.1","Arrays"
"25.8.1.5101","basename",0,0,"","","System","","","","","","",""
"25.8.1.5101","toISOWeek",0,0,"","","System","","","","","","",""
"25.8.1.5101","radians",0,1,"","","System","
Converts degrees to radians.
","radians(x)","- `x` — Input in degrees. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns value in radians [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT radians(180)
```

```response title=Response
3.141592653589793
```

","22.2","Mathematical"
"25.8.1.5101","toBool",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt32OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","accurateCast",0,0,"","","System","","","","","","",""
"25.8.1.5101","mapFilter",0,0,"","","System","The same as arrayFilter.","","","","**mapFilter**

```sql title=Query
SELECT mapFilter((k, v) -> v > 1, map('k1', 1, 'k2', 2))
```

```response title=Response

```

","22.3","Map"
"25.8.1.5101","arrayCompact",0,0,"","","System","Removes consecutive duplicate elements from an array, including `null` values. The order of values in the resulting array is determined by the order in the source array.","arrayCompact(arr)","- `arr` — An array to remove duplicates from. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array without duplicate values [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayCompact([1, 1, nan, nan, 2, 3, 3, 3]);
```

```response title=Response
[1,nan,2,3]
```

","20.1","Arrays"
"25.8.1.5101","kql_array_sort_asc",0,0,"","","System","","","","","","",""
"25.8.1.5101","h3ToParent",0,0,"","","System","","","","","","",""
"25.8.1.5101","makeDateTime",0,1,"","","System","
Creates a `DateTime` from year, month, day, hour, minute, and second, with optional timezone.
    ","makeDateTime(year, month, day, hour, minute, second[, timezone])","- `year` — Year number. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `month` — Month number (1-12). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `day` — Day of the month (1-31). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `hour` — Hour (0-23). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `minute` — Minute (0-59). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `second` — Second (0-59). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `timezone` — Timezone name. [`String`](/sql-reference/data-types/string)
","Returns a `DateTime` value constructed from the provided arguments [`DateTime`](/sql-reference/data-types/datetime)","**DateTime from year, month, day, hour, minute, second**

```sql title=Query
SELECT makeDateTime(2023, 2, 28, 17, 12, 33) AS DateTime;
```

```response title=Response
┌────────────DateTime─┐
│ 2023-02-28 17:12:33 │
└─────────────────────┘
```

","22.6","Dates and Times"
"25.8.1.5101","getSizeOfEnumType",0,0,"","","System","","","","","","",""
"25.8.1.5101","encodeURLFormComponent",0,0,"","","System","","","","","","",""
"25.8.1.5101","toIntervalMicrosecond",0,0,"","","System","","","","","","",""
"25.8.1.5101","L1Normalize",0,0,"","","System","
Calculates the unit vector of a given vector (the values of the tuple are the coordinates) in `L1` space ([taxicab geometry](https://en.wikipedia.org/wiki/Taxicab_geometry)).
    ","L1Normalize(tuple)","- `tuple` — A tuple of numeric values. [`Tuple(T)`](/sql-reference/data-types/tuple)
","Returns the unit vector. [`Tuple(Float64)`](/sql-reference/data-types/tuple)","**Basic usage**

```sql title=Query
SELECT L1Normalize((1, 2))
```

```response title=Response
┌─L1Normalize((1, 2))─────────────────────┐
│ (0.3333333333333333,0.6666666666666666) │
└─────────────────────────────────────────┘
```

","21.11","Distance"
"25.8.1.5101","toInterval",0,0,"","","System","Creates an interval from a value and a unit.","","","","","","Type Conversion"
"25.8.1.5101","toStartOfQuarter",0,0,"","","System","
Rounds down a date or date with time to the first day of the quarter. The first day of the quarter is either 1 January, 1 April, 1 July, or 1 October.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfQuarter(value)","- `value` — The date or date with time to round down to the first day of the quarter. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the first day of the quarter for the given date or date with time. [`Date`](/sql-reference/data-types/date)","**Round down to the first day of the quarter**

```sql title=Query
SELECT toStartOfQuarter(toDateTime('2023-04-21 10:20:30'))
```

```response title=Response
┌─toStartOfQuarter(toDateTime('2023-04-21 10:20:30'))─┐
│                                          2023-04-01 │
└─────────────────────────────────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","arrayReverse",0,0,"","","System","
Reverses the order of elements of a given array.

:::note
Function `reverse(arr)` performs the same functionality but works on other data-types
in addition to Arrays.
:::
","arrayReverse(arr)","- `arr` — The array to reverse. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array of the same size as the original array containing the elements in reverse order [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayReverse([1, 2, 3])
```

```response title=Response
[3,2,1]
```

","1.1","Arrays"
"25.8.1.5101","icebergTruncate",0,0,"","","System","Implements logic of iceberg truncate transform: https://iceberg.apache.org/spec/#truncate-transform-details.","icebergTruncate(N, value)","- `value` — The value to transform. [`String`](/sql-reference/data-types/string) or [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Decimal`](/sql-reference/data-types/decimal)
","The same type as the argument","**Example**

```sql title=Query
SELECT icebergTruncate(3, 'iceberg')
```

```response title=Response
ice
```

","25.3","Other"
"25.8.1.5101","toDecimal64",0,0,"","","System","","","","","","",""
"25.8.1.5101","now64",0,1,"","","System","
Returns the current date and time with sub-second precision at the moment of query analysis. The function is a constant expression.
    ","now64([scale], [timezone])","- `scale` — Optional. Tick size (precision): 10^-precision seconds. Valid range: [0 : 9]. Typically, are used - 3 (default) (milliseconds), 6 (microseconds), 9 (nanoseconds). [`UInt8`](/sql-reference/data-types/int-uint)
- `timezone` — Optional. Timezone name for the returned value. [`String`](/sql-reference/data-types/string)
","Returns current date and time with sub-second precision. [`DateTime64`](/sql-reference/data-types/datetime64)","**Query with default and custom precision**

```sql title=Query
SELECT now64(), now64(9, 'Asia/Istanbul')
```

```response title=Response
┌─────────────────now64()─┬─────now64(9, 'Asia/Istanbul')─┐
│ 2022-08-21 19:34:26.196 │ 2022-08-21 22:34:26.196542766 │
└─────────────────────────┴───────────────────────────────┘
```

","20.1","Dates and Times"
"25.8.1.5101","tupleNames",0,0,"","","System","
Converts a tuple into an array of column names. For a tuple in the form `Tuple(a T, b T, ...)`, it returns an array of strings representing the named columns of the tuple. If the tuple elements do not have explicit names, their indices will be used as the column names instead.
","","","","**typical**

```sql title=Query
SELECT tupleNames(tuple(1 as a, 2 as b))
```

```response title=Response
['a','b']
```

","","Tuple"
"25.8.1.5101","URLHash",0,0,"","","System","
A fast, decent-quality non-cryptographic hash function for a string obtained from a URL using some type of normalization.

This hash function has two modes:

| Mode             | Description                                                                                                                                                                                 |
|------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
|`URLHash(url)`    | Calculates a hash from a string without one of the trailing symbols `/`,`?` or `#` at the end, if present.                                                                                  |
|`URLHash(url, N)` | Calculates a hash from a string up to the N level in the URL hierarchy, without one of the trailing symbols `/`,`?` or `#` at the end, if present. Levels are the same as in `URLHierarchy`.|
","URLHash(url[, N])","- `url` — URL string to hash. [`String`](/sql-reference/data-types/string)
- `N` — Optional. Level in the URL hierarchy. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Returns the computed hash value of `url`. [`UInt64`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT URLHash('https://www.clickhouse.com')
```

```response title=Response
┌─URLHash('htt⋯house.com')─┐
│     13614512636072854701 │
└──────────────────────────┘
```

**Hash of url with specified level**

```sql title=Query
SELECT URLHash('https://www.clickhouse.com/docs', 0);
SELECT URLHash('https://www.clickhouse.com/docs', 1);
```

```response title=Response
-- hash of https://www.clickhouse.com
┌─URLHash('htt⋯m/docs', 0)─┐
│     13614512636072854701 │
└──────────────────────────┘
-- hash of https://www.clickhouse.com/docs
┌─URLHash('htt⋯m/docs', 1)─┐
│     13167253331440520598 │
└──────────────────────────┘
```

","1.1","Hash"
"25.8.1.5101","topLevelDomainRFC",0,0,"","","System","Similar to topLevelDomain, but conforms to RFC 3986.","","","","","","URL"
"25.8.1.5101","bitSlice",0,0,"","","System","Returns a substring starting with the bit from the 'offset' index that is 'length' bits long.","bitSlice(s, offset[, length])","- `s` — The String or Fixed String to slice. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `offset` — 
Returns the starting bit position (1-based indexing).
- Positive values: count from the beginning of the string.
- Negative values: count from the end of the string.

         [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
- `length` — 
Optional. The number of bits to extract.
- Positive values: extract `length` bits.
- Negative values: extract from the offset to `(string_length - |length|)`.
- Omitted: extract from offset to end of string.
- If length is not a multiple of 8, the result is padded with zeros on the right.
         [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns a string containing the extracted bits, represented as a binary sequence. The result is always padded to byte boundaries (multiples of 8 bits) [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT bin('Hello'), bin(bitSlice('Hello', 1, 8));
SELECT bin('Hello'), bin(bitSlice('Hello', 1, 2));
SELECT bin('Hello'), bin(bitSlice('Hello', 1, 9));
SELECT bin('Hello'), bin(bitSlice('Hello', -4, 8));
```

```response title=Response
┌─bin('Hello')─────────────────────────────┬─bin(bitSlice('Hello', 1, 8))─┐
│ 0100100001100101011011000110110001101111 │ 01001000                     │
└──────────────────────────────────────────┴──────────────────────────────┘
┌─bin('Hello')─────────────────────────────┬─bin(bitSlice('Hello', 1, 2))─┐
│ 0100100001100101011011000110110001101111 │ 01000000                     │
└──────────────────────────────────────────┴──────────────────────────────┘
┌─bin('Hello')─────────────────────────────┬─bin(bitSlice('Hello', 1, 9))─┐
│ 0100100001100101011011000110110001101111 │ 0100100000000000             │
└──────────────────────────────────────────┴──────────────────────────────┘
┌─bin('Hello')─────────────────────────────┬─bin(bitSlice('Hello', -4, 8))─┐
│ 0100100001100101011011000110110001101111 │ 11110000                      │
└──────────────────────────────────────────┴───────────────────────────────┘
```

","22.2","Bit"
"25.8.1.5101","firstSignificantSubdomainRFC",0,0,"","","System","Returns the ""first significant subdomain"" according to RFC 1034.","","","","","","URL"
"25.8.1.5101","shardNum",0,0,"","","System","","","","","","",""
"25.8.1.5101","parseDateTimeInJodaSyntaxOrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","startsWithUTF8",0,0,"","","System","
Checks if a string starts with the provided prefix.
Assumes that the string contains valid UTF-8 encoded text.
If this assumption is violated, no exception is thrown and the result is undefined.
","startsWithUTF8(str, prefix)","- `s` — String to check. [`String`](/sql-reference/data-types/string)
- `prefix` — Prefix to check for. [`String`](/sql-reference/data-types/string)
","Returns `1` if `s` starts with `prefix`, otherwise `0`. [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT startsWithUTF8('приставка', 'при')
```

```response title=Response
┌─startsWithUT⋯ка', 'при')─┐
│                        1 │
└──────────────────────────┘
```

","23.8","String"
"25.8.1.5101","portRFC",0,0,"","","System","Similar to `port`, but conforms to RFC 3986.","","","","","","URL"
"25.8.1.5101","nowInBlock64",0,0,"","","System","
Returns the current date and time at the moment of processing of each block of data in milliseconds. In contrast to the function [now64](#now64), it is not a constant expression, and the returned value will be different in different blocks for long-running queries.

It makes sense to use this function to generate the current time in long-running INSERT SELECT queries.
    ","nowInBlock([scale[, timezone]])","- `scale` — Optional. Tick size (precision): 10^-precision seconds. Valid range: [0 : 9]. Typically, are used - 3 (default) (milliseconds), 6 (microseconds), 9 (nanoseconds). [`UInt8`](/sql-reference/data-types/int-uint)
- `timezone` — Optional. Timezone name for the returned value. [`String`](/sql-reference/data-types/string)
","Returns the current date and time at the moment of processing of each block of data with sub-second precision. [`DateTime64`](/sql-reference/data-types/datetime64)","**Difference with the now64() function**

```sql title=Query
SELECT
    now64(),
    nowInBlock64(),
    sleep(1)
FROM numbers(3)
SETTINGS max_block_size = 1
FORMAT PrettyCompactMonoBlock
```

```response title=Response
┌─────────────────now64()─┬──────────nowInBlock64()─┬─sleep(1)─┐
│ 2025-07-29 17:07:29.526 │ 2025-07-29 17:07:29.534 │        0 │
│ 2025-07-29 17:07:29.526 │ 2025-07-29 17:07:30.535 │        0 │
│ 2025-07-29 17:07:29.526 │ 2025-07-29 17:07:31.535 │        0 │
└─────────────────────────┴─────────────────────────┴──────────┘
```

","25.8","Dates and Times"
"25.8.1.5101","readWKBLineString",0,0,"","","System","
    Parses a Well-Known Binary (WKB) representation of a LineString geometry and returns it in the internal ClickHouse format.
    ","readWKBLineString(wkt_string)","- `wkb_string` — The input WKB string representing a LineString geometry. ","The function returns a ClickHouse internal representation of the linestring geometry.","**first call**

```sql title=Query
SELECT readWKBLineString(unhex('010200000004000000000000000000f03f000000000000f03f0000000000000040000000000000004000000000000008400000000000000840000000000000f03f000000000000f03f'));
```

```response title=Response
┌─readWKBLineString(unhex'0102000000040000000000...'))─┐
    │ [(1,1),(2,2),(3,3),(1,1)]                            │
    └──────────────────────────────────────────────────────┘
```

","25.5","Geo"
"25.8.1.5101","bitTest",0,0,"","","System","Takes any number and converts it into [binary form](https://en.wikipedia.org/wiki/Binary_number), then returns the value of the bit at a specified position. Counting is done right-to-left, starting at 0.","bitTest(a, i)","- `a` — Number to convert. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
- `i` — Position of the bit to return. [`(U)Int8/16/32/64`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the value of the bit at position `i` in the binary representation of `a` [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT bin(2), bitTest(2, 1);
```

```response title=Response
┌─bin(2)───┬─bitTest(2, 1)─┐
│ 00000010 │             1 │
└──────────┴───────────────┘
```

","1.1","Bit"
"25.8.1.5101","countSubstringsCaseInsensitive",0,0,"","","System","","","","","","",""
"25.8.1.5101","topLevelDomain",0,0,"","","System","
Extracts the the top-level domain from a URL.

Returns an empty string if the argument cannot be parsed as a URL or does not contain a top-level domain.
        ","","","","**topLevelDomain**

```sql title=Query
SELECT topLevelDomain('svn+ssh://www.some.svn-hosting.com:80/repo/trunk')
```

```response title=Response

```

","","URL"
"25.8.1.5101","decodeURLComponent",0,0,"","","System","","","","","","",""
"25.8.1.5101","base32Decode",0,0,"","","System","
Decodes a [Base32](https://datatracker.ietf.org/doc/html/rfc4648#section-6) (RFC 4648) string.
If the string is not valid Base32-encoded, an exception is thrown.
","base32Decode(encoded)","- `encoded` — String column or constant. [`String`](/sql-reference/data-types/string)
","Returns a string containing the decoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT base32Decode('IVXGG33EMVSA====');
```

```response title=Response
┌─base32Decode('IVXGG33EMVSA====')─┐
│ Encoded                          │
└──────────────────────────────────┘
```

","25.6","String"
"25.8.1.5101","timezoneOf",0,0,"","","System","
Returns the timezone name of a [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) value.
    ","timeZoneOf(datetime)","- `datetime` — A value of type. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
- `timezone` — Optional. Timezone name to convert the `datetime` value's timezone to. [`String`](/sql-reference/data-types/string)
","Returns the timezone name for `datetime` [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT timezoneOf(now());
```

```response title=Response
┌─timezoneOf(now())─┐
│ Europe/Amsterdam  │
└───────────────────┘
```

","21.4","Dates and Times"
"25.8.1.5101","tupleDivideByNumber",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt16OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","toString",0,0,"","","System","","","","","","",""
"25.8.1.5101","emptyArrayDateTime",0,0,"","","System","Returns an empty DateTime array","emptyArrayDateTime()","","An empty DateTime array. [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT emptyArrayDateTime
```

```response title=Response
[]
```

","1.1","Arrays"
"25.8.1.5101","indexOfAssumeSorted",0,0,"","","System","
Returns the index of the first element with value 'x' (starting from `1`) if it is in the array.
If the array does not contain the searched-for value, the function returns `0`.

:::note
Unlike the `indexOf` function, this function assumes that the array is sorted in
ascending order. If the array is not sorted, results are undefined.
:::
    ","indexOfAssumeSorted(arr, x)","- `arr` — A sorted array to search. [`Array(T)`](/sql-reference/data-types/array)
- `x` — Value of the first matching element in sorted `arr` for which to return an index. [`UInt64`](/sql-reference/data-types/int-uint)
","Returns the index (numbered from one) of the first `x` in `arr` if it exists. Otherwise, returns `0`. [`UInt64`](/sql-reference/data-types/int-uint)","**Basic example**

```sql title=Query
SELECT indexOfAssumeSorted([1, 3, 3, 3, 4, 4, 5], 4)
```

```response title=Response
5
```

","24.12","Arrays"
"25.8.1.5101","xor",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONExtractInt",0,0,"","","System","","","","","","",""
"25.8.1.5101","subtractMonths",0,0,"","","System","
Subtracts a specified number of months from a date, a date with time or a string-encoded date or date with time.
    ","subtractMonths(datetime, num)","- `datetime` — Date or date with time to subtract specified number of months from. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of months to subtract. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` minus `num` months [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Subtract months from different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    subtractMonths(date, 1) AS subtract_months_with_date,
    subtractMonths(date_time, 1) AS subtract_months_with_date_time,
    subtractMonths(date_time_string, 1) AS subtract_months_with_date_time_string
```

```response title=Response
┌─subtract_months_with_date─┬─subtract_months_with_date_time─┬─subtract_months_with_date_time_string─┐
│                2023-12-01 │            2023-12-01 00:00:00 │               2023-12-01 00:00:00.000 │
└───────────────────────────┴────────────────────────────────┴───────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateSub('1998-06-16'::Date, INTERVAL 10 month)
```

```response title=Response
┌─minus(CAST('⋯lMonth(10))─┐
│               1997-08-16 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","generateSerialID",0,0,"","","System","
Generates and returns sequential numbers starting from the previous counter value.
This function takes a constant string argument - a series identifier.

The server should be configured with Keeper.
The series are stored in Keeper nodes under the path, which can be configured in `series_keeper_path` in the server configuration.
","generateSerialID('series_identifier')","- `series_identifier` — Series identifier, (a short constant String) ","Returns sequential numbers starting from the previous counter value.","**first call**

```sql title=Query
SELECT generateSerialID('id1')
```

```response title=Response
┌─generateSerialID('id1')──┐
│                        1 │
└──────────────────────────┘
```

**second call**

```sql title=Query
SELECT generateSerialID('id1')
```

```response title=Response
┌─generateSerialID('id1')──┐
│                        2 │
└──────────────────────────┘
```

**column call**

```sql title=Query
SELECT *, generateSerialID('id1') FROM test_table
```

```response title=Response
┌─CounterID─┬─UserID─┬─ver─┬─generateSerialID('id1')──┐
│         1 │      3 │   3 │                        3 │
│         1 │      1 │   1 │                        4 │
│         1 │      2 │   2 │                        5 │
│         1 │      5 │   5 │                        6 │
│         1 │      4 │   4 │                        7 │
└───────────┴────────┴─────┴──────────────────────────┘
```

","","Other"
"25.8.1.5101","toUInt256",0,0,"","","System","","","","","","",""
"25.8.1.5101","arraySimilarity",0,0,"","","System","
Calculates the similarity of two arrays from `0` to `1` based on weighted Levenshtein distance.
","arraySimilarity(from, to, from_weights, to_weights)","- `from` — first array [`Array(T)`](/sql-reference/data-types/array)
- `to` — second array [`Array(T)`](/sql-reference/data-types/array)
- `from_weights` — weights for the first array. [`Array((U)Int*|Float*)`](/sql-reference/data-types/array)
- `to_weights` — weights for the second array. [`Array((U)Int*|Float*)`](/sql-reference/data-types/array)
","Returns the similarity between `0` and `1` of the two arrays based on the weighted Levenshtein distance [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT arraySimilarity(['A', 'B', 'C'], ['A', 'K', 'L'], [1.0, 2, 3], [3.0, 4, 5]);
```

```response title=Response
0.2222222222222222
```

","25.4","Arrays"
"25.8.1.5101","arrayEnumerateUniqRanked",0,0,"","","System","
Returns an array (or multi-dimensional array) with the same dimensions as the source array,
indicating for each element what it's position is among elements with the same value.
It allows for enumeration of a multi-dimensional array with the ability to specify how deep to look inside the array.
","arrayEnumerateUniqRanked(clear_depth, arr, max_array_depth)","- `clear_depth` — Enumerate elements at the specified level separately. Positive integer less than or equal to `max_arr_depth`. [`UInt*`](/sql-reference/data-types/int-uint)
- `arr` — N-dimensional array to enumerate. [`Array(T)`](/sql-reference/data-types/array)
- `max_array_depth` — The maximum effective depth. Positive integer less than or equal to the depth of `arr`. [`UInt*`](/sql-reference/data-types/int-uint)
","Returns an N-dimensional array the same size as `arr` with each element showing the position of that element in relation to other elements of the same value. [`Array(T)`](/sql-reference/data-types/array)","**Example 1**

```sql title=Query
-- With clear_depth=1 and max_array_depth=1, the result of arrayEnumerateUniqRanked
-- is identical to that which arrayEnumerateUniq would give for the same array.

SELECT arrayEnumerateUniqRanked(1, [1, 2, 1], 1);
```

```response title=Response
[1, 1, 2]
```

**Example 2**

```sql title=Query
-- with clear_depth=1 and max_array_depth=1, the result of arrayEnumerateUniqRanked
-- is identical to that which arrayEnumerateUniqwould give for the same array.

SELECT arrayEnumerateUniqRanked(1, [[1, 2, 3], [2, 2, 1], [3]], 2);"", ""[[1, 1, 1], [2, 3, 2], [2]]
```

```response title=Response
[1, 1, 2]
```

**Example 3**

```sql title=Query
-- In this example, arrayEnumerateUniqRanked is used to obtain an array indicating,
-- for each element of the multidimensional array, what its position is among elements
-- of the same value. For the first row of the passed array, [1, 2, 3], the corresponding
-- result is [1, 1, 1], indicating that this is the first time 1, 2 and 3 are encountered.
-- For the second row of the provided array, [2, 2, 1], the corresponding result is [2, 3, 3],
-- indicating that 2 is encountered for a second and third time, and 1 is encountered
-- for the second time. Likewise, for the third row of the provided array [3] the
-- corresponding result is [2] indicating that 3 is encountered for the second time.

SELECT arrayEnumerateUniqRanked(1, [[1, 2, 3], [2, 2, 1], [3]], 2);
```

```response title=Response
[[1, 1, 1], [2, 3, 2], [2]]
```

**Example 4**

```sql title=Query
-- Changing clear_depth=2, results in elements being enumerated separately for each row.
SELECT arrayEnumerateUniqRanked(2,[[1, 2, 3],[2, 2, 1],[3]], 2);
```

```response title=Response
[[1, 1, 1], [1, 2, 1], [1]]
```

","20.1","Arrays"
"25.8.1.5101","or",0,0,"","","System","","","","","","",""
"25.8.1.5101","JSONSharedDataPaths",0,0,"","","System","
Returns the list of paths that are stored in shared data structure in JSON column.
","JSONDynamicPaths(json)","- `json` — JSON column ","","**Example**

```sql title=Query
CREATE TABLE test (json JSON(max_dynamic_paths=1)) ENGINE = Memory;
INSERT INTO test FORMAT JSONEachRow {""json"" : {""a"" : 42}}, {""json"" : {""b"" : ""Hello""}}, {""json"" : {""a"" : [1, 2, 3], ""c"" : ""2020-01-01""}}
SELECT json, JSONSharedDataPaths(json) FROM test;
```

```response title=Response
┌─json─────────────────────────────────┬─JSONSharedDataPaths(json)─┐
│ {""a"":""42""}                           │ []                        │
│ {""b"":""Hello""}                        │ ['b']                     │
│ {""a"":[""1"",""2"",""3""],""c"":""2020-01-01""} │ ['c']                     │
└──────────────────────────────────────┴───────────────────────────┘
```

","","JSON"
"25.8.1.5101","arrayExists",0,0,"","","System","
Returns `1` if there is at least one element in a source array for which `func(x[, y1, y2, ... yN])` returns true. Otherwise, it returns `0`.
","arrayExists(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns `1` if the lambda function returns true for at least one element, `0` otherwise [`UInt8`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT arrayExists(x, y -> x=y, [1, 2, 3], [0, 0, 0])
```

```response title=Response
0
```

","1.1","Arrays"
"25.8.1.5101","parseDateTimeInJodaSyntaxOrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","multiMatchAllIndices",0,0,"","","System","","","","","","",""
"25.8.1.5101","hasThreadFuzzer",0,0,"","","System","","","","","","",""
"25.8.1.5101","stringBytesEntropy",0,0,"","","System","
Calculates Shannon's entropy of byte distribution in a string.
","stringBytesEntropy(s)","- `s` — The string to analyze. [`String`](/sql-reference/data-types/string)
","Returns Shannon's entropy of byte distribution in the string. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT stringBytesEntropy('Hello, world!')
```

```response title=Response
┌─stringBytesEntropy('Hello, world!')─┐
│                         3.07049960  │
└─────────────────────────────────────┘
```

","25.6","String"
"25.8.1.5101","arrayPushFront",0,0,"","","System","Adds one element to the beginning of the array.","arrayPushFront(arr, x)","- `arr` — The array for which to add value `x` to the end of. [`Array(T)`](/sql-reference/data-types/array). - `x` — 
- Single value to add to the start of the array. [`Array(T)`](/sql-reference/data-types/array).

:::note
- Only numbers can be added to an array with numbers, and only strings can be added to an array of strings.
- When adding numbers, ClickHouse automatically sets the type of `x` for the data type of the array.
- Can be `NULL`. The function adds a `NULL` element to an array, and the type of array elements converts to `Nullable`.

For more information about the types of data in ClickHouse, see [Data types](/sql-reference/data-types).
:::
     ","Returns an array identical to `arr` but with an additional value `x` at the beginning of the array [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayPushFront(['b'], 'a') AS res;
```

```response title=Response
['a','b']
```

","1.1","Arrays"
"25.8.1.5101","addQuarters",0,0,"","","System","
Adds a specified number of quarters to a date, a date with time or a string-encoded date or date with time.
    ","addQuarters(datetime, num)","- `datetime` — Date or date with time to add specified number of quarters to. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of quarters to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` quarters [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Add quarters to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addQuarters(date, 1) AS add_quarters_with_date,
    addQuarters(date_time, 1) AS add_quarters_with_date_time,
    addQuarters(date_time_string, 1) AS add_quarters_with_date_time_string
```

```response title=Response
┌─add_quarters_with_date─┬─add_quarters_with_date_time─┬─add_quarters_with_date_time_string─┐
│             2024-04-01 │         2024-04-01 00:00:00 │            2024-04-01 00:00:00.000 │
└────────────────────────┴─────────────────────────────┴────────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 quarter)
```

```response title=Response
┌─plus(CAST('1⋯uarter(10))─┐
│               2000-12-16 │
└──────────────────────────┘
```

","20.1","Dates and Times"
"25.8.1.5101","multiply",0,0,"","","System","Calculates the product of two values `x` and `y`.","multiply(x, y)","- `x` — factor. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
- `y` — factor. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal`](/sql-reference/data-types/decimal)
","Returns the product of x and y","**Multiplying two numbers**

```sql title=Query
SELECT multiply(5,5)
```

```response title=Response
25
```

","1.1","Arithmetic"
"25.8.1.5101","ilike",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayJoin",0,0,"","","System","
The `arrayJoin` function takes a row that contains an array and unfolds it, generating multiple rows – one for each element in the array.
This is in contrast to Regular Functions in ClickHouse which map input values to output values within the same row,
and Aggregate Functions which take a group of rows and ""compress"" or ""reduce"" them into a single summary row
(or a single value within a summary row if used with `GROUP BY`).

All the values in the columns are simply copied, except the values in the column where this function is applied;
these are replaced with the corresponding array value.
","arrayJoin(arr)","- `arr` — An array to unfold. [`Array(T)`](/sql-reference/data-types/array)
","Returns a set of rows unfolded from `arr`.","**Basic usage**

```sql title=Query
SELECT arrayJoin([1, 2, 3] AS src) AS dst, 'Hello', src
```

```response title=Response
┌─dst─┬─\'Hello\'─┬─src─────┐
│   1 │ Hello     │ [1,2,3] │
│   2 │ Hello     │ [1,2,3] │
│   3 │ Hello     │ [1,2,3] │
└─────┴───────────┴─────────┘
```

**arrayJoin affects all sections of the query**

```sql title=Query
-- The arrayJoin function affects all sections of the query, including the WHERE section. Notice the result 2, even though the subquery returned 1 row.

SELECT sum(1) AS impressions
FROM
(
    SELECT ['Istanbul', 'Berlin', 'Bobruisk'] AS cities
)
WHERE arrayJoin(cities) IN ['Istanbul', 'Berlin'];
```

```response title=Response
┌─impressions─┐
│           2 │
└─────────────┘
```

**Using multiple arrayJoin functions**

```sql title=Query
- A query can use multiple arrayJoin functions. In this case, the transformation is performed multiple times and the rows are multiplied.

SELECT
    sum(1) AS impressions,
    arrayJoin(cities) AS city,
    arrayJoin(browsers) AS browser
FROM
(
    SELECT
        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,
        ['Firefox', 'Chrome', 'Chrome'] AS browsers
)
GROUP BY
    2,
    3
```

```response title=Response
┌─impressions─┬─city─────┬─browser─┐
│           2 │ Istanbul │ Chrome  │
│           1 │ Istanbul │ Firefox │
│           2 │ Berlin   │ Chrome  │
│           1 │ Berlin   │ Firefox │
│           2 │ Bobruisk │ Chrome  │
│           1 │ Bobruisk │ Firefox │
└─────────────┴──────────┴─────────┘
```

**Unexpected results due to optimizations**

```sql title=Query
-- Using multiple arrayJoin with the same expression may not produce the expected result due to optimizations.
-- For these cases, consider modifying the repeated array expression with extra operations that do not affect join result.
- e.g. arrayJoin(arraySort(arr)), arrayJoin(arrayConcat(arr, []))

SELECT
    arrayJoin(dice) as first_throw,
    /* arrayJoin(dice) as second_throw */ -- is technically correct, but will annihilate result set
    arrayJoin(arrayConcat(dice, [])) as second_throw -- intentionally changed expression to force re-evaluation
FROM (
    SELECT [1, 2, 3, 4, 5, 6] as dice
);
```

```response title=Response
┌─first_throw─┬─second_throw─┐
│           1 │            1 │
│           1 │            2 │
│           1 │            3 │
│           1 │            4 │
│           1 │            5 │
│           1 │            6 │
│           2 │            1 │
│           2 │            2 │
│           2 │            3 │
│           2 │            4 │
│           2 │            5 │
│           2 │            6 │
│           3 │            1 │
│           3 │            2 │
│           3 │            3 │
│           3 │            4 │
│           3 │            5 │
│           3 │            6 │
│           4 │            1 │
│           4 │            2 │
│           4 │            3 │
│           4 │            4 │
│           4 │            5 │
│           4 │            6 │
│           5 │            1 │
│           5 │            2 │
│           5 │            3 │
│           5 │            4 │
│           5 │            5 │
│           5 │            6 │
│           6 │            1 │
│           6 │            2 │
│           6 │            3 │
│           6 │            4 │
│           6 │            5 │
│           6 │            6 │
└─────────────┴──────────────┘
```

**Using the ARRAY JOIN syntax**

```sql title=Query
-- Note the ARRAY JOIN syntax in the `SELECT` query below, which provides broader possibilities.
-- ARRAY JOIN allows you to convert multiple arrays with the same number of elements at a time.

SELECT
    sum(1) AS impressions,
    city,
    browser
FROM
(
    SELECT
        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,
        ['Firefox', 'Chrome', 'Chrome'] AS browsers
)
ARRAY JOIN
    cities AS city,
    browsers AS browser
GROUP BY
    2,
    3
```

```response title=Response
┌─impressions─┬─city─────┬─browser─┐
│           1 │ Istanbul │ Firefox │
│           1 │ Berlin   │ Chrome  │
│           1 │ Bobruisk │ Chrome  │
└─────────────┴──────────┴─────────┘
```

**Using Tuple**

```sql title=Query
-- You can also use Tuple

SELECT
    sum(1) AS impressions,
    (arrayJoin(arrayZip(cities, browsers)) AS t).1 AS city,
    t.2 AS browser
FROM
(
    SELECT
        ['Istanbul', 'Berlin', 'Bobruisk'] AS cities,
        ['Firefox', 'Chrome', 'Chrome'] AS browsers
)
GROUP BY
    2,
    3
```

```response title=Response
┌─impressions─┬─city─────┬─browser─┐
│           1 │ Istanbul │ Firefox │
│           1 │ Berlin   │ Chrome  │
│           1 │ Bobruisk │ Chrome  │
└─────────────┴──────────┴─────────┘
```

","1.1","Arrays"
"25.8.1.5101","arrayMap",0,0,"","","System","
Returns an array obtained from the original arrays by applying a lambda function to each element.
","arrayMap(func, arr)","- `func` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `arr` — N arrays to process. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array from the lambda results [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayMap(x -> (x + 2), [1, 2, 3]) as res;
```

```response title=Response
[3, 4, 5]
```

**Creating a tuple of elements from different arrays**

```sql title=Query
SELECT arrayMap((x, y) -> (x, y), [1, 2, 3], [4, 5, 6]) AS res
```

```response title=Response
[(1, 4),(2, 5),(3, 6)]
```

","1.1","Arrays"
"25.8.1.5101","multiSearchFirstIndexUTF8",0,0,"","","System","","","","","","",""
"25.8.1.5101","moduloOrNull",0,0,"","","System","
Calculates the remainder when dividing `a` by `b`. Similar to function `modulo` except that `moduloOrNull` will return NULL
if the right argument is 0.
    ","moduloOrNull(x, y)","- `x` — The dividend. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
- `y` — The divisor (modulus). [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns the remainder of the division of `x` by `y`, or null when the divisor is zero.","**moduloOrNull by zero**

```sql title=Query
SELECT moduloOrNull(5, 0)
```

```response title=Response
\N
```

","25.5","Arithmetic"
"25.8.1.5101","parseDateTimeBestEffortUS",0,0,"","","System","","","","","","",""
"25.8.1.5101","mapPopulateSeries",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayFirstIndex",0,0,"","","System","
Returns the index of the first element in the source array for which `func(x[, y1, y2, ... yN])` returns true, otherwise it returns '0'.
","arrayFirstIndex(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda). - `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array). - `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array). ","Returns the index of the first element of the source array for which `func` is true, otherwise returns `0` [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT arrayFirstIndex(x, y -> x=y, ['a', 'b', 'c'], ['c', 'b', 'a'])
```

```response title=Response
2
```

**No match**

```sql title=Query
SELECT arrayFirstIndex(x, y -> x=y, ['a', 'b', 'c'], ['d', 'e', 'f'])
```

```response title=Response
0
```

","1.1","Arrays"
"25.8.1.5101","arrayPartialShuffle",0,1,"","","System","
Returns an array of the same size as the original array where elements in range `[1..limit]` are a random
subset of the original array. Remaining `(limit..n]` shall contain the elements not in `[1..limit]` range in undefined order.
Value of limit shall be in range `[1..n]`. Values outside of that range are equivalent to performing full `arrayShuffle`:

:::note
This function will not materialize constants.

The value of `limit` should be in the range `[1..N]`. Values outside of that range are equivalent to performing full [`arrayShuffle`](#arrayShuffle).
:::
    ","arrayPartialShuffle(arr [, limit[, seed]])","- `arr` — The array to shuffle. [`Array(T)`](/sql-reference/data-types/array)
- `seed` — Optional. The seed to be used with random number generation. If not provided, a random one is used. [`(U)Int*`](/sql-reference/data-types/int-uint)
- `limit` — Optional. The number to limit element swaps to, in the range `[1..N]`. [`(U)Int*`](/sql-reference/data-types/int-uint)
","Array with elements partially shuffled. [`Array(T)`](/sql-reference/data-types/array)","**no_limit1**

```sql title=Query
SELECT arrayPartialShuffle([1, 2, 3, 4], 0)
```

```response title=Response
[2, 4, 3, 1]
```

**no_limit2**

```sql title=Query
SELECT arrayPartialShuffle([1, 2, 3, 4])
```

```response title=Response
[4, 1, 3, 2]
```

**random_seed**

```sql title=Query
SELECT arrayPartialShuffle([1, 2, 3, 4], 2)
```

```response title=Response
[3, 4, 1, 2]
```

**explicit_seed**

```sql title=Query
SELECT arrayPartialShuffle([1, 2, 3, 4], 2, 41)
```

```response title=Response
[3, 2, 1, 4]
```

**materialize**

```sql title=Query
SELECT arrayPartialShuffle(materialize([1, 2, 3, 4]), 2, 42), arrayPartialShuffle([1, 2, 3], 2, 42) FROM numbers(10)
```

```response title=Response
┌─arrayPartial⋯4]), 2, 42)─┬─arrayPartial⋯ 3], 2, 42)─┐
│ [3,2,1,4]                │ [3,2,1]                  │
│ [3,2,1,4]                │ [3,2,1]                  │
│ [4,3,2,1]                │ [3,2,1]                  │
│ [1,4,3,2]                │ [3,2,1]                  │
│ [3,4,1,2]                │ [3,2,1]                  │
│ [1,2,3,4]                │ [3,2,1]                  │
│ [1,4,3,2]                │ [3,2,1]                  │
│ [1,4,3,2]                │ [3,2,1]                  │
│ [3,1,2,4]                │ [3,2,1]                  │
│ [1,3,2,4]                │ [3,2,1]                  │
└──────────────────────────┴──────────────────────────┘
```

","23.2","Arrays"
"25.8.1.5101","h3UnidirectionalEdgeIsValid",0,0,"","","System","","","","","","",""
"25.8.1.5101","serverTimezone",0,0,"","","System","
Returns the timezone of the server, i.e. the value of the [`timezone`](/operations/server-configuration-parameters/settings#timezone) setting.
If the function is executed in the context of a distributed table, then it generates a normal column with values relevant to each shard. Otherwise, it produces a constant value.
    ","serverTimeZone()","","Returns the server timezone as a [`String`](/sql-reference/data-types/string)","**Get server time zone**

```sql title=Query
SELECT serverTimeZone()
```

```response title=Response
┌─serverTimeZone()─┐
│ UTC              │
└──────────────────┘
```

","23.6","Dates and Times"
"25.8.1.5101","substringUTF8",0,0,"","","System","
Returns the substring of a string `s` which starts at the specified byte index `offset` for Unicode code points.
Byte counting starts from `1` with the following logic:
- If `offset` is `0`, an empty string is returned.
- If `offset` is negative, the substring starts `pos` characters from the end of the string, rather than from the beginning.

An optional argument `length` specifies the maximum number of bytes the returned substring may have.

:::note
This function assumes that the string contains valid UTF-8 encoded text.
If this assumption is violated, no exception is thrown and the result is undefined.
:::
","substringUTF8(s, offset[, length])","- `s` — The string to calculate a substring from. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring) or [`Enum`](/sql-reference/data-types/enum)
- `offset` — The starting position of the substring in `s`. [`Int`](/sql-reference/data-types/int-uint) or [`UInt`](/sql-reference/data-types/int-uint)
- `length` — The maximum length of the substring. Optional. [`Int`](/sql-reference/data-types/int-uint) or [`UInt`](/sql-reference/data-types/int-uint)
","Returns a substring of `s` with `length` many bytes, starting at index `offset`. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT 'Täglich grüßt das Murmeltier.' AS str, substringUTF8(str, 9), substringUTF8(str, 9, 5)
```

```response title=Response
Täglich grüßt das Murmeltier.    grüßt das Murmeltier.    grüßt
```

","1.1","String"
"25.8.1.5101","JSONMergePatch",0,0,"","","System","Returns the merged JSON object string, which is formed by merging multiple JSON objects.","","","","","","JSON"
"25.8.1.5101","arrayFirst",0,0,"","","System","
Returns the first element in the source array for which `func(x[, y1, y2, ... yN])` returns true, otherwise it returns a default value.
    ","arrayFirst(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [Lambda function](/sql-reference/functions/overview#arrow-operator-and-lambda). - `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array). - `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array). ","Returns the first element of the source array for which `λ` is true, otherwise returns the default value of `T`.","**Usage example**

```sql title=Query
SELECT arrayFirst(x, y -> x=y, ['a', 'b', 'c'], ['c', 'b', 'a'])
```

```response title=Response
b
```

**No match**

```sql title=Query
SELECT arrayFirst(x, y -> x=y, [0, 1, 2], [3, 3, 3]) AS res, toTypeName(res)
```

```response title=Response
0 UInt8
```

","1.1","Arrays"
"25.8.1.5101","toIntervalYear",0,0,"","","System","","","","","","",""
"25.8.1.5101","addInterval",0,0,"","","System","
Adds an interval to another interval or tuple of intervals.

Note: Intervals of the same type will be combined into a single interval. For instance if `toIntervalDay(1)` and `toIntervalDay(2)` are passed then the result will be `(3)` rather than `(1,1)`.
    ","addInterval(interval_1, interval_2)","- `interval_1` — First interval or tuple of intervals. [`Interval`](/sql-reference/data-types/int-uint) or [`Tuple(Interval)`](/sql-reference/data-types/tuple)
- `interval_2` — Second interval to be added. [`Interval`](/sql-reference/data-types/int-uint)
","Returns a tuple of intervals [`Tuple(Interval)`](/sql-reference/data-types/tuple)","**Add intervals**

```sql title=Query
SELECT addInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH);
SELECT addInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH);
SELECT addInterval(INTERVAL 2 DAY, INTERVAL 1 DAY)
```

```response title=Response
┌─addInterval(toIntervalDay(1), toIntervalMonth(1))─┐
│ (1,1)                                             │
└───────────────────────────────────────────────────┘
┌─addInterval((toIntervalDay(1), toIntervalYear(1)), toIntervalMonth(1))─┐
│ (1,1,1)                                                                │
└────────────────────────────────────────────────────────────────────────┘
┌─addInterval(toIntervalDay(2), toIntervalDay(1))─┐
│ (3)                                             │
└─────────────────────────────────────────────────┘
```

","22.11","Dates and Times"
"25.8.1.5101","polygonAreaCartesian",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayUniq",0,0,"","","System","
For a single argument passed, counts the number of different elements in the array.
For multiple arguments passed, it counts the number of different **tuples** made of elements at matching positions across multiple arrays.

For example `SELECT arrayUniq([1,2], [3,4], [5,6])` will form the following tuples:
* Position 1: (1,3,5)
* Position 2: (2,4,6)

It will then count the number of unique tuples. In this case `2`.

All arrays passed must have the same length.

:::tip
If you want to get a list of unique items in an array, you can use `arrayReduce('groupUniqArray', arr)`.
:::
","arrayUniq(arr1[, arr2, ..., arrN])","- `arr1` — Array for which to count the number of unique elements. [`Array(T)`](/sql-reference/data-types/array)
- `[, arr2, ..., arrN]` — Optional. Additional arrays used to count the number of unique tuples of elements at corresponding positions in multiple arrays. [`Array(T)`](/sql-reference/data-types/array)
","For a single argument returns the number of unique
elements. For multiple arguments returns the number of unique tuples made from
elements at corresponding positions across the arrays.
 [`UInt32`](/sql-reference/data-types/int-uint)","**Single argument**

```sql title=Query
SELECT arrayUniq([1, 1, 2, 2])
```

```response title=Response
2
```

**Multiple argument**

```sql title=Query
SELECT arrayUniq([1, 2, 3, 1], [4, 5, 6, 4])
```

```response title=Response
3
```

","1.1","Arrays"
"25.8.1.5101","divideDecimal",0,0,"","","System","
Performs division on two decimals. Result value will be of type [Decimal256](/sql-reference/data-types/decimal).
Result scale can be explicitly specified by `result_scale` argument (const Integer in range `[0, 76]`). If not specified, the result scale is the max scale of given arguments.

:::note
These function work significantly slower than usual `divide`.
In case you don't really need controlled precision and/or need fast computation, consider using [divide](#divide).
:::
    ","divideDecimal(x, y[, result_scale])","- `x` — First value: [Decimal](/sql-reference/data-types/decimal). - `y` — Second value: [Decimal](/sql-reference/data-types/decimal). - `result_scale` — Scale of result. Type [Int/UInt](/sql-reference/data-types/int-uint). ","The result of division with given scale. [`Decimal256`](/sql-reference/data-types/decimal)","**Example 1**

```sql title=Query
divideDecimal(toDecimal256(-12, 0), toDecimal32(2.1, 1), 10)
```

```response title=Response
┌─divideDecimal(toDecimal256(-12, 0), toDecimal32(2.1, 1), 10)─┐
│                                                -5.7142857142 │
└──────────────────────────────────────────────────────────────┘
```

**Example 2**

```sql title=Query
SELECT toDecimal64(-12, 1) / toDecimal32(2.1, 1);
SELECT toDecimal64(-12, 1) as a, toDecimal32(2.1, 1) as b, divideDecimal(a, b, 1), divideDecimal(a, b, 5);
```

```response title=Response
┌─divide(toDecimal64(-12, 1), toDecimal32(2.1, 1))─┐
│                                             -5.7 │
└──────────────────────────────────────────────────┘
┌───a─┬───b─┬─divideDecimal(toDecimal64(-12, 1), toDecimal32(2.1, 1), 1)─┬─divideDecimal(toDecimal64(-12, 1), toDecimal32(2.1, 1), 5)─┐
│ -12 │ 2.1 │                                                       -5.7 │                                                   -5.71428 │
└─────┴─────┴────────────────────────────────────────────────────────────┴────────────────────────────────────────────────────────────┘
```

","22.12","Arithmetic"
"25.8.1.5101","globalVariable",0,0,"","","System","","","","","","",""
"25.8.1.5101","numericIndexedVectorPointwiseDivide",0,0,"","","System","Performs pointwise division between a NumericIndexedVector and either another NumericIndexedVector or a numeric constant. The function returns a new NumericIndexedVector.","numericIndexedVectorPointwiseDivide(numericIndexedVector, numericIndexedVector | numeric)","- `numericIndexedVector` — A NumericIndexedVector object. - `numeric` — A numeric constant ","NumericIndexedVector object.","****

```sql title=Query
with
    numericIndexedVectorBuild(mapFromArrays([1, 2, 3], arrayMap(x -> toFloat64(x), [10, 20, 30]))) as vec1,
    numericIndexedVectorBuild(mapFromArrays([2, 3, 4], arrayMap(x -> toFloat64(x), [10, 20, 30]))) as vec2
SELECT
    numericIndexedVectorToMap(numericIndexedVectorPointwiseDivide(vec1, vec2)) AS res1,
    numericIndexedVectorToMap(numericIndexedVectorPointwiseDivide(vec1, 2)) AS res2;
```

```response title=Response
┌─res1────────┬─res2────────────┐
│ {2:2,3:1.5} │ {1:5,2:10,3:15} │
└─────────────┴─────────────────┘
```

","25.7","Arithmetic"
"25.8.1.5101","tryBase64Decode",0,0,"","","System","
Like [`base64Decode`](#base64Decode), but returns an empty string in case of error.
","tryBase64Decode(encoded)","- `encoded` — String column or constant to decode. If the string is not valid Base64-encoded, returns an empty string in case of error. [`String`](/sql-reference/data-types/string)
","Returns a string containing the decoded value of the argument. [`String`](/sql-reference/data-types/string)","**Usage example**

```sql title=Query
SELECT tryBase64Decode('Y2xpY2tob3VzZQ==')
```

```response title=Response
┌─tryBase64Decode('Y2xpY2tob3VzZQ==')─┐
│ clickhouse                          │
└─────────────────────────────────────┘
```

","18.16","String"
"25.8.1.5101","LinfDistance",0,0,"","","System","
Calculates the distance between two points (the values of the vectors are the coordinates) in `L_{inf}` space ([maximum norm](https://en.wikipedia.org/wiki/Norm_(mathematics)#Maximum_norm_(special_case_of:_infinity_norm,_uniform_norm,_or_supremum_norm))).
    ","LinfDistance(vector1, vector2)","- `vector1` — First vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
- `vector2` — Second vector. [`Tuple(T)`](/sql-reference/data-types/tuple) or [`Array(T)`](/sql-reference/data-types/array)
","Returns the Infinity-norm distance. [`Float64`](/sql-reference/data-types/float)","**Basic usage**

```sql title=Query
SELECT LinfDistance((1, 2), (2, 3))
```

```response title=Response
┌─LinfDistance((1, 2), (2, 3))─┐
│                            1 │
└──────────────────────────────┘
```

","21.11","Distance"
"25.8.1.5101","polygonsIntersectSpherical",0,0,"","","System","
        Returns true if the two [`Polygon`](sql-reference/data-types/geo#polygon) or [`MultiPolygon`](sql-reference/data-types/geo#multipolygon) intersect (share any common area or boundary).
    ","polygonsIntersectSpherical(polygon1, polygon2)","- `polygon1` — A value of type [`Polygon`](/sql-reference/data-types/geo#polygon) or [`MultiPolygon`](/sql-reference/data-types/geo#multipolygon). - `polygon2` — A value of type [`Polygon`](/sql-reference/data-types/geo#polygon) or [`MultiPolygon`](/sql-reference/data-types/geo#multipolygon). ","Returns true (1) if the two polygons intersect (share any common area or boundary). [`Bool`](/sql-reference/data-types/boolean).","**Usage example**

```sql title=Query
SELECT polygonsIntersectSpherical([[[(2., 2.), (2., 3.), (3., 3.), (3., 2.)]]], [[[(1., 1.), (1., 4.), (4., 4.), (4., 1.), (1., 1.)]]])
```

```response title=Response
┌─polygonsIntersectSpherical()─┐
                │ 1 │
                └───────────────────┘
```

","25.6","Geo"
"25.8.1.5101","bech32Encode",0,0,"","","System","
Encodes a binary data string, along with a human-readable part (HRP), using the [Bech32 or Bech32m](https://en.bitcoin.it/wiki/Bech32) algorithms.

:::note
When using the [`FixedString`](../data-types/fixedstring.md) data type, if a value does not fully fill the row it is padded with null characters.
While the `bech32Encode` function will handle this automatically for the hrp argument, for the data argument the values must not be padded.
For this reason it is not recommended to use the [`FixedString`](../data-types/fixedstring.md) data type for your data values unless you are
certain that they are all the same length and ensure that your `FixedString` column is set to that length as well.
:::
    ","bech32Encode(hrp, data[, witver])","- `hrp` — A String of `1 - 83` lowercase characters specifying the ""human-readable part"" of the code. Usually 'bc' or 'tb'. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `data` — A String of binary data to encode. [`String`](/sql-reference/data-types/string) or [`FixedString`](/sql-reference/data-types/fixedstring)
- `witver` — Optional. The witness version (default = 1). An `UInt*` specifying the version of the algorithm to run. `0` for Bech32 and `1` or greater for Bech32m. [`UInt*`](/sql-reference/data-types/int-uint)
","Returns a Bech32 address string, consisting of the human-readable part, a separator character which is always '1', and a data part. The length of the string will never exceed 90 characters. If the algorithm cannot generate a valid address from the input, it will return an empty string. [`String`](/sql-reference/data-types/string)","**Default Bech32m**

```sql title=Query
-- When no witness version is supplied, the default is 1, the updated Bech32m algorithm.
SELECT bech32Encode('bc', unhex('751e76e8199196d454941c45d1b3a323f1433bd6'))
```

```response title=Response
bc1w508d6qejxtdg4y5r3zarvary0c5xw7k8zcwmq
```

**Bech32 algorithm**

```sql title=Query
-- A witness version of 0 will result in a different address string.
SELECT bech32Encode('bc', unhex('751e76e8199196d454941c45d1b3a323f1433bd6'), 0)
```

```response title=Response
bc1w508d6qejxtdg4y5r3zarvary0c5xw7kj7gz7z
```

**Custom HRP**

```sql title=Query
-- While 'bc' (Mainnet) and 'tb' (Testnet) are the only allowed hrp values for the
-- SegWit address format, Bech32 allows any hrp that satisfies the above requirements.
SELECT bech32Encode('abcdefg', unhex('751e76e8199196d454941c45d1b3a323f1433bd6'), 10)
```

```response title=Response
abcdefg1w508d6qejxtdg4y5r3zarvary0c5xw7k9rp8r4
```

","25.6","Encoding"
"25.8.1.5101","exp10",0,0,"","","System","
Returns 10 to the power of the given argument.
","exp10(x)","- `x` — The exponent. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float) or [`Decimal*`](/sql-reference/data-types/decimal)
","Returns 10^x [`Float*`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT exp10(2);
```

```response title=Response
100
```

","1.1","Mathematical"
"25.8.1.5101","murmurHash2_32",0,0,"","","System","
Computes the [MurmurHash2](https://github.com/aappleby/smhasher) hash of the input value.

:::note
The calculated hash values may be equal for the same input values of different argument types.
This affects for example integer types of different size, named and unnamed `Tuple` with the same data, `Map` and the corresponding `Array(Tuple(key, value))` type with the same data.
:::
","murmurHash2_32(arg1[, arg2, ...])","- `arg1[, arg2, ...]` — A variable number of input arguments for which to compute the hash. [`Any`](/sql-reference/data-types)
","Returns the computed hash value of the input arguments. [`UInt32`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT murmurHash2_32(array('e','x','a'), 'mple', 10, toDateTime('2019-06-15 23:00:00')) AS MurmurHash2, toTypeName(MurmurHash2) AS type;
```

```response title=Response
┌─MurmurHash2─┬─type───┐
│  3681770635 │ UInt32 │
└─────────────┴────────┘
```

","18.5","Hash"
"25.8.1.5101","toStartOfTenMinutes",0,0,"","","System","
Rounds down a date with time to the start of the nearest ten-minute interval.

:::note
The return type can be configured by setting [`enable_extended_results_for_datetime_functions`](/operations/settings/settings#enable_extended_results_for_datetime_functions).
:::
    ","toStartOfTenMinutes(datetime)","- `datetime` — A date with time. [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)
","Returns the date with time rounded to the start of the nearest ten-minute interval [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Example**

```sql title=Query
SELECT
    toStartOfTenMinutes(toDateTime('2023-04-21 10:17:00')),
    toStartOfTenMinutes(toDateTime('2023-04-21 10:20:00')),
    toStartOfTenMinutes(toDateTime('2023-04-21 10:23:00'))
FORMAT Vertical
```

```response title=Response
Row 1:
──────
toStartOfTenMinutes(toDateTime('2023-04-21 10:17:00')): 2023-04-21 10:10:00
toStartOfTenMinutes(toDateTime('2023-04-21 10:20:00')): 2023-04-21 10:20:00
toStartOfTenMinutes(toDateTime('2023-04-21 10:23:00')): 2023-04-21 10:20:00
```

","20.1","Dates and Times"
"25.8.1.5101","nullInIgnoreSet",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayZipUnaligned",0,0,"","","System","Combines multiple arrays into a single array, allowing for unaligned arrays (arrays of differing lengths). The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.","arrayZipUnaligned(arr1, arr2, ..., arrN)","- `arr1, arr2, ..., arrN` — N arrays to combine into a single array. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array with elements from the source arrays grouped in tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed. [`Array(T)`](/sql-reference/data-types/array) or [`Tuple(T1, T2, ...)`](/sql-reference/data-types/tuple)","**Usage example**

```sql title=Query
SELECT arrayZipUnaligned(['a'], [1, 2, 3]);
```

```response title=Response
[('a', 1),(NULL, 2),(NULL, 3)]
```

","20.1","Arrays"
"25.8.1.5101","s2CellsIntersect",0,0,"","","System","","","","","","",""
"25.8.1.5101","hilbertEncode",0,0,"","","System","
Calculates code for Hilbert Curve for a list of unsigned integers.

The function has two modes of operation:
- **Simple**
- **Expanded**

**Simple mode**

Accepts up to 2 unsigned integers as arguments and produces a UInt64 code.

**Expanded mode**

Accepts a range mask ([Tuple](../../sql-reference/data-types/tuple.md)) as the
first argument and up to 2 [unsigned integers](../../sql-reference/data-types/int-uint.md)
as other arguments.

Each number in the mask configures the number of bits by which the corresponding
argument will be shifted left, effectively scaling the argument within its range.
    ","-- Simplified mode
hilbertEncode(args)

-- Expanded mode
hilbertEncode(range_mask, args)","- `args` — Up to two `UInt` values or columns of type `UInt`. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint)
- `range_mask` — For the expanded mode, up to two `UInt` values or columns of type `UInt`. [`UInt8/16/32/64`](/sql-reference/data-types/int-uint)
","Returns a `UInt64` code. [`UInt64`](/sql-reference/data-types/int-uint)","**Simple mode**

```sql title=Query
SELECT hilbertEncode(3, 4)
```

```response title=Response
31
```

**Expanded mode**

```sql title=Query
-- Range expansion can be beneficial when you need a similar distribution for
-- arguments with wildly different ranges (or cardinality).
-- For example: 'IP Address' (0...FFFFFFFF) and 'Country code' (0...FF).
-- Note: tuple size must be equal to the number of the other arguments.
SELECT hilbertEncode((10, 6), 1024, 16)
```

```response title=Response
4031541586602
```

**Single argument**

```sql title=Query
-- For a single argument without a tuple, the function returns the argument
-- itself as the Hilbert index, since no dimensional mapping is needed.
SELECT hilbertEncode(1)
```

```response title=Response
1
```

**Expanded single argument**

```sql title=Query
-- If a single argument is provided with a tuple specifying bit shifts, the function
-- shifts the argument left by the specified number of bits.
SELECT hilbertEncode(tuple(2), 128)
```

```response title=Response
512
```

**Column usage**

```sql title=Query
-- First create the table and insert some data
CREATE TABLE hilbert_numbers(
    n1 UInt32,
    n2 UInt32
)
ENGINE=MergeTree()
ORDER BY n1;
insert into hilbert_numbers (*) values(1, 2);

-- Use column names instead of constants as function arguments
SELECT hilbertEncode(n1, n2) FROM hilbert_numbers;
```

```response title=Response
13
```

","24.6","Encoding"
"25.8.1.5101","stringBytesUniq",0,0,"","","System","
Counts the number of distinct bytes in a string.
","stringBytesUniq(s)","- `s` — The string to analyze. [`String`](/sql-reference/data-types/string)
","Returns the number of distinct bytes in the string. [`UInt16`](/sql-reference/data-types/int-uint)","**Usage example**

```sql title=Query
SELECT stringBytesUniq('Hello')
```

```response title=Response
┌─stringBytesUniq('Hello')─┐
│                        4 │
└──────────────────────────┘
```

","25.6","String"
"25.8.1.5101","uniqThetaUnion",0,0,"","","System","
Two uniqThetaSketch objects to do union calculation(set operation ∪), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
select finalizeAggregation(uniqThetaUnion(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

```response title=Response

```

","","Other"
"25.8.1.5101","URLHierarchy",0,0,"","","System","","","","","","",""
"25.8.1.5101","toFloat64OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayZip",0,0,"","","System","Combines multiple arrays into a single array. The resulting array contains the corresponding elements of the source arrays grouped into tuples in the listed order of arguments.","arrayZip(arr1, arr2, ... , arrN)","- `arr1, arr2, ... , arrN` — N arrays to combine into a single array. [`Array(T)`](/sql-reference/data-types/array)
","Returns an array with elements from the source arrays grouped in tuples. Data types in the tuple are the same as types of the input arrays and in the same order as arrays are passed [`Array(T)`](/sql-reference/data-types/array)","**Usage example**

```sql title=Query
SELECT arrayZip(['a', 'b', 'c'], [5, 2, 1]);
```

```response title=Response
[('a', 5), ('b', 2), ('c', 1)]
```

","20.1","Arrays"
"25.8.1.5101","subtractInterval",0,0,"","","System","
Adds a negated interval to another interval or tuple of intervals.

Note: Intervals of the same type will be combined into a single interval. For instance if `toIntervalDay(2)` and `toIntervalDay(1)` are
passed then the result will be `(1)` rather than `(2,1)`.
    ","subtractInterval(interval_1, interval_2)","- `interval_1` — First interval or interval of tuples. [`Interval`](/sql-reference/data-types/int-uint) or [`Tuple(Interval)`](/sql-reference/data-types/tuple)
- `interval_2` — Second interval to be negated. [`Interval`](/sql-reference/data-types/int-uint)
","Returns a tuple of intervals [`Tuple(T)`](/sql-reference/data-types/tuple)","**Subtract intervals**

```sql title=Query
SELECT subtractInterval(INTERVAL 1 DAY, INTERVAL 1 MONTH);
SELECT subtractInterval((INTERVAL 1 DAY, INTERVAL 1 YEAR), INTERVAL 1 MONTH);
SELECT subtractInterval(INTERVAL 2 DAY, INTERVAL 1 DAY);
```

```response title=Response
┌─subtractInterval(toIntervalDay(1), toIntervalMonth(1))─┐
│ (1,-1)                                                 │
└────────────────────────────────────────────────────────┘
┌─subtractInterval((toIntervalDay(1), toIntervalYear(1)), toIntervalMonth(1))─┐
│ (1,1,-1)                                                                    │
└─────────────────────────────────────────────────────────────────────────────┘
┌─subtractInterval(toIntervalDay(2), toIntervalDay(1))─┐
│ (1)                                                  │
└──────────────────────────────────────────────────────┘
```

","22.11","Dates and Times"
"25.8.1.5101","defaultRoles",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayFilter",0,0,"","","System","Returns an array containing only the elements in the source array for which a lambda function returns true.","arrayFilter(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])]","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns a subset of the source array [`Array(T)`](/sql-reference/data-types/array)","**Example 1**

```sql title=Query
SELECT arrayFilter(x -> x LIKE '%World%', ['Hello', 'abc World']) AS res
```

```response title=Response
['abc World']
```

**Example 2**

```sql title=Query
SELECT
    arrayFilter(
        (i, x) -> x LIKE '%World%',
        arrayEnumerate(arr),
        ['Hello', 'abc World'] AS arr)
    AS res
```

```response title=Response
[2]
```

","1.1","Arrays"
"25.8.1.5101","multiIf",0,0,"","","System","
Allows writing the [`CASE`](/sql-reference/operators#conditional-expression) operator more compactly in the query.
Evaluates each condition in order. For the first condition that is true (non-zero and not `NULL`), returns the corresponding branch value.
If none of the conditions are true, returns the `else` value.

Setting [`short_circuit_function_evaluation`](/operations/settings/settings#short_circuit_function_evaluation) controls
whether short-circuit evaluation is used. If enabled, the `then_i` expression is evaluated only on rows where
`((NOT cond_1) AND ... AND (NOT cond_{i-1}) AND cond_i)` is true.

For example, with short-circuit evaluation, no division-by-zero exception is thrown when executing the following query:

```sql
SELECT multiIf(number = 2, intDiv(1, number), number = 5) FROM numbers(10)
```

All branch and else expressions must have a common supertype. `NULL` conditions are treated as false.
    ","multiIf(cond_1, then_1, cond_2, then_2, ..., else)","- `cond_N` — The N-th evaluated condition which controls if `then_N` is returned. [`UInt8`](/sql-reference/data-types/int-uint) or [`Nullable(UInt8)`](/sql-reference/data-types/nullable) or [`NULL`](/sql-reference/syntax#null)
- `then_N` — The result of the function when `cond_N` is true. - `else` — The result of the function if none of the conditions is true. ","Returns the result of `then_N` for matching `cond_N`, otherwise returns the `else` condition.","**Example usage**

```sql title=Query
CREATE TABLE LEFT_RIGHT (left Nullable(UInt8), right Nullable(UInt8)) ENGINE = Memory;
INSERT INTO LEFT_RIGHT VALUES (NULL, 4), (1, 3), (2, 2), (3, 1), (4, NULL);

SELECT
    left,
    right,
    multiIf(left < right, 'left is smaller', left > right, 'left is greater', left = right, 'Both equal', 'Null value') AS result
FROM LEFT_RIGHT;
```

```response title=Response
┌─left─┬─right─┬─result──────────┐
│ ᴺᵁᴸᴸ │     4 │ Null value      │
│    1 │     3 │ left is smaller │
│    2 │     2 │ Both equal      │
│    3 │     1 │ left is greater │
│    4 │  ᴺᵁᴸᴸ │ Null value      │
└──────┴───────┴─────────────────┘
```

","1.1","Conditional"
"25.8.1.5101","caseWithExpression",0,0,"","","System","","","","","","",""
"25.8.1.5101","readWKTRing",0,0,"","","System","","","","","","",""
"25.8.1.5101","nested",0,0,"","","System","
This is a function used internally by the ClickHouse engine and not meant to be used directly.

Returns the array of tuples from multiple arrays.

The first argument must be a constant array of Strings determining the names of the resulting Tuple.
The other arguments must be arrays of the same size.
","","","","**nested**

```sql title=Query
SELECT nested(['keys', 'values'], ['key_1', 'key_2'], ['value_1','value_2'])
```

```response title=Response

```

","","Other"
"25.8.1.5101","toIPv4OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","readWKTLineString",0,0,"","","System","
Parses a Well-Known Text (WKT) representation of a LineString geometry and returns it in the internal ClickHouse format.
","readWKTLineString(wkt_string)","- `wkt_string` — The input WKT string representing a LineString geometry. [`String`](/sql-reference/data-types/string)
","The function returns a ClickHouse internal representation of the linestring geometry.","**first call**

```sql title=Query
SELECT readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)');
```

```response title=Response
┌─readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)')─┐
│ [(1,1),(2,2),(3,3),(1,1)]                            │
└──────────────────────────────────────────────────────┘
```

**second call**

```sql title=Query
SELECT toTypeName(readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)'));
```

```response title=Response
┌─toTypeName(readWKTLineString('LINESTRING (1 1, 2 2, 3 3, 1 1)'))─┐
│ LineString                                                       │
└──────────────────────────────────────────────────────────────────┘
```

","","UUID"
"25.8.1.5101","throwIf",0,0,"","","System","","","","","","",""
"25.8.1.5101","uniqThetaIntersect",0,0,"","","System","
Two uniqThetaSketch objects to do intersect calculation(set operation ∩), the result is a new uniqThetaSketch.

A uniqThetaSketch object is to be constructed by aggregation function uniqTheta with -State.

UniqThetaSketch is a data structure storage of approximate values set.
For more information on RoaringBitmap, see: [Theta Sketch Framework](https://datasketches.apache.org/docs/Theta/ThetaSketchFramework.html).

Typical usage:
[example:typical]
","","","","**typical**

```sql title=Query
select finalizeAggregation(uniqThetaIntersect(arrayReduce('uniqThetaState',[1,2]), arrayReduce('uniqThetaState',[2,3,4])));
```

```response title=Response

```

","","Other"
"25.8.1.5101","detectLanguageUnknown",0,0,"","","System","","","","","","",""
"25.8.1.5101","and",0,0,"","","System","","","","","","",""
"25.8.1.5101","jaroSimilarity",0,0,"","","System","
Calculates the [Jaro similarity](https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance#Jaro_similarity) between two byte strings.
","jaroSimilarity(s1, s2)","- `s1` — First input string. [`String`](/sql-reference/data-types/string)
- `s2` — Second input string. [`String`](/sql-reference/data-types/string)
","Returns the Jaro similarity between the two strings. [`Float64`](/sql-reference/data-types/float)","**Usage example**

```sql title=Query
SELECT jaroSimilarity('clickhouse', 'click')
```

```response title=Response
┌─jaroSimilarity('clickhouse', 'click')─┐
│                    0.8333333333333333 │
└───────────────────────────────────────┘
```

","24.1","String"
"25.8.1.5101","h3IsResClassIII",0,0,"","","System","","","","","","",""
"25.8.1.5101","cutQueryStringAndFragment",0,0,"","","System","","","","","","",""
"25.8.1.5101","toUInt256OrNull",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayFirstOrNull",0,0,"","","System","
Returns the first element in the source array for which `func(x[, y1, y2, ... yN])` returns true, otherwise it returns `NULL`.
    ","arrayFirstOrNull(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `[, cond1_arr, ... , condN_arr]` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns the first element of the source array for which `func` is true, otherwise returns `NULL`.","**Usage example**

```sql title=Query
SELECT arrayFirstOrNull(x, y -> x=y, ['a', 'b', 'c'], ['c', 'b', 'a'])
```

```response title=Response
b
```

**No match**

```sql title=Query
SELECT arrayFirstOrNull(x, y -> x=y, [0, 1, 2], [3, 3, 3]) AS res, toTypeName(res)
```

```response title=Response
NULL Nullable(UInt8)
```

","1.1","Arrays"
"25.8.1.5101","addMonths",0,0,"","","System","
Adds a specified number of months to a date, a date with time or a string-encoded date or date with time.
    ","addMonths(datetime, num)","- `datetime` — Date or date with time to add specified number of months to. [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64) or [`String`](/sql-reference/data-types/string)
- `num` — Number of months to add. [`(U)Int*`](/sql-reference/data-types/int-uint) or [`Float*`](/sql-reference/data-types/float)
","Returns `datetime` plus `num` months [`Date`](/sql-reference/data-types/date) or [`Date32`](/sql-reference/data-types/date32) or [`DateTime`](/sql-reference/data-types/datetime) or [`DateTime64`](/sql-reference/data-types/datetime64)","**Add months to different date types**

```sql title=Query
WITH
    toDate('2024-01-01') AS date,
    toDateTime('2024-01-01 00:00:00') AS date_time,
    '2024-01-01 00:00:00' AS date_time_string
SELECT
    addMonths(date, 6) AS add_months_with_date,
    addMonths(date_time, 6) AS add_months_with_date_time,
    addMonths(date_time_string, 6) AS add_months_with_date_time_string
```

```response title=Response
┌─add_months_with_date─┬─add_months_with_date_time─┬─add_months_with_date_time_string─┐
│           2024-07-01 │       2024-07-01 00:00:00 │          2024-07-01 00:00:00.000 │
└──────────────────────┴───────────────────────────┴──────────────────────────────────┘
```

**Using alternative INTERVAL syntax**

```sql title=Query
SELECT dateAdd('1998-06-16'::Date, INTERVAL 10 month)
```

```response title=Response
┌─plus(CAST('1⋯lMonth(10))─┐
│               1999-04-16 │
└──────────────────────────┘
```

","1.1","Dates and Times"
"25.8.1.5101","toInt64OrZero",0,0,"","","System","","","","","","",""
"25.8.1.5101","arrayAll",0,0,"","","System","
Returns `1` if lambda `func(x [, y1, y2, ... yN])` returns true for all elements. Otherwise, it returns `0`.
","arrayAll(func(x[, y1, ..., yN]), source_arr[, cond1_arr, ... , condN_arr])","- `func(x[, y1, ..., yN])` — A lambda function which operates on elements of the source array (`x`) and condition arrays (`y`). [`Lambda function`](/sql-reference/functions/overview#arrow-operator-and-lambda)
- `source_arr` — The source array to process. [`Array(T)`](/sql-reference/data-types/array)
- `cond1_arr, ...` — Optional. N condition arrays providing additional arguments to the lambda function. [`Array(T)`](/sql-reference/data-types/array)
","Returns `1` if the lambda function returns true for all elements, `0` otherwise [`UInt8`](/sql-reference/data-types/int-uint)","**All elements match**

```sql title=Query
SELECT arrayAll(x, y -> x=y, [1, 2, 3], [1, 2, 3])
```

```response title=Response
1
```

**Not all elements match**

```sql title=Query
SELECT arrayAll(x, y -> x=y, [1, 2, 3], [1, 1, 1])
```

```response title=Response
0
```

","1.1","Arrays"
"25.8.1.5101","truncate",0,1,"trunc","","System","","","","","","",""
"25.8.1.5101","ceiling",0,1,"ceil","","System","","","","","","",""
"25.8.1.5101","FROM_UNIXTIME",0,1,"fromUnixTimestamp","","System","","","","","","",""
"25.8.1.5101","DAY",0,1,"toDayOfMonth","","System","","","","","","",""
"25.8.1.5101","HOUR",0,1,"toHour","","System","","","","","","",""
"25.8.1.5101","fullHostName",0,0,"FQDN","","System","","","","","","",""
"25.8.1.5101","SVG",0,0,"svg","","System","","","","","","",""
"25.8.1.5101","connection_id",0,1,"connectionID","","System","","","","","","",""
"25.8.1.5101","INET6_ATON",0,1,"IPv6StringToNum","","System","","","","","","",""
"25.8.1.5101","INET_ATON",0,1,"IPv4StringToNum","","System","","","","","","",""
"25.8.1.5101","levenshteinDistanceUTF8",0,0,"editDistanceUTF8","","System","","","","","","",""
"25.8.1.5101","levenshteinDistance",0,0,"editDistance","","System","","","","","","",""
"25.8.1.5101","mismatches",0,0,"byteHammingDistance","","System","","","","","","",""
"25.8.1.5101","LAST_DAY",0,1,"toLastDayOfMonth","","System","","","","","","",""
"25.8.1.5101","caseWithExpr",0,0,"caseWithExpression","","System","","","","","","",""
"25.8.1.5101","initial_query_start_time",0,1,"initialQueryStartTime","","System","","","","","","",""
"25.8.1.5101","INET_NTOA",0,1,"IPv4NumToString","","System","","","","","","",""
"25.8.1.5101","current_database",0,1,"currentDatabase","","System","","","","","","",""
"25.8.1.5101","SCHEMA",0,1,"currentDatabase","","System","","","","","","",""
"25.8.1.5101","replace",0,1,"replaceAll","","System","","","","","","",""
"25.8.1.5101","DATE_TRUNC",0,1,"dateTrunc","","System","","","","","","",""
"25.8.1.5101","FORMAT_BYTES",0,1,"formatReadableSize","","System","","","","","","",""
"25.8.1.5101","timestampDiff",0,0,"dateDiff","","System","","","","","","",""
"25.8.1.5101","time_bucket",0,1,"toStartOfInterval","","System","","","","","","",""
"25.8.1.5101","rand32",0,0,"rand","","System","","","","","","",""
"25.8.1.5101","date_diff",0,0,"dateDiff","","System","","","","","","",""
"25.8.1.5101","toTimeZone",0,0,"toTimezone","","System","","","","","","",""
"25.8.1.5101","timeZone",0,1,"timezone","","System","","","","","","",""
"25.8.1.5101","INET6_NTOA",0,1,"IPv6NumToString","","System","","","","","","",""
"25.8.1.5101","JSON_ARRAY_LENGTH",0,1,"JSONArrayLength","","System","","","","","","",""
"25.8.1.5101","CHAR_LENGTH",0,1,"lengthUTF8","","System","","","","","","",""
"25.8.1.5101","SUBSTRING_INDEX",0,1,"substringIndex","","System","","","","","","",""
"25.8.1.5101","instr",0,1,"positionCaseInsensitive","","System","","","","","","",""
"25.8.1.5101","byteSlice",0,1,"substring","","System","","","","","","",""
"25.8.1.5101","mid",0,1,"substring","","System","","","","","","",""
"25.8.1.5101","curdate",0,1,"today","","System","","","","","","",""
"25.8.1.5101","str_to_map",0,1,"extractKeyValuePairs","","System","","","","","","",""
"25.8.1.5101","splitByAlpha",0,0,"alphaTokens","","System","","","","","","",""
"25.8.1.5101","ST_MPolyFromWKB",0,0,"readWKBMultiPolygon","","System","","","","","","",""
"25.8.1.5101","REGEXP_REPLACE",0,1,"replaceRegexpAll","","System","","","","","","",""
"25.8.1.5101","ST_PolyFromWKB",0,0,"readWKBPolygon","","System","","","","","","",""
"25.8.1.5101","ST_MLineFromWKB",0,0,"readWKBMultiLineString","","System","","","","","","",""
"25.8.1.5101","current_date",0,1,"today","","System","","","","","","",""
"25.8.1.5101","ST_LineFromWKB",0,0,"readWKBLineString","","System","","","","","","",""
"25.8.1.5101","date_bin",0,1,"toStartOfInterval","","System","","","","","","",""
"25.8.1.5101","minSampleSizeContinous",0,0,"minSampleSizeContinuous","","System","","","","","","",""
"25.8.1.5101","MILLISECOND",0,1,"toMillisecond","","System","","","","","","",""
"25.8.1.5101","power",0,1,"pow","","System","","","","","","",""
"25.8.1.5101","modOrNull",0,1,"moduloOrNull","","System","","","","","","",""
"25.8.1.5101","SECOND",0,1,"toSecond","","System","","","","","","",""
"25.8.1.5101","normalizeLinf",0,1,"LinfNormalize","","System","","","","","","",""
"25.8.1.5101","initial_query_id",0,1,"initialQueryID","","System","","","","","","",""
"25.8.1.5101","normalizeL2",0,1,"L2Normalize","","System","","","","","","",""
"25.8.1.5101","current_query_id",0,1,"currentQueryID","","System","","","","","","",""
"25.8.1.5101","REGEXP_EXTRACT",0,1,"regexpExtract","","System","","","","","","",""
"25.8.1.5101","normalizeL1",0,1,"L1Normalize","","System","","","","","","",""
"25.8.1.5101","CHARACTER_LENGTH",0,1,"lengthUTF8","","System","","","","","","",""
"25.8.1.5101","TIMESTAMP_DIFF",0,0,"dateDiff","","System","","","","","","",""
"25.8.1.5101","visitParamExtractFloat",0,0,"simpleJSONExtractFloat","","System","","","","","","",""
"25.8.1.5101","substr",0,1,"substring","","System","","","","","","",""
"25.8.1.5101","distanceLinf",0,1,"LinfDistance","","System","","","","","","",""
"25.8.1.5101","partitionID",0,0,"partitionId","","System","","","","","","",""
"25.8.1.5101","distanceL2Squared",0,1,"L2SquaredDistance","","System","","","","","","",""
"25.8.1.5101","distanceL1",0,1,"L1Distance","","System","","","","","","",""
"25.8.1.5101","mapContains",0,0,"mapContainsKey","","System","","","","","","",""
"25.8.1.5101","mapFromString",0,0,"extractKeyValuePairs","","System","","","","","","",""
"25.8.1.5101","TO_BASE64",0,1,"base64Encode","","System","","","","","","",""
"25.8.1.5101","normL1",0,1,"L1Norm","","System","","","","","","",""
"25.8.1.5101","yandexConsistentHash",0,0,"kostikConsistentHash","","System","","","","","","",""
"25.8.1.5101","scalarProduct",0,1,"dotProduct","","System","","","","","","",""
"25.8.1.5101","DAYOFMONTH",0,1,"toDayOfMonth","","System","","","","","","",""
"25.8.1.5101","vectorDifference",0,1,"tupleMinus","","System","","","","","","",""
"25.8.1.5101","vectorSum",0,1,"tuplePlus","","System","","","","","","",""
"25.8.1.5101","DATE_DIFF",0,0,"dateDiff","","System","","","","","","",""
"25.8.1.5101","distanceL2",0,1,"L2Distance","","System","","","","","","",""
"25.8.1.5101","positive_modulo_or_null",0,1,"positiveModuloOrNull","","System","","","","","","",""
"25.8.1.5101","lcase",0,1,"lower","","System","","","","","","",""
"25.8.1.5101","user",0,1,"currentUser","","System","","","","","","",""
"25.8.1.5101","normL2Squared",0,1,"L2SquaredNorm","","System","","","","","","",""
"25.8.1.5101","hostname",0,0,"hostName","","System","","","","","","",""
"25.8.1.5101","caseWithoutExpression",0,0,"multiIf","","System","","","","","","",""
"25.8.1.5101","concat_ws",0,1,"concatWithSeparator","","System","","","","","","",""
"25.8.1.5101","FROM_BASE64",0,1,"base64Decode","","System","","","","","","",""
"25.8.1.5101","extractAllGroups",0,0,"extractAllGroupsVertical","","System","","","","","","",""
"25.8.1.5101","UTC_timestamp",0,1,"UTCTimestamp","","System","","","","","","",""
"25.8.1.5101","ln",0,1,"log","","System","","","","","","",""
"25.8.1.5101","distanceLp",0,1,"LpDistance","","System","","","","","","",""
"25.8.1.5101","QUARTER",0,1,"toQuarter","","System","","","","","","",""
"25.8.1.5101","current_timestamp",0,1,"now","","System","","","","","","",""
"25.8.1.5101","query_id",0,1,"queryID","","System","","","","","","",""
"25.8.1.5101","positive_modulo",0,1,"positiveModulo","","System","","","","","","",""
"25.8.1.5101","MAP_FROM_ARRAYS",0,0,"mapFromArrays","","System","","","","","","",""
"25.8.1.5101","normLinf",0,1,"LinfNorm","","System","","","","","","",""
"25.8.1.5101","visitParamExtractInt",0,0,"simpleJSONExtractInt","","System","","","","","","",""
"25.8.1.5101","sqid",0,0,"sqidEncode","","System","","","","","","",""
"25.8.1.5101","normLp",0,1,"LpNorm","","System","","","","","","",""
"25.8.1.5101","current_schemas",0,1,"currentSchemas","","System","","","","","","",""
"25.8.1.5101","current_user",0,1,"currentUser","","System","","","","","","",""
"25.8.1.5101","TO_UNIXTIME",0,1,"parseDateTime","","System","","","","","","",""
"25.8.1.5101","OCTET_LENGTH",0,1,"length","","System","","","","","","",""
"25.8.1.5101","timeZoneOf",0,0,"timezoneOf","","System","","","","","","",""
"25.8.1.5101","visitParamHas",0,0,"simpleJSONHas","","System","","","","","","",""
"25.8.1.5101","timestamp_diff",0,0,"dateDiff","","System","","","","","","",""
"25.8.1.5101","timeZoneOffset",0,0,"timezoneOffset","","System","","","","","","",""
"25.8.1.5101","normalizeLp",0,1,"LpNormalize","","System","","","","","","",""
"25.8.1.5101","yearweek",0,1,"toYearWeek","","System","","","","","","",""
"25.8.1.5101","visitParamExtractUInt",0,0,"simpleJSONExtractUInt","","System","","","","","","",""
"25.8.1.5101","week",0,1,"toWeek","","System","","","","","","",""
"25.8.1.5101","trim",0,0,"trimBoth","","System","","","","","","",""
"25.8.1.5101","pmodOrNull",0,1,"positiveModuloOrNull","","System","","","","","","",""
"25.8.1.5101","rtrim",0,0,"trimRight","","System","","","","","","",""
"25.8.1.5101","visitParamExtractBool",0,0,"simpleJSONExtractBool","","System","","","","","","",""
"25.8.1.5101","flatten",0,1,"arrayFlatten","","System","","","","","","",""
"25.8.1.5101","to_utc_timestamp",0,1,"toUTCTimestamp","","System","","","","","","",""
"25.8.1.5101","DATABASE",0,1,"currentDatabase","","System","","","","","","",""
"25.8.1.5101","width_bucket",0,1,"widthBucket","","System","","","","","","",""
"25.8.1.5101","MINUTE",0,1,"toMinute","","System","","","","","","",""
"25.8.1.5101","jsonMergePatch",0,0,"JSONMergePatch","","System","","","","","","",""
"25.8.1.5101","ltrim",0,0,"trimLeft","","System","","","","","","",""
"25.8.1.5101","DAYOFYEAR",0,1,"toDayOfYear","","System","","","","","","",""
"25.8.1.5101","from_utc_timestamp",0,1,"fromUTCTimestamp","","System","","","","","","",""
"25.8.1.5101","TO_DAYS",0,1,"toDaysSinceYearZero","","System","","","","","","",""
"25.8.1.5101","str_to_date",0,1,"parseDateTimeOrNull","","System","","","","","","",""
"25.8.1.5101","toStartOfFiveMinute",0,0,"toStartOfFiveMinutes","","System","","","","","","",""
"25.8.1.5101","ucase",0,1,"upper","","System","","","","","","",""
"25.8.1.5101","rpad",0,1,"rightPad","","System","","","","","","",""
"25.8.1.5101","mod",0,1,"modulo","","System","","","","","","",""
"25.8.1.5101","MONTH",0,1,"toMonth","","System","","","","","","",""
"25.8.1.5101","YEAR",0,1,"toYear","","System","","","","","","",""
"25.8.1.5101","serverTimeZone",0,0,"serverTimezone","","System","","","","","","",""
"25.8.1.5101","visitParamExtractRaw",0,0,"simpleJSONExtractRaw","","System","","","","","","",""
"25.8.1.5101","arrayPRAUC",0,0,"arrayAUCPR","","System","","","","","","",""
"25.8.1.5101","arrayAUC",0,0,"arrayROCAUC","","System","","","","","","",""
"25.8.1.5101","REGEXP_MATCHES",0,1,"match","","System","","","","","","",""
"25.8.1.5101","visitParamExtractString",0,0,"simpleJSONExtractString","","System","","","","","","",""
"25.8.1.5101","FROM_DAYS",0,1,"fromDaysSinceYearZero","","System","","","","","","",""
"25.8.1.5101","pmod",0,1,"positiveModulo","","System","","","","","","",""
"25.8.1.5101","ST_PointFromWKB",0,0,"readWKBPoint","","System","","","","","","",""
"25.8.1.5101","normL2",0,1,"L2Norm","","System","","","","","","",""
"25.8.1.5101","DATE_FORMAT",0,1,"formatDateTime","","System","","","","","","",""
"25.8.1.5101","caseWithoutExpr",0,0,"multiIf","","System","","","","","","",""
"25.8.1.5101","lpad",0,1,"leftPad","","System","","","","","","",""
"25.8.1.5101","DAYOFWEEK",0,1,"toDayOfWeek","","System","","","","","","",""
"25.8.1.5101","exponentialTimeDecayedCount",1,0,"","","System","","","","","","",""
"25.8.1.5101","exponentialTimeDecayedMax",1,0,"","","System","","","","","","",""
"25.8.1.5101","lead",1,0,"","","System","","","","","","",""
"25.8.1.5101","lag",1,0,"","","System","","","","","","",""
"25.8.1.5101","lagInFrame",1,0,"","","System","","","","","","",""
"25.8.1.5101","nth_value",1,1,"","","System","","","","","","",""
"25.8.1.5101","ntile",1,1,"","","System","","","","","","",""
"25.8.1.5101","row_number",1,1,"","","System","","","","","","",""
"25.8.1.5101","percentRank",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesPredictLinearToGrid",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesDerivToGrid",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesInstantDeltaToGrid",1,0,"","","System","","","","","","",""
"25.8.1.5101","largestTriangleThreeBuckets",1,0,"","","System","","","","","","",""
"25.8.1.5101","flameGraph",1,0,"","","System","","","","","","",""
"25.8.1.5101","exponentialMovingAverage",1,0,"","","System","","","","","","",""
"25.8.1.5101","nothingUInt64",1,0,"","","System","","","","","","",""
"25.8.1.5101","nothingNull",1,0,"","","System","","","","","","",""
"25.8.1.5101","nothing",1,0,"","","System","","","","","","",""
"25.8.1.5101","singleValueOrNull",1,0,"","","System","","","","","","",""
"25.8.1.5101","meanZTest",1,0,"","","System","","","","","","",""
"25.8.1.5101","analysisOfVariance",1,1,"","","System","","","","","","",""
"25.8.1.5101","studentTTest",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesInstantRateToGrid",1,0,"","","System","","","","","","",""
"25.8.1.5101","rankCorr",1,0,"","","System","","","","","","",""
"25.8.1.5101","aggThrow",1,0,"","","System","","","","","","",""
"25.8.1.5101","categoricalInformationValue",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupArrayMovingSum",1,0,"","","System","","","","","","",""
"25.8.1.5101","simpleLinearRegression",1,0,"","","System","","","","","","",""
"25.8.1.5101","entropy",1,0,"","","System","","","","","","",""
"25.8.1.5101","stochasticLogisticRegression",1,0,"","","System","","","","","","",""
"25.8.1.5101","histogram",1,0,"","","System","","","","","","",""
"25.8.1.5101","mannWhitneyUTest",1,0,"","","System","","","","","","",""
"25.8.1.5101","maxIntersections",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupBitmapXor",1,0,"","","System","","","","","","",""
"25.8.1.5101","cramersVBiasCorrected",1,0,"","","System","","","","","","",""
"25.8.1.5101","contingency",1,0,"","","System","","","","","","",""
"25.8.1.5101","theilsU",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupBitmapAnd",1,0,"","","System","","","","","","",""
"25.8.1.5101","cramersV",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupBitXor",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupBitAnd",1,0,"","","System","","","","","","",""
"25.8.1.5101","approx_top_sum",1,1,"","","System","","","","","","",""
"25.8.1.5101","exponentialTimeDecayedSum",1,0,"","","System","","","","","","",""
"25.8.1.5101","topKWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","topK",1,0,"","","System","","","","","","",""
"25.8.1.5101","uniqUpTo",1,0,"","","System","","","","","","",""
"25.8.1.5101","stochasticLinearRegression",1,0,"","","System","","","","","","",""
"25.8.1.5101","uniqCombined64",1,0,"","","System","","","","","","",""
"25.8.1.5101","intervalLengthSum",1,0,"","","System","","","","","","",""
"25.8.1.5101","uniqCombined",1,0,"","","System","","","","","","",""
"25.8.1.5101","uniqTheta",1,0,"","","System","","","","","","",""
"25.8.1.5101","nonNegativeDerivative",1,0,"","","System","","","","","","",""
"25.8.1.5101","uniqExact",1,0,"","","System","","","","","","",""
"25.8.1.5101","uniq",1,0,"","","System","","","","","","",""
"25.8.1.5101","kurtPop",1,0,"","","System","","","","","","",""
"25.8.1.5101","sumMapFiltered",1,0,"","","System","","","","","","",""
"25.8.1.5101","distinctJSONPathsAndTypes",1,0,"","","System","","","","","","",""
"25.8.1.5101","distinctJSONPaths",1,0,"","","System","","","","","","",""
"25.8.1.5101","minMappedArrays",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantiles",1,0,"","","System","","","","","","",""
"25.8.1.5101","sum",1,1,"","","System","","","","","","",""
"25.8.1.5101","corrMatrix",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesRateToGrid",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileExactWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","sumMapFilteredWithOverflow",1,0,"","","System","","","","","","",""
"25.8.1.5101","corr",1,1,"","","System","","","","","","",""
"25.8.1.5101","skewPop",1,0,"","","System","","","","","","",""
"25.8.1.5101","corrStable",1,0,"","","System","","","","","","",""
"25.8.1.5101","covarPopMatrix",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupBitmapOr",1,0,"","","System","","","","","","",""
"25.8.1.5101","covarSampMatrix",1,0,"","","System","","","","","","",""
"25.8.1.5101","sumMappedArrays",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileExactWeightedInterpolated",1,0,"","","System","","","","","","",""
"25.8.1.5101","skewSamp",1,0,"","","System","","","","","","",""
"25.8.1.5101","distinctDynamicTypes",1,0,"","","System","","","","","","",""
"25.8.1.5101","sumMapWithOverflow",1,0,"","","System","","","","","","",""
"25.8.1.5101","stddevSamp",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileExactHigh",1,0,"","","System","","","","","","",""
"25.8.1.5101","varPop",1,0,"","","System","","","","","","",""
"25.8.1.5101","sumCount",1,0,"","","System","","","","","","",""
"25.8.1.5101","covarPop",1,0,"","","System","","","","","","",""
"25.8.1.5101","varSamp",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileTimingWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","covarPopStable",1,0,"","","System","","","","","","",""
"25.8.1.5101","stddevPopStable",1,0,"","","System","","","","","","",""
"25.8.1.5101","any_respect_nulls",1,0,"","","System","","","","","","",""
"25.8.1.5101","argMin",1,0,"","","System","","","","","","",""
"25.8.1.5101","windowFunnel",1,0,"","","System","","","","","","",""
"25.8.1.5101","retention",1,0,"","","System","","","","","","",""
"25.8.1.5101","sequenceMatch",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesExactHigh",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileGK",1,0,"","","System","","","","","","",""
"25.8.1.5101","anyLast_respect_nulls",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesBFloat16Weighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileBFloat16Weighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","deltaSumTimestamp",1,0,"","","System","","","","","","",""
"25.8.1.5101","varSampStable",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupNumericIndexedVector",1,0,"","","System","","","","","","",""
"25.8.1.5101","any",1,0,"","","System","","","","","","",""
"25.8.1.5101","sparkbar",1,0,"","","System","","","","","","",""
"25.8.1.5101","sequenceMatchEvents",1,0,"","","System","","","","","","",""
"25.8.1.5101","max",1,1,"","","System","","","","","","",""
"25.8.1.5101","quantilesDD",1,0,"","","System","","","","","","",""
"25.8.1.5101","denseRank",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantile",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesExact",1,0,"","","System","","","","","","",""
"25.8.1.5101","uniqHLL12",1,0,"","","System","","","","","","",""
"25.8.1.5101","min",1,1,"","","System","","","","","","",""
"25.8.1.5101","quantileExactInclusive",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileDD",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesGroupArray",1,0,"","","System","","","","","","",""
"25.8.1.5101","kurtSamp",1,0,"","","System","","","","","","",""
"25.8.1.5101","estimateCompressionRatio",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileTDigest",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileTDigestWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileDeterministic",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesTDigest",1,0,"","","System","","","","","","",""
"25.8.1.5101","avg",1,1,"","","System","","","","","","",""
"25.8.1.5101","covarSampStable",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesTiming",1,0,"","","System","","","","","","",""
"25.8.1.5101","leadInFrame",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesResampleToGridWithStaleness",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesExactExclusive",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupArrayMovingAvg",1,0,"","","System","","","","","","",""
"25.8.1.5101","anyHeavy",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupArrayIntersect",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileInterpolatedWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileExactLow",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupBitmap",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesInterpolatedWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesTDigestWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesDeltaToGrid",1,0,"","","System","","","","","","",""
"25.8.1.5101","stddevSampStable",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesExactWeightedInterpolated",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupUniqArray",1,0,"","","System","","","","","","",""
"25.8.1.5101","sumKahan",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesExactWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesDeterministic",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupArrayInsertAt",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesGK",1,0,"","","System","","","","","","",""
"25.8.1.5101","rank",1,1,"","","System","","","","","","",""
"25.8.1.5101","maxIntersectionsPosition",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesBFloat16",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesExactInclusive",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupConcat",1,0,"","","System","","","","","","",""
"25.8.1.5101","boundingRatio",1,0,"","","System","","","","","","",""
"25.8.1.5101","sequenceNextNode",1,0,"","","System","","","","","","",""
"25.8.1.5101","anyLast",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesTimingWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupArray",1,0,"","","System","","","","","","",""
"25.8.1.5101","count",1,1,"","","System","","","","","","",""
"25.8.1.5101","quantileExact",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupArraySorted",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesLastTwoSamples",1,0,"","","System","","","","","","",""
"25.8.1.5101","maxMappedArrays",1,0,"","","System","","","","","","",""
"25.8.1.5101","stddevPop",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupArrayLast",1,0,"","","System","","","","","","",""
"25.8.1.5101","kolmogorovSmirnovTest",1,1,"","","System","","","","","","",""
"25.8.1.5101","sumWithOverflow",1,0,"","","System","","","","","","",""
"25.8.1.5101","sequenceCount",1,0,"","","System","","","","","","",""
"25.8.1.5101","exponentialTimeDecayedAvg",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileExactExclusive",1,0,"","","System","","","","","","",""
"25.8.1.5101","avgWeighted",1,0,"","","System","","","","","","",""
"25.8.1.5101","argMax",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileBFloat16",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupBitOr",1,0,"","","System","","","","","","",""
"25.8.1.5101","approx_top_k",1,1,"","","System","","","","","","",""
"25.8.1.5101","deltaSum",1,0,"","","System","","","","","","",""
"25.8.1.5101","welchTTest",1,0,"","","System","","","","","","",""
"25.8.1.5101","covarSamp",1,0,"","","System","","","","","","",""
"25.8.1.5101","varPopStable",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantileTiming",1,0,"","","System","","","","","","",""
"25.8.1.5101","quantilesExactLow",1,0,"","","System","","","","","","",""
"25.8.1.5101","groupArraySample",1,0,"","","System","","","","","","",""
"25.8.1.5101","timeSeriesLastToGrid",1,0,"timeSeriesResampleToGridWithStaleness","","System","","","","","","",""
"25.8.1.5101","BIT_AND",1,1,"groupBitAnd","","System","","","","","","",""
"25.8.1.5101","approx_top_count",1,1,"approx_top_k","","System","","","","","","",""
"25.8.1.5101","STD",1,1,"stddevPop","","System","","","","","","",""
"25.8.1.5101","lttb",1,0,"largestTriangleThreeBuckets","","System","","","","","","",""
"25.8.1.5101","STDDEV_POP",1,1,"stddevPop","","System","","","","","","",""
"25.8.1.5101","anova",1,1,"analysisOfVariance","","System","","","","","","",""
"25.8.1.5101","STDDEV_SAMP",1,1,"stddevSamp","","System","","","","","","",""
"25.8.1.5101","VAR_SAMP",1,1,"varSamp","","System","","","","","","",""
"25.8.1.5101","VAR_POP",1,1,"varPop","","System","","","","","","",""
"25.8.1.5101","lastValueRespectNulls",1,0,"anyLast_respect_nulls","","System","","","","","","",""
"25.8.1.5101","last_value_respect_nulls",1,1,"anyLast_respect_nulls","","System","","","","","","",""
"25.8.1.5101","any_value_respect_nulls",1,1,"any_respect_nulls","","System","","","","","","",""
"25.8.1.5101","BIT_OR",1,1,"groupBitOr","","System","","","","","","",""
"25.8.1.5101","anyLastRespectNulls",1,0,"anyLast_respect_nulls","","System","","","","","","",""
"25.8.1.5101","firstValueRespectNulls",1,0,"any_respect_nulls","","System","","","","","","",""
"25.8.1.5101","first_value_respect_nulls",1,1,"any_respect_nulls","","System","","","","","","",""
"25.8.1.5101","COVAR_SAMP",1,1,"covarSamp","","System","","","","","","",""
"25.8.1.5101","any_value",1,1,"any","","System","","","","","","",""
"25.8.1.5101","medianDD",1,0,"quantileDD","","System","","","","","","",""
"25.8.1.5101","percent_rank",1,1,"percentRank","","System","","","","","","",""
"25.8.1.5101","sparkBar",1,0,"sparkbar","","System","","","","","","",""
"25.8.1.5101","medianInterpolatedWeighted",1,0,"quantileInterpolatedWeighted","","System","","","","","","",""
"25.8.1.5101","medianTDigestWeighted",1,0,"quantileTDigestWeighted","","System","","","","","","",""
"25.8.1.5101","medianBFloat16",1,0,"quantileBFloat16","","System","","","","","","",""
"25.8.1.5101","first_value",1,1,"any","","System","","","","","","",""
"25.8.1.5101","medianTDigest",1,0,"quantileTDigest","","System","","","","","","",""
"25.8.1.5101","BIT_XOR",1,1,"groupBitXor","","System","","","","","","",""
"25.8.1.5101","medianTimingWeighted",1,0,"quantileTimingWeighted","","System","","","","","","",""
"25.8.1.5101","group_concat",1,1,"groupConcat","","System","","","","","","",""
"25.8.1.5101","medianExactHigh",1,0,"quantileExactHigh","","System","","","","","","",""
"25.8.1.5101","dense_rank",1,1,"denseRank","","System","","","","","","",""
"25.8.1.5101","medianExactWeightedInterpolated",1,0,"quantileExactWeightedInterpolated","","System","","","","","","",""
"25.8.1.5101","medianBFloat16Weighted",1,0,"quantileBFloat16Weighted","","System","","","","","","",""
"25.8.1.5101","anyValueRespectNulls",1,0,"any_respect_nulls","","System","","","","","","",""
"25.8.1.5101","medianExactWeighted",1,0,"quantileExactWeighted","","System","","","","","","",""
"25.8.1.5101","median",1,0,"quantile","","System","","","","","","",""
"25.8.1.5101","medianExact",1,0,"quantileExact","","System","","","","","","",""
"25.8.1.5101","medianExactLow",1,0,"quantileExactLow","","System","","","","","","",""
"25.8.1.5101","medianTiming",1,0,"quantileTiming","","System","","","","","","",""
"25.8.1.5101","array_agg",1,1,"groupArray","","System","","","","","","",""
"25.8.1.5101","medianGK",1,0,"quantileGK","","System","","","","","","",""
"25.8.1.5101","medianDeterministic",1,0,"quantileDeterministic","","System","","","","","","",""
"25.8.1.5101","last_value",1,1,"anyLast","","System","","","","","","",""
"25.8.1.5101","COVAR_POP",1,1,"covarPop","","System","","","","","","",""
"25.8.1.5101","anyRespectNulls",1,0,"any_respect_nulls","","System","","","","","","",""
"25.8.1.5101","array_concat_agg",1,1,"groupArrayArray","","System","","","","","","",""
